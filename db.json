{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/xingchuiye1.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/珍稀动物 熊猫.png","path":"img/珍稀动物 熊猫.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/小猴子.png","path":"img/小猴子.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/assembly.png","path":"img/assembly.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/c++.png","path":"img/c++.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/rust.png","path":"img/rust.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/film.png","path":"img/film.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/book1.png","path":"img/book1.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/book.png","path":"img/book.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/idea.png","path":"img/idea.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/ps.png","path":"img/ps.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/px.png","path":"img/px.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/tool.png","path":"img/tool.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/reboot.png","path":"img/reboot.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/monkey.png","path":"img/monkey.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/monkey0.png","path":"img/monkey0.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/手拿法杖.svg","path":"img/手拿法杖.svg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/1024只猴子.png","path":"img/1024只猴子.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wukongs.png","path":"img/wukongs.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wukong0.png","path":"img/wukong0.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/music.png","path":"img/music.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"380c76eec1b9212739e9bf73999f2f1f58f9dae7","modified":1688752757310},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1659371513624},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1659371513922},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1659371512348},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1659371513625},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1659371513921},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1659371513927},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1659371513941},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1659371513943},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1659371513943},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1659371513925},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1659371513944},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1659371513945},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1659371513945},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1659371513946},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1659371513947},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1659371513946},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1659371513948},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1659371513948},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1659371513947},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1659371513949},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1659371512816},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1659371512821},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1659371512828},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1659371512835},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1659371513606},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1659371512836},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1659371512839},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1659371512814},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1659371512831},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1659371512822},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1659371512813},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1659371512814},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1659371512825},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1659371512826},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1659371512817},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1659371512828},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1659371512832},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1659371512815},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1659371512827},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1659371512837},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1659371512818},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1659371513710},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1659371512836},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1659371512839},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1659371512847},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1659371513721},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1659371513711},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1659371512804},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1659371513623},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1659371512818},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1659371512833},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1659371512822},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1659371512823},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1659371512848},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1659371512838},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1659371513715},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1659371513718},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1659371513712},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1659371513714},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1659371513713},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1659371513714},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1659371513716},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1659371513719},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1659371513718},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1659371513719},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1659371513720},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1659371513717},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1659371513623},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1659371513617},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1659371513920},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1659371513903},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1659371513709},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1659371512857},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1659371513806},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1659371513605},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1659371513731},{"_id":"public/2022/08/02/hello-world/index.html","hash":"a1225e60e2e8c264cb9e75583ab7da793aa32999","modified":1659371672970},{"_id":"public/archives/index.html","hash":"a60e5afe156668d47a5719451f09926ccb6e5a31","modified":1659371672970},{"_id":"public/archives/2022/index.html","hash":"e3eaec3ad74661aade6e73f9afe02fac71c1eb6b","modified":1659371672970},{"_id":"public/archives/2022/08/index.html","hash":"e27136749624bca312c0511f3b8516b99ffc3581","modified":1659371672970},{"_id":"public/index.html","hash":"51ccd3326b5bc83bcc6a4f6c20bd70258487b61d","modified":1659371672970},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1659371672970},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1659371672970},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1659371672970},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1659371672970},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1659371672970},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1659371672970},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1659371672970},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1659371672970},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1659371672970},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1659371672970},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1659371672970},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1659371672970},{"_id":"source/_posts/Steve McCurry/摄影作品欣赏-史蒂文·麦柯（Steve McCurry）.md","hash":"cfabd241c900e4b7810241d897b04c6bca1df9f0","modified":1664288452854},{"_id":"source/_posts/Steve McCurry/8058897e1c3c76b4ca89b97a9db37949.jpg","hash":"88a315a35e972c8d9963401bc1ca39972bf8e14d","modified":1663776341898},{"_id":"source/about/index.md","hash":"46f9a7f8a40b0b773611e20e1066e6074b08c7c6","modified":1715786544318},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1664290537757},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1664290537682},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1664290537680},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1664290537687},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1664290537681},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1664290537685},{"_id":"themes/fluid/package.json","hash":"826213e18dee24a24d8ce4f34fb981b7d4021b54","modified":1664290537722},{"_id":"themes/fluid/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1664290537687},{"_id":"themes/fluid/README_en.md","hash":"10ff41f4b3cf24ad0fece6555b77f61694916133","modified":1664290537688},{"_id":"themes/fluid/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1664290537689},{"_id":"themes/fluid/_config.yml","hash":"30ed4856a7672b68940c58fb84e865c45432bbf5","modified":1718547497949},{"_id":"themes/fluid/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1664290537690},{"_id":"themes/fluid/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1664290537690},{"_id":"themes/fluid/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1664290537691},{"_id":"themes/fluid/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1664290537693},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1664290537693},{"_id":"themes/fluid/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1664290537692},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1664290537694},{"_id":"themes/fluid/layout/404.ejs","hash":"0a589faccde6c2c9572e8d3d359e7c8fb166335e","modified":1664290537695},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1664290537694},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1664290537718},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1664290537718},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1664290537719},{"_id":"themes/fluid/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1664290537717},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1664290537720},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1664290537720},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1664290537720},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1664290537722},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1664290537722},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1664290537683},{"_id":"themes/fluid/layout/index.ejs","hash":"1c80e6d8a81034e84271ab2b30058c26378a8e84","modified":1664290537720},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1664290537683},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1664290537684},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1664290537683},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1664290537684},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1664290537685},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1664290537684},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1664290537683},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"bfea4674af78eb72b3a6baaa7ec9fc3c3db55ebd","modified":1664290537697},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1664290537695},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1664290537697},{"_id":"themes/fluid/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1664290537721},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1664290537702},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1664290537702},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1664290537704},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1664290537706},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1664290537723},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1664290537716},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"0289f61834fd21a8f958f8e18b395a989b285682","modified":1664290537704},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1664290537727},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1664290537728},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1664290537727},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1664290537729},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1664290537730},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1664290537730},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1664290537730},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1664290537730},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1664290537732},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1664290537733},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9f88c9149e8e7c4f90a5cf833373e4d18ecb2500","modified":1664290537733},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1664290537732},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1664290537732},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1664290537729},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1664290537733},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1664290537729},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1664290537734},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1664290537734},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1664290537735},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1664290537733},{"_id":"themes/fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1664290537735},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1664290537736},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1664290537736},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1664290537737},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1664290537737},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1664290537697},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1664290537760},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1664290537760},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1664290537759},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1664290537761},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1664290537761},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1664290537706},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1664290537764},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1664290537765},{"_id":"themes/fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1664290537765},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1664290537765},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1664290537716},{"_id":"themes/fluid/source/js/events.js","hash":"0eda8690b8e3912d90afe987ea6e80e881338c1f","modified":1664290537766},{"_id":"themes/fluid/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1664290537767},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1664290537767},{"_id":"themes/fluid/source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1664290537766},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1664290537766},{"_id":"themes/fluid/source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1664290537769},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1664290537770},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1664290537698},{"_id":"themes/fluid/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1664290537769},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1664290537698},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1664290537698},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1664290537699},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1664290537700},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1664290537698},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1664290537700},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1664290537701},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1664290537701},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1664290537700},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1664290537701},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1664290537704},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1664290537703},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1664290537703},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1664290537712},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1664290537713},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1664290537714},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"1560b1ca7f1f40fe1e18047ab68a3576f6613619","modified":1664290537705},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"fd1d586b11c7b9f1850da7963ef593e2a7739cf7","modified":1664290537713},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"3bd541ea8ead8feff8acd44e35274ae5bbfe2a88","modified":1664290537715},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1664290537715},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1664290537708},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1664290537709},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1664290537708},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"b40422f56442cd693220652ef4ecec78dca2158f","modified":1664290537708},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1664290537709},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"dd2691c5d7c01c90718a11be3768b9f3d55d066d","modified":1664290537710},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1664290537725},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1664290537710},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1664290537724},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1664290537714},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1664290537725},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1664290537726},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1664290537726},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1664290537726},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1664290537711},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1664290537707},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1664290537738},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1664290537739},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1664290537758},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1664290537725},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1664290537741},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1664290537712},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1664290537759},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1664290537741},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1664290537751},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1664290537751},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1664290537752},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1664290537750},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1664290537749},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1664290537750},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1664290537750},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1664290537749},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1664290537755},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1664290537756},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1664290537756},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1664290537754},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1664290537758},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1664290537757},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1664290537753},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1664290537742},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1664290537744},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1664290537744},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1664290537742},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1664290537744},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1664290537744},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1664290537745},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1664290537746},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1664290537747},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"9001c53b52c339bc052cd1a8334e8185f5b03538","modified":1664290537745},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1664290537746},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1664290537747},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1664290537747},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1664290537747},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1664290537749},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1664290537749},{"_id":"themes/fluid/source/img/xingchuiye1.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1664290537764},{"_id":"source/_posts/Steve McCurry/Steve McCurry.md","hash":"42ef2ce360c178a7a29a70c81fa3dd81be99c3b2","modified":1715872433563},{"_id":"source/_posts/Steve McCurry/girl.jpg","hash":"88a315a35e972c8d9963401bc1ca39972bf8e14d","modified":1663776341898},{"_id":"source/img/girl.jpg","hash":"88a315a35e972c8d9963401bc1ca39972bf8e14d","modified":1663776341898},{"_id":"source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1664290537757},{"_id":"source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1664290537759},{"_id":"source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1664290537760},{"_id":"source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1664290537760},{"_id":"source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1664290537770},{"_id":"source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1664290537761},{"_id":"source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1664290537765},{"_id":"source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1664290537764},{"_id":"source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1664290537765},{"_id":"source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1664290537765},{"_id":"source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1664290537766},{"_id":"source/js/events.js","hash":"0eda8690b8e3912d90afe987ea6e80e881338c1f","modified":1664290537766},{"_id":"source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1664290537766},{"_id":"source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1664290537767},{"_id":"source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1664290537767},{"_id":"source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1664290537769},{"_id":"source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1664290537769},{"_id":"source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1664290537738},{"_id":"source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1664290537759},{"_id":"source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1664290537739},{"_id":"source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1664290537741},{"_id":"source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1664290537741},{"_id":"source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1664290537758},{"_id":"source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1664290537749},{"_id":"source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1664290537749},{"_id":"source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1664290537750},{"_id":"source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1664290537750},{"_id":"source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1664290537750},{"_id":"source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1664290537751},{"_id":"source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1664290537752},{"_id":"source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1664290537751},{"_id":"source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1664290537753},{"_id":"source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1664290537755},{"_id":"source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1664290537754},{"_id":"source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1664290537757},{"_id":"source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1664290537756},{"_id":"source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1664290537756},{"_id":"source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1664290537758},{"_id":"source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1664290537742},{"_id":"source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1664290537742},{"_id":"source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1664290537744},{"_id":"source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1664290537744},{"_id":"source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1664290537744},{"_id":"source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1664290537744},{"_id":"source/css/_pages/_base/_widget/header.styl","hash":"9001c53b52c339bc052cd1a8334e8185f5b03538","modified":1664290537745},{"_id":"source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1664290537745},{"_id":"source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1664290537746},{"_id":"source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1664290537746},{"_id":"source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1664290537747},{"_id":"source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1664290537747},{"_id":"source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1664290537747},{"_id":"source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1664290537747},{"_id":"source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1664290537749},{"_id":"source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1664290537749},{"_id":"source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1664290537761},{"_id":"source/img/xingchuiye1.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1664290537764},{"_id":"themes/fluid/source/img/124.jpg","hash":"7b4426e9f3c7669d400b7477b719d3f7466cebf7","modified":1608881664000},{"_id":"source/img/124.jpg","hash":"7b4426e9f3c7669d400b7477b719d3f7466cebf7","modified":1608881664000},{"_id":"themes/fluid/source/img/note0.png","hash":"28877a018e8d7f5eb83bf292ef709b265c7d7be1","modified":1664303147902},{"_id":"source/_posts/《中国哲学简史》-冯友兰.md","hash":"5d884749890099067f2989c7e4b52d72fa556373","modified":1664852201690},{"_id":"source/_data/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1664290537691},{"_id":"source/_data/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1664290537690},{"_id":"source/_data/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1664371154399},{"_id":"source/_data/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1664290537689},{"_id":"source/_data/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1664290537693},{"_id":"source/_data/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1664290537692},{"_id":"source/_data/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1664290537693},{"_id":"source/_data/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1664290537694},{"_id":"source/_data/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1664290537694},{"_id":"themes/fluid/source/_data/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1664290537689},{"_id":"themes/fluid/source/_data/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1664371154399},{"_id":"themes/fluid/source/_data/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1664290537690},{"_id":"themes/fluid/source/_data/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1664290537691},{"_id":"themes/fluid/source/_data/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1664290537692},{"_id":"themes/fluid/source/_data/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1664290537693},{"_id":"themes/fluid/source/_data/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1664290537693},{"_id":"themes/fluid/source/_data/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1664290537694},{"_id":"themes/fluid/source/_data/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1664290537694},{"_id":"themes/fluid/source/img/珍稀动物 熊猫.png","hash":"1ca15a87c0471e005000300b203b658080b287e5","modified":1664374875822},{"_id":"themes/fluid/source/img/小猴子.png","hash":"8a64b2ca516d47ad75cb3c3c6532d4a6e4b4b51a","modified":1664868178128},{"_id":"source/_posts/未命名.md","hash":"66928e6cbb59c3a3bce606959ef4a865fe04e642","modified":1697040820396},{"_id":"source/_posts/导航.md","hash":"6670744e24f356d611ca397b71967277faf306bd","modified":1715782274755},{"_id":"source/_posts/vscode快捷键.md","hash":"a8f395fd225596c58c82b6a8c75ec370999f1c3a","modified":1715872467896},{"_id":"source/_posts/QT笔记.assets/image-20230722235831580.png","hash":"dda7824fe1f8f60252d10f92074732d61ec6e71a","modified":1690041511674},{"_id":"source/_posts/Super.Young@outlook.com.md","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1715788665102},{"_id":"source/_posts/杂话集/民谣和摇滚的诗意.md","hash":"0a4ac96082d272146c2e2268559161ef86cc4f2e","modified":1715872392485},{"_id":"source/_posts/杂话集/suno.ai.md","hash":"e496747194c72e9b2b65a91be60e746143000673","modified":1718544934968},{"_id":"source/_posts/杂话集/数据结构与算法.md","hash":"6a40dc39aec32684dc7f75604969569ef59c8eba","modified":1688835643884},{"_id":"source/_posts/杂话集/编程范式和编程语言会走向何方.md","hash":"78058be9ccda6e88a1c652d9849a1bde9e63ccb8","modified":1720920943951},{"_id":"source/_posts/杂话集/什么是民谣的诗意？.md","hash":"c112e092b6684749e20493a0006ccee588871997","modified":1688200947697},{"_id":"source/_posts/杂话集/那个叫做故乡的地方.md","hash":"dfe35c97e0ad4a4cab43a0c55365ec7064d396cb","modified":1715872400302},{"_id":"source/_posts/观影笔记/周初除三害.md","hash":"5b5677195ea2df06d48f8c6684715fce31ad1883","modified":1718031210478},{"_id":"source/_posts/观影笔记/椒麻堂会.md","hash":"47e2af2de70b9371b8d854b06125ff4ede17df4d","modified":1718373807418},{"_id":"source/_posts/观影笔记/《怪物》.md","hash":"b43313acda4a917d0fee5d140698454ba1f5397c","modified":1715958405733},{"_id":"source/_posts/编程笔记/QT笔记.md","hash":"8dd2765bfc1fa09fd2ef2f56828774a1b602355c","modified":1715872280694},{"_id":"source/_posts/编程笔记/opencv笔记.md","hash":"b54f6a3f361a9fa818ebf4292061a488061d5d04","modified":1715872929054},{"_id":"source/_posts/编程笔记/STM32笔记.md","hash":"433703cfe18ceac38403a378acb3118e2f51e287","modified":1715872328073},{"_id":"source/_posts/编程笔记/rt-thread.md","hash":"0879e64424cd99ed74b89cc8e8777427c3fdac56","modified":1715872286129},{"_id":"source/_posts/编程笔记/rtThread.md","hash":"18282d00a464f38699c97c2eaf6e791ebd14f64b","modified":1715872292430},{"_id":"source/_posts/编程笔记/rust.md","hash":"cd44d9e9ff0a52c7f58f5d886544b22ba195b416","modified":1720922829075},{"_id":"source/_posts/编程笔记/手撸一个操作系统.md","hash":"18b6c52e8453e6e52599bbe58167d9d9395d4aa4","modified":1720014341865},{"_id":"source/_posts/编程笔记/现代C++核心特性.md","hash":"d8d77f9c9be8dd0a2c66909bf46f5bc26ce7a429","modified":1688312651477},{"_id":"source/_posts/读书笔记/《造房子》.md","hash":"44cb631514b7fa743cb98b282059075ca4768f63","modified":1721532039260},{"_id":"source/_posts/读书笔记/《道德经》翻译.md","hash":"62b11d68a94b64b64e56667563f4aae193e559ce","modified":1718551839480},{"_id":"source/_posts/读书笔记/《中国哲学简史》-冯友兰.md","hash":"43eb290160bf19095d6bcb635a85b44b1120ddf0","modified":1688752850709},{"_id":"source/_posts/诗歌/三十岁生日.md","hash":"d207cabaf07004bb5fc395021be2242efb1eabba","modified":1715872379014},{"_id":"source/_posts/读书笔记/王阳明一切心法.md","hash":"e8d53b6ba9902b3f6e36118f2f6094a41f689848","modified":1718551974680},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824212826832.png","hash":"8e86d8f01e2294eaf29f7a5f7a2b9aae228ece3b","modified":1692883706865},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824214300676.png","hash":"a0257ad45c88b612336f0dab267dbeeee29f7545","modified":1692884580691},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824214300676-16928845828971.png","hash":"a0257ad45c88b612336f0dab267dbeeee29f7545","modified":1692884582903},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824212653160.png","hash":"46a458a2054fa8d6f5db03d9dde903b0b65c8f64","modified":1692883613212},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824212717637.png","hash":"645dc729ce70bdfe637402ff4c626eaca4de74db","modified":1692883637686},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824213649411.png","hash":"b0c39d00a55fb20a5bc167c8f540de1f508032bd","modified":1692884209442},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824213704443.png","hash":"4bcee09bfac017b3992223ccad8cbb99c4a46993","modified":1692884224475},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824215242094.png","hash":"b4f2a05babda844448b380ad035e417cfbcec0a9","modified":1692885162114},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824213736098.png","hash":"7a265acf5235bd94cee2f0d1d6e02e827c1e1396","modified":1692884256136},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824220410033.png","hash":"eee749685f13e8e36234ec7eaeab577a25c20958","modified":1692885850047},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824223125093.png","hash":"6c4c9bf1632fe53bea4f164fe0ec60b661e08fa6","modified":1692887485132},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829215232994.png","hash":"c42dab4ce69c6d61fabb1f631771677f11ccd767","modified":1693317153022},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829220841660.png","hash":"48c9a16e817013d3932e43bad3e0bd72995835d8","modified":1693318121686},{"_id":"source/_posts/编程笔记/GDB使用笔记.md","hash":"5c2931c8d5b669cfe2fec4f280c3e6b68dbd982d","modified":1715872270650},{"_id":"source/_posts/编程笔记/数据结构与算法.assets/image-20230708233839313.png","hash":"728b4142399fabe3cd3e6545d8368046302b0008","modified":1688830719407},{"_id":"source/_posts/编程笔记/数据结构与算法.assets/image-20230708233839313-16888307278241.png","hash":"728b4142399fabe3cd3e6545d8368046302b0008","modified":1688830727830},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824213121458.png","hash":"2399dbd09a48c061ed6d512dc87838ca75f570d0","modified":1692883881528},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824222726212.png","hash":"58d1312abe5be59e398290faf965a1e4c6ccf8f5","modified":1692887246241},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824224001232.png","hash":"dee31bcd7254ebc6e02b23ba5c4b2b2669ea1f1f","modified":1692888001277},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829215758026.png","hash":"489773e1b7d9372e5dfcfdfd0df28b9e34ae5798","modified":1693317478142},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829215518228.png","hash":"1e8a93b13befa5a9b13d32675eea2ee2c55d5edb","modified":1693317318271},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829220330403.png","hash":"7ad6de04d3369a976334975f3f083c9b805f2bc0","modified":1693317810441},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824222822188.png","hash":"61cc9d2b269d8b627aee92198edc59432a3c64bf","modified":1692887302224},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824223717584.png","hash":"62f0d9f2be449e042a15f782bc88ea1de05e60c9","modified":1692887837632},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824223945391.png","hash":"9ad08e8e5fdb491a58612aa68a037dac7c33ffaf","modified":1692887985438},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829215740035.png","hash":"a3f3f4cc81fbfb8c3d5ca8fb3828ff0f27de24bc","modified":1693317460074},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829220857602.png","hash":"3043ac278b63e87fea5ca30d1a11e7d10a706615","modified":1693318137664},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829220831618.png","hash":"f966fba18db35fac4d45f9a7cbd24ee6a84ee601","modified":1693318111663},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230902222638671.png","hash":"7c3c92baf6b82e3cacb71c5e2d11ea8f38f8db6b","modified":1693664798774},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824221424337.png","hash":"79f5d3bea92965558145d82e6704a57a94f0c9a3","modified":1692886464387},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829215308884.png","hash":"21599a9bec1d686f1c4235b8bbf743593e2816d3","modified":1693317188934},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829220314335.png","hash":"1846a69b74ae4e3f0db3d1e93b044e324d87c194","modified":1693317794381},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829215822277.png","hash":"1c05b49bd95eabd77f3dd8bc0a6144daef9176c1","modified":1693317502323},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230902222148480.png","hash":"1d7c4afbaf552ca85cce0b02c0e5640f72dd407d","modified":1693664508536},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824213356585.png","hash":"47166390412afc7759c6e5b3e78c6f9c8e5f447a","modified":1692884036699},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824213328146.png","hash":"57276efd3fe2ccefd0f84dec985f2848e0a8bb13","modified":1692884008265},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824215358560.png","hash":"e05c7d2b355ce72ee490655108de9c305d81459d","modified":1692885238633},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824223028026.png","hash":"40c67777c5527c7de4268cf7c8de8d00b70128ea","modified":1692887428092},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824222953626.png","hash":"81db555a3ef8ca400cb64ed48ab46cdabfd1ca45","modified":1692887393670},{"_id":"themes/fluid/source/img/assembly.png","hash":"e58a9a55fc0a68fe8dc7b26337e5cda47034cbab","modified":1668907902205},{"_id":"themes/fluid/source/img/29-cat.png","hash":"1505691a3d97e236d9dbc10440547cc2200a89f7","modified":1668907753874},{"_id":"themes/fluid/source/img/7-201004092934457.jpg","hash":"c412a0d3716bf5fe77b57b51d526ac6255623b13","modified":1668266612825},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230915214212061.png","hash":"626867be86ace481be0b5d20224795565a44d9ea","modified":1694785332182},{"_id":"source/_posts/Steve McCurry/Steve McCurry.assets/zgwu61.jpg","hash":"7b4426e9f3c7669d400b7477b719d3f7466cebf7","modified":1695048045069},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824223851477.png","hash":"6c771663bec5665780d4028d61fb0c2e607c137c","modified":1692887931551},{"_id":"themes/fluid/source/img/c++.png","hash":"429d6caefb6eda39d7e30effec49300beb7401cb","modified":1668266886257},{"_id":"themes/fluid/source/img/笔记.png","hash":"c6f1783cb0a5f6cbdba26c6aeb861f9627400828","modified":1669476597055},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829220440581.png","hash":"1f5e578413c5cc64a11ee40371a839d13ad9df4c","modified":1693317880669},{"_id":"themes/fluid/source/img/rust.png","hash":"c3beb75dae70e90728cad16ef89b22695b38c31f","modified":1669476914188},{"_id":"themes/fluid/source/img/rust螃蟹.png","hash":"2c6a4c99f5701d133e1d3e42c97aa5d154eca6da","modified":1668268709820},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230824223930452.png","hash":"0ddc1ecdb99c4196bba3f974ee48a556ba4e8b45","modified":1692887970533},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230902222334334.png","hash":"143022c981ee49c847dbfe1f19c2d6d5de511698","modified":1693664614423},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829222922989.png","hash":"c7d9c128a988c663aa04551a775c675321768643","modified":1693319363077},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230902222532744.png","hash":"926957cc8b57ce5ee717d7733357132a7774fb15","modified":1693664732814},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230902222508766.png","hash":"5ce85d4f7f6f7ca81cf49ce01a9dc70db54dbdcb","modified":1693664708840},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230902222508766-16936647102112.png","hash":"5ce85d4f7f6f7ca81cf49ce01a9dc70db54dbdcb","modified":1693664710220},{"_id":"source/_posts/编程笔记/手撸一个操作系统.assets/image-20230829220934206.png","hash":"29aef6fff577b0296f45e89f63a94a91004c6c59","modified":1693318174365},{"_id":"themes/fluid/source/img/note1.png","hash":"c6f1783cb0a5f6cbdba26c6aeb861f9627400828","modified":1669476597055},{"_id":"themes/fluid/source/img/film.png","hash":"462702e6e8e99fab12175b9cad8a60f2224317b8","modified":1718551042566},{"_id":"themes/fluid/source/img/book1.png","hash":"1adb7a52307e6011fe6ff12f85435cac09a12aff","modified":1718551146167},{"_id":"themes/fluid/source/img/book.png","hash":"03a47921fcdf824e13ad4314a33d16e07fd53298","modified":1718551114749},{"_id":"themes/fluid/source/img/idea.png","hash":"5a4da4d4a192695f70b5bd1b17dd33b542894062","modified":1718551131892},{"_id":"themes/fluid/source/img/ps.png","hash":"706b6b1ed1a6b570de207646b8f0bcb075110fc3","modified":1718551177109},{"_id":"themes/fluid/source/img/px.png","hash":"a956c1ee78058ef5df1703753cd035f3febadf14","modified":1718551162718},{"_id":"themes/fluid/source/img/tool.png","hash":"44c8e420757c04044c45c96a40b3483aabb9c001","modified":1718551084475},{"_id":"source/_posts/杂话集/什么是民谣的诗意.md","hash":"71cafd0ee9cae0ff2ec36042e8995e11a13f53cd","modified":1720014683260},{"_id":"source/_posts/编程笔记/数据结构与算法.md","hash":"420333f8144ee2346f34a178141ba2fde1259744","modified":1720274467118},{"_id":"themes/fluid/source/img/reboot.png","hash":"7dee5ae2a9d2f4b99cee0a9cabcbdf744c6324e4","modified":1718551101034},{"_id":"source/_posts/读书笔记/《中国哲学简史》.md","hash":"4ea730f9abe42103791e899f64e4d35d70ea1fdc","modified":1721532813946},{"_id":"themes/fluid/source/img/monkey.png","hash":"8a64b2ca516d47ad75cb3c3c6532d4a6e4b4b51a","modified":1664868178128},{"_id":"themes/fluid/source/img/monkey0.png","hash":"23fe383a796be3ddfee06b6532dbf2f6deed68a7","modified":1715874446494},{"_id":"themes/fluid/source/img/悟空-头像.png","hash":"dfbb08ddcaf43150a71012b778d61920a1479780","modified":1715874748847},{"_id":"themes/fluid/source/img/风车.svg","hash":"b817467a9b446be3d028732e82d6bd9c1711df4e","modified":1717251929241},{"_id":"themes/fluid/source/img/手拿法杖.svg","hash":"6a4932befb2d8603126c3f6738849a5a17adc10f","modified":1715957700372},{"_id":"source/_posts/观影笔记/《宇宙探索编辑部》.md","hash":"0bdf74690dc0546c0c39964e2c404939d5a69f9b","modified":1721532088656},{"_id":"source/_posts/编程笔记/rust笔记.md","hash":"b944e4fbfca4b38faf1a7f45d5cb2ed10ecc85f7","modified":1720920205233},{"_id":"themes/fluid/source/img/wukong.png","hash":"885e2975fcc0d237a35ff93eaaacc3ea4619b16a","modified":1718547055091},{"_id":"themes/fluid/source/img/wukongs.png","hash":"dfbb08ddcaf43150a71012b778d61920a1479780","modified":1715874748847},{"_id":"themes/fluid/source/img/1024只猴子.png","hash":"06ef43334203af0c1e3ca2ae91d84ac6097fb5af","modified":1718546872707},{"_id":"themes/fluid/source/img/1024只猴子.svg","hash":"326b60cd2ca5db2ec3a86df6710a9d296498b283","modified":1718546814715},{"_id":"themes/fluid/source/img/wukong0.png","hash":"885e2975fcc0d237a35ff93eaaacc3ea4619b16a","modified":1718547055091},{"_id":"themes/fluid/source/img/music.png","hash":"6c1b351ea96a55cc7b237198e0d9f45841f33032","modified":1718551199806},{"_id":"source/_posts/读书笔记/起初.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720920183785},{"_id":"source/_posts/杂话集/八大山人.md","hash":"0af4a9d1981026bb8fb47e848ca24f6dcffd9bf6","modified":1721532038233},{"_id":"source/_posts/杂话集/在沙发上旅行.md","hash":"87726a6a645e9be866d7e49b00d58c54e524063b","modified":1721532460662},{"_id":"source/_posts/杂话集/B站读书节目观后.md","hash":"e6c9887fa1fee7ab710b549ccc9d2c5b54db78fe","modified":1721532258904},{"_id":"source/_posts/杂话集/起初.鱼甜.md","hash":"b612f317969850caa031a239d567b7afc32eb5ba","modified":1721532630536},{"_id":"source/_posts/观影笔记/走走停停.md","hash":"c2f291ac11796be66f3ea23d9744c3cce25f3d0d","modified":1721532743541}],"Category":[{"name":"C++","_id":"cl8ln31ee0000rwlbfrr1178y"},{"name":"读书笔记","_id":"cl8ln3yr20002rwlbeox5et1i"},{"name":"随笔","_id":"clw7v678e0009e8lb4o03daoo"},{"name":"写作","_id":"clw7v678n000ee8lben5d3j1y"},{"name":"观影笔记","_id":"clw7v678u000pe8lbcgzw07tm"},{"name":"QT","_id":"clw7v67900011e8lb76m0batv"},{"name":"嵌入式","_id":"clw7v67930018e8lb52m61elo"},{"name":"操作系统","_id":"clw7v6798001oe8lbee0xagt4"},{"name":"rust","_id":"clw7v679a001ue8lbegx2hg5c"},{"name":"笔记","_id":"clw7v679b0020e8lb9w3l94l6"},{"name":"GDB","_id":"clw7v679c0029e8lbbe61cras"},{"name":"导航","_id":"clw7x944r0000b8lb234sho6s"},{"name":"vscode常用快捷键","_id":"clw9dz6kz0000yclb09jq25q6"},{"name":"数据结构","_id":"clw9eal3800048slbdz2x8q0t"},{"name":"opencv","_id":"clw9eh07n00011wlb7vze18by"}],"Data":[{"_id":"languages/de","data":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"}},{"_id":"languages/en","data":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"}},{"_id":"languages/eo","data":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"}},{"_id":"languages/es","data":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"}},{"_id":"languages/ja","data":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"}},{"_id":"languages/ru","data":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"}},{"_id":"languages/zh-CN","data":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"}},{"_id":"languages/zh-HK","data":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}},{"_id":"languages/zh-TW","data":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}],"Page":[{"title":"about","layout":"about","date":"2024-05-15T15:17:07.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2024-05-15 23:17:07\n---","updated":"2024-05-15T15:22:24.318Z","path":"about/index.html","_id":"clw7ytrmt000044lb1bvf0dmx","comments":1,"content":"","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"excerpt":"","more":""}],"Post":[{"title":"Hexo操作指导","index_img":"/img/avatar.png","date":"2019-10-10T02:00:00.000Z","sticky":1,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```' bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo操作指导\nindex_img: /img/avatar.png\ndate: 2019-10-10 10:00:00\nsticky: 1\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```' bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-07-07T17:59:17.310Z","_id":"cl6az1tqp0000iwlbdpcebdgc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight plaintext\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs '\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight plaintext\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs '\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"摄影作品","index_img":"/img/ps.png","date":"2019-10-10T02:00:00.000Z","sticky":1,"_content":"\n本篇博客用于记录我喜欢的一些跟摄影相关的一些资料，比如电影、摄影资料、摄影师作品网站等。\n\n------------------\n\n\n\n![](Steve McCurry.assets/zgwu61.jpg)\n\n#### 摄影师\n\n##### 安德烈·古斯基 Andreas Gursky\n\n1955年出生于德国莱比锡，毕业于德国杜塞尔多夫美术学院，杜塞尔多夫美术学院教授。上世纪80年代，古斯基师从德国摄影大师贝歇夫妇以高角度、大尺幅的景观建筑照片闻名，其作品价格多次打破世界摄影拍卖纪录，至今仍是世界摄影作品最高价格纪录保持者。\n\n古尔斯基作品网站：[www.andreasgursky.com](http://www.andreasgursky.com) \n\n##### 王庆松\n\n1963年出生于中国黑龙江省哈尔滨市。他以摄影作品和装置作品而闻名，被誉为中国当代摄影艺术家。\n\n王庆松的摄影作品具有独特的视角和风格，展现了他对现实世界的独特理解和思考。他的作品涵盖了城市景观、自然风光、人物肖像等多个领域，其中以对城市景观的拍摄最为著名。\n\n王庆松的摄影作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。\n\n除了摄影作品，王庆松还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考。\n\n 王庆松作品: https://wangqingsong.artron.net/\n\n##### 乔·麦克纳利\n\n乔·麦克纳利是世界著名摄影大师，“百名对摄影最具影响力的人”之一。他也是柯达公司“在线传奇人物”和尼康公司“镜头背后的传奇人物”。\n\n乔的客户包括《体育画报》、《ESPN》、《国家地理》、《生活》、《时代周刊》、《财富》、《纽约时报杂志》、《商业周刊》、《滚石》等畅销杂志，以及纽约证券交易所、美国Target连锁超市、索尼、通用电气和PNC银行等著名公司和机构。\n\n乔的摄影作品以震撼的视觉效果和独特的风格而闻名，他的作品涵盖了自然、城市、肖像等多个领域，其中以对自然景观的拍摄最为著名。\n\n乔不仅是一位优秀的摄影师，还是一位资深的摄影教育家。他编写了多本摄影教程书籍，并创立了乔·麦克纳利摄影学校，致力于传授他的经验和技巧，帮助更多的人发掘和发挥自己的摄影潜能。\n\n乔·麦克纳利作品官网：https://portfolio.joemcnally.com \n\n##### 马丁·帕尔\n\n马丁·帕尔是一位英国摄影师，他的作品以独特的视角和风格而著称。\n\n他的作品涵盖了自然、城市、人物等多个领域，其中以对城市景观的拍摄最为著名。\n\n马丁·帕尔的作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。\n\n除了摄影作品，马丁·帕尔还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考\n\n马丁帕尔作品官网 ：\n\nhttps://www.martinparr.com\n\n##### Phil Borges\n\nPhil Borges是一位美国摄影师，他的作品以肖像摄影为主，以独特的视角和风格而著称。\n\n他的肖像摄影作品注重对人物个性和情感的刻画，通过细腻的构图和用光来展现人物的情感和特点。\n\nPhil Borges的摄影作品涵盖了多个领域，包括人物肖像、自然风光、城市景观等。\n总的来说，Phil Borges是一位充满创造力和想象力的摄影师，他的作品展现了现实世界的美好与壮丽，同时也展现了他对于艺术和生活的独特理解和追求。\n\nPhil Borges作品网站：http://www.philborges.com/\n\n\n\n##### 杉本博司\n\n杉本博司（Hiroshi Sugimoto）是一位日本摄影师，1948年出生于日本东京。他以拍摄静态的、具有仪式感的作品为主，以极简主义风格和概念性摄影而著称。\n\n他的作品包括但不限于以下内容：\n\n1. 概念性摄影：他拍摄的《枪》《水的焰影》等作品，将物体的形式简化到最简单的程度，通过精细的构图和曝光时间来表达出物体的概念和意义。\n2. 杉本博司的“剧场”系列：这个系列以舞台和幕布为拍摄对象，强调了戏剧表演中的仪式感和形式感，将剧场作为具有宗教性的场所来表现。\n3. 杉本博司的“海景”系列：这个系列以海洋为拍摄对象，通过长时间的曝光时间来捕捉海浪的运动，展现出海洋的神秘和壮美。\n\n总的来说，杉本博司是一位充满创造力和想象力的摄影师，他的作品展现了日本当代摄影和艺术的独特魅力和实力。\n\n杉本博司网站：[Hiroshi Sugimoto (sugimotohiroshi.com)](https://www.sugimotohiroshi.com/)\n\n##### 段岳衡\n\n段岳衡作品集链接:https://pan.baidu.com/s/1zME5OQyv_8f1qceNpm-FUA 密码:i1u7\n\n##### Prince Gyasi\n\nPrince Gyasi作品集链接:https://pan.baidu.com/s/1Zb8yTSW2bVvFfiK1dEOOzg 密码:rf6w\n\n##### Alex Webb\n\nAlex Webb作品集 作品集：https://pan.baidu.com/s/1aQ_Q3gQeAAoWjaki0yLzgA  密码:c36s 视频集：https://pan.baidu.com/s/1Oo1IFIE5GG4KRLHq2CgOVQ  密码:8pik\n\n\n\n##### 史蒂夫•麦凯瑞 \n\n史蒂夫•麦凯瑞 作品链接:https://pan.baidu.com/s/1oFKn8CVMKjmPhBavVu1jPw 密码:rqw3 作品网站：https://stevemccurry.com/galleries\n\n##### Ilker Karaman\n\nIlker Karaman作品官网[www.littleboxcollective.com](http://www.littleboxcollective.com) Ilker Karaman作品下载https://pan.baidu.com/s/1oHXbAdrYjmFVSYE1wIu27A  提取码：ewey \n\n##### 何藩\n\n作品官网https://fanho-forgetmenot.com 何藩作品下载https://pan.baidu.com/s/1X7pld-Wo7H1lr8SDgm_3Uw?pwd=N74a  提取码：N74a Albins jodin作品官网[www.instagram.com/albinsjodin](http://www.instagram.com/albinsjodin) Albins jodin作品下载链接: https://pan.baidu.com/s/17OnXvebXUlLhRIqUM4J3cw?pwd=9f6o 提取码: 9f6o  《同流者》电影下载链接: https://pan.baidu.com/s/1m3CMbBcQlHm2lpl4kg-Few?pwd=1473 提取码: 1473\n\n\n\n##### 吕楠\n\n四部高清作品集 《被遗忘的人》链接:https://pan.baidu.com/s/1Z947xZEidic-qmd0NUgc-A  密码:3ko5 《四季》链接:https://pan.baidu.com/s/1x3idXUEdrmDrB2vK3EVYKQ  密码:n28b 《缅北jian yu》链接:https://pan.baidu.com/s/1itqrSJpTtC-WZiGLG9DTSQ  密码:zqxu 《在路上》链接:https://pan.baidu.com/s/1uw-jvNn9y0k23eR3KUhf3g  密码:ouq7\n\n##### 张克纯\n\n张克纯作品官网：http://zhangkechun.com 上田义彦作品官网： https://www.yoshihikoueda.com\n\n##### 川内伦子\n\n作品链接链接: https://pan.baidu.com/s/1VZ6OuYSRY-bL8WOL_TSvRQ?pwd=1un8 提取码: 1un8\n\n##### jimmymarble\n\n作品网址https://jimmymarble.com \n\n##### Nick Prideaux\n\n作品网址[www.nickprideaux.com](http://www.nickprideaux.com) \n\n##### James Perolls\n\n 作品网址[www.perolls.com](http://www.perolls.com) \n\n##### Evelyn Bencicova\n\n作品网址http://evelynbencicova.com\n\n##### Nguan\n\n作品官网http://nguan.tv \n\n##### lottiedavies\n\n作品官网[www.lottiedavies.com](http://www.lottiedavies.com) \n\n##### paolobarrettaph\n\n作品官网[www.paolobarrettaph.com](http://www.paolobarrettaph.com)\n\n##### lottiedavies\n\n作品https://pan.baidu.com/s/1iNSUQewdLNmMcJME9PL27Q?pwd=f4n9 提取码: f4n9\n\n##### 格拉布斯\n\n作品 https://pan.baidu.com/s/1Om4laVYIsLtiVe8tjhbIKA?pwd=27ja 提取码: 27ja\n\n##### Paolo Barretta\n\n作品 https://pan.baidu.com/s/1wZLac1vBIhtlYLTh6in6pg?pwd=q52v 提取码: q52v\n\n\n\n##### 古尔斯基\n\n网址[www.andreasgursky.com](http://www.andreasgursky.com) \n\n古尔斯基作品:https://pan.baidu.com/s/1mlVe4Hai34HufUaJHrPFKg 提取码:7377 \n\n##### Eszter Sarah\n\n作品官网 [www.esztersarah.com](http://www.esztersarah.com) \n\n##### ELLE-MAY\n\n作品官网[www.elle-may.com](http://www.elle-may.com) \n\n##### Denisse Ariana Pérez\n\n作品网址[www.denissearianaphotography.com](http://www.denissearianaphotography.com)\n\n##### Denisse Ariana Pérez\n\n作品:https://pan.baidu.com/s/14QNztXxadyfLI-Zjoh343g  密码:ptk3 ELLE-MAY 作品:https://pan.baidu.com/s/1kJnhCKuwTPT1trK_3rdpVg  密码:gvh7\n\n#####  Eszter Sarah\n\n作品链接:https://pan.baidu.com/s/178Ljq1ugx7JU0KtDX6d8YQ  密码:1rmq\n\n\n\n#### 纪录片\n\n##### 《地球的夜晚》\n\n链接:https://pan.baidu.com/s/1BHj0mmYpxUp5DMSoLbDsKA  密码:xixj \n\n##### 《生命之色》\n\n链接:https://pan.baidu.com/s/1GetsM1UKge0Px8ObVFu07Q  密码:4p3p \n\n##### 《人类星球》\n\n链接:https://pan.baidu.com/s/1OoHI4f0N4dSrzNShPet3bA  密码:sa5o \n\n##### 《宁静的世界》\n\n链接:https://pan.baidu.com/s/1QOOfa9OoZCrN0dApDmqJTw  密码:ee0v\n\n\n\n####  电影\n\n##### 《燃烧女子肖像》\n\n链接:https://pan.baidu.com/s/1MF15XxlDhAD-xQwEcL12EQ  密码:uz5j \n\n##### 《法兰特派西》\n\n链接:https://pan.baidu.com/s/1mZoiTmiPD5qxPHnLMYGjDQ  密码:gtit \n\n##### 《银翼杀手》\n\n链接:https://pan.baidu.com/s/1AWnrDorL2ZV8E8e4ceQPdw  密码:kn6c\n\n##### 《降临》\n\n（2016年）：这部电影采用了独特的视角和拍摄手法，将外星人来到地球的故事呈现得非常细腻。\n\n##### 《荒野猎人》\n\n（2015年）：这部电影的摄影非常真实，通过高清的画质和大自然的细节，将人性的挣扎和生存的艰辛展现得淋漓尽致。\n\n##### 《疯狂的麦克斯：狂暴之路》\n\n（2015年）：这部电影通过华丽的视觉效果和独特的拍摄手法，将末日世界中的疯狂和野性表现得非常生动。\n\n\n\n\\```mermaid\n\ngraph LR;\n  A-->B;\n  B-->C;\n  C-->D;\n  D-->A;\n\n\\```\n","source":"_posts/Steve McCurry/Steve McCurry.md","raw":"---\ntitle: 摄影作品\nindex_img: /img/ps.png\ndate: 2019-10-10 10:00:00\nsticky: 1\n---\n\n本篇博客用于记录我喜欢的一些跟摄影相关的一些资料，比如电影、摄影资料、摄影师作品网站等。\n\n------------------\n\n\n\n![](Steve McCurry.assets/zgwu61.jpg)\n\n#### 摄影师\n\n##### 安德烈·古斯基 Andreas Gursky\n\n1955年出生于德国莱比锡，毕业于德国杜塞尔多夫美术学院，杜塞尔多夫美术学院教授。上世纪80年代，古斯基师从德国摄影大师贝歇夫妇以高角度、大尺幅的景观建筑照片闻名，其作品价格多次打破世界摄影拍卖纪录，至今仍是世界摄影作品最高价格纪录保持者。\n\n古尔斯基作品网站：[www.andreasgursky.com](http://www.andreasgursky.com) \n\n##### 王庆松\n\n1963年出生于中国黑龙江省哈尔滨市。他以摄影作品和装置作品而闻名，被誉为中国当代摄影艺术家。\n\n王庆松的摄影作品具有独特的视角和风格，展现了他对现实世界的独特理解和思考。他的作品涵盖了城市景观、自然风光、人物肖像等多个领域，其中以对城市景观的拍摄最为著名。\n\n王庆松的摄影作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。\n\n除了摄影作品，王庆松还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考。\n\n 王庆松作品: https://wangqingsong.artron.net/\n\n##### 乔·麦克纳利\n\n乔·麦克纳利是世界著名摄影大师，“百名对摄影最具影响力的人”之一。他也是柯达公司“在线传奇人物”和尼康公司“镜头背后的传奇人物”。\n\n乔的客户包括《体育画报》、《ESPN》、《国家地理》、《生活》、《时代周刊》、《财富》、《纽约时报杂志》、《商业周刊》、《滚石》等畅销杂志，以及纽约证券交易所、美国Target连锁超市、索尼、通用电气和PNC银行等著名公司和机构。\n\n乔的摄影作品以震撼的视觉效果和独特的风格而闻名，他的作品涵盖了自然、城市、肖像等多个领域，其中以对自然景观的拍摄最为著名。\n\n乔不仅是一位优秀的摄影师，还是一位资深的摄影教育家。他编写了多本摄影教程书籍，并创立了乔·麦克纳利摄影学校，致力于传授他的经验和技巧，帮助更多的人发掘和发挥自己的摄影潜能。\n\n乔·麦克纳利作品官网：https://portfolio.joemcnally.com \n\n##### 马丁·帕尔\n\n马丁·帕尔是一位英国摄影师，他的作品以独特的视角和风格而著称。\n\n他的作品涵盖了自然、城市、人物等多个领域，其中以对城市景观的拍摄最为著名。\n\n马丁·帕尔的作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。\n\n除了摄影作品，马丁·帕尔还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考\n\n马丁帕尔作品官网 ：\n\nhttps://www.martinparr.com\n\n##### Phil Borges\n\nPhil Borges是一位美国摄影师，他的作品以肖像摄影为主，以独特的视角和风格而著称。\n\n他的肖像摄影作品注重对人物个性和情感的刻画，通过细腻的构图和用光来展现人物的情感和特点。\n\nPhil Borges的摄影作品涵盖了多个领域，包括人物肖像、自然风光、城市景观等。\n总的来说，Phil Borges是一位充满创造力和想象力的摄影师，他的作品展现了现实世界的美好与壮丽，同时也展现了他对于艺术和生活的独特理解和追求。\n\nPhil Borges作品网站：http://www.philborges.com/\n\n\n\n##### 杉本博司\n\n杉本博司（Hiroshi Sugimoto）是一位日本摄影师，1948年出生于日本东京。他以拍摄静态的、具有仪式感的作品为主，以极简主义风格和概念性摄影而著称。\n\n他的作品包括但不限于以下内容：\n\n1. 概念性摄影：他拍摄的《枪》《水的焰影》等作品，将物体的形式简化到最简单的程度，通过精细的构图和曝光时间来表达出物体的概念和意义。\n2. 杉本博司的“剧场”系列：这个系列以舞台和幕布为拍摄对象，强调了戏剧表演中的仪式感和形式感，将剧场作为具有宗教性的场所来表现。\n3. 杉本博司的“海景”系列：这个系列以海洋为拍摄对象，通过长时间的曝光时间来捕捉海浪的运动，展现出海洋的神秘和壮美。\n\n总的来说，杉本博司是一位充满创造力和想象力的摄影师，他的作品展现了日本当代摄影和艺术的独特魅力和实力。\n\n杉本博司网站：[Hiroshi Sugimoto (sugimotohiroshi.com)](https://www.sugimotohiroshi.com/)\n\n##### 段岳衡\n\n段岳衡作品集链接:https://pan.baidu.com/s/1zME5OQyv_8f1qceNpm-FUA 密码:i1u7\n\n##### Prince Gyasi\n\nPrince Gyasi作品集链接:https://pan.baidu.com/s/1Zb8yTSW2bVvFfiK1dEOOzg 密码:rf6w\n\n##### Alex Webb\n\nAlex Webb作品集 作品集：https://pan.baidu.com/s/1aQ_Q3gQeAAoWjaki0yLzgA  密码:c36s 视频集：https://pan.baidu.com/s/1Oo1IFIE5GG4KRLHq2CgOVQ  密码:8pik\n\n\n\n##### 史蒂夫•麦凯瑞 \n\n史蒂夫•麦凯瑞 作品链接:https://pan.baidu.com/s/1oFKn8CVMKjmPhBavVu1jPw 密码:rqw3 作品网站：https://stevemccurry.com/galleries\n\n##### Ilker Karaman\n\nIlker Karaman作品官网[www.littleboxcollective.com](http://www.littleboxcollective.com) Ilker Karaman作品下载https://pan.baidu.com/s/1oHXbAdrYjmFVSYE1wIu27A  提取码：ewey \n\n##### 何藩\n\n作品官网https://fanho-forgetmenot.com 何藩作品下载https://pan.baidu.com/s/1X7pld-Wo7H1lr8SDgm_3Uw?pwd=N74a  提取码：N74a Albins jodin作品官网[www.instagram.com/albinsjodin](http://www.instagram.com/albinsjodin) Albins jodin作品下载链接: https://pan.baidu.com/s/17OnXvebXUlLhRIqUM4J3cw?pwd=9f6o 提取码: 9f6o  《同流者》电影下载链接: https://pan.baidu.com/s/1m3CMbBcQlHm2lpl4kg-Few?pwd=1473 提取码: 1473\n\n\n\n##### 吕楠\n\n四部高清作品集 《被遗忘的人》链接:https://pan.baidu.com/s/1Z947xZEidic-qmd0NUgc-A  密码:3ko5 《四季》链接:https://pan.baidu.com/s/1x3idXUEdrmDrB2vK3EVYKQ  密码:n28b 《缅北jian yu》链接:https://pan.baidu.com/s/1itqrSJpTtC-WZiGLG9DTSQ  密码:zqxu 《在路上》链接:https://pan.baidu.com/s/1uw-jvNn9y0k23eR3KUhf3g  密码:ouq7\n\n##### 张克纯\n\n张克纯作品官网：http://zhangkechun.com 上田义彦作品官网： https://www.yoshihikoueda.com\n\n##### 川内伦子\n\n作品链接链接: https://pan.baidu.com/s/1VZ6OuYSRY-bL8WOL_TSvRQ?pwd=1un8 提取码: 1un8\n\n##### jimmymarble\n\n作品网址https://jimmymarble.com \n\n##### Nick Prideaux\n\n作品网址[www.nickprideaux.com](http://www.nickprideaux.com) \n\n##### James Perolls\n\n 作品网址[www.perolls.com](http://www.perolls.com) \n\n##### Evelyn Bencicova\n\n作品网址http://evelynbencicova.com\n\n##### Nguan\n\n作品官网http://nguan.tv \n\n##### lottiedavies\n\n作品官网[www.lottiedavies.com](http://www.lottiedavies.com) \n\n##### paolobarrettaph\n\n作品官网[www.paolobarrettaph.com](http://www.paolobarrettaph.com)\n\n##### lottiedavies\n\n作品https://pan.baidu.com/s/1iNSUQewdLNmMcJME9PL27Q?pwd=f4n9 提取码: f4n9\n\n##### 格拉布斯\n\n作品 https://pan.baidu.com/s/1Om4laVYIsLtiVe8tjhbIKA?pwd=27ja 提取码: 27ja\n\n##### Paolo Barretta\n\n作品 https://pan.baidu.com/s/1wZLac1vBIhtlYLTh6in6pg?pwd=q52v 提取码: q52v\n\n\n\n##### 古尔斯基\n\n网址[www.andreasgursky.com](http://www.andreasgursky.com) \n\n古尔斯基作品:https://pan.baidu.com/s/1mlVe4Hai34HufUaJHrPFKg 提取码:7377 \n\n##### Eszter Sarah\n\n作品官网 [www.esztersarah.com](http://www.esztersarah.com) \n\n##### ELLE-MAY\n\n作品官网[www.elle-may.com](http://www.elle-may.com) \n\n##### Denisse Ariana Pérez\n\n作品网址[www.denissearianaphotography.com](http://www.denissearianaphotography.com)\n\n##### Denisse Ariana Pérez\n\n作品:https://pan.baidu.com/s/14QNztXxadyfLI-Zjoh343g  密码:ptk3 ELLE-MAY 作品:https://pan.baidu.com/s/1kJnhCKuwTPT1trK_3rdpVg  密码:gvh7\n\n#####  Eszter Sarah\n\n作品链接:https://pan.baidu.com/s/178Ljq1ugx7JU0KtDX6d8YQ  密码:1rmq\n\n\n\n#### 纪录片\n\n##### 《地球的夜晚》\n\n链接:https://pan.baidu.com/s/1BHj0mmYpxUp5DMSoLbDsKA  密码:xixj \n\n##### 《生命之色》\n\n链接:https://pan.baidu.com/s/1GetsM1UKge0Px8ObVFu07Q  密码:4p3p \n\n##### 《人类星球》\n\n链接:https://pan.baidu.com/s/1OoHI4f0N4dSrzNShPet3bA  密码:sa5o \n\n##### 《宁静的世界》\n\n链接:https://pan.baidu.com/s/1QOOfa9OoZCrN0dApDmqJTw  密码:ee0v\n\n\n\n####  电影\n\n##### 《燃烧女子肖像》\n\n链接:https://pan.baidu.com/s/1MF15XxlDhAD-xQwEcL12EQ  密码:uz5j \n\n##### 《法兰特派西》\n\n链接:https://pan.baidu.com/s/1mZoiTmiPD5qxPHnLMYGjDQ  密码:gtit \n\n##### 《银翼杀手》\n\n链接:https://pan.baidu.com/s/1AWnrDorL2ZV8E8e4ceQPdw  密码:kn6c\n\n##### 《降临》\n\n（2016年）：这部电影采用了独特的视角和拍摄手法，将外星人来到地球的故事呈现得非常细腻。\n\n##### 《荒野猎人》\n\n（2015年）：这部电影的摄影非常真实，通过高清的画质和大自然的细节，将人性的挣扎和生存的艰辛展现得淋漓尽致。\n\n##### 《疯狂的麦克斯：狂暴之路》\n\n（2015年）：这部电影通过华丽的视觉效果和独特的拍摄手法，将末日世界中的疯狂和野性表现得非常生动。\n\n\n\n\\```mermaid\n\ngraph LR;\n  A-->B;\n  B-->C;\n  C-->D;\n  D-->A;\n\n\\```\n","slug":"Steve McCurry/Steve McCurry","published":1,"updated":"2024-05-16T15:13:53.563Z","_id":"cl8kczdl20000n4lba9x320ch","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本篇博客用于记录我喜欢的一些跟摄影相关的一些资料，比如电影、摄影资料、摄影师作品网站等。</p>\n<hr>\n<p>![](Steve McCurry.assets&#x2F;zgwu61.jpg)</p>\n<h4 id=\"摄影师\"><a href=\"#摄影师\" class=\"headerlink\" title=\"摄影师\"></a>摄影师</h4><h5 id=\"安德烈·古斯基-Andreas-Gursky\"><a href=\"#安德烈·古斯基-Andreas-Gursky\" class=\"headerlink\" title=\"安德烈·古斯基 Andreas Gursky\"></a>安德烈·古斯基 Andreas Gursky</h5><p>1955年出生于德国莱比锡，毕业于德国杜塞尔多夫美术学院，杜塞尔多夫美术学院教授。上世纪80年代，古斯基师从德国摄影大师贝歇夫妇以高角度、大尺幅的景观建筑照片闻名，其作品价格多次打破世界摄影拍卖纪录，至今仍是世界摄影作品最高价格纪录保持者。</p>\n<p>古尔斯基作品网站：<a href=\"http://www.andreasgursky.com/\">www.andreasgursky.com</a> </p>\n<h5 id=\"王庆松\"><a href=\"#王庆松\" class=\"headerlink\" title=\"王庆松\"></a>王庆松</h5><p>1963年出生于中国黑龙江省哈尔滨市。他以摄影作品和装置作品而闻名，被誉为中国当代摄影艺术家。</p>\n<p>王庆松的摄影作品具有独特的视角和风格，展现了他对现实世界的独特理解和思考。他的作品涵盖了城市景观、自然风光、人物肖像等多个领域，其中以对城市景观的拍摄最为著名。</p>\n<p>王庆松的摄影作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。</p>\n<p>除了摄影作品，王庆松还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考。</p>\n<p> 王庆松作品: <a href=\"https://wangqingsong.artron.net/\">https://wangqingsong.artron.net/</a></p>\n<h5 id=\"乔·麦克纳利\"><a href=\"#乔·麦克纳利\" class=\"headerlink\" title=\"乔·麦克纳利\"></a>乔·麦克纳利</h5><p>乔·麦克纳利是世界著名摄影大师，“百名对摄影最具影响力的人”之一。他也是柯达公司“在线传奇人物”和尼康公司“镜头背后的传奇人物”。</p>\n<p>乔的客户包括《体育画报》、《ESPN》、《国家地理》、《生活》、《时代周刊》、《财富》、《纽约时报杂志》、《商业周刊》、《滚石》等畅销杂志，以及纽约证券交易所、美国Target连锁超市、索尼、通用电气和PNC银行等著名公司和机构。</p>\n<p>乔的摄影作品以震撼的视觉效果和独特的风格而闻名，他的作品涵盖了自然、城市、肖像等多个领域，其中以对自然景观的拍摄最为著名。</p>\n<p>乔不仅是一位优秀的摄影师，还是一位资深的摄影教育家。他编写了多本摄影教程书籍，并创立了乔·麦克纳利摄影学校，致力于传授他的经验和技巧，帮助更多的人发掘和发挥自己的摄影潜能。</p>\n<p>乔·麦克纳利作品官网：<a href=\"https://portfolio.joemcnally.com/\">https://portfolio.joemcnally.com</a> </p>\n<h5 id=\"马丁·帕尔\"><a href=\"#马丁·帕尔\" class=\"headerlink\" title=\"马丁·帕尔\"></a>马丁·帕尔</h5><p>马丁·帕尔是一位英国摄影师，他的作品以独特的视角和风格而著称。</p>\n<p>他的作品涵盖了自然、城市、人物等多个领域，其中以对城市景观的拍摄最为著名。</p>\n<p>马丁·帕尔的作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。</p>\n<p>除了摄影作品，马丁·帕尔还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考</p>\n<p>马丁帕尔作品官网 ：</p>\n<p><a href=\"https://www.martinparr.com/\">https://www.martinparr.com</a></p>\n<h5 id=\"Phil-Borges\"><a href=\"#Phil-Borges\" class=\"headerlink\" title=\"Phil Borges\"></a>Phil Borges</h5><p>Phil Borges是一位美国摄影师，他的作品以肖像摄影为主，以独特的视角和风格而著称。</p>\n<p>他的肖像摄影作品注重对人物个性和情感的刻画，通过细腻的构图和用光来展现人物的情感和特点。</p>\n<p>Phil Borges的摄影作品涵盖了多个领域，包括人物肖像、自然风光、城市景观等。<br>总的来说，Phil Borges是一位充满创造力和想象力的摄影师，他的作品展现了现实世界的美好与壮丽，同时也展现了他对于艺术和生活的独特理解和追求。</p>\n<p>Phil Borges作品网站：<a href=\"http://www.philborges.com/\">http://www.philborges.com/</a></p>\n<h5 id=\"杉本博司\"><a href=\"#杉本博司\" class=\"headerlink\" title=\"杉本博司\"></a>杉本博司</h5><p>杉本博司（Hiroshi Sugimoto）是一位日本摄影师，1948年出生于日本东京。他以拍摄静态的、具有仪式感的作品为主，以极简主义风格和概念性摄影而著称。</p>\n<p>他的作品包括但不限于以下内容：</p>\n<ol>\n<li>概念性摄影：他拍摄的《枪》《水的焰影》等作品，将物体的形式简化到最简单的程度，通过精细的构图和曝光时间来表达出物体的概念和意义。</li>\n<li>杉本博司的“剧场”系列：这个系列以舞台和幕布为拍摄对象，强调了戏剧表演中的仪式感和形式感，将剧场作为具有宗教性的场所来表现。</li>\n<li>杉本博司的“海景”系列：这个系列以海洋为拍摄对象，通过长时间的曝光时间来捕捉海浪的运动，展现出海洋的神秘和壮美。</li>\n</ol>\n<p>总的来说，杉本博司是一位充满创造力和想象力的摄影师，他的作品展现了日本当代摄影和艺术的独特魅力和实力。</p>\n<p>杉本博司网站：<a href=\"https://www.sugimotohiroshi.com/\">Hiroshi Sugimoto (sugimotohiroshi.com)</a></p>\n<h5 id=\"段岳衡\"><a href=\"#段岳衡\" class=\"headerlink\" title=\"段岳衡\"></a>段岳衡</h5><p>段岳衡作品集链接:<a href=\"https://pan.baidu.com/s/1zME5OQyv_8f1qceNpm-FUA\">https://pan.baidu.com/s/1zME5OQyv_8f1qceNpm-FUA</a> 密码:i1u7</p>\n<h5 id=\"Prince-Gyasi\"><a href=\"#Prince-Gyasi\" class=\"headerlink\" title=\"Prince Gyasi\"></a>Prince Gyasi</h5><p>Prince Gyasi作品集链接:<a href=\"https://pan.baidu.com/s/1Zb8yTSW2bVvFfiK1dEOOzg\">https://pan.baidu.com/s/1Zb8yTSW2bVvFfiK1dEOOzg</a> 密码:rf6w</p>\n<h5 id=\"Alex-Webb\"><a href=\"#Alex-Webb\" class=\"headerlink\" title=\"Alex Webb\"></a>Alex Webb</h5><p>Alex Webb作品集 作品集：<a href=\"https://pan.baidu.com/s/1aQ_Q3gQeAAoWjaki0yLzgA\">https://pan.baidu.com/s/1aQ_Q3gQeAAoWjaki0yLzgA</a>  密码:c36s 视频集：<a href=\"https://pan.baidu.com/s/1Oo1IFIE5GG4KRLHq2CgOVQ\">https://pan.baidu.com/s/1Oo1IFIE5GG4KRLHq2CgOVQ</a>  密码:8pik</p>\n<h5 id=\"史蒂夫•麦凯瑞\"><a href=\"#史蒂夫•麦凯瑞\" class=\"headerlink\" title=\"史蒂夫•麦凯瑞\"></a>史蒂夫•麦凯瑞</h5><p>史蒂夫•麦凯瑞 作品链接:<a href=\"https://pan.baidu.com/s/1oFKn8CVMKjmPhBavVu1jPw\">https://pan.baidu.com/s/1oFKn8CVMKjmPhBavVu1jPw</a> 密码:rqw3 作品网站：<a href=\"https://stevemccurry.com/galleries\">https://stevemccurry.com/galleries</a></p>\n<h5 id=\"Ilker-Karaman\"><a href=\"#Ilker-Karaman\" class=\"headerlink\" title=\"Ilker Karaman\"></a>Ilker Karaman</h5><p>Ilker Karaman作品官网<a href=\"http://www.littleboxcollective.com/\">www.littleboxcollective.com</a> Ilker Karaman作品下载<a href=\"https://pan.baidu.com/s/1oHXbAdrYjmFVSYE1wIu27A\">https://pan.baidu.com/s/1oHXbAdrYjmFVSYE1wIu27A</a>  提取码：ewey </p>\n<h5 id=\"何藩\"><a href=\"#何藩\" class=\"headerlink\" title=\"何藩\"></a>何藩</h5><p>作品官网<a href=\"https://fanho-forgetmenot.com/\">https://fanho-forgetmenot.com</a> 何藩作品下载<a href=\"https://pan.baidu.com/s/1X7pld-Wo7H1lr8SDgm_3Uw?pwd=N74a\">https://pan.baidu.com/s/1X7pld-Wo7H1lr8SDgm_3Uw?pwd=N74a</a>  提取码：N74a Albins jodin作品官网<a href=\"http://www.instagram.com/albinsjodin\">www.instagram.com/albinsjodin</a> Albins jodin作品下载链接: <a href=\"https://pan.baidu.com/s/17OnXvebXUlLhRIqUM4J3cw?pwd=9f6o\">https://pan.baidu.com/s/17OnXvebXUlLhRIqUM4J3cw?pwd=9f6o</a> 提取码: 9f6o  《同流者》电影下载链接: <a href=\"https://pan.baidu.com/s/1m3CMbBcQlHm2lpl4kg-Few?pwd=1473\">https://pan.baidu.com/s/1m3CMbBcQlHm2lpl4kg-Few?pwd=1473</a> 提取码: 1473</p>\n<h5 id=\"吕楠\"><a href=\"#吕楠\" class=\"headerlink\" title=\"吕楠\"></a>吕楠</h5><p>四部高清作品集 《被遗忘的人》链接:<a href=\"https://pan.baidu.com/s/1Z947xZEidic-qmd0NUgc-A\">https://pan.baidu.com/s/1Z947xZEidic-qmd0NUgc-A</a>  密码:3ko5 《四季》链接:<a href=\"https://pan.baidu.com/s/1x3idXUEdrmDrB2vK3EVYKQ\">https://pan.baidu.com/s/1x3idXUEdrmDrB2vK3EVYKQ</a>  密码:n28b 《缅北jian yu》链接:<a href=\"https://pan.baidu.com/s/1itqrSJpTtC-WZiGLG9DTSQ\">https://pan.baidu.com/s/1itqrSJpTtC-WZiGLG9DTSQ</a>  密码:zqxu 《在路上》链接:<a href=\"https://pan.baidu.com/s/1uw-jvNn9y0k23eR3KUhf3g\">https://pan.baidu.com/s/1uw-jvNn9y0k23eR3KUhf3g</a>  密码:ouq7</p>\n<h5 id=\"张克纯\"><a href=\"#张克纯\" class=\"headerlink\" title=\"张克纯\"></a>张克纯</h5><p>张克纯作品官网：<a href=\"http://zhangkechun.com/\">http://zhangkechun.com</a> 上田义彦作品官网： <a href=\"https://www.yoshihikoueda.com/\">https://www.yoshihikoueda.com</a></p>\n<h5 id=\"川内伦子\"><a href=\"#川内伦子\" class=\"headerlink\" title=\"川内伦子\"></a>川内伦子</h5><p>作品链接链接: <a href=\"https://pan.baidu.com/s/1VZ6OuYSRY-bL8WOL_TSvRQ?pwd=1un8\">https://pan.baidu.com/s/1VZ6OuYSRY-bL8WOL_TSvRQ?pwd=1un8</a> 提取码: 1un8</p>\n<h5 id=\"jimmymarble\"><a href=\"#jimmymarble\" class=\"headerlink\" title=\"jimmymarble\"></a>jimmymarble</h5><p>作品网址<a href=\"https://jimmymarble.com/\">https://jimmymarble.com</a> </p>\n<h5 id=\"Nick-Prideaux\"><a href=\"#Nick-Prideaux\" class=\"headerlink\" title=\"Nick Prideaux\"></a>Nick Prideaux</h5><p>作品网址<a href=\"http://www.nickprideaux.com/\">www.nickprideaux.com</a> </p>\n<h5 id=\"James-Perolls\"><a href=\"#James-Perolls\" class=\"headerlink\" title=\"James Perolls\"></a>James Perolls</h5><p> 作品网址<a href=\"http://www.perolls.com/\">www.perolls.com</a> </p>\n<h5 id=\"Evelyn-Bencicova\"><a href=\"#Evelyn-Bencicova\" class=\"headerlink\" title=\"Evelyn Bencicova\"></a>Evelyn Bencicova</h5><p>作品网址<a href=\"http://evelynbencicova.com/\">http://evelynbencicova.com</a></p>\n<h5 id=\"Nguan\"><a href=\"#Nguan\" class=\"headerlink\" title=\"Nguan\"></a>Nguan</h5><p>作品官网<a href=\"http://nguan.tv/\">http://nguan.tv</a> </p>\n<h5 id=\"lottiedavies\"><a href=\"#lottiedavies\" class=\"headerlink\" title=\"lottiedavies\"></a>lottiedavies</h5><p>作品官网<a href=\"http://www.lottiedavies.com/\">www.lottiedavies.com</a> </p>\n<h5 id=\"paolobarrettaph\"><a href=\"#paolobarrettaph\" class=\"headerlink\" title=\"paolobarrettaph\"></a>paolobarrettaph</h5><p>作品官网<a href=\"http://www.paolobarrettaph.com/\">www.paolobarrettaph.com</a></p>\n<h5 id=\"lottiedavies-1\"><a href=\"#lottiedavies-1\" class=\"headerlink\" title=\"lottiedavies\"></a>lottiedavies</h5><p>作品<a href=\"https://pan.baidu.com/s/1iNSUQewdLNmMcJME9PL27Q?pwd=f4n9\">https://pan.baidu.com/s/1iNSUQewdLNmMcJME9PL27Q?pwd=f4n9</a> 提取码: f4n9</p>\n<h5 id=\"格拉布斯\"><a href=\"#格拉布斯\" class=\"headerlink\" title=\"格拉布斯\"></a>格拉布斯</h5><p>作品 <a href=\"https://pan.baidu.com/s/1Om4laVYIsLtiVe8tjhbIKA?pwd=27ja\">https://pan.baidu.com/s/1Om4laVYIsLtiVe8tjhbIKA?pwd=27ja</a> 提取码: 27ja</p>\n<h5 id=\"Paolo-Barretta\"><a href=\"#Paolo-Barretta\" class=\"headerlink\" title=\"Paolo Barretta\"></a>Paolo Barretta</h5><p>作品 <a href=\"https://pan.baidu.com/s/1wZLac1vBIhtlYLTh6in6pg?pwd=q52v\">https://pan.baidu.com/s/1wZLac1vBIhtlYLTh6in6pg?pwd=q52v</a> 提取码: q52v</p>\n<h5 id=\"古尔斯基\"><a href=\"#古尔斯基\" class=\"headerlink\" title=\"古尔斯基\"></a>古尔斯基</h5><p>网址<a href=\"http://www.andreasgursky.com/\">www.andreasgursky.com</a> </p>\n<p>古尔斯基作品:<a href=\"https://pan.baidu.com/s/1mlVe4Hai34HufUaJHrPFKg\">https://pan.baidu.com/s/1mlVe4Hai34HufUaJHrPFKg</a> 提取码:7377 </p>\n<h5 id=\"Eszter-Sarah\"><a href=\"#Eszter-Sarah\" class=\"headerlink\" title=\"Eszter Sarah\"></a>Eszter Sarah</h5><p>作品官网 <a href=\"http://www.esztersarah.com/\">www.esztersarah.com</a> </p>\n<h5 id=\"ELLE-MAY\"><a href=\"#ELLE-MAY\" class=\"headerlink\" title=\"ELLE-MAY\"></a>ELLE-MAY</h5><p>作品官网<a href=\"http://www.elle-may.com/\">www.elle-may.com</a> </p>\n<h5 id=\"Denisse-Ariana-Perez\"><a href=\"#Denisse-Ariana-Perez\" class=\"headerlink\" title=\"Denisse Ariana Pérez\"></a>Denisse Ariana Pérez</h5><p>作品网址<a href=\"http://www.denissearianaphotography.com/\">www.denissearianaphotography.com</a></p>\n<h5 id=\"Denisse-Ariana-Perez-1\"><a href=\"#Denisse-Ariana-Perez-1\" class=\"headerlink\" title=\"Denisse Ariana Pérez\"></a>Denisse Ariana Pérez</h5><p>作品:<a href=\"https://pan.baidu.com/s/14QNztXxadyfLI-Zjoh343g\">https://pan.baidu.com/s/14QNztXxadyfLI-Zjoh343g</a>  密码:ptk3 ELLE-MAY 作品:<a href=\"https://pan.baidu.com/s/1kJnhCKuwTPT1trK_3rdpVg\">https://pan.baidu.com/s/1kJnhCKuwTPT1trK_3rdpVg</a>  密码:gvh7</p>\n<h5 id=\"Eszter-Sarah-1\"><a href=\"#Eszter-Sarah-1\" class=\"headerlink\" title=\"Eszter Sarah\"></a>Eszter Sarah</h5><p>作品链接:<a href=\"https://pan.baidu.com/s/178Ljq1ugx7JU0KtDX6d8YQ\">https://pan.baidu.com/s/178Ljq1ugx7JU0KtDX6d8YQ</a>  密码:1rmq</p>\n<h4 id=\"纪录片\"><a href=\"#纪录片\" class=\"headerlink\" title=\"纪录片\"></a>纪录片</h4><h5 id=\"《地球的夜晚》\"><a href=\"#《地球的夜晚》\" class=\"headerlink\" title=\"《地球的夜晚》\"></a>《地球的夜晚》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1BHj0mmYpxUp5DMSoLbDsKA\">https://pan.baidu.com/s/1BHj0mmYpxUp5DMSoLbDsKA</a>  密码:xixj </p>\n<h5 id=\"《生命之色》\"><a href=\"#《生命之色》\" class=\"headerlink\" title=\"《生命之色》\"></a>《生命之色》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1GetsM1UKge0Px8ObVFu07Q\">https://pan.baidu.com/s/1GetsM1UKge0Px8ObVFu07Q</a>  密码:4p3p </p>\n<h5 id=\"《人类星球》\"><a href=\"#《人类星球》\" class=\"headerlink\" title=\"《人类星球》\"></a>《人类星球》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1OoHI4f0N4dSrzNShPet3bA\">https://pan.baidu.com/s/1OoHI4f0N4dSrzNShPet3bA</a>  密码:sa5o </p>\n<h5 id=\"《宁静的世界》\"><a href=\"#《宁静的世界》\" class=\"headerlink\" title=\"《宁静的世界》\"></a>《宁静的世界》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1QOOfa9OoZCrN0dApDmqJTw\">https://pan.baidu.com/s/1QOOfa9OoZCrN0dApDmqJTw</a>  密码:ee0v</p>\n<h4 id=\"电影\"><a href=\"#电影\" class=\"headerlink\" title=\"电影\"></a>电影</h4><h5 id=\"《燃烧女子肖像》\"><a href=\"#《燃烧女子肖像》\" class=\"headerlink\" title=\"《燃烧女子肖像》\"></a>《燃烧女子肖像》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1MF15XxlDhAD-xQwEcL12EQ\">https://pan.baidu.com/s/1MF15XxlDhAD-xQwEcL12EQ</a>  密码:uz5j </p>\n<h5 id=\"《法兰特派西》\"><a href=\"#《法兰特派西》\" class=\"headerlink\" title=\"《法兰特派西》\"></a>《法兰特派西》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1mZoiTmiPD5qxPHnLMYGjDQ\">https://pan.baidu.com/s/1mZoiTmiPD5qxPHnLMYGjDQ</a>  密码:gtit </p>\n<h5 id=\"《银翼杀手》\"><a href=\"#《银翼杀手》\" class=\"headerlink\" title=\"《银翼杀手》\"></a>《银翼杀手》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1AWnrDorL2ZV8E8e4ceQPdw\">https://pan.baidu.com/s/1AWnrDorL2ZV8E8e4ceQPdw</a>  密码:kn6c</p>\n<h5 id=\"《降临》\"><a href=\"#《降临》\" class=\"headerlink\" title=\"《降临》\"></a>《降临》</h5><p>（2016年）：这部电影采用了独特的视角和拍摄手法，将外星人来到地球的故事呈现得非常细腻。</p>\n<h5 id=\"《荒野猎人》\"><a href=\"#《荒野猎人》\" class=\"headerlink\" title=\"《荒野猎人》\"></a>《荒野猎人》</h5><p>（2015年）：这部电影的摄影非常真实，通过高清的画质和大自然的细节，将人性的挣扎和生存的艰辛展现得淋漓尽致。</p>\n<h5 id=\"《疯狂的麦克斯：狂暴之路》\"><a href=\"#《疯狂的麦克斯：狂暴之路》\" class=\"headerlink\" title=\"《疯狂的麦克斯：狂暴之路》\"></a>《疯狂的麦克斯：狂暴之路》</h5><p>（2015年）：这部电影通过华丽的视觉效果和独特的拍摄手法，将末日世界中的疯狂和野性表现得非常生动。</p>\n<p>`&#96;&#96;mermaid</p>\n<p>graph LR;<br>  A–&gt;B;<br>  B–&gt;C;<br>  C–&gt;D;<br>  D–&gt;A;</p>\n<p>`&#96;&#96;</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"excerpt":"","more":"<p>本篇博客用于记录我喜欢的一些跟摄影相关的一些资料，比如电影、摄影资料、摄影师作品网站等。</p>\n<hr>\n<p>![](Steve McCurry.assets&#x2F;zgwu61.jpg)</p>\n<h4 id=\"摄影师\"><a href=\"#摄影师\" class=\"headerlink\" title=\"摄影师\"></a>摄影师</h4><h5 id=\"安德烈·古斯基-Andreas-Gursky\"><a href=\"#安德烈·古斯基-Andreas-Gursky\" class=\"headerlink\" title=\"安德烈·古斯基 Andreas Gursky\"></a>安德烈·古斯基 Andreas Gursky</h5><p>1955年出生于德国莱比锡，毕业于德国杜塞尔多夫美术学院，杜塞尔多夫美术学院教授。上世纪80年代，古斯基师从德国摄影大师贝歇夫妇以高角度、大尺幅的景观建筑照片闻名，其作品价格多次打破世界摄影拍卖纪录，至今仍是世界摄影作品最高价格纪录保持者。</p>\n<p>古尔斯基作品网站：<a href=\"http://www.andreasgursky.com/\">www.andreasgursky.com</a> </p>\n<h5 id=\"王庆松\"><a href=\"#王庆松\" class=\"headerlink\" title=\"王庆松\"></a>王庆松</h5><p>1963年出生于中国黑龙江省哈尔滨市。他以摄影作品和装置作品而闻名，被誉为中国当代摄影艺术家。</p>\n<p>王庆松的摄影作品具有独特的视角和风格，展现了他对现实世界的独特理解和思考。他的作品涵盖了城市景观、自然风光、人物肖像等多个领域，其中以对城市景观的拍摄最为著名。</p>\n<p>王庆松的摄影作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。</p>\n<p>除了摄影作品，王庆松还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考。</p>\n<p> 王庆松作品: <a href=\"https://wangqingsong.artron.net/\">https://wangqingsong.artron.net/</a></p>\n<h5 id=\"乔·麦克纳利\"><a href=\"#乔·麦克纳利\" class=\"headerlink\" title=\"乔·麦克纳利\"></a>乔·麦克纳利</h5><p>乔·麦克纳利是世界著名摄影大师，“百名对摄影最具影响力的人”之一。他也是柯达公司“在线传奇人物”和尼康公司“镜头背后的传奇人物”。</p>\n<p>乔的客户包括《体育画报》、《ESPN》、《国家地理》、《生活》、《时代周刊》、《财富》、《纽约时报杂志》、《商业周刊》、《滚石》等畅销杂志，以及纽约证券交易所、美国Target连锁超市、索尼、通用电气和PNC银行等著名公司和机构。</p>\n<p>乔的摄影作品以震撼的视觉效果和独特的风格而闻名，他的作品涵盖了自然、城市、肖像等多个领域，其中以对自然景观的拍摄最为著名。</p>\n<p>乔不仅是一位优秀的摄影师，还是一位资深的摄影教育家。他编写了多本摄影教程书籍，并创立了乔·麦克纳利摄影学校，致力于传授他的经验和技巧，帮助更多的人发掘和发挥自己的摄影潜能。</p>\n<p>乔·麦克纳利作品官网：<a href=\"https://portfolio.joemcnally.com/\">https://portfolio.joemcnally.com</a> </p>\n<h5 id=\"马丁·帕尔\"><a href=\"#马丁·帕尔\" class=\"headerlink\" title=\"马丁·帕尔\"></a>马丁·帕尔</h5><p>马丁·帕尔是一位英国摄影师，他的作品以独特的视角和风格而著称。</p>\n<p>他的作品涵盖了自然、城市、人物等多个领域，其中以对城市景观的拍摄最为著名。</p>\n<p>马丁·帕尔的作品注重对细节的刻画和表现，同时运用了大量的数字处理技术，使得作品更加完美和具有艺术性。</p>\n<p>除了摄影作品，马丁·帕尔还涉足装置艺术领域。他的装置作品以独特的创意和表现形式而著称，将摄影、装置和艺术相结合，展现了他对现实世界的独特理解和思考</p>\n<p>马丁帕尔作品官网 ：</p>\n<p><a href=\"https://www.martinparr.com/\">https://www.martinparr.com</a></p>\n<h5 id=\"Phil-Borges\"><a href=\"#Phil-Borges\" class=\"headerlink\" title=\"Phil Borges\"></a>Phil Borges</h5><p>Phil Borges是一位美国摄影师，他的作品以肖像摄影为主，以独特的视角和风格而著称。</p>\n<p>他的肖像摄影作品注重对人物个性和情感的刻画，通过细腻的构图和用光来展现人物的情感和特点。</p>\n<p>Phil Borges的摄影作品涵盖了多个领域，包括人物肖像、自然风光、城市景观等。<br>总的来说，Phil Borges是一位充满创造力和想象力的摄影师，他的作品展现了现实世界的美好与壮丽，同时也展现了他对于艺术和生活的独特理解和追求。</p>\n<p>Phil Borges作品网站：<a href=\"http://www.philborges.com/\">http://www.philborges.com/</a></p>\n<h5 id=\"杉本博司\"><a href=\"#杉本博司\" class=\"headerlink\" title=\"杉本博司\"></a>杉本博司</h5><p>杉本博司（Hiroshi Sugimoto）是一位日本摄影师，1948年出生于日本东京。他以拍摄静态的、具有仪式感的作品为主，以极简主义风格和概念性摄影而著称。</p>\n<p>他的作品包括但不限于以下内容：</p>\n<ol>\n<li>概念性摄影：他拍摄的《枪》《水的焰影》等作品，将物体的形式简化到最简单的程度，通过精细的构图和曝光时间来表达出物体的概念和意义。</li>\n<li>杉本博司的“剧场”系列：这个系列以舞台和幕布为拍摄对象，强调了戏剧表演中的仪式感和形式感，将剧场作为具有宗教性的场所来表现。</li>\n<li>杉本博司的“海景”系列：这个系列以海洋为拍摄对象，通过长时间的曝光时间来捕捉海浪的运动，展现出海洋的神秘和壮美。</li>\n</ol>\n<p>总的来说，杉本博司是一位充满创造力和想象力的摄影师，他的作品展现了日本当代摄影和艺术的独特魅力和实力。</p>\n<p>杉本博司网站：<a href=\"https://www.sugimotohiroshi.com/\">Hiroshi Sugimoto (sugimotohiroshi.com)</a></p>\n<h5 id=\"段岳衡\"><a href=\"#段岳衡\" class=\"headerlink\" title=\"段岳衡\"></a>段岳衡</h5><p>段岳衡作品集链接:<a href=\"https://pan.baidu.com/s/1zME5OQyv_8f1qceNpm-FUA\">https://pan.baidu.com/s/1zME5OQyv_8f1qceNpm-FUA</a> 密码:i1u7</p>\n<h5 id=\"Prince-Gyasi\"><a href=\"#Prince-Gyasi\" class=\"headerlink\" title=\"Prince Gyasi\"></a>Prince Gyasi</h5><p>Prince Gyasi作品集链接:<a href=\"https://pan.baidu.com/s/1Zb8yTSW2bVvFfiK1dEOOzg\">https://pan.baidu.com/s/1Zb8yTSW2bVvFfiK1dEOOzg</a> 密码:rf6w</p>\n<h5 id=\"Alex-Webb\"><a href=\"#Alex-Webb\" class=\"headerlink\" title=\"Alex Webb\"></a>Alex Webb</h5><p>Alex Webb作品集 作品集：<a href=\"https://pan.baidu.com/s/1aQ_Q3gQeAAoWjaki0yLzgA\">https://pan.baidu.com/s/1aQ_Q3gQeAAoWjaki0yLzgA</a>  密码:c36s 视频集：<a href=\"https://pan.baidu.com/s/1Oo1IFIE5GG4KRLHq2CgOVQ\">https://pan.baidu.com/s/1Oo1IFIE5GG4KRLHq2CgOVQ</a>  密码:8pik</p>\n<h5 id=\"史蒂夫•麦凯瑞\"><a href=\"#史蒂夫•麦凯瑞\" class=\"headerlink\" title=\"史蒂夫•麦凯瑞\"></a>史蒂夫•麦凯瑞</h5><p>史蒂夫•麦凯瑞 作品链接:<a href=\"https://pan.baidu.com/s/1oFKn8CVMKjmPhBavVu1jPw\">https://pan.baidu.com/s/1oFKn8CVMKjmPhBavVu1jPw</a> 密码:rqw3 作品网站：<a href=\"https://stevemccurry.com/galleries\">https://stevemccurry.com/galleries</a></p>\n<h5 id=\"Ilker-Karaman\"><a href=\"#Ilker-Karaman\" class=\"headerlink\" title=\"Ilker Karaman\"></a>Ilker Karaman</h5><p>Ilker Karaman作品官网<a href=\"http://www.littleboxcollective.com/\">www.littleboxcollective.com</a> Ilker Karaman作品下载<a href=\"https://pan.baidu.com/s/1oHXbAdrYjmFVSYE1wIu27A\">https://pan.baidu.com/s/1oHXbAdrYjmFVSYE1wIu27A</a>  提取码：ewey </p>\n<h5 id=\"何藩\"><a href=\"#何藩\" class=\"headerlink\" title=\"何藩\"></a>何藩</h5><p>作品官网<a href=\"https://fanho-forgetmenot.com/\">https://fanho-forgetmenot.com</a> 何藩作品下载<a href=\"https://pan.baidu.com/s/1X7pld-Wo7H1lr8SDgm_3Uw?pwd=N74a\">https://pan.baidu.com/s/1X7pld-Wo7H1lr8SDgm_3Uw?pwd=N74a</a>  提取码：N74a Albins jodin作品官网<a href=\"http://www.instagram.com/albinsjodin\">www.instagram.com/albinsjodin</a> Albins jodin作品下载链接: <a href=\"https://pan.baidu.com/s/17OnXvebXUlLhRIqUM4J3cw?pwd=9f6o\">https://pan.baidu.com/s/17OnXvebXUlLhRIqUM4J3cw?pwd=9f6o</a> 提取码: 9f6o  《同流者》电影下载链接: <a href=\"https://pan.baidu.com/s/1m3CMbBcQlHm2lpl4kg-Few?pwd=1473\">https://pan.baidu.com/s/1m3CMbBcQlHm2lpl4kg-Few?pwd=1473</a> 提取码: 1473</p>\n<h5 id=\"吕楠\"><a href=\"#吕楠\" class=\"headerlink\" title=\"吕楠\"></a>吕楠</h5><p>四部高清作品集 《被遗忘的人》链接:<a href=\"https://pan.baidu.com/s/1Z947xZEidic-qmd0NUgc-A\">https://pan.baidu.com/s/1Z947xZEidic-qmd0NUgc-A</a>  密码:3ko5 《四季》链接:<a href=\"https://pan.baidu.com/s/1x3idXUEdrmDrB2vK3EVYKQ\">https://pan.baidu.com/s/1x3idXUEdrmDrB2vK3EVYKQ</a>  密码:n28b 《缅北jian yu》链接:<a href=\"https://pan.baidu.com/s/1itqrSJpTtC-WZiGLG9DTSQ\">https://pan.baidu.com/s/1itqrSJpTtC-WZiGLG9DTSQ</a>  密码:zqxu 《在路上》链接:<a href=\"https://pan.baidu.com/s/1uw-jvNn9y0k23eR3KUhf3g\">https://pan.baidu.com/s/1uw-jvNn9y0k23eR3KUhf3g</a>  密码:ouq7</p>\n<h5 id=\"张克纯\"><a href=\"#张克纯\" class=\"headerlink\" title=\"张克纯\"></a>张克纯</h5><p>张克纯作品官网：<a href=\"http://zhangkechun.com/\">http://zhangkechun.com</a> 上田义彦作品官网： <a href=\"https://www.yoshihikoueda.com/\">https://www.yoshihikoueda.com</a></p>\n<h5 id=\"川内伦子\"><a href=\"#川内伦子\" class=\"headerlink\" title=\"川内伦子\"></a>川内伦子</h5><p>作品链接链接: <a href=\"https://pan.baidu.com/s/1VZ6OuYSRY-bL8WOL_TSvRQ?pwd=1un8\">https://pan.baidu.com/s/1VZ6OuYSRY-bL8WOL_TSvRQ?pwd=1un8</a> 提取码: 1un8</p>\n<h5 id=\"jimmymarble\"><a href=\"#jimmymarble\" class=\"headerlink\" title=\"jimmymarble\"></a>jimmymarble</h5><p>作品网址<a href=\"https://jimmymarble.com/\">https://jimmymarble.com</a> </p>\n<h5 id=\"Nick-Prideaux\"><a href=\"#Nick-Prideaux\" class=\"headerlink\" title=\"Nick Prideaux\"></a>Nick Prideaux</h5><p>作品网址<a href=\"http://www.nickprideaux.com/\">www.nickprideaux.com</a> </p>\n<h5 id=\"James-Perolls\"><a href=\"#James-Perolls\" class=\"headerlink\" title=\"James Perolls\"></a>James Perolls</h5><p> 作品网址<a href=\"http://www.perolls.com/\">www.perolls.com</a> </p>\n<h5 id=\"Evelyn-Bencicova\"><a href=\"#Evelyn-Bencicova\" class=\"headerlink\" title=\"Evelyn Bencicova\"></a>Evelyn Bencicova</h5><p>作品网址<a href=\"http://evelynbencicova.com/\">http://evelynbencicova.com</a></p>\n<h5 id=\"Nguan\"><a href=\"#Nguan\" class=\"headerlink\" title=\"Nguan\"></a>Nguan</h5><p>作品官网<a href=\"http://nguan.tv/\">http://nguan.tv</a> </p>\n<h5 id=\"lottiedavies\"><a href=\"#lottiedavies\" class=\"headerlink\" title=\"lottiedavies\"></a>lottiedavies</h5><p>作品官网<a href=\"http://www.lottiedavies.com/\">www.lottiedavies.com</a> </p>\n<h5 id=\"paolobarrettaph\"><a href=\"#paolobarrettaph\" class=\"headerlink\" title=\"paolobarrettaph\"></a>paolobarrettaph</h5><p>作品官网<a href=\"http://www.paolobarrettaph.com/\">www.paolobarrettaph.com</a></p>\n<h5 id=\"lottiedavies-1\"><a href=\"#lottiedavies-1\" class=\"headerlink\" title=\"lottiedavies\"></a>lottiedavies</h5><p>作品<a href=\"https://pan.baidu.com/s/1iNSUQewdLNmMcJME9PL27Q?pwd=f4n9\">https://pan.baidu.com/s/1iNSUQewdLNmMcJME9PL27Q?pwd=f4n9</a> 提取码: f4n9</p>\n<h5 id=\"格拉布斯\"><a href=\"#格拉布斯\" class=\"headerlink\" title=\"格拉布斯\"></a>格拉布斯</h5><p>作品 <a href=\"https://pan.baidu.com/s/1Om4laVYIsLtiVe8tjhbIKA?pwd=27ja\">https://pan.baidu.com/s/1Om4laVYIsLtiVe8tjhbIKA?pwd=27ja</a> 提取码: 27ja</p>\n<h5 id=\"Paolo-Barretta\"><a href=\"#Paolo-Barretta\" class=\"headerlink\" title=\"Paolo Barretta\"></a>Paolo Barretta</h5><p>作品 <a href=\"https://pan.baidu.com/s/1wZLac1vBIhtlYLTh6in6pg?pwd=q52v\">https://pan.baidu.com/s/1wZLac1vBIhtlYLTh6in6pg?pwd=q52v</a> 提取码: q52v</p>\n<h5 id=\"古尔斯基\"><a href=\"#古尔斯基\" class=\"headerlink\" title=\"古尔斯基\"></a>古尔斯基</h5><p>网址<a href=\"http://www.andreasgursky.com/\">www.andreasgursky.com</a> </p>\n<p>古尔斯基作品:<a href=\"https://pan.baidu.com/s/1mlVe4Hai34HufUaJHrPFKg\">https://pan.baidu.com/s/1mlVe4Hai34HufUaJHrPFKg</a> 提取码:7377 </p>\n<h5 id=\"Eszter-Sarah\"><a href=\"#Eszter-Sarah\" class=\"headerlink\" title=\"Eszter Sarah\"></a>Eszter Sarah</h5><p>作品官网 <a href=\"http://www.esztersarah.com/\">www.esztersarah.com</a> </p>\n<h5 id=\"ELLE-MAY\"><a href=\"#ELLE-MAY\" class=\"headerlink\" title=\"ELLE-MAY\"></a>ELLE-MAY</h5><p>作品官网<a href=\"http://www.elle-may.com/\">www.elle-may.com</a> </p>\n<h5 id=\"Denisse-Ariana-Perez\"><a href=\"#Denisse-Ariana-Perez\" class=\"headerlink\" title=\"Denisse Ariana Pérez\"></a>Denisse Ariana Pérez</h5><p>作品网址<a href=\"http://www.denissearianaphotography.com/\">www.denissearianaphotography.com</a></p>\n<h5 id=\"Denisse-Ariana-Perez-1\"><a href=\"#Denisse-Ariana-Perez-1\" class=\"headerlink\" title=\"Denisse Ariana Pérez\"></a>Denisse Ariana Pérez</h5><p>作品:<a href=\"https://pan.baidu.com/s/14QNztXxadyfLI-Zjoh343g\">https://pan.baidu.com/s/14QNztXxadyfLI-Zjoh343g</a>  密码:ptk3 ELLE-MAY 作品:<a href=\"https://pan.baidu.com/s/1kJnhCKuwTPT1trK_3rdpVg\">https://pan.baidu.com/s/1kJnhCKuwTPT1trK_3rdpVg</a>  密码:gvh7</p>\n<h5 id=\"Eszter-Sarah-1\"><a href=\"#Eszter-Sarah-1\" class=\"headerlink\" title=\"Eszter Sarah\"></a>Eszter Sarah</h5><p>作品链接:<a href=\"https://pan.baidu.com/s/178Ljq1ugx7JU0KtDX6d8YQ\">https://pan.baidu.com/s/178Ljq1ugx7JU0KtDX6d8YQ</a>  密码:1rmq</p>\n<h4 id=\"纪录片\"><a href=\"#纪录片\" class=\"headerlink\" title=\"纪录片\"></a>纪录片</h4><h5 id=\"《地球的夜晚》\"><a href=\"#《地球的夜晚》\" class=\"headerlink\" title=\"《地球的夜晚》\"></a>《地球的夜晚》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1BHj0mmYpxUp5DMSoLbDsKA\">https://pan.baidu.com/s/1BHj0mmYpxUp5DMSoLbDsKA</a>  密码:xixj </p>\n<h5 id=\"《生命之色》\"><a href=\"#《生命之色》\" class=\"headerlink\" title=\"《生命之色》\"></a>《生命之色》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1GetsM1UKge0Px8ObVFu07Q\">https://pan.baidu.com/s/1GetsM1UKge0Px8ObVFu07Q</a>  密码:4p3p </p>\n<h5 id=\"《人类星球》\"><a href=\"#《人类星球》\" class=\"headerlink\" title=\"《人类星球》\"></a>《人类星球》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1OoHI4f0N4dSrzNShPet3bA\">https://pan.baidu.com/s/1OoHI4f0N4dSrzNShPet3bA</a>  密码:sa5o </p>\n<h5 id=\"《宁静的世界》\"><a href=\"#《宁静的世界》\" class=\"headerlink\" title=\"《宁静的世界》\"></a>《宁静的世界》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1QOOfa9OoZCrN0dApDmqJTw\">https://pan.baidu.com/s/1QOOfa9OoZCrN0dApDmqJTw</a>  密码:ee0v</p>\n<h4 id=\"电影\"><a href=\"#电影\" class=\"headerlink\" title=\"电影\"></a>电影</h4><h5 id=\"《燃烧女子肖像》\"><a href=\"#《燃烧女子肖像》\" class=\"headerlink\" title=\"《燃烧女子肖像》\"></a>《燃烧女子肖像》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1MF15XxlDhAD-xQwEcL12EQ\">https://pan.baidu.com/s/1MF15XxlDhAD-xQwEcL12EQ</a>  密码:uz5j </p>\n<h5 id=\"《法兰特派西》\"><a href=\"#《法兰特派西》\" class=\"headerlink\" title=\"《法兰特派西》\"></a>《法兰特派西》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1mZoiTmiPD5qxPHnLMYGjDQ\">https://pan.baidu.com/s/1mZoiTmiPD5qxPHnLMYGjDQ</a>  密码:gtit </p>\n<h5 id=\"《银翼杀手》\"><a href=\"#《银翼杀手》\" class=\"headerlink\" title=\"《银翼杀手》\"></a>《银翼杀手》</h5><p>链接:<a href=\"https://pan.baidu.com/s/1AWnrDorL2ZV8E8e4ceQPdw\">https://pan.baidu.com/s/1AWnrDorL2ZV8E8e4ceQPdw</a>  密码:kn6c</p>\n<h5 id=\"《降临》\"><a href=\"#《降临》\" class=\"headerlink\" title=\"《降临》\"></a>《降临》</h5><p>（2016年）：这部电影采用了独特的视角和拍摄手法，将外星人来到地球的故事呈现得非常细腻。</p>\n<h5 id=\"《荒野猎人》\"><a href=\"#《荒野猎人》\" class=\"headerlink\" title=\"《荒野猎人》\"></a>《荒野猎人》</h5><p>（2015年）：这部电影的摄影非常真实，通过高清的画质和大自然的细节，将人性的挣扎和生存的艰辛展现得淋漓尽致。</p>\n<h5 id=\"《疯狂的麦克斯：狂暴之路》\"><a href=\"#《疯狂的麦克斯：狂暴之路》\" class=\"headerlink\" title=\"《疯狂的麦克斯：狂暴之路》\"></a>《疯狂的麦克斯：狂暴之路》</h5><p>（2015年）：这部电影通过华丽的视觉效果和独特的拍摄手法，将末日世界中的疯狂和野性表现得非常生动。</p>\n<p>`&#96;&#96;mermaid</p>\n<p>graph LR;<br>  A–&gt;B;<br>  B–&gt;C;<br>  C–&gt;D;<br>  D–&gt;A;</p>\n<p>`&#96;&#96;</p>\n"},{"title":"vscode常用快捷键","keywords":"vscode","author":"Noodles","comments":1,"index_img":"/img/tool.png","excerpt":"vscode常用快捷键","date":"2024-03-22T02:00:00.000Z","updated":"2024-05-15T12:00:00.000Z","sticky":1,"_content":"\nvscode快捷键\n\n##### 编辑器操作：\n\n- 显示/隐藏侧边栏：Ctrl + Shift + L\n- 放大/缩小编辑器窗口：Ctrl +/-\n- 剪切行：Ctrl + X\n- 复制行：Ctrl + C\n- 移动行：Alt + up/down\n- 复制当前行到下一行：Shift + Alt + down\n- 在当前行下面插入一行：Ctrl + Enter\n- 添加注释：Ctrl + /\n- 添加块注释：Shift + Alt + A\n- 查询：Ctrl + F\n- 替换：Ctrl + H\n- 匹配选中的词汇或者行，再次选中：Ctrl + D\n- 插入光标-支持多个：Alt + Click\n- 选中当前行：Ctrl + I\n- 格式化代码：Shift + Alt + F\n- 保存文件：Ctrl + S\n- 撤销上一步操作：Ctrl + Z\n\n##### 文件和窗口操作：\n\n- 打开命令面板：Ctrl + Shift + P\n- 查找文件：Ctrl + P\n- 新建文件：Ctrl + N\n- 关闭窗口：Ctrl+Shift+W\n- 打开一个新窗口： Ctrl+Shift+N\n\n##### 终端操作：\n\n- 打开关闭终端：Ctrl + ~\n- 新建终端：Shift + Ctrl + Crtl + `\n- 向上滚动终端：Ctrl + Shift + 上箭头键\"目标位置=4\"\">","source":"_posts/vscode快捷键.md","raw":"---\ntitle: vscode常用快捷键\ncategories: vscode常用快捷键\ntags: 工具\nkeywords: vscode\nauthor: Noodles\ncomments: true\nindex_img: /img/tool.png\nexcerpt: vscode常用快捷键\ndate: 2024-03-22 10:00:00\nupdated: 2024-05-15 20:00:00\nsticky: 1\n---\n\nvscode快捷键\n\n##### 编辑器操作：\n\n- 显示/隐藏侧边栏：Ctrl + Shift + L\n- 放大/缩小编辑器窗口：Ctrl +/-\n- 剪切行：Ctrl + X\n- 复制行：Ctrl + C\n- 移动行：Alt + up/down\n- 复制当前行到下一行：Shift + Alt + down\n- 在当前行下面插入一行：Ctrl + Enter\n- 添加注释：Ctrl + /\n- 添加块注释：Shift + Alt + A\n- 查询：Ctrl + F\n- 替换：Ctrl + H\n- 匹配选中的词汇或者行，再次选中：Ctrl + D\n- 插入光标-支持多个：Alt + Click\n- 选中当前行：Ctrl + I\n- 格式化代码：Shift + Alt + F\n- 保存文件：Ctrl + S\n- 撤销上一步操作：Ctrl + Z\n\n##### 文件和窗口操作：\n\n- 打开命令面板：Ctrl + Shift + P\n- 查找文件：Ctrl + P\n- 新建文件：Ctrl + N\n- 关闭窗口：Ctrl+Shift+W\n- 打开一个新窗口： Ctrl+Shift+N\n\n##### 终端操作：\n\n- 打开关闭终端：Ctrl + ~\n- 新建终端：Shift + Ctrl + Crtl + `\n- 向上滚动终端：Ctrl + Shift + 上箭头键\"目标位置=4\"\">","slug":"vscode快捷键","published":1,"_id":"clw7v677w0000e8lbhtpj4434","layout":"post","photos":[],"link":"","content":"<p>vscode快捷键</p>\n<h5 id=\"编辑器操作：\"><a href=\"#编辑器操作：\" class=\"headerlink\" title=\"编辑器操作：\"></a>编辑器操作：</h5><ul>\n<li>显示&#x2F;隐藏侧边栏：Ctrl + Shift + L</li>\n<li>放大&#x2F;缩小编辑器窗口：Ctrl +&#x2F;-</li>\n<li>剪切行：Ctrl + X</li>\n<li>复制行：Ctrl + C</li>\n<li>移动行：Alt + up&#x2F;down</li>\n<li>复制当前行到下一行：Shift + Alt + down</li>\n<li>在当前行下面插入一行：Ctrl + Enter</li>\n<li>添加注释：Ctrl + &#x2F;</li>\n<li>添加块注释：Shift + Alt + A</li>\n<li>查询：Ctrl + F</li>\n<li>替换：Ctrl + H</li>\n<li>匹配选中的词汇或者行，再次选中：Ctrl + D</li>\n<li>插入光标-支持多个：Alt + Click</li>\n<li>选中当前行：Ctrl + I</li>\n<li>格式化代码：Shift + Alt + F</li>\n<li>保存文件：Ctrl + S</li>\n<li>撤销上一步操作：Ctrl + Z</li>\n</ul>\n<h5 id=\"文件和窗口操作：\"><a href=\"#文件和窗口操作：\" class=\"headerlink\" title=\"文件和窗口操作：\"></a>文件和窗口操作：</h5><ul>\n<li>打开命令面板：Ctrl + Shift + P</li>\n<li>查找文件：Ctrl + P</li>\n<li>新建文件：Ctrl + N</li>\n<li>关闭窗口：Ctrl+Shift+W</li>\n<li>打开一个新窗口： Ctrl+Shift+N</li>\n</ul>\n<h5 id=\"终端操作：\"><a href=\"#终端操作：\" class=\"headerlink\" title=\"终端操作：\"></a>终端操作：</h5><ul>\n<li>打开关闭终端：Ctrl + ~</li>\n<li>新建终端：Shift + Ctrl + Crtl + &#96;</li>\n<li>向上滚动终端：Ctrl + Shift + 上箭头键”目标位置&#x3D;4””&gt;</li>\n</ul>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>vscode快捷键</p>\n<h5 id=\"编辑器操作：\"><a href=\"#编辑器操作：\" class=\"headerlink\" title=\"编辑器操作：\"></a>编辑器操作：</h5><ul>\n<li>显示&#x2F;隐藏侧边栏：Ctrl + Shift + L</li>\n<li>放大&#x2F;缩小编辑器窗口：Ctrl +&#x2F;-</li>\n<li>剪切行：Ctrl + X</li>\n<li>复制行：Ctrl + C</li>\n<li>移动行：Alt + up&#x2F;down</li>\n<li>复制当前行到下一行：Shift + Alt + down</li>\n<li>在当前行下面插入一行：Ctrl + Enter</li>\n<li>添加注释：Ctrl + &#x2F;</li>\n<li>添加块注释：Shift + Alt + A</li>\n<li>查询：Ctrl + F</li>\n<li>替换：Ctrl + H</li>\n<li>匹配选中的词汇或者行，再次选中：Ctrl + D</li>\n<li>插入光标-支持多个：Alt + Click</li>\n<li>选中当前行：Ctrl + I</li>\n<li>格式化代码：Shift + Alt + F</li>\n<li>保存文件：Ctrl + S</li>\n<li>撤销上一步操作：Ctrl + Z</li>\n</ul>\n<h5 id=\"文件和窗口操作：\"><a href=\"#文件和窗口操作：\" class=\"headerlink\" title=\"文件和窗口操作：\"></a>文件和窗口操作：</h5><ul>\n<li>打开命令面板：Ctrl + Shift + P</li>\n<li>查找文件：Ctrl + P</li>\n<li>新建文件：Ctrl + N</li>\n<li>关闭窗口：Ctrl+Shift+W</li>\n<li>打开一个新窗口： Ctrl+Shift+N</li>\n</ul>\n<h5 id=\"终端操作：\"><a href=\"#终端操作：\" class=\"headerlink\" title=\"终端操作：\"></a>终端操作：</h5><ul>\n<li>打开关闭终端：Ctrl + ~</li>\n<li>新建终端：Shift + Ctrl + Crtl + &#96;</li>\n<li>向上滚动终端：Ctrl + Shift + 上箭头键”目标位置&#x3D;4””&gt;</li>\n</ul>\n"},{"title":"AI闲聊","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。","date":"2023-09-18T14:25:03.000Z","updated":"2023-09-18T14:25:03.000Z","sticky":2,"_content":"\n去年openai的新闻久久的霸占了热搜，很多人都在讲下一次工业革命的到来，但其实对于我来说并未有什么大的震撼，最近发现一个音乐生成的网站：suno.ai\n\n试了一下，确实很有意思，我们可以指定风格，让他生成歌曲，而且质量还可以，至少我一个外行人，从听觉上觉得还是很好听的。那么AI给我们这些普通人到底带来什么，我觉得最大的变化就是，我们要学会利用AI,比如学会怎么给他们提供数据，让他给我们生成我们想要的东西。比如你要生成一首歌，那么你如何描述才能让他按照你的意愿生成你要的结果。\n\n这样，你的总结概括能力似乎就成了很重要的能力。","source":"_posts/杂话集/suno.ai.md","raw":"---\ntitle: AI闲聊\ncategories: 写作\ntags: 音乐\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。\ndate: 2023-09-18 22:25:03\nupdated: 2023-09-18 22:25:03\nsticky: 2\n---\n\n去年openai的新闻久久的霸占了热搜，很多人都在讲下一次工业革命的到来，但其实对于我来说并未有什么大的震撼，最近发现一个音乐生成的网站：suno.ai\n\n试了一下，确实很有意思，我们可以指定风格，让他生成歌曲，而且质量还可以，至少我一个外行人，从听觉上觉得还是很好听的。那么AI给我们这些普通人到底带来什么，我觉得最大的变化就是，我们要学会利用AI,比如学会怎么给他们提供数据，让他给我们生成我们想要的东西。比如你要生成一首歌，那么你如何描述才能让他按照你的意愿生成你要的结果。\n\n这样，你的总结概括能力似乎就成了很重要的能力。","slug":"杂话集/suno.ai","published":1,"_id":"clw7v67850002e8lbbkqh5max","layout":"post","photos":[],"link":"","content":"<p>去年openai的新闻久久的霸占了热搜，很多人都在讲下一次工业革命的到来，但其实对于我来说并未有什么大的震撼，最近发现一个音乐生成的网站：suno.ai</p>\n<p>试了一下，确实很有意思，我们可以指定风格，让他生成歌曲，而且质量还可以，至少我一个外行人，从听觉上觉得还是很好听的。那么AI给我们这些普通人到底带来什么，我觉得最大的变化就是，我们要学会利用AI,比如学会怎么给他们提供数据，让他给我们生成我们想要的东西。比如你要生成一首歌，那么你如何描述才能让他按照你的意愿生成你要的结果。</p>\n<p>这样，你的总结概括能力似乎就成了很重要的能力。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>去年openai的新闻久久的霸占了热搜，很多人都在讲下一次工业革命的到来，但其实对于我来说并未有什么大的震撼，最近发现一个音乐生成的网站：suno.ai</p>\n<p>试了一下，确实很有意思，我们可以指定风格，让他生成歌曲，而且质量还可以，至少我一个外行人，从听觉上觉得还是很好听的。那么AI给我们这些普通人到底带来什么，我觉得最大的变化就是，我们要学会利用AI,比如学会怎么给他们提供数据，让他给我们生成我们想要的东西。比如你要生成一首歌，那么你如何描述才能让他按照你的意愿生成你要的结果。</p>\n<p>这样，你的总结概括能力似乎就成了很重要的能力。</p>\n"},{"title":"使用导航","keywords":"导航","author":"Noodles","comments":1,"index_img":"/img/avatar.png","excerpt":"这是一个基于github+hexo搭建的个人博客,此页对所归档内容做一个整理，以方便翻阅。","date":"2024-03-22T02:00:00.000Z","updated":"2024-05-15T12:00:00.000Z","sticky":1,"_content":"\n这是一个基于github+hexo搭建的个人博客，用于记录我个人平时的一些笔记和思考。如果你恰巧打开了，然后恰好又对这些内容感兴趣，那么就请往下看，我简单给你介绍一下，怎么高效的浏览这个些博客。\n\n\n个人邮箱：Super.Young@outlook.com\n\ngithub:https://github.com/superyoung0120/myblog\ngitee:[https://superyoung.gitee.io](https://superyoung.gitee.io/)\n\n常用工具：\n图标生成：\nhttps://www.logosc.cn/logo/favicon","source":"_posts/导航.md","raw":"---\ntitle: 使用导航\ncategories: 导航\ntags: 工具\nkeywords: 导航\nauthor: Noodles\ncomments: true\nindex_img: /img/avatar.png\nexcerpt: 这是一个基于github+hexo搭建的个人博客,此页对所归档内容做一个整理，以方便翻阅。\ndate: 2024-03-22 10:00:00\nupdated: 2024-05-15 20:00:00\nsticky: 1\n---\n\n这是一个基于github+hexo搭建的个人博客，用于记录我个人平时的一些笔记和思考。如果你恰巧打开了，然后恰好又对这些内容感兴趣，那么就请往下看，我简单给你介绍一下，怎么高效的浏览这个些博客。\n\n\n个人邮箱：Super.Young@outlook.com\n\ngithub:https://github.com/superyoung0120/myblog\ngitee:[https://superyoung.gitee.io](https://superyoung.gitee.io/)\n\n常用工具：\n图标生成：\nhttps://www.logosc.cn/logo/favicon","slug":"导航","published":1,"_id":"clw7v67870004e8lb97w38hlv","layout":"post","photos":[],"link":"","content":"<p>这是一个基于github+hexo搭建的个人博客，用于记录我个人平时的一些笔记和思考。如果你恰巧打开了，然后恰好又对这些内容感兴趣，那么就请往下看，我简单给你介绍一下，怎么高效的浏览这个些博客。</p>\n<p>个人邮箱：<a href=\"mailto:&#x53;&#x75;&#112;&#x65;&#114;&#x2e;&#x59;&#x6f;&#x75;&#110;&#103;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#x63;&#111;&#x6d;\">&#x53;&#x75;&#112;&#x65;&#114;&#x2e;&#x59;&#x6f;&#x75;&#110;&#103;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#x63;&#111;&#x6d;</a></p>\n<p>github:<a href=\"https://github.com/superyoung0120/myblog\">https://github.com/superyoung0120/myblog</a><br>gitee:<a href=\"https://superyoung.gitee.io/\">https://superyoung.gitee.io</a></p>\n<p>常用工具：<br>图标生成：<br><a href=\"https://www.logosc.cn/logo/favicon\">https://www.logosc.cn/logo/favicon</a></p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>这是一个基于github+hexo搭建的个人博客，用于记录我个人平时的一些笔记和思考。如果你恰巧打开了，然后恰好又对这些内容感兴趣，那么就请往下看，我简单给你介绍一下，怎么高效的浏览这个些博客。</p>\n<p>个人邮箱：<a href=\"mailto:&#x53;&#x75;&#112;&#x65;&#114;&#x2e;&#x59;&#x6f;&#x75;&#110;&#103;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#x63;&#111;&#x6d;\">&#x53;&#x75;&#112;&#x65;&#114;&#x2e;&#x59;&#x6f;&#x75;&#110;&#103;&#64;&#x6f;&#117;&#116;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#x63;&#111;&#x6d;</a></p>\n<p>github:<a href=\"https://github.com/superyoung0120/myblog\">https://github.com/superyoung0120/myblog</a><br>gitee:<a href=\"https://superyoung.gitee.io/\">https://superyoung.gitee.io</a></p>\n<p>常用工具：<br>图标生成：<br><a href=\"https://www.logosc.cn/logo/favicon\">https://www.logosc.cn/logo/favicon</a></p>\n"},{"title":"关于故乡的诗歌","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"那个叫做故乡的地方","date":"2023-09-18T14:25:03.000Z","updated":"2023-09-18T14:25:03.000Z","sticky":2,"_content":"\n\n\n","source":"_posts/杂话集/那个叫做故乡的地方.md","raw":"---\ntitle: 关于故乡的诗歌\ncategories: 写作\ntags: 诗歌\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 那个叫做故乡的地方\ndate: 2023-09-18 22:25:03\nupdated: 2023-09-18 22:25:03\nsticky: 2\n\n---\n\n\n\n","slug":"杂话集/那个叫做故乡的地方","published":1,"_id":"clw7v678d0008e8lbfkvq8hn3","layout":"post","photos":[],"link":"","content":"","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":""},{"title":"编程语言及编程范式发展","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"在计算机技术的发展过程中，编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。随着计算机技术的不断进步，编程语言也不断发展，由原来的人适应机器变为机器适应人，而编程也越来越容易。","date":"2023-06-22T02:00:00.000Z","updated":"2023-06-29T02:00:00.000Z","sticky":3,"_content":"\n编程范式的发展和编程语言的发展\n\n编程语言的发展历程\n\n在计算机技术的发展过程中，编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。随着计算机技术的不断进步，编程语言也经历了漫长的发展历程。本文将介绍编程语言的发展历程，包括早期编程语言、高级语言、面向对象编程、脚本语言、新型编程语言等方面。\n\n早期编程语言\n\n早期编程语言是指计算机发展的早期阶段出现的编程语言，它们主要是针对特定的计算机硬件，以机器语言和汇编语言为主。\n\n机器语言是计算机硬件能够直接理解的语言，它是由二进制代码组成的指令集，非常难以理解和使用。为了提高编程的效率，出现了汇编语言，它将机器指令转换成更易于理解的符号，例如MOV、ADD、JMP等。但是，汇编语言仍然需要程序员记忆大量的指令，而且编写出的程序不易移植和维护。\n\n高级语言\n\n随着计算机硬件的不断发展，程序员们开始寻求更加易于使用、可移植性更好的编程语言。因此，高级语言应运而生。\n\n高级语言是一种与具体硬件无关的编程语言，它通常采用自然语言的形式，易于理解和编写。例如，FORTRAN、COBOL、ALGOL等都是早期的高级语言。这些语言的出现，大大提高了编程的效率，使程序员从繁琐的机器指令中解脱出来。\n\n面向对象编程\n\n在20世纪70年代，计算机硬件的发展推动了编程语言的又一次革命。面向对象编程（Object-Oriented Programming，OOP）的出现，改变了传统编程的方式，将数据和操作数据的函数封装在一起，形成了对象。\n\nOOP的出现，使得程序员可以更加轻松地实现复杂的程序逻辑，提高了代码的可重用性和可维护性。常见的面向对象编程语言包括C++、Java、Python等。\n\n脚本语言\n\n在20世纪90年代，随着互联网的普及，脚本语言应运而生。脚本语言是一种解释性语言，它可以快速地进行开发和调试，并且可以轻松地与HTML、CSS等其他技术结合使用。\n\n脚本语言的代表包括Perl、Python、JavaScript等。这些语言适用于处理文本文件和网络编程等任务，可以快速地进行开发和调试。\n\n新型编程语言\n\n随着计算机技术的不断发展，出现了一些新型的编程语言，例如Go、Rust、Swift等。这些语言注重性能和可扩展性，适用于构建大型系统和应用程序。\n\n例如，Go是一种编译型语言，具有高效的编译速度和运行速度。它还提供了丰富的标准库和易于使用的并发模型，适用于构建Web服务、分布式系统等应用。\n\nRust是一种安全、并发的编程语言，它具有强大的内存安全性和并发性能。它还提供了易于使用的宏和模式匹配等特性，适用于构建系统级应用程序和嵌入式系统等任务。\n\nSwift是一种新兴的编程语言，它具有易于学习、高效编译等特点。它还提供了丰富的API和库，适用于开发iOS和macOS等应用程序。\n\n总结\n\n编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。从早期的机器语言和汇编语言，到高级语言、面向对象编程、脚本语言、新型编程语言等，编程语言的发展历程与计算机技术的发展密切相关。\n\n随着技术的不断进步和需求的不断变化，编程语言的发展方向也将不断变化。未来，我们期待出现更加高效、安全、可扩展、易用的编程语言，为程序员和计算机技术的发展带来更多的惊喜。\n\n\n\n编程语言的发展就是从人适应机器变成了机器适应人,从最早的打孔机,到汇编再到C语言,到现在的python等,语言正在一步步走向简单易用,你不需要计算机相关知识就可以编程.当然","source":"_posts/杂话集/编程范式和编程语言会走向何方.md","raw":"---\ntitle: 编程语言及编程范式发展\ncategories: 随笔\ntags: 技术随笔\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 在计算机技术的发展过程中，编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。随着计算机技术的不断进步，编程语言也不断发展，由原来的人适应机器变为机器适应人，而编程也越来越容易。\ndate: 2023-06-22 10:00:00\nupdated: 2023-06-29 10:00:00\nsticky: 3\n---\n\n编程范式的发展和编程语言的发展\n\n编程语言的发展历程\n\n在计算机技术的发展过程中，编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。随着计算机技术的不断进步，编程语言也经历了漫长的发展历程。本文将介绍编程语言的发展历程，包括早期编程语言、高级语言、面向对象编程、脚本语言、新型编程语言等方面。\n\n早期编程语言\n\n早期编程语言是指计算机发展的早期阶段出现的编程语言，它们主要是针对特定的计算机硬件，以机器语言和汇编语言为主。\n\n机器语言是计算机硬件能够直接理解的语言，它是由二进制代码组成的指令集，非常难以理解和使用。为了提高编程的效率，出现了汇编语言，它将机器指令转换成更易于理解的符号，例如MOV、ADD、JMP等。但是，汇编语言仍然需要程序员记忆大量的指令，而且编写出的程序不易移植和维护。\n\n高级语言\n\n随着计算机硬件的不断发展，程序员们开始寻求更加易于使用、可移植性更好的编程语言。因此，高级语言应运而生。\n\n高级语言是一种与具体硬件无关的编程语言，它通常采用自然语言的形式，易于理解和编写。例如，FORTRAN、COBOL、ALGOL等都是早期的高级语言。这些语言的出现，大大提高了编程的效率，使程序员从繁琐的机器指令中解脱出来。\n\n面向对象编程\n\n在20世纪70年代，计算机硬件的发展推动了编程语言的又一次革命。面向对象编程（Object-Oriented Programming，OOP）的出现，改变了传统编程的方式，将数据和操作数据的函数封装在一起，形成了对象。\n\nOOP的出现，使得程序员可以更加轻松地实现复杂的程序逻辑，提高了代码的可重用性和可维护性。常见的面向对象编程语言包括C++、Java、Python等。\n\n脚本语言\n\n在20世纪90年代，随着互联网的普及，脚本语言应运而生。脚本语言是一种解释性语言，它可以快速地进行开发和调试，并且可以轻松地与HTML、CSS等其他技术结合使用。\n\n脚本语言的代表包括Perl、Python、JavaScript等。这些语言适用于处理文本文件和网络编程等任务，可以快速地进行开发和调试。\n\n新型编程语言\n\n随着计算机技术的不断发展，出现了一些新型的编程语言，例如Go、Rust、Swift等。这些语言注重性能和可扩展性，适用于构建大型系统和应用程序。\n\n例如，Go是一种编译型语言，具有高效的编译速度和运行速度。它还提供了丰富的标准库和易于使用的并发模型，适用于构建Web服务、分布式系统等应用。\n\nRust是一种安全、并发的编程语言，它具有强大的内存安全性和并发性能。它还提供了易于使用的宏和模式匹配等特性，适用于构建系统级应用程序和嵌入式系统等任务。\n\nSwift是一种新兴的编程语言，它具有易于学习、高效编译等特点。它还提供了丰富的API和库，适用于开发iOS和macOS等应用程序。\n\n总结\n\n编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。从早期的机器语言和汇编语言，到高级语言、面向对象编程、脚本语言、新型编程语言等，编程语言的发展历程与计算机技术的发展密切相关。\n\n随着技术的不断进步和需求的不断变化，编程语言的发展方向也将不断变化。未来，我们期待出现更加高效、安全、可扩展、易用的编程语言，为程序员和计算机技术的发展带来更多的惊喜。\n\n\n\n编程语言的发展就是从人适应机器变成了机器适应人,从最早的打孔机,到汇编再到C语言,到现在的python等,语言正在一步步走向简单易用,你不需要计算机相关知识就可以编程.当然","slug":"杂话集/编程范式和编程语言会走向何方","published":1,"_id":"clw7v678i000be8lb45jshmmv","layout":"post","photos":[],"link":"","content":"<p>编程范式的发展和编程语言的发展</p>\n<p>编程语言的发展历程</p>\n<p>在计算机技术的发展过程中，编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。随着计算机技术的不断进步，编程语言也经历了漫长的发展历程。本文将介绍编程语言的发展历程，包括早期编程语言、高级语言、面向对象编程、脚本语言、新型编程语言等方面。</p>\n<p>早期编程语言</p>\n<p>早期编程语言是指计算机发展的早期阶段出现的编程语言，它们主要是针对特定的计算机硬件，以机器语言和汇编语言为主。</p>\n<p>机器语言是计算机硬件能够直接理解的语言，它是由二进制代码组成的指令集，非常难以理解和使用。为了提高编程的效率，出现了汇编语言，它将机器指令转换成更易于理解的符号，例如MOV、ADD、JMP等。但是，汇编语言仍然需要程序员记忆大量的指令，而且编写出的程序不易移植和维护。</p>\n<p>高级语言</p>\n<p>随着计算机硬件的不断发展，程序员们开始寻求更加易于使用、可移植性更好的编程语言。因此，高级语言应运而生。</p>\n<p>高级语言是一种与具体硬件无关的编程语言，它通常采用自然语言的形式，易于理解和编写。例如，FORTRAN、COBOL、ALGOL等都是早期的高级语言。这些语言的出现，大大提高了编程的效率，使程序员从繁琐的机器指令中解脱出来。</p>\n<p>面向对象编程</p>\n<p>在20世纪70年代，计算机硬件的发展推动了编程语言的又一次革命。面向对象编程（Object-Oriented Programming，OOP）的出现，改变了传统编程的方式，将数据和操作数据的函数封装在一起，形成了对象。</p>\n<p>OOP的出现，使得程序员可以更加轻松地实现复杂的程序逻辑，提高了代码的可重用性和可维护性。常见的面向对象编程语言包括C++、Java、Python等。</p>\n<p>脚本语言</p>\n<p>在20世纪90年代，随着互联网的普及，脚本语言应运而生。脚本语言是一种解释性语言，它可以快速地进行开发和调试，并且可以轻松地与HTML、CSS等其他技术结合使用。</p>\n<p>脚本语言的代表包括Perl、Python、JavaScript等。这些语言适用于处理文本文件和网络编程等任务，可以快速地进行开发和调试。</p>\n<p>新型编程语言</p>\n<p>随着计算机技术的不断发展，出现了一些新型的编程语言，例如Go、Rust、Swift等。这些语言注重性能和可扩展性，适用于构建大型系统和应用程序。</p>\n<p>例如，Go是一种编译型语言，具有高效的编译速度和运行速度。它还提供了丰富的标准库和易于使用的并发模型，适用于构建Web服务、分布式系统等应用。</p>\n<p>Rust是一种安全、并发的编程语言，它具有强大的内存安全性和并发性能。它还提供了易于使用的宏和模式匹配等特性，适用于构建系统级应用程序和嵌入式系统等任务。</p>\n<p>Swift是一种新兴的编程语言，它具有易于学习、高效编译等特点。它还提供了丰富的API和库，适用于开发iOS和macOS等应用程序。</p>\n<p>总结</p>\n<p>编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。从早期的机器语言和汇编语言，到高级语言、面向对象编程、脚本语言、新型编程语言等，编程语言的发展历程与计算机技术的发展密切相关。</p>\n<p>随着技术的不断进步和需求的不断变化，编程语言的发展方向也将不断变化。未来，我们期待出现更加高效、安全、可扩展、易用的编程语言，为程序员和计算机技术的发展带来更多的惊喜。</p>\n<p>编程语言的发展就是从人适应机器变成了机器适应人,从最早的打孔机,到汇编再到C语言,到现在的python等,语言正在一步步走向简单易用,你不需要计算机相关知识就可以编程.当然</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>编程范式的发展和编程语言的发展</p>\n<p>编程语言的发展历程</p>\n<p>在计算机技术的发展过程中，编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。随着计算机技术的不断进步，编程语言也经历了漫长的发展历程。本文将介绍编程语言的发展历程，包括早期编程语言、高级语言、面向对象编程、脚本语言、新型编程语言等方面。</p>\n<p>早期编程语言</p>\n<p>早期编程语言是指计算机发展的早期阶段出现的编程语言，它们主要是针对特定的计算机硬件，以机器语言和汇编语言为主。</p>\n<p>机器语言是计算机硬件能够直接理解的语言，它是由二进制代码组成的指令集，非常难以理解和使用。为了提高编程的效率，出现了汇编语言，它将机器指令转换成更易于理解的符号，例如MOV、ADD、JMP等。但是，汇编语言仍然需要程序员记忆大量的指令，而且编写出的程序不易移植和维护。</p>\n<p>高级语言</p>\n<p>随着计算机硬件的不断发展，程序员们开始寻求更加易于使用、可移植性更好的编程语言。因此，高级语言应运而生。</p>\n<p>高级语言是一种与具体硬件无关的编程语言，它通常采用自然语言的形式，易于理解和编写。例如，FORTRAN、COBOL、ALGOL等都是早期的高级语言。这些语言的出现，大大提高了编程的效率，使程序员从繁琐的机器指令中解脱出来。</p>\n<p>面向对象编程</p>\n<p>在20世纪70年代，计算机硬件的发展推动了编程语言的又一次革命。面向对象编程（Object-Oriented Programming，OOP）的出现，改变了传统编程的方式，将数据和操作数据的函数封装在一起，形成了对象。</p>\n<p>OOP的出现，使得程序员可以更加轻松地实现复杂的程序逻辑，提高了代码的可重用性和可维护性。常见的面向对象编程语言包括C++、Java、Python等。</p>\n<p>脚本语言</p>\n<p>在20世纪90年代，随着互联网的普及，脚本语言应运而生。脚本语言是一种解释性语言，它可以快速地进行开发和调试，并且可以轻松地与HTML、CSS等其他技术结合使用。</p>\n<p>脚本语言的代表包括Perl、Python、JavaScript等。这些语言适用于处理文本文件和网络编程等任务，可以快速地进行开发和调试。</p>\n<p>新型编程语言</p>\n<p>随着计算机技术的不断发展，出现了一些新型的编程语言，例如Go、Rust、Swift等。这些语言注重性能和可扩展性，适用于构建大型系统和应用程序。</p>\n<p>例如，Go是一种编译型语言，具有高效的编译速度和运行速度。它还提供了丰富的标准库和易于使用的并发模型，适用于构建Web服务、分布式系统等应用。</p>\n<p>Rust是一种安全、并发的编程语言，它具有强大的内存安全性和并发性能。它还提供了易于使用的宏和模式匹配等特性，适用于构建系统级应用程序和嵌入式系统等任务。</p>\n<p>Swift是一种新兴的编程语言，它具有易于学习、高效编译等特点。它还提供了丰富的API和库，适用于开发iOS和macOS等应用程序。</p>\n<p>总结</p>\n<p>编程语言作为程序员与计算机硬件之间的桥梁，一直扮演着重要的角色。从早期的机器语言和汇编语言，到高级语言、面向对象编程、脚本语言、新型编程语言等，编程语言的发展历程与计算机技术的发展密切相关。</p>\n<p>随着技术的不断进步和需求的不断变化，编程语言的发展方向也将不断变化。未来，我们期待出现更加高效、安全、可扩展、易用的编程语言，为程序员和计算机技术的发展带来更多的惊喜。</p>\n<p>编程语言的发展就是从人适应机器变成了机器适应人,从最早的打孔机,到汇编再到C语言,到现在的python等,语言正在一步步走向简单易用,你不需要计算机相关知识就可以编程.当然</p>\n"},{"title":"《怪物》--是枝裕和","description":"电影《怪物》观后感","author":"Noodles","comments":1,"index_img":"/img/film.png","excerpt":"时间会倒流哟。时钟也好人类也好，电车也好猫也好，所有东西都会倒流。牛肉饭变回牛，屎回到屁股里。","date":"2024-03-03T02:00:00.000Z","updated":"2022-03-03T12:00:00.000Z","sticky":3,"_content":"\n我很喜欢看日本的电影，是枝裕和的电影基本也都看过。他总是把残酷的现实包裹在温暖的情节和舒缓的镜头中。他以往的作品都是自己作为编剧，而这部《怪物》编剧是坂元裕二。当然坂元裕二也是非常优秀的编剧，全年大火的电影《花束般的爱恋》他就是编剧。还有一部我非常喜欢的电影《再见，我们的幼儿园》也是他编写的。\n\n我认为一部好电影,最为重要的一点就是它的主题,《怪物》这部电影的主题是性别认同,或者说是同性恋的性别认同。当然你可以也说是校园暴力,也可以说电影用形式来探讨真相是什么,在我看来最核心的东西就是再讲两个刚开始由性别意识的孩子的性别认同。为什么电影的主题很重要呢?因为你锁定了主题,电影的情节\\故事\\镜头语言才会有一个锚点,你才可能展开去看这个电影是好或者不好。\n\n同性恋这个主题的电影还是挺多的,我看过还记得的有李安的《断背山》，《谁先爱上他的》，《春光乍泄》等等。当然肯定不止这些，一时也想不起来了，但是这些电影的角度都是成人后才有的,他们都是从成年人的角度去探讨这个问题。也就是说这些电影就是的主题就是同性恋，里面并不有性别认同的问题。那么这些电影的角度就是同性恋是既定事实，我们要么接收要么不接受。而《怪物》这部电影从孩子的角度去探讨这个问题,同性恋的开端是什么，就是在你有性别意识的时候，你开始接受自己的性别认同，开始接受自己的性取向。当然我没有深入研究过，但是普遍的共识认为，性别认同是基因决定的。所以这里说的性别认同是，你本能的对异性产生好感，还是对同性产生好感，而你接不接受这个事实。\n\n说到这里插个题外话，说说我对同性恋这一现象或者说事实的认知过程。我出生生长在比较偏远的地方，所以呢，直到高中毕业我接触的信息里面并没有接触过同性恋这样的概念。上了大学后偶尔听到一些八卦，说某某专业有两个女生在一起了，既是八卦，我也是只把它当作八卦。也并没有再进一步了解。但在当时我粗浅的认知里面，我认为同性恋是一个道德或者选择问题。接下来我是在看柴静书《看见》的时候，里面有一篇写同性恋的文章，我了解到，人的性别认同其实是基因决定的。当时我其实很是挺震惊的，之前我以为人对异性才会有性冲动，所以决定同性恋的行为很难接收。之后有一次我在校园里面遇到学校一个社团的随机采访，有个问题问的是你对同性恋问题怎么看？因为前面我已经有了一些基本的认识，所以我当时的回答是“我能接受这件事情，但是很难接受它发生在我身边”然后他接着问“那如果你身边有同性恋，你会怎么想？”，我一时语塞，但还是镇定的回答“不会”。再之后，有一年寒假，我去北京打工。在休假的时候去一个公园玩，公园里有座不大的山，我看到上面有个亭子就爬上去坐在上面休息。突然有个人出现在旁边问我“你是gay吗？”我当时本能的拔腿就跑，我现在也不能理解当时是基于什么原因。再到后来，看了更多的关于同性恋的电影，新闻等等。这件事情我已经完全接受，但是要是发生再自己身边估计还是需要好好消化消化的。\n\n我为什么要写这么一大段我对同性恋的认知过程呢？因为我觉得一个旁观者的态度，其实决定了同性恋群体的自我认同。而我作为一个普通人，对这件事情的认知过程，从侧面解释了电影中凑的行为。在正常情况下一般人对这件事情其实是没有清醒的认识的，而大家不关注的事情，不是不存在，而是被淹没。被淹没的事情，同性恋的性别认同在我们的环境下就是一个不被关注的事情。\n\n凑的妈妈关注不到，保利老师关注不到，学校关注不到，星川的爸爸应该是知道了，但他说这是一种病。而全电影中最能窥见两个孩子内心的是班级中那个让星川和凑一起去还乐器，把抹布仍给凑的小女孩。但她的力量太小了。电影最后是开放式结局，电影也并没有给出如何解决问题的答案，但借由校长说的那句确实这个问题的最终目标“所有人都能得到的幸福，才是真正的幸福”。\n\n我们再回来看看电影，首先是形式。电影分为四段。\n第一段是妈妈的视角，孩子经常出现意外状况，于是在她的询问下，孩子告诉她老师体罚并辱骂他，然后妈妈多次去学校讨要公道，最后妈妈成功为孩子争取到了应有的权利。保利老师当着所有孩子家长的面道歉。\n\n第二段是老师视角，老师刚来这学校，认真负责，但得不到学生和家长认可，还在学校压力下，面对家长道歉，女朋友也分手了。\n\n第三段是孩子的视角，两个孩子发展出了自己的“友谊”，但凑因为担心自己“不合群”只能私下跟星川来往，最后在校长的启发下，他似乎敢于面对自己内心的想法，于是他去找星川一起去他们的秘密基地。\n\n第四段 观众视角，或者是上帝视角：保利老师发现了凑和星川的藏头诗，明白了事情的真相，但是发生了泥石流，凑和星川在泥石流后爬出来，一起跑向了曾经封路的铁轨\n\n电影是一个多角度叙事的形式，这样的形式，在《罗生门》里面也有，但在罗生门里主要通过不同的角度，让观者思考到底什么是真相。而《怪物》里面多角度叙事，是为了体现，即使是最关心你的人也很难了解孩子的内心世界。所以就引出了孩子行为的合理性。同时也提出更大的问题，孩子的性别认同问题到底要怎么解决？\n\n再看镜头语言，还是是枝裕和一贯温和舒缓，让人很舒服。\n\n最后我们讨论一下电影的结尾，电影结尾是两个孩子一起跑向了曾经封路的铁轨，开放式结尾，你可以认为他们是在真实世界里一起跑向了铁轨，也可以认为他们在泥石流中遇难，在另一个世界跑向了铁轨。我认为是前者，因为我希望“所有人都能得到真正的幸福”。\n\n![替代文本](/img/film.png)","source":"_posts/观影笔记/《怪物》.md","raw":"---\ntitle: 《怪物》--是枝裕和\ncategories: 观影笔记\ndescription: 电影《怪物》观后感\ntags: 电影\nauthor: Noodles\ncomments: true\nindex_img: /img/film.png\nexcerpt: 时间会倒流哟。时钟也好人类也好，电车也好猫也好，所有东西都会倒流。牛肉饭变回牛，屎回到屁股里。\ndate: 2024-03-03 10:00:00\nupdated: 2022-03-03 20:00:00\nsticky: 3\n---\n\n我很喜欢看日本的电影，是枝裕和的电影基本也都看过。他总是把残酷的现实包裹在温暖的情节和舒缓的镜头中。他以往的作品都是自己作为编剧，而这部《怪物》编剧是坂元裕二。当然坂元裕二也是非常优秀的编剧，全年大火的电影《花束般的爱恋》他就是编剧。还有一部我非常喜欢的电影《再见，我们的幼儿园》也是他编写的。\n\n我认为一部好电影,最为重要的一点就是它的主题,《怪物》这部电影的主题是性别认同,或者说是同性恋的性别认同。当然你可以也说是校园暴力,也可以说电影用形式来探讨真相是什么,在我看来最核心的东西就是再讲两个刚开始由性别意识的孩子的性别认同。为什么电影的主题很重要呢?因为你锁定了主题,电影的情节\\故事\\镜头语言才会有一个锚点,你才可能展开去看这个电影是好或者不好。\n\n同性恋这个主题的电影还是挺多的,我看过还记得的有李安的《断背山》，《谁先爱上他的》，《春光乍泄》等等。当然肯定不止这些，一时也想不起来了，但是这些电影的角度都是成人后才有的,他们都是从成年人的角度去探讨这个问题。也就是说这些电影就是的主题就是同性恋，里面并不有性别认同的问题。那么这些电影的角度就是同性恋是既定事实，我们要么接收要么不接受。而《怪物》这部电影从孩子的角度去探讨这个问题,同性恋的开端是什么，就是在你有性别意识的时候，你开始接受自己的性别认同，开始接受自己的性取向。当然我没有深入研究过，但是普遍的共识认为，性别认同是基因决定的。所以这里说的性别认同是，你本能的对异性产生好感，还是对同性产生好感，而你接不接受这个事实。\n\n说到这里插个题外话，说说我对同性恋这一现象或者说事实的认知过程。我出生生长在比较偏远的地方，所以呢，直到高中毕业我接触的信息里面并没有接触过同性恋这样的概念。上了大学后偶尔听到一些八卦，说某某专业有两个女生在一起了，既是八卦，我也是只把它当作八卦。也并没有再进一步了解。但在当时我粗浅的认知里面，我认为同性恋是一个道德或者选择问题。接下来我是在看柴静书《看见》的时候，里面有一篇写同性恋的文章，我了解到，人的性别认同其实是基因决定的。当时我其实很是挺震惊的，之前我以为人对异性才会有性冲动，所以决定同性恋的行为很难接收。之后有一次我在校园里面遇到学校一个社团的随机采访，有个问题问的是你对同性恋问题怎么看？因为前面我已经有了一些基本的认识，所以我当时的回答是“我能接受这件事情，但是很难接受它发生在我身边”然后他接着问“那如果你身边有同性恋，你会怎么想？”，我一时语塞，但还是镇定的回答“不会”。再之后，有一年寒假，我去北京打工。在休假的时候去一个公园玩，公园里有座不大的山，我看到上面有个亭子就爬上去坐在上面休息。突然有个人出现在旁边问我“你是gay吗？”我当时本能的拔腿就跑，我现在也不能理解当时是基于什么原因。再到后来，看了更多的关于同性恋的电影，新闻等等。这件事情我已经完全接受，但是要是发生再自己身边估计还是需要好好消化消化的。\n\n我为什么要写这么一大段我对同性恋的认知过程呢？因为我觉得一个旁观者的态度，其实决定了同性恋群体的自我认同。而我作为一个普通人，对这件事情的认知过程，从侧面解释了电影中凑的行为。在正常情况下一般人对这件事情其实是没有清醒的认识的，而大家不关注的事情，不是不存在，而是被淹没。被淹没的事情，同性恋的性别认同在我们的环境下就是一个不被关注的事情。\n\n凑的妈妈关注不到，保利老师关注不到，学校关注不到，星川的爸爸应该是知道了，但他说这是一种病。而全电影中最能窥见两个孩子内心的是班级中那个让星川和凑一起去还乐器，把抹布仍给凑的小女孩。但她的力量太小了。电影最后是开放式结局，电影也并没有给出如何解决问题的答案，但借由校长说的那句确实这个问题的最终目标“所有人都能得到的幸福，才是真正的幸福”。\n\n我们再回来看看电影，首先是形式。电影分为四段。\n第一段是妈妈的视角，孩子经常出现意外状况，于是在她的询问下，孩子告诉她老师体罚并辱骂他，然后妈妈多次去学校讨要公道，最后妈妈成功为孩子争取到了应有的权利。保利老师当着所有孩子家长的面道歉。\n\n第二段是老师视角，老师刚来这学校，认真负责，但得不到学生和家长认可，还在学校压力下，面对家长道歉，女朋友也分手了。\n\n第三段是孩子的视角，两个孩子发展出了自己的“友谊”，但凑因为担心自己“不合群”只能私下跟星川来往，最后在校长的启发下，他似乎敢于面对自己内心的想法，于是他去找星川一起去他们的秘密基地。\n\n第四段 观众视角，或者是上帝视角：保利老师发现了凑和星川的藏头诗，明白了事情的真相，但是发生了泥石流，凑和星川在泥石流后爬出来，一起跑向了曾经封路的铁轨\n\n电影是一个多角度叙事的形式，这样的形式，在《罗生门》里面也有，但在罗生门里主要通过不同的角度，让观者思考到底什么是真相。而《怪物》里面多角度叙事，是为了体现，即使是最关心你的人也很难了解孩子的内心世界。所以就引出了孩子行为的合理性。同时也提出更大的问题，孩子的性别认同问题到底要怎么解决？\n\n再看镜头语言，还是是枝裕和一贯温和舒缓，让人很舒服。\n\n最后我们讨论一下电影的结尾，电影结尾是两个孩子一起跑向了曾经封路的铁轨，开放式结尾，你可以认为他们是在真实世界里一起跑向了铁轨，也可以认为他们在泥石流中遇难，在另一个世界跑向了铁轨。我认为是前者，因为我希望“所有人都能得到真正的幸福”。\n\n![替代文本](/img/film.png)","slug":"观影笔记/《怪物》","published":1,"_id":"clw7v678l000ce8lbgbabdybo","layout":"post","photos":[],"link":"","content":"<p>我很喜欢看日本的电影，是枝裕和的电影基本也都看过。他总是把残酷的现实包裹在温暖的情节和舒缓的镜头中。他以往的作品都是自己作为编剧，而这部《怪物》编剧是坂元裕二。当然坂元裕二也是非常优秀的编剧，全年大火的电影《花束般的爱恋》他就是编剧。还有一部我非常喜欢的电影《再见，我们的幼儿园》也是他编写的。</p>\n<p>我认为一部好电影,最为重要的一点就是它的主题,《怪物》这部电影的主题是性别认同,或者说是同性恋的性别认同。当然你可以也说是校园暴力,也可以说电影用形式来探讨真相是什么,在我看来最核心的东西就是再讲两个刚开始由性别意识的孩子的性别认同。为什么电影的主题很重要呢?因为你锁定了主题,电影的情节\\故事\\镜头语言才会有一个锚点,你才可能展开去看这个电影是好或者不好。</p>\n<p>同性恋这个主题的电影还是挺多的,我看过还记得的有李安的《断背山》，《谁先爱上他的》，《春光乍泄》等等。当然肯定不止这些，一时也想不起来了，但是这些电影的角度都是成人后才有的,他们都是从成年人的角度去探讨这个问题。也就是说这些电影就是的主题就是同性恋，里面并不有性别认同的问题。那么这些电影的角度就是同性恋是既定事实，我们要么接收要么不接受。而《怪物》这部电影从孩子的角度去探讨这个问题,同性恋的开端是什么，就是在你有性别意识的时候，你开始接受自己的性别认同，开始接受自己的性取向。当然我没有深入研究过，但是普遍的共识认为，性别认同是基因决定的。所以这里说的性别认同是，你本能的对异性产生好感，还是对同性产生好感，而你接不接受这个事实。</p>\n<p>说到这里插个题外话，说说我对同性恋这一现象或者说事实的认知过程。我出生生长在比较偏远的地方，所以呢，直到高中毕业我接触的信息里面并没有接触过同性恋这样的概念。上了大学后偶尔听到一些八卦，说某某专业有两个女生在一起了，既是八卦，我也是只把它当作八卦。也并没有再进一步了解。但在当时我粗浅的认知里面，我认为同性恋是一个道德或者选择问题。接下来我是在看柴静书《看见》的时候，里面有一篇写同性恋的文章，我了解到，人的性别认同其实是基因决定的。当时我其实很是挺震惊的，之前我以为人对异性才会有性冲动，所以决定同性恋的行为很难接收。之后有一次我在校园里面遇到学校一个社团的随机采访，有个问题问的是你对同性恋问题怎么看？因为前面我已经有了一些基本的认识，所以我当时的回答是“我能接受这件事情，但是很难接受它发生在我身边”然后他接着问“那如果你身边有同性恋，你会怎么想？”，我一时语塞，但还是镇定的回答“不会”。再之后，有一年寒假，我去北京打工。在休假的时候去一个公园玩，公园里有座不大的山，我看到上面有个亭子就爬上去坐在上面休息。突然有个人出现在旁边问我“你是gay吗？”我当时本能的拔腿就跑，我现在也不能理解当时是基于什么原因。再到后来，看了更多的关于同性恋的电影，新闻等等。这件事情我已经完全接受，但是要是发生再自己身边估计还是需要好好消化消化的。</p>\n<p>我为什么要写这么一大段我对同性恋的认知过程呢？因为我觉得一个旁观者的态度，其实决定了同性恋群体的自我认同。而我作为一个普通人，对这件事情的认知过程，从侧面解释了电影中凑的行为。在正常情况下一般人对这件事情其实是没有清醒的认识的，而大家不关注的事情，不是不存在，而是被淹没。被淹没的事情，同性恋的性别认同在我们的环境下就是一个不被关注的事情。</p>\n<p>凑的妈妈关注不到，保利老师关注不到，学校关注不到，星川的爸爸应该是知道了，但他说这是一种病。而全电影中最能窥见两个孩子内心的是班级中那个让星川和凑一起去还乐器，把抹布仍给凑的小女孩。但她的力量太小了。电影最后是开放式结局，电影也并没有给出如何解决问题的答案，但借由校长说的那句确实这个问题的最终目标“所有人都能得到的幸福，才是真正的幸福”。</p>\n<p>我们再回来看看电影，首先是形式。电影分为四段。<br>第一段是妈妈的视角，孩子经常出现意外状况，于是在她的询问下，孩子告诉她老师体罚并辱骂他，然后妈妈多次去学校讨要公道，最后妈妈成功为孩子争取到了应有的权利。保利老师当着所有孩子家长的面道歉。</p>\n<p>第二段是老师视角，老师刚来这学校，认真负责，但得不到学生和家长认可，还在学校压力下，面对家长道歉，女朋友也分手了。</p>\n<p>第三段是孩子的视角，两个孩子发展出了自己的“友谊”，但凑因为担心自己“不合群”只能私下跟星川来往，最后在校长的启发下，他似乎敢于面对自己内心的想法，于是他去找星川一起去他们的秘密基地。</p>\n<p>第四段 观众视角，或者是上帝视角：保利老师发现了凑和星川的藏头诗，明白了事情的真相，但是发生了泥石流，凑和星川在泥石流后爬出来，一起跑向了曾经封路的铁轨</p>\n<p>电影是一个多角度叙事的形式，这样的形式，在《罗生门》里面也有，但在罗生门里主要通过不同的角度，让观者思考到底什么是真相。而《怪物》里面多角度叙事，是为了体现，即使是最关心你的人也很难了解孩子的内心世界。所以就引出了孩子行为的合理性。同时也提出更大的问题，孩子的性别认同问题到底要怎么解决？</p>\n<p>再看镜头语言，还是是枝裕和一贯温和舒缓，让人很舒服。</p>\n<p>最后我们讨论一下电影的结尾，电影结尾是两个孩子一起跑向了曾经封路的铁轨，开放式结尾，你可以认为他们是在真实世界里一起跑向了铁轨，也可以认为他们在泥石流中遇难，在另一个世界跑向了铁轨。我认为是前者，因为我希望“所有人都能得到真正的幸福”。</p>\n<p><img src=\"/img/film.png\" alt=\"替代文本\"></p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>我很喜欢看日本的电影，是枝裕和的电影基本也都看过。他总是把残酷的现实包裹在温暖的情节和舒缓的镜头中。他以往的作品都是自己作为编剧，而这部《怪物》编剧是坂元裕二。当然坂元裕二也是非常优秀的编剧，全年大火的电影《花束般的爱恋》他就是编剧。还有一部我非常喜欢的电影《再见，我们的幼儿园》也是他编写的。</p>\n<p>我认为一部好电影,最为重要的一点就是它的主题,《怪物》这部电影的主题是性别认同,或者说是同性恋的性别认同。当然你可以也说是校园暴力,也可以说电影用形式来探讨真相是什么,在我看来最核心的东西就是再讲两个刚开始由性别意识的孩子的性别认同。为什么电影的主题很重要呢?因为你锁定了主题,电影的情节\\故事\\镜头语言才会有一个锚点,你才可能展开去看这个电影是好或者不好。</p>\n<p>同性恋这个主题的电影还是挺多的,我看过还记得的有李安的《断背山》，《谁先爱上他的》，《春光乍泄》等等。当然肯定不止这些，一时也想不起来了，但是这些电影的角度都是成人后才有的,他们都是从成年人的角度去探讨这个问题。也就是说这些电影就是的主题就是同性恋，里面并不有性别认同的问题。那么这些电影的角度就是同性恋是既定事实，我们要么接收要么不接受。而《怪物》这部电影从孩子的角度去探讨这个问题,同性恋的开端是什么，就是在你有性别意识的时候，你开始接受自己的性别认同，开始接受自己的性取向。当然我没有深入研究过，但是普遍的共识认为，性别认同是基因决定的。所以这里说的性别认同是，你本能的对异性产生好感，还是对同性产生好感，而你接不接受这个事实。</p>\n<p>说到这里插个题外话，说说我对同性恋这一现象或者说事实的认知过程。我出生生长在比较偏远的地方，所以呢，直到高中毕业我接触的信息里面并没有接触过同性恋这样的概念。上了大学后偶尔听到一些八卦，说某某专业有两个女生在一起了，既是八卦，我也是只把它当作八卦。也并没有再进一步了解。但在当时我粗浅的认知里面，我认为同性恋是一个道德或者选择问题。接下来我是在看柴静书《看见》的时候，里面有一篇写同性恋的文章，我了解到，人的性别认同其实是基因决定的。当时我其实很是挺震惊的，之前我以为人对异性才会有性冲动，所以决定同性恋的行为很难接收。之后有一次我在校园里面遇到学校一个社团的随机采访，有个问题问的是你对同性恋问题怎么看？因为前面我已经有了一些基本的认识，所以我当时的回答是“我能接受这件事情，但是很难接受它发生在我身边”然后他接着问“那如果你身边有同性恋，你会怎么想？”，我一时语塞，但还是镇定的回答“不会”。再之后，有一年寒假，我去北京打工。在休假的时候去一个公园玩，公园里有座不大的山，我看到上面有个亭子就爬上去坐在上面休息。突然有个人出现在旁边问我“你是gay吗？”我当时本能的拔腿就跑，我现在也不能理解当时是基于什么原因。再到后来，看了更多的关于同性恋的电影，新闻等等。这件事情我已经完全接受，但是要是发生再自己身边估计还是需要好好消化消化的。</p>\n<p>我为什么要写这么一大段我对同性恋的认知过程呢？因为我觉得一个旁观者的态度，其实决定了同性恋群体的自我认同。而我作为一个普通人，对这件事情的认知过程，从侧面解释了电影中凑的行为。在正常情况下一般人对这件事情其实是没有清醒的认识的，而大家不关注的事情，不是不存在，而是被淹没。被淹没的事情，同性恋的性别认同在我们的环境下就是一个不被关注的事情。</p>\n<p>凑的妈妈关注不到，保利老师关注不到，学校关注不到，星川的爸爸应该是知道了，但他说这是一种病。而全电影中最能窥见两个孩子内心的是班级中那个让星川和凑一起去还乐器，把抹布仍给凑的小女孩。但她的力量太小了。电影最后是开放式结局，电影也并没有给出如何解决问题的答案，但借由校长说的那句确实这个问题的最终目标“所有人都能得到的幸福，才是真正的幸福”。</p>\n<p>我们再回来看看电影，首先是形式。电影分为四段。<br>第一段是妈妈的视角，孩子经常出现意外状况，于是在她的询问下，孩子告诉她老师体罚并辱骂他，然后妈妈多次去学校讨要公道，最后妈妈成功为孩子争取到了应有的权利。保利老师当着所有孩子家长的面道歉。</p>\n<p>第二段是老师视角，老师刚来这学校，认真负责，但得不到学生和家长认可，还在学校压力下，面对家长道歉，女朋友也分手了。</p>\n<p>第三段是孩子的视角，两个孩子发展出了自己的“友谊”，但凑因为担心自己“不合群”只能私下跟星川来往，最后在校长的启发下，他似乎敢于面对自己内心的想法，于是他去找星川一起去他们的秘密基地。</p>\n<p>第四段 观众视角，或者是上帝视角：保利老师发现了凑和星川的藏头诗，明白了事情的真相，但是发生了泥石流，凑和星川在泥石流后爬出来，一起跑向了曾经封路的铁轨</p>\n<p>电影是一个多角度叙事的形式，这样的形式，在《罗生门》里面也有，但在罗生门里主要通过不同的角度，让观者思考到底什么是真相。而《怪物》里面多角度叙事，是为了体现，即使是最关心你的人也很难了解孩子的内心世界。所以就引出了孩子行为的合理性。同时也提出更大的问题，孩子的性别认同问题到底要怎么解决？</p>\n<p>再看镜头语言，还是是枝裕和一贯温和舒缓，让人很舒服。</p>\n<p>最后我们讨论一下电影的结尾，电影结尾是两个孩子一起跑向了曾经封路的铁轨，开放式结尾，你可以认为他们是在真实世界里一起跑向了铁轨，也可以认为他们在泥石流中遇难，在另一个世界跑向了铁轨。我认为是前者，因为我希望“所有人都能得到真正的幸福”。</p>\n<p><img src=\"/img/film.png\" alt=\"替代文本\"></p>\n"},{"title":"《周处除三害》","description":"一首有仪式感的韵律诗","author":"Noodles","comments":1,"index_img":"/img/film.png","excerpt":"一首有仪式感的韵律诗","date":"2024-03-03T02:00:00.000Z","updated":"2022-03-03T12:00:00.000Z","sticky":3,"_content":"\n一首有仪式感的韵律诗\n 形式可内容哪个更重要，是一个很难回答的问题\n电影《周处除三害》\n真实是不是现实，如不是如何区分二者\n\n","source":"_posts/观影笔记/周初除三害.md","raw":"---\ntitle: 《周处除三害》\ncategories: 观影笔记\ndescription: 一首有仪式感的韵律诗\ntags: 电影\nauthor: Noodles\ncomments: true\nindex_img: /img/film.png\nexcerpt: 一首有仪式感的韵律诗\ndate: 2024-03-03 10:00:00\nupdated: 2022-03-03 20:00:00\nsticky: 3\n---\n\n一首有仪式感的韵律诗\n 形式可内容哪个更重要，是一个很难回答的问题\n电影《周处除三害》\n真实是不是现实，如不是如何区分二者\n\n","slug":"观影笔记/周初除三害","published":1,"_id":"clw7v678m000de8lbeboz7uf9","layout":"post","photos":[],"link":"","content":"<p>一首有仪式感的韵律诗<br> 形式可内容哪个更重要，是一个很难回答的问题<br>电影《周处除三害》<br>真实是不是现实，如不是如何区分二者</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>一首有仪式感的韵律诗<br> 形式可内容哪个更重要，是一个很难回答的问题<br>电影《周处除三害》<br>真实是不是现实，如不是如何区分二者</p>\n"},{"title":"《椒麻堂会》--邱炯炯","description":"电影《椒麻堂会》观后","author":"Noodles","comments":1,"index_img":"/img/film.png","excerpt":"哀乐一响，票就少一张","date":"2024-03-31T02:00:00.000Z","updated":"2022-03-31T12:00:00.000Z","sticky":3,"_content":"\n这是一部风格鲜明的作者电影。他给我的观影体验也是极为特别的，但我却很难把这种感觉表述出来。那么分7部分拆分一下这部电影。\n\n1、形式：棚拍\n从画面的布景很容易就感受到，这是一个棚拍的电影，那些搭建的场景以及人物的妆容，服饰，似乎也都在提醒你，这不是真实的，但电影里面那些对着镜头的表述，又在告诉你，这些人都在你眼前。所以在整个观影过程中，给你一种时而间离，时真实的错觉。\n这种搭建的景物，都是一些浅景深的画面，有一种动画的感觉，同时画面风格又像油画，整体给人的感觉又像电影，又像舞台剧，又像动画。\n2、人物：丑角\n电影的主要人物邱福 是一个川剧丑角。\n我不懂川剧，更不懂戏曲，但知道生旦净末丑。而从小时候看社火和秦腔的经验中知道，丑角是用来逗观众开心的，每当丑角出来，一定伴随滑稽的动作，或者格格不入而又幽默的台词。在那个时候我唯一能听懂的台词也就是丑角的台词，同时被他们的幽默与滑稽逗笑。\n\n导演的一句话点醒了我，丑角其实是作者视角，他看似游离于戏外，但往往有上帝视角。同时他说丑角是悲到极致然后会心一笑。从这个角度丑角的滑稽其实是对社会的讽刺和批判。\n\n3、拍摄方式\n前面第一点我们说到，该电影是棚拍；\n4、剧本\n5、创作动机\n6、演员\n7、主题：死亡和历史\n\n","source":"_posts/观影笔记/椒麻堂会.md","raw":"---\ntitle: 《椒麻堂会》--邱炯炯\ncategories: 观影笔记\ndescription: 电影《椒麻堂会》观后\ntags: 电影\nauthor: Noodles\ncomments: true\nindex_img: /img/film.png\nexcerpt: 哀乐一响，票就少一张\ndate: 2024-03-31 10:00:00\nupdated: 2022-03-31 20:00:00\nsticky: 3\n---\n\n这是一部风格鲜明的作者电影。他给我的观影体验也是极为特别的，但我却很难把这种感觉表述出来。那么分7部分拆分一下这部电影。\n\n1、形式：棚拍\n从画面的布景很容易就感受到，这是一个棚拍的电影，那些搭建的场景以及人物的妆容，服饰，似乎也都在提醒你，这不是真实的，但电影里面那些对着镜头的表述，又在告诉你，这些人都在你眼前。所以在整个观影过程中，给你一种时而间离，时真实的错觉。\n这种搭建的景物，都是一些浅景深的画面，有一种动画的感觉，同时画面风格又像油画，整体给人的感觉又像电影，又像舞台剧，又像动画。\n2、人物：丑角\n电影的主要人物邱福 是一个川剧丑角。\n我不懂川剧，更不懂戏曲，但知道生旦净末丑。而从小时候看社火和秦腔的经验中知道，丑角是用来逗观众开心的，每当丑角出来，一定伴随滑稽的动作，或者格格不入而又幽默的台词。在那个时候我唯一能听懂的台词也就是丑角的台词，同时被他们的幽默与滑稽逗笑。\n\n导演的一句话点醒了我，丑角其实是作者视角，他看似游离于戏外，但往往有上帝视角。同时他说丑角是悲到极致然后会心一笑。从这个角度丑角的滑稽其实是对社会的讽刺和批判。\n\n3、拍摄方式\n前面第一点我们说到，该电影是棚拍；\n4、剧本\n5、创作动机\n6、演员\n7、主题：死亡和历史\n\n","slug":"观影笔记/椒麻堂会","published":1,"_id":"clw7v678o000he8lb627l3qs9","layout":"post","photos":[],"link":"","content":"<p>这是一部风格鲜明的作者电影。他给我的观影体验也是极为特别的，但我却很难把这种感觉表述出来。那么分7部分拆分一下这部电影。</p>\n<p>1、形式：棚拍<br>从画面的布景很容易就感受到，这是一个棚拍的电影，那些搭建的场景以及人物的妆容，服饰，似乎也都在提醒你，这不是真实的，但电影里面那些对着镜头的表述，又在告诉你，这些人都在你眼前。所以在整个观影过程中，给你一种时而间离，时真实的错觉。<br>这种搭建的景物，都是一些浅景深的画面，有一种动画的感觉，同时画面风格又像油画，整体给人的感觉又像电影，又像舞台剧，又像动画。<br>2、人物：丑角<br>电影的主要人物邱福 是一个川剧丑角。<br>我不懂川剧，更不懂戏曲，但知道生旦净末丑。而从小时候看社火和秦腔的经验中知道，丑角是用来逗观众开心的，每当丑角出来，一定伴随滑稽的动作，或者格格不入而又幽默的台词。在那个时候我唯一能听懂的台词也就是丑角的台词，同时被他们的幽默与滑稽逗笑。</p>\n<p>导演的一句话点醒了我，丑角其实是作者视角，他看似游离于戏外，但往往有上帝视角。同时他说丑角是悲到极致然后会心一笑。从这个角度丑角的滑稽其实是对社会的讽刺和批判。</p>\n<p>3、拍摄方式<br>前面第一点我们说到，该电影是棚拍；<br>4、剧本<br>5、创作动机<br>6、演员<br>7、主题：死亡和历史</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>这是一部风格鲜明的作者电影。他给我的观影体验也是极为特别的，但我却很难把这种感觉表述出来。那么分7部分拆分一下这部电影。</p>\n<p>1、形式：棚拍<br>从画面的布景很容易就感受到，这是一个棚拍的电影，那些搭建的场景以及人物的妆容，服饰，似乎也都在提醒你，这不是真实的，但电影里面那些对着镜头的表述，又在告诉你，这些人都在你眼前。所以在整个观影过程中，给你一种时而间离，时真实的错觉。<br>这种搭建的景物，都是一些浅景深的画面，有一种动画的感觉，同时画面风格又像油画，整体给人的感觉又像电影，又像舞台剧，又像动画。<br>2、人物：丑角<br>电影的主要人物邱福 是一个川剧丑角。<br>我不懂川剧，更不懂戏曲，但知道生旦净末丑。而从小时候看社火和秦腔的经验中知道，丑角是用来逗观众开心的，每当丑角出来，一定伴随滑稽的动作，或者格格不入而又幽默的台词。在那个时候我唯一能听懂的台词也就是丑角的台词，同时被他们的幽默与滑稽逗笑。</p>\n<p>导演的一句话点醒了我，丑角其实是作者视角，他看似游离于戏外，但往往有上帝视角。同时他说丑角是悲到极致然后会心一笑。从这个角度丑角的滑稽其实是对社会的讽刺和批判。</p>\n<p>3、拍摄方式<br>前面第一点我们说到，该电影是棚拍；<br>4、剧本<br>5、创作动机<br>6、演员<br>7、主题：死亡和历史</p>\n"},{"title":"QT笔记","author":"Noodles","comments":1,"index_img":"/img/reboot.png","excerpt":"学习QT开发的笔记","date":"2023-07-22T02:00:00.000Z","updated":"2023-08-28T02:00:00.000Z","sticky":3,"_content":"\n### 1、QT介绍\n\n#### QT简介\n\nQT是一个强大的、开源的图形用户界面（GUI）工具包，由Qtopia项目发展而来，最初由Qtopia软件公司开发，现在由Qt Software公司维护和开发。Qt支持多种操作系统，包括Windows、Linux、Mac OS X和Android等。 Qt具有以下特点：\n\n- 跨平台性：Qt可以在多种操作系统和设备上运行，包括桌面系统、移动设备和嵌入式设备。\n- 高性能：Qt采用了先进的图形渲染技术，可以实现高性能的图形用户界面。\n- 可扩展性：Qt提供了丰富的API和工具，可以方便地扩展应用程序的功能。\n- 可维护性：Qt具有良好的可维护性，可以方便地处理各种软件问题和需求变更。\n- 开源性：Qt是开源软件，可以自由地使用、修改和发布。\n\nQt的应用领域包括：\n\n- 商业应用：Qt可用于开发各种商业应用程序，包括桌面应用、移动应用和Web应用。 *嵌入式应用：Qt可用于开发各种嵌入式应用，包括汽车电子、医疗设备、工业控制和家电等。\n- 游戏开发：Qt可用于开发2D和3D游戏，支持多种游戏引擎和渲染技术。\n- 教育应用：Qt可用于开发各种教育应用，包括学习工具、教学软件和多媒体教室等。\n\n#### Qt的跨平台开发能力\n\nQt具有强大的跨平台开发能力，可以在多种操作系统和设备上运行，包括Windows、Linux、Mac OS X和Android等。Qt通过使用Qt库和Qt框架，实现了跨平台的统一开发模型，使开发人员可以使用相同的代码和工具在不同平台上开发应用程序。 Qt库提供了一组通用的API，用于创建图形用户界面和处理用户交互。Qt库支持多种渲染引擎，包括Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等，可以根据不同平台和设备选择合适的渲染引擎。 Qt框架提供了一组跨平台的核心功能，包括窗口系统、事件处理、文件系统、网络通信、多媒体支持等。Qt框架通过使用Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等技术，实现了跨平台的统一开发模型。 Qt还提供了一组丰富的工具，包括Qt Designer、Qt Creator、Qt Script等，用于快速开发应用程序和界面。Qt Designer可以用于创建和编辑应用程序的用户界面，Qt Creator可以用于编写和调试应用程序代码，Qt Script可以用于创建自动化脚本和机器学习算法等。\n\n#### Qt 开源许可\n\nQt Software公司提供了两种不同的许可类型，用于授权Qt软件的使用：\n\n1. Qt Professional License：适用于商业应用程序开发，提供了完整的Qt功能和技术支持。Qt Professional License的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt Professional License的授权费用根据所选定的授权期限和授权数量而定。\n2. Qt Enterprise License：适用于商业应用程序开发和嵌入式设备应用程序开发，提供了完整的Qt功能和技术支持。Qt Enterprise License的授权方式是按照每个设备或每个应用程序进行授权，每个设备或应用程序需要单独授权。Qt Enterprise License的授权费用根据所选定的授权期限和授权数量而定。\n\n此外，Qt还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。Qt个人开发许可证的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt个人开发许可证的授权费用为零。\n\n\n\n### 2、QT安装\n\n\n\n对于学习QT来说，直接安装最新版就行，可以是体验学习最新功能。\n\nQt Software公司目前正在维护和开发的Qt版本是Qt 6.3，该版本是Qt 6的最新稳定版本。Qt 6.3包含了许多新特性和改进，例如：\n\n- 新的Qt Quick 2.5.1模块，提供了更多的功能和API。\n- 新的Qt Quick CSS 2.5.1模块，提供了更多的CSS3支持。\n- 新的Qt Quick Test 1.5.1模块，提供了更多的自动化测试工具。\n- 新的Qt Creator 6.3 IDE，提供了更多的开发工具和功能。\n- 新的Qt Platform Plugins 6.3模块，提供了更多的平台插件支持。\n\n此外，Qt还提供了许多其他版本，例如Qt 6.2.1、Qt 6.1.2等，可以根据自己的需求选择适合的版本。Qt Software公司还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。\n\n\n\n以下是在Windows操作系统上安装Qt的步骤：\n\n1. 下载Qt安装包：访问Qt官方网站（https://www.qt.io/download/），选择适合自己操作系统的Qt安装包，例如“Qt 5.15.2 for Windows x86-64”。\n2. 运行安装包：双击下载的Qt安装包，按照提示进行安装。\n3. 选择安装选项：在安装过程中，可以选择安装Qt库、Qt框架、Qt Designer、Qt Creator等不同组件。如果需要使用Qt Creator进行开发，建议选择安装Qt Creator。\n4. 安装完成：安装完成后，可以在开始菜单中找到Qt相关的应用程序，例如Qt Creator、Qt Designer等。\n\n### 3、Hello Word\n\n入门一个新的开发平台，第一步就是先把他跑起来，我们看一下一个经典的hello word。\n\n使用Qt开发一个显示“Hello Qt”的应用程序，主要有以下步骤：\n\n1. 打开Qt Creator：打开Qt Creator软件，选择“新建”->“应用程序”，然后选择“Qt Quick应用程序”模板。\n2. 设计用户界面：在Qt Creator的工具栏中选择“设计”模式，使用Qt Quick Designer工具设计用户界面。在设计好的用户界面中，添加一个文本框，用于显示“Hello Qt”。\n3. 编写代码：在Qt Creator的工具栏中选择“代码”模式，打开应用程序的源代码文件。在文件中添加以下代码：\n\n```\ncCopy code#include <QApplication>\n#include <QLabel>\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n\n    QLabel label(\"Hello Qt\");\n\n    return a.exec();\n}\n```\n\n这段代码使用QApplication类创建应用程序，并使用QLabel类创建一个文本框，用于显示“Hello Qt”。\n\n运行应用程序：保存源代码文件并运行应用程序。在Qt Creator的工具栏中选择“运行”按钮，或者按下F9键，运行应用程序。应用程序将显示一个文本框，显示“Hello Qt”。\n\n\n\n![image-20230722235831580](QT笔记.assets/image-20230722235831580.png)\n\n在Qt Creator中创建新应用时，可以选择以下三个模式：\n\n1. Qt Quick应用程序：使用Qt Quick技术创建一个应用程序，可以快速开发高性能的用户界面。Qt Quick是一个基于Qt库的高性能渲染引擎，可以使用XML语法定义用户界面，并且可以在多种平台上运行。使用Qt Quick应用程序模板可以快速创建一个基于Qt Quick的应用程序，并且可以使用Qt Designer和Qt Creator的代码编辑器来编辑应用程序的用户界面和代码。\n2. Qt Quick模板应用程序：使用Qt Quick模板创建一个应用程序，可以快速开发一些常见的应用程序模板。Qt Quick模板应用程序模板提供了一些预定义的模板，例如电子表格、日历、图库等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。\n3. Qt Quick小应用程序：使用Qt Quick小应用程序模板创建一个应用程序，可以快速开发一些小型的、简单的应用程序。Qt Quick小应用程序模板提供了一些预定义的小应用程序模板，例如计时器、时钟、记事本等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。\n\n\n\n在Qt开发中，可以使用Qmake或Cmake来构建和管理应用程序。 Qmake是Qt Software公司开发的一种编译工具，用于构建和管理Qt应用程序。Qmake使用Qt库和Qt Designer来生成编译所需的Makefile文件，可以自动处理Qt库和Qt Designer文件之间的依赖关系，使得编译过程更加简单和方便。Qmake可以用于构建Qt应用程序的所有阶段，包括编译、链接和安装等。 Cmake是一种跨平台的编译工具，用于构建和管理C/C++应用程序。Cmake使用一种高级语言来描述编译规则和依赖关系，可以自动处理编译器、链接器、库文件等的依赖关系，使得编译过程更加简单和方便。Cmake可以用于构建C/C++应用程序的所有阶段，包括编译、链接和安装等。 在Qt开发中，如果需要使用Qt库和Qt Designer来构建应用程序，可以使用Qmake；如果需要使用C/C++库和工具来构建应用程序，可以使用Cmake。因此，可以根据自己的需求和经验选择适合的工具来构建和管理应用程序。\n\n### 4、QT框架\n####4.1 QT框架中常用的一些模块\nQTcore是一个基础模块，提供了QT框架的基本功能，如内存管理、线程支持、时间管理、随机数生成等。它还包含了QObject、QCoreApplication、QEvent等类，用于创建和处理应用程序的基本对象和事件。QTcore是QT框架的基础，所有的其他模块都需要依赖QTcore。\nQTgui是一个用于处理图形用户界面功能的模块。它提供了各种图形组件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。QTgui是QT框架中用于处理图形用户界面功能的模块\nQML（Qt Quick）：QML是一个用于创建交互式应用程序的编程语言，它提供了一种简单的方式来创建和管理图形用户界面。QML是Qt的跨平台语言，可以在Qt的各种平台上运行。\nQt Widgets：Qt Widgets是一个用于创建桌面应用程序的组件库，它提供了基本的GUI组件，如按钮、文本框、复选框等。Qt Widgets与QML一起用于创建应用程序的图形用户界面。\nQt Charts：Qt Charts是一个用于创建图表的组件库，它提供了各种图表类型，如折线图、柱状图、饼图等。Qt Charts可以用于创建图表性的数据可视化。\nQt Data Visualization：Qt Data Visualization是一个用于创建数据可视化的组件库，它提供了各种图表和图表组件，如散点图、柱状图、饼图等。Qt Data Visualization可以用于创建图表性的数据可视化。\nQt Network：Qt Network是一个用于处理网络通信的组件库，它提供了各种网络操作，如创建TCP/IP连接、发送和接收数据等。Qt Network可以用于创建网络应用程序。\nQt SQL：Qt SQL是一个用于处理数据库操作的组件库，它提供了各种数据库连接和操作，如创建表、插入数据、查询数据等。Qt SQL可以用于创建数据库应用程序。\nQt WebEngine：Qt WebEngine是一个用于创建Web浏览器应用程序的组件库。它提供了HTML、CSS和JavaScript引擎，用于渲染和显示Web内容。Qt WebEngine可以用于创建跨平台Web应用程序。\nQt Positioning：Qt Positioning是一个用于获取设备位置信息的组件库。它提供了用于定位的QGeoLocation类，用于获取当前位置、提供位置更新等。Qt Positioning可以用于创建定位应用程序。\nQt Quick Controls 2：Qt Quick Controls 2是一个用于创建快速、响应式和自定义控件的组件库。它提供了许多预定义的控件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。Qt Quick Controls 2可以用于创建具有自定义风格的图形用户界面。\nQt Quick Controls 1：Qt Quick Controls 1是一个用于创建快速、响应式和自定义控件的组件库。它提供了与Qt Quick 1兼容的控件，以及一个用于创建自定义控件的接口。Qt Quick Controls 1可以用于创建具有自定义风格的图形用户界面。\n\n####4.2 QT框架中的一些全局定义\nqglobal.h：包含了一些全局定义\n比如：\n\nQT_VERSION：表示QT的版本号，例如QT_VERSION(5, 14, 2)。\nQt::Alignment：表示对齐方式，例如Qt::AlignLeft。\nQt::ButtonRole：表示按钮角色，例如Qt::ButtonRole::AcceptRole。\nQt::CheckState：表示复选框状态，例如Qt::CheckState::Checked。\nQt::ConnectionType：表示连接类型，例如Qt::ConnectionType::Auto。\nQt::DateFormat：表示日期格式，例如Qt::DateFormat::ISO8601。\nQt::Key：表示键盘键，例如Qt::Key::Key_A。\nQt::Modifier：表示键盘修饰符，例如Qt::Modifier::ShiftModifier。\nQt::Orientation：表示方向，例如Qt::Orientation::Horizontal。\nQt::Permission：表示权限，例如Qt::Permission::WriteUser。\nQt::ScrollBarPolicy：表示滚动条策略，例如Qt::ScrollBarPolicy::ScrollBarAsNeeded。\nQt::TextInteractionFlag：表示文本交互标志，例如Qt::TextInteractionFlag::NoTextInteraction。\n\n在QTglobal.h中，有一些常用的全局函数，例如：\n\nqint64 qrand()：生成一个随机数。\nqint64 qsrand(qint64 seed)：设置随机数种子。\nQString QLocale::language()：获取当前语言。\nQString QLocale::country()：获取当前国家。\nQString QLocale::encoding()：获取当前编码。\nqint64 QDateTime::currentDateTime().toMSecsSinceEpoch()：获取当前日期时间的毫秒数。\nQDateTime QDateTime::fromMSecsSinceEpoch(qint64 msecsSinceEpoch)：将毫秒数转换为QDateTime对象。\nQString QDateTime::toPythonString()：将QDateTime对象转换为Python字符串。\nQDateTime QDateTime::fromPythonString(const QString &str))：将Python字符串转换为QDateTime对象。\n\n####4.3 QT的元对象系统\nQT的元对象系统（Meta Object System，MOS）是一种用于处理QObject类的元数据和运行时信息的机制。它提供了动态地创建、查询和销毁QObject子类的接口，使得QT框架可以更好地适应不同的需求和提高代码的可维护性。\n\nQT的元对象系统主要包含以下几个部分：\n\nQMetaObject：这是一个基类，用于表示所有类的元对象。它包含了类的元数据，如名称、信号、槽函数、属性等。\nQObject：这是一个基类，表示所有类的基类。它实现了QMetaObject。\nQMetaType：这是一个类，用于处理QVariant类型的元数据。\nQMetaProperty：这是一个类，用于表示类的属性。\nQMetaMethod：这是一个类，用于表示类的槽函数。\nQSignal：这是一个类，用于表示信号。\nQSlot：这是一个类，用于表示槽函数。\nQT的元对象系统提供了丰富的接口，用于处理QObject类的元数据和运行时信息。以下是一个简单的例子，展示了如何使用元对象系统：\n\n```\n#include <QObject>\n#include <QMetaObject>\n#include <QDebug>\n\nclass MyClass : public QObject\n{\n   Q_OBJECT\n\npublic:\n   MyClass() {\n       qDebug() << \"Constructor called\";\n   }\n\n   ~MyClass() {\n       qDebug() << \"Destructor called\";\n   }\n\npublic slots:\n   void mySlot() {\n       qDebug() << \"mySlot() called\";\n   }\n};\n\nint main() {\n   MyClass obj;\n\n   // 获取MyClass的元对象\n   QMetaObject metaObj = obj.metaObject();\n\n   // 获取类的名称\n   qDebug() << \"Class name: \" << metaObj.className();\n\n   // 获取构造函数\n   QMetaMethod constructor = metaObj.constructor(0);\n   qDebug() << \"Constructor: \" << constructor.signature();\n\n   // 获取析构函数\n   QMetaMethod destructor = metaObj.method(\"destructor\");\n   qDebug() << \"Destructor: \" << destructor.signature();\n\n   // 获取mySlot()槽函数\n   QMetaMethod slot = metaObj.method(\"mySlot()\");\n   qDebug() << \"mySlot(): \" << slot.signature();\n\n   return 0;\n}\n```\n\n这个例子展示了如何使用QT的元对象系统获取类的基本信息，例如名称、构造函数、析构函数和槽函数。通过元对象系统，QT可以更好地管理和处理QObject类的元数据和运行时信息，提高代码的可维护性和可扩展性。\n\n\n\n","source":"_posts/编程笔记/QT笔记.md","raw":"---\ntitle: QT笔记\ncategories: QT\ntags: QT\nauthor: Noodles\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: 学习QT开发的笔记\ndate: 2023-07-22 10:00:00\nupdated: 2023-08-28 10:00:00\nsticky: 3\n---\n\n### 1、QT介绍\n\n#### QT简介\n\nQT是一个强大的、开源的图形用户界面（GUI）工具包，由Qtopia项目发展而来，最初由Qtopia软件公司开发，现在由Qt Software公司维护和开发。Qt支持多种操作系统，包括Windows、Linux、Mac OS X和Android等。 Qt具有以下特点：\n\n- 跨平台性：Qt可以在多种操作系统和设备上运行，包括桌面系统、移动设备和嵌入式设备。\n- 高性能：Qt采用了先进的图形渲染技术，可以实现高性能的图形用户界面。\n- 可扩展性：Qt提供了丰富的API和工具，可以方便地扩展应用程序的功能。\n- 可维护性：Qt具有良好的可维护性，可以方便地处理各种软件问题和需求变更。\n- 开源性：Qt是开源软件，可以自由地使用、修改和发布。\n\nQt的应用领域包括：\n\n- 商业应用：Qt可用于开发各种商业应用程序，包括桌面应用、移动应用和Web应用。 *嵌入式应用：Qt可用于开发各种嵌入式应用，包括汽车电子、医疗设备、工业控制和家电等。\n- 游戏开发：Qt可用于开发2D和3D游戏，支持多种游戏引擎和渲染技术。\n- 教育应用：Qt可用于开发各种教育应用，包括学习工具、教学软件和多媒体教室等。\n\n#### Qt的跨平台开发能力\n\nQt具有强大的跨平台开发能力，可以在多种操作系统和设备上运行，包括Windows、Linux、Mac OS X和Android等。Qt通过使用Qt库和Qt框架，实现了跨平台的统一开发模型，使开发人员可以使用相同的代码和工具在不同平台上开发应用程序。 Qt库提供了一组通用的API，用于创建图形用户界面和处理用户交互。Qt库支持多种渲染引擎，包括Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等，可以根据不同平台和设备选择合适的渲染引擎。 Qt框架提供了一组跨平台的核心功能，包括窗口系统、事件处理、文件系统、网络通信、多媒体支持等。Qt框架通过使用Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等技术，实现了跨平台的统一开发模型。 Qt还提供了一组丰富的工具，包括Qt Designer、Qt Creator、Qt Script等，用于快速开发应用程序和界面。Qt Designer可以用于创建和编辑应用程序的用户界面，Qt Creator可以用于编写和调试应用程序代码，Qt Script可以用于创建自动化脚本和机器学习算法等。\n\n#### Qt 开源许可\n\nQt Software公司提供了两种不同的许可类型，用于授权Qt软件的使用：\n\n1. Qt Professional License：适用于商业应用程序开发，提供了完整的Qt功能和技术支持。Qt Professional License的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt Professional License的授权费用根据所选定的授权期限和授权数量而定。\n2. Qt Enterprise License：适用于商业应用程序开发和嵌入式设备应用程序开发，提供了完整的Qt功能和技术支持。Qt Enterprise License的授权方式是按照每个设备或每个应用程序进行授权，每个设备或应用程序需要单独授权。Qt Enterprise License的授权费用根据所选定的授权期限和授权数量而定。\n\n此外，Qt还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。Qt个人开发许可证的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt个人开发许可证的授权费用为零。\n\n\n\n### 2、QT安装\n\n\n\n对于学习QT来说，直接安装最新版就行，可以是体验学习最新功能。\n\nQt Software公司目前正在维护和开发的Qt版本是Qt 6.3，该版本是Qt 6的最新稳定版本。Qt 6.3包含了许多新特性和改进，例如：\n\n- 新的Qt Quick 2.5.1模块，提供了更多的功能和API。\n- 新的Qt Quick CSS 2.5.1模块，提供了更多的CSS3支持。\n- 新的Qt Quick Test 1.5.1模块，提供了更多的自动化测试工具。\n- 新的Qt Creator 6.3 IDE，提供了更多的开发工具和功能。\n- 新的Qt Platform Plugins 6.3模块，提供了更多的平台插件支持。\n\n此外，Qt还提供了许多其他版本，例如Qt 6.2.1、Qt 6.1.2等，可以根据自己的需求选择适合的版本。Qt Software公司还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。\n\n\n\n以下是在Windows操作系统上安装Qt的步骤：\n\n1. 下载Qt安装包：访问Qt官方网站（https://www.qt.io/download/），选择适合自己操作系统的Qt安装包，例如“Qt 5.15.2 for Windows x86-64”。\n2. 运行安装包：双击下载的Qt安装包，按照提示进行安装。\n3. 选择安装选项：在安装过程中，可以选择安装Qt库、Qt框架、Qt Designer、Qt Creator等不同组件。如果需要使用Qt Creator进行开发，建议选择安装Qt Creator。\n4. 安装完成：安装完成后，可以在开始菜单中找到Qt相关的应用程序，例如Qt Creator、Qt Designer等。\n\n### 3、Hello Word\n\n入门一个新的开发平台，第一步就是先把他跑起来，我们看一下一个经典的hello word。\n\n使用Qt开发一个显示“Hello Qt”的应用程序，主要有以下步骤：\n\n1. 打开Qt Creator：打开Qt Creator软件，选择“新建”->“应用程序”，然后选择“Qt Quick应用程序”模板。\n2. 设计用户界面：在Qt Creator的工具栏中选择“设计”模式，使用Qt Quick Designer工具设计用户界面。在设计好的用户界面中，添加一个文本框，用于显示“Hello Qt”。\n3. 编写代码：在Qt Creator的工具栏中选择“代码”模式，打开应用程序的源代码文件。在文件中添加以下代码：\n\n```\ncCopy code#include <QApplication>\n#include <QLabel>\n\nint main(int argc, char *argv[])\n{\n    QApplication a(argc, argv);\n\n    QLabel label(\"Hello Qt\");\n\n    return a.exec();\n}\n```\n\n这段代码使用QApplication类创建应用程序，并使用QLabel类创建一个文本框，用于显示“Hello Qt”。\n\n运行应用程序：保存源代码文件并运行应用程序。在Qt Creator的工具栏中选择“运行”按钮，或者按下F9键，运行应用程序。应用程序将显示一个文本框，显示“Hello Qt”。\n\n\n\n![image-20230722235831580](QT笔记.assets/image-20230722235831580.png)\n\n在Qt Creator中创建新应用时，可以选择以下三个模式：\n\n1. Qt Quick应用程序：使用Qt Quick技术创建一个应用程序，可以快速开发高性能的用户界面。Qt Quick是一个基于Qt库的高性能渲染引擎，可以使用XML语法定义用户界面，并且可以在多种平台上运行。使用Qt Quick应用程序模板可以快速创建一个基于Qt Quick的应用程序，并且可以使用Qt Designer和Qt Creator的代码编辑器来编辑应用程序的用户界面和代码。\n2. Qt Quick模板应用程序：使用Qt Quick模板创建一个应用程序，可以快速开发一些常见的应用程序模板。Qt Quick模板应用程序模板提供了一些预定义的模板，例如电子表格、日历、图库等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。\n3. Qt Quick小应用程序：使用Qt Quick小应用程序模板创建一个应用程序，可以快速开发一些小型的、简单的应用程序。Qt Quick小应用程序模板提供了一些预定义的小应用程序模板，例如计时器、时钟、记事本等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。\n\n\n\n在Qt开发中，可以使用Qmake或Cmake来构建和管理应用程序。 Qmake是Qt Software公司开发的一种编译工具，用于构建和管理Qt应用程序。Qmake使用Qt库和Qt Designer来生成编译所需的Makefile文件，可以自动处理Qt库和Qt Designer文件之间的依赖关系，使得编译过程更加简单和方便。Qmake可以用于构建Qt应用程序的所有阶段，包括编译、链接和安装等。 Cmake是一种跨平台的编译工具，用于构建和管理C/C++应用程序。Cmake使用一种高级语言来描述编译规则和依赖关系，可以自动处理编译器、链接器、库文件等的依赖关系，使得编译过程更加简单和方便。Cmake可以用于构建C/C++应用程序的所有阶段，包括编译、链接和安装等。 在Qt开发中，如果需要使用Qt库和Qt Designer来构建应用程序，可以使用Qmake；如果需要使用C/C++库和工具来构建应用程序，可以使用Cmake。因此，可以根据自己的需求和经验选择适合的工具来构建和管理应用程序。\n\n### 4、QT框架\n####4.1 QT框架中常用的一些模块\nQTcore是一个基础模块，提供了QT框架的基本功能，如内存管理、线程支持、时间管理、随机数生成等。它还包含了QObject、QCoreApplication、QEvent等类，用于创建和处理应用程序的基本对象和事件。QTcore是QT框架的基础，所有的其他模块都需要依赖QTcore。\nQTgui是一个用于处理图形用户界面功能的模块。它提供了各种图形组件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。QTgui是QT框架中用于处理图形用户界面功能的模块\nQML（Qt Quick）：QML是一个用于创建交互式应用程序的编程语言，它提供了一种简单的方式来创建和管理图形用户界面。QML是Qt的跨平台语言，可以在Qt的各种平台上运行。\nQt Widgets：Qt Widgets是一个用于创建桌面应用程序的组件库，它提供了基本的GUI组件，如按钮、文本框、复选框等。Qt Widgets与QML一起用于创建应用程序的图形用户界面。\nQt Charts：Qt Charts是一个用于创建图表的组件库，它提供了各种图表类型，如折线图、柱状图、饼图等。Qt Charts可以用于创建图表性的数据可视化。\nQt Data Visualization：Qt Data Visualization是一个用于创建数据可视化的组件库，它提供了各种图表和图表组件，如散点图、柱状图、饼图等。Qt Data Visualization可以用于创建图表性的数据可视化。\nQt Network：Qt Network是一个用于处理网络通信的组件库，它提供了各种网络操作，如创建TCP/IP连接、发送和接收数据等。Qt Network可以用于创建网络应用程序。\nQt SQL：Qt SQL是一个用于处理数据库操作的组件库，它提供了各种数据库连接和操作，如创建表、插入数据、查询数据等。Qt SQL可以用于创建数据库应用程序。\nQt WebEngine：Qt WebEngine是一个用于创建Web浏览器应用程序的组件库。它提供了HTML、CSS和JavaScript引擎，用于渲染和显示Web内容。Qt WebEngine可以用于创建跨平台Web应用程序。\nQt Positioning：Qt Positioning是一个用于获取设备位置信息的组件库。它提供了用于定位的QGeoLocation类，用于获取当前位置、提供位置更新等。Qt Positioning可以用于创建定位应用程序。\nQt Quick Controls 2：Qt Quick Controls 2是一个用于创建快速、响应式和自定义控件的组件库。它提供了许多预定义的控件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。Qt Quick Controls 2可以用于创建具有自定义风格的图形用户界面。\nQt Quick Controls 1：Qt Quick Controls 1是一个用于创建快速、响应式和自定义控件的组件库。它提供了与Qt Quick 1兼容的控件，以及一个用于创建自定义控件的接口。Qt Quick Controls 1可以用于创建具有自定义风格的图形用户界面。\n\n####4.2 QT框架中的一些全局定义\nqglobal.h：包含了一些全局定义\n比如：\n\nQT_VERSION：表示QT的版本号，例如QT_VERSION(5, 14, 2)。\nQt::Alignment：表示对齐方式，例如Qt::AlignLeft。\nQt::ButtonRole：表示按钮角色，例如Qt::ButtonRole::AcceptRole。\nQt::CheckState：表示复选框状态，例如Qt::CheckState::Checked。\nQt::ConnectionType：表示连接类型，例如Qt::ConnectionType::Auto。\nQt::DateFormat：表示日期格式，例如Qt::DateFormat::ISO8601。\nQt::Key：表示键盘键，例如Qt::Key::Key_A。\nQt::Modifier：表示键盘修饰符，例如Qt::Modifier::ShiftModifier。\nQt::Orientation：表示方向，例如Qt::Orientation::Horizontal。\nQt::Permission：表示权限，例如Qt::Permission::WriteUser。\nQt::ScrollBarPolicy：表示滚动条策略，例如Qt::ScrollBarPolicy::ScrollBarAsNeeded。\nQt::TextInteractionFlag：表示文本交互标志，例如Qt::TextInteractionFlag::NoTextInteraction。\n\n在QTglobal.h中，有一些常用的全局函数，例如：\n\nqint64 qrand()：生成一个随机数。\nqint64 qsrand(qint64 seed)：设置随机数种子。\nQString QLocale::language()：获取当前语言。\nQString QLocale::country()：获取当前国家。\nQString QLocale::encoding()：获取当前编码。\nqint64 QDateTime::currentDateTime().toMSecsSinceEpoch()：获取当前日期时间的毫秒数。\nQDateTime QDateTime::fromMSecsSinceEpoch(qint64 msecsSinceEpoch)：将毫秒数转换为QDateTime对象。\nQString QDateTime::toPythonString()：将QDateTime对象转换为Python字符串。\nQDateTime QDateTime::fromPythonString(const QString &str))：将Python字符串转换为QDateTime对象。\n\n####4.3 QT的元对象系统\nQT的元对象系统（Meta Object System，MOS）是一种用于处理QObject类的元数据和运行时信息的机制。它提供了动态地创建、查询和销毁QObject子类的接口，使得QT框架可以更好地适应不同的需求和提高代码的可维护性。\n\nQT的元对象系统主要包含以下几个部分：\n\nQMetaObject：这是一个基类，用于表示所有类的元对象。它包含了类的元数据，如名称、信号、槽函数、属性等。\nQObject：这是一个基类，表示所有类的基类。它实现了QMetaObject。\nQMetaType：这是一个类，用于处理QVariant类型的元数据。\nQMetaProperty：这是一个类，用于表示类的属性。\nQMetaMethod：这是一个类，用于表示类的槽函数。\nQSignal：这是一个类，用于表示信号。\nQSlot：这是一个类，用于表示槽函数。\nQT的元对象系统提供了丰富的接口，用于处理QObject类的元数据和运行时信息。以下是一个简单的例子，展示了如何使用元对象系统：\n\n```\n#include <QObject>\n#include <QMetaObject>\n#include <QDebug>\n\nclass MyClass : public QObject\n{\n   Q_OBJECT\n\npublic:\n   MyClass() {\n       qDebug() << \"Constructor called\";\n   }\n\n   ~MyClass() {\n       qDebug() << \"Destructor called\";\n   }\n\npublic slots:\n   void mySlot() {\n       qDebug() << \"mySlot() called\";\n   }\n};\n\nint main() {\n   MyClass obj;\n\n   // 获取MyClass的元对象\n   QMetaObject metaObj = obj.metaObject();\n\n   // 获取类的名称\n   qDebug() << \"Class name: \" << metaObj.className();\n\n   // 获取构造函数\n   QMetaMethod constructor = metaObj.constructor(0);\n   qDebug() << \"Constructor: \" << constructor.signature();\n\n   // 获取析构函数\n   QMetaMethod destructor = metaObj.method(\"destructor\");\n   qDebug() << \"Destructor: \" << destructor.signature();\n\n   // 获取mySlot()槽函数\n   QMetaMethod slot = metaObj.method(\"mySlot()\");\n   qDebug() << \"mySlot(): \" << slot.signature();\n\n   return 0;\n}\n```\n\n这个例子展示了如何使用QT的元对象系统获取类的基本信息，例如名称、构造函数、析构函数和槽函数。通过元对象系统，QT可以更好地管理和处理QObject类的元数据和运行时信息，提高代码的可维护性和可扩展性。\n\n\n\n","slug":"编程笔记/QT笔记","published":1,"_id":"clw7v678o000ie8lbds1a8xx9","layout":"post","photos":[],"link":"","content":"<h3 id=\"1、QT介绍\"><a href=\"#1、QT介绍\" class=\"headerlink\" title=\"1、QT介绍\"></a>1、QT介绍</h3><h4 id=\"QT简介\"><a href=\"#QT简介\" class=\"headerlink\" title=\"QT简介\"></a>QT简介</h4><p>QT是一个强大的、开源的图形用户界面（GUI）工具包，由Qtopia项目发展而来，最初由Qtopia软件公司开发，现在由Qt Software公司维护和开发。Qt支持多种操作系统，包括Windows、Linux、Mac OS X和Android等。 Qt具有以下特点：</p>\n<ul>\n<li>跨平台性：Qt可以在多种操作系统和设备上运行，包括桌面系统、移动设备和嵌入式设备。</li>\n<li>高性能：Qt采用了先进的图形渲染技术，可以实现高性能的图形用户界面。</li>\n<li>可扩展性：Qt提供了丰富的API和工具，可以方便地扩展应用程序的功能。</li>\n<li>可维护性：Qt具有良好的可维护性，可以方便地处理各种软件问题和需求变更。</li>\n<li>开源性：Qt是开源软件，可以自由地使用、修改和发布。</li>\n</ul>\n<p>Qt的应用领域包括：</p>\n<ul>\n<li>商业应用：Qt可用于开发各种商业应用程序，包括桌面应用、移动应用和Web应用。 *嵌入式应用：Qt可用于开发各种嵌入式应用，包括汽车电子、医疗设备、工业控制和家电等。</li>\n<li>游戏开发：Qt可用于开发2D和3D游戏，支持多种游戏引擎和渲染技术。</li>\n<li>教育应用：Qt可用于开发各种教育应用，包括学习工具、教学软件和多媒体教室等。</li>\n</ul>\n<h4 id=\"Qt的跨平台开发能力\"><a href=\"#Qt的跨平台开发能力\" class=\"headerlink\" title=\"Qt的跨平台开发能力\"></a>Qt的跨平台开发能力</h4><p>Qt具有强大的跨平台开发能力，可以在多种操作系统和设备上运行，包括Windows、Linux、Mac OS X和Android等。Qt通过使用Qt库和Qt框架，实现了跨平台的统一开发模型，使开发人员可以使用相同的代码和工具在不同平台上开发应用程序。 Qt库提供了一组通用的API，用于创建图形用户界面和处理用户交互。Qt库支持多种渲染引擎，包括Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等，可以根据不同平台和设备选择合适的渲染引擎。 Qt框架提供了一组跨平台的核心功能，包括窗口系统、事件处理、文件系统、网络通信、多媒体支持等。Qt框架通过使用Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等技术，实现了跨平台的统一开发模型。 Qt还提供了一组丰富的工具，包括Qt Designer、Qt Creator、Qt Script等，用于快速开发应用程序和界面。Qt Designer可以用于创建和编辑应用程序的用户界面，Qt Creator可以用于编写和调试应用程序代码，Qt Script可以用于创建自动化脚本和机器学习算法等。</p>\n<h4 id=\"Qt-开源许可\"><a href=\"#Qt-开源许可\" class=\"headerlink\" title=\"Qt 开源许可\"></a>Qt 开源许可</h4><p>Qt Software公司提供了两种不同的许可类型，用于授权Qt软件的使用：</p>\n<ol>\n<li>Qt Professional License：适用于商业应用程序开发，提供了完整的Qt功能和技术支持。Qt Professional License的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt Professional License的授权费用根据所选定的授权期限和授权数量而定。</li>\n<li>Qt Enterprise License：适用于商业应用程序开发和嵌入式设备应用程序开发，提供了完整的Qt功能和技术支持。Qt Enterprise License的授权方式是按照每个设备或每个应用程序进行授权，每个设备或应用程序需要单独授权。Qt Enterprise License的授权费用根据所选定的授权期限和授权数量而定。</li>\n</ol>\n<p>此外，Qt还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。Qt个人开发许可证的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt个人开发许可证的授权费用为零。</p>\n<h3 id=\"2、QT安装\"><a href=\"#2、QT安装\" class=\"headerlink\" title=\"2、QT安装\"></a>2、QT安装</h3><p>对于学习QT来说，直接安装最新版就行，可以是体验学习最新功能。</p>\n<p>Qt Software公司目前正在维护和开发的Qt版本是Qt 6.3，该版本是Qt 6的最新稳定版本。Qt 6.3包含了许多新特性和改进，例如：</p>\n<ul>\n<li>新的Qt Quick 2.5.1模块，提供了更多的功能和API。</li>\n<li>新的Qt Quick CSS 2.5.1模块，提供了更多的CSS3支持。</li>\n<li>新的Qt Quick Test 1.5.1模块，提供了更多的自动化测试工具。</li>\n<li>新的Qt Creator 6.3 IDE，提供了更多的开发工具和功能。</li>\n<li>新的Qt Platform Plugins 6.3模块，提供了更多的平台插件支持。</li>\n</ul>\n<p>此外，Qt还提供了许多其他版本，例如Qt 6.2.1、Qt 6.1.2等，可以根据自己的需求选择适合的版本。Qt Software公司还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。</p>\n<p>以下是在Windows操作系统上安装Qt的步骤：</p>\n<ol>\n<li>下载Qt安装包：访问Qt官方网站（<a href=\"https://www.qt.io/download/%EF%BC%89%EF%BC%8C%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E8%87%AA%E5%B7%B1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84Qt%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E4%BE%8B%E5%A6%82%E2%80%9CQt\">https://www.qt.io/download/），选择适合自己操作系统的Qt安装包，例如“Qt</a> 5.15.2 for Windows x86-64”。</li>\n<li>运行安装包：双击下载的Qt安装包，按照提示进行安装。</li>\n<li>选择安装选项：在安装过程中，可以选择安装Qt库、Qt框架、Qt Designer、Qt Creator等不同组件。如果需要使用Qt Creator进行开发，建议选择安装Qt Creator。</li>\n<li>安装完成：安装完成后，可以在开始菜单中找到Qt相关的应用程序，例如Qt Creator、Qt Designer等。</li>\n</ol>\n<h3 id=\"3、Hello-Word\"><a href=\"#3、Hello-Word\" class=\"headerlink\" title=\"3、Hello Word\"></a>3、Hello Word</h3><p>入门一个新的开发平台，第一步就是先把他跑起来，我们看一下一个经典的hello word。</p>\n<p>使用Qt开发一个显示“Hello Qt”的应用程序，主要有以下步骤：</p>\n<ol>\n<li>打开Qt Creator：打开Qt Creator软件，选择“新建”-&gt;“应用程序”，然后选择“Qt Quick应用程序”模板。</li>\n<li>设计用户界面：在Qt Creator的工具栏中选择“设计”模式，使用Qt Quick Designer工具设计用户界面。在设计好的用户界面中，添加一个文本框，用于显示“Hello Qt”。</li>\n<li>编写代码：在Qt Creator的工具栏中选择“代码”模式，打开应用程序的源代码文件。在文件中添加以下代码：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cCopy code<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QApplication&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QLabel&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-function\">QApplication <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(argc, argv)</span></span>;<br><br>    <span class=\"hljs-function\">QLabel <span class=\"hljs-title\">label</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Hello Qt&quot;</span>)</span></span>;<br><br>    <span class=\"hljs-keyword\">return</span> a.<span class=\"hljs-built_in\">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段代码使用QApplication类创建应用程序，并使用QLabel类创建一个文本框，用于显示“Hello Qt”。</p>\n<p>运行应用程序：保存源代码文件并运行应用程序。在Qt Creator的工具栏中选择“运行”按钮，或者按下F9键，运行应用程序。应用程序将显示一个文本框，显示“Hello Qt”。</p>\n<p><img src=\"/QT%E7%AC%94%E8%AE%B0.assets/image-20230722235831580.png\" alt=\"image-20230722235831580\"></p>\n<p>在Qt Creator中创建新应用时，可以选择以下三个模式：</p>\n<ol>\n<li>Qt Quick应用程序：使用Qt Quick技术创建一个应用程序，可以快速开发高性能的用户界面。Qt Quick是一个基于Qt库的高性能渲染引擎，可以使用XML语法定义用户界面，并且可以在多种平台上运行。使用Qt Quick应用程序模板可以快速创建一个基于Qt Quick的应用程序，并且可以使用Qt Designer和Qt Creator的代码编辑器来编辑应用程序的用户界面和代码。</li>\n<li>Qt Quick模板应用程序：使用Qt Quick模板创建一个应用程序，可以快速开发一些常见的应用程序模板。Qt Quick模板应用程序模板提供了一些预定义的模板，例如电子表格、日历、图库等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。</li>\n<li>Qt Quick小应用程序：使用Qt Quick小应用程序模板创建一个应用程序，可以快速开发一些小型的、简单的应用程序。Qt Quick小应用程序模板提供了一些预定义的小应用程序模板，例如计时器、时钟、记事本等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。</li>\n</ol>\n<p>在Qt开发中，可以使用Qmake或Cmake来构建和管理应用程序。 Qmake是Qt Software公司开发的一种编译工具，用于构建和管理Qt应用程序。Qmake使用Qt库和Qt Designer来生成编译所需的Makefile文件，可以自动处理Qt库和Qt Designer文件之间的依赖关系，使得编译过程更加简单和方便。Qmake可以用于构建Qt应用程序的所有阶段，包括编译、链接和安装等。 Cmake是一种跨平台的编译工具，用于构建和管理C&#x2F;C++应用程序。Cmake使用一种高级语言来描述编译规则和依赖关系，可以自动处理编译器、链接器、库文件等的依赖关系，使得编译过程更加简单和方便。Cmake可以用于构建C&#x2F;C++应用程序的所有阶段，包括编译、链接和安装等。 在Qt开发中，如果需要使用Qt库和Qt Designer来构建应用程序，可以使用Qmake；如果需要使用C&#x2F;C++库和工具来构建应用程序，可以使用Cmake。因此，可以根据自己的需求和经验选择适合的工具来构建和管理应用程序。</p>\n<h3 id=\"4、QT框架\"><a href=\"#4、QT框架\" class=\"headerlink\" title=\"4、QT框架\"></a>4、QT框架</h3><p>####4.1 QT框架中常用的一些模块<br>QTcore是一个基础模块，提供了QT框架的基本功能，如内存管理、线程支持、时间管理、随机数生成等。它还包含了QObject、QCoreApplication、QEvent等类，用于创建和处理应用程序的基本对象和事件。QTcore是QT框架的基础，所有的其他模块都需要依赖QTcore。<br>QTgui是一个用于处理图形用户界面功能的模块。它提供了各种图形组件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。QTgui是QT框架中用于处理图形用户界面功能的模块<br>QML（Qt Quick）：QML是一个用于创建交互式应用程序的编程语言，它提供了一种简单的方式来创建和管理图形用户界面。QML是Qt的跨平台语言，可以在Qt的各种平台上运行。<br>Qt Widgets：Qt Widgets是一个用于创建桌面应用程序的组件库，它提供了基本的GUI组件，如按钮、文本框、复选框等。Qt Widgets与QML一起用于创建应用程序的图形用户界面。<br>Qt Charts：Qt Charts是一个用于创建图表的组件库，它提供了各种图表类型，如折线图、柱状图、饼图等。Qt Charts可以用于创建图表性的数据可视化。<br>Qt Data Visualization：Qt Data Visualization是一个用于创建数据可视化的组件库，它提供了各种图表和图表组件，如散点图、柱状图、饼图等。Qt Data Visualization可以用于创建图表性的数据可视化。<br>Qt Network：Qt Network是一个用于处理网络通信的组件库，它提供了各种网络操作，如创建TCP&#x2F;IP连接、发送和接收数据等。Qt Network可以用于创建网络应用程序。<br>Qt SQL：Qt SQL是一个用于处理数据库操作的组件库，它提供了各种数据库连接和操作，如创建表、插入数据、查询数据等。Qt SQL可以用于创建数据库应用程序。<br>Qt WebEngine：Qt WebEngine是一个用于创建Web浏览器应用程序的组件库。它提供了HTML、CSS和JavaScript引擎，用于渲染和显示Web内容。Qt WebEngine可以用于创建跨平台Web应用程序。<br>Qt Positioning：Qt Positioning是一个用于获取设备位置信息的组件库。它提供了用于定位的QGeoLocation类，用于获取当前位置、提供位置更新等。Qt Positioning可以用于创建定位应用程序。<br>Qt Quick Controls 2：Qt Quick Controls 2是一个用于创建快速、响应式和自定义控件的组件库。它提供了许多预定义的控件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。Qt Quick Controls 2可以用于创建具有自定义风格的图形用户界面。<br>Qt Quick Controls 1：Qt Quick Controls 1是一个用于创建快速、响应式和自定义控件的组件库。它提供了与Qt Quick 1兼容的控件，以及一个用于创建自定义控件的接口。Qt Quick Controls 1可以用于创建具有自定义风格的图形用户界面。</p>\n<p>####4.2 QT框架中的一些全局定义<br>qglobal.h：包含了一些全局定义<br>比如：</p>\n<p>QT_VERSION：表示QT的版本号，例如QT_VERSION(5, 14, 2)。<br>Qt::Alignment：表示对齐方式，例如Qt::AlignLeft。<br>Qt::ButtonRole：表示按钮角色，例如Qt::ButtonRole::AcceptRole。<br>Qt::CheckState：表示复选框状态，例如Qt::CheckState::Checked。<br>Qt::ConnectionType：表示连接类型，例如Qt::ConnectionType::Auto。<br>Qt::DateFormat：表示日期格式，例如Qt::DateFormat::ISO8601。<br>Qt::Key：表示键盘键，例如Qt::Key::Key_A。<br>Qt::Modifier：表示键盘修饰符，例如Qt::Modifier::ShiftModifier。<br>Qt::Orientation：表示方向，例如Qt::Orientation::Horizontal。<br>Qt::Permission：表示权限，例如Qt::Permission::WriteUser。<br>Qt::ScrollBarPolicy：表示滚动条策略，例如Qt::ScrollBarPolicy::ScrollBarAsNeeded。<br>Qt::TextInteractionFlag：表示文本交互标志，例如Qt::TextInteractionFlag::NoTextInteraction。</p>\n<p>在QTglobal.h中，有一些常用的全局函数，例如：</p>\n<p>qint64 qrand()：生成一个随机数。<br>qint64 qsrand(qint64 seed)：设置随机数种子。<br>QString QLocale::language()：获取当前语言。<br>QString QLocale::country()：获取当前国家。<br>QString QLocale::encoding()：获取当前编码。<br>qint64 QDateTime::currentDateTime().toMSecsSinceEpoch()：获取当前日期时间的毫秒数。<br>QDateTime QDateTime::fromMSecsSinceEpoch(qint64 msecsSinceEpoch)：将毫秒数转换为QDateTime对象。<br>QString QDateTime::toPythonString()：将QDateTime对象转换为Python字符串。<br>QDateTime QDateTime::fromPythonString(const QString &amp;str))：将Python字符串转换为QDateTime对象。</p>\n<p>####4.3 QT的元对象系统<br>QT的元对象系统（Meta Object System，MOS）是一种用于处理QObject类的元数据和运行时信息的机制。它提供了动态地创建、查询和销毁QObject子类的接口，使得QT框架可以更好地适应不同的需求和提高代码的可维护性。</p>\n<p>QT的元对象系统主要包含以下几个部分：</p>\n<p>QMetaObject：这是一个基类，用于表示所有类的元对象。它包含了类的元数据，如名称、信号、槽函数、属性等。<br>QObject：这是一个基类，表示所有类的基类。它实现了QMetaObject。<br>QMetaType：这是一个类，用于处理QVariant类型的元数据。<br>QMetaProperty：这是一个类，用于表示类的属性。<br>QMetaMethod：这是一个类，用于表示类的槽函数。<br>QSignal：这是一个类，用于表示信号。<br>QSlot：这是一个类，用于表示槽函数。<br>QT的元对象系统提供了丰富的接口，用于处理QObject类的元数据和运行时信息。以下是一个简单的例子，展示了如何使用元对象系统：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">#<span class=\"hljs-keyword\">include</span> &lt;QObject&gt;<br>#<span class=\"hljs-keyword\">include</span> &lt;QMetaObject&gt;<br>#<span class=\"hljs-keyword\">include</span> &lt;QDebug&gt;<br><br><span class=\"hljs-keyword\">class</span> MyClass : public QObject<br>&#123;<br>   Q_OBJECT<br><br>public:<br>   <span class=\"hljs-constructor\">MyClass()</span> &#123;<br>       q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Constructor called&quot;</span>;<br>   &#125;<br><br>   ~<span class=\"hljs-constructor\">MyClass()</span> &#123;<br>       q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Destructor called&quot;</span>;<br>   &#125;<br><br>public slots:<br>   void my<span class=\"hljs-constructor\">Slot()</span> &#123;<br>       q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;mySlot() called&quot;</span>;<br>   &#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">int</span> main<span class=\"hljs-literal\">()</span> &#123;<br>   MyClass obj;<br><br>   <span class=\"hljs-comment\">// 获取MyClass的元对象</span><br>   QMetaObject metaObj = obj.meta<span class=\"hljs-constructor\">Object()</span>;<br><br>   <span class=\"hljs-comment\">// 获取类的名称</span><br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Class name: &quot;</span> &lt;&lt; metaObj.<span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">Name()</span>;<br><br>   <span class=\"hljs-comment\">// 获取构造函数</span><br>   QMetaMethod constructor = metaObj.constructor(<span class=\"hljs-number\">0</span>);<br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Constructor: &quot;</span> &lt;&lt; constructor.signature<span class=\"hljs-literal\">()</span>;<br><br>   <span class=\"hljs-comment\">// 获取析构函数</span><br>   QMetaMethod destructor = metaObj.<span class=\"hljs-keyword\">method</span>(<span class=\"hljs-string\">&quot;destructor&quot;</span>);<br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Destructor: &quot;</span> &lt;&lt; destructor.signature<span class=\"hljs-literal\">()</span>;<br><br>   <span class=\"hljs-comment\">// 获取mySlot()槽函数</span><br>   QMetaMethod slot = metaObj.<span class=\"hljs-keyword\">method</span>(<span class=\"hljs-string\">&quot;mySlot()&quot;</span>);<br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;mySlot(): &quot;</span> &lt;&lt; slot.signature<span class=\"hljs-literal\">()</span>;<br><br>   return <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个例子展示了如何使用QT的元对象系统获取类的基本信息，例如名称、构造函数、析构函数和槽函数。通过元对象系统，QT可以更好地管理和处理QObject类的元数据和运行时信息，提高代码的可维护性和可扩展性。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<h3 id=\"1、QT介绍\"><a href=\"#1、QT介绍\" class=\"headerlink\" title=\"1、QT介绍\"></a>1、QT介绍</h3><h4 id=\"QT简介\"><a href=\"#QT简介\" class=\"headerlink\" title=\"QT简介\"></a>QT简介</h4><p>QT是一个强大的、开源的图形用户界面（GUI）工具包，由Qtopia项目发展而来，最初由Qtopia软件公司开发，现在由Qt Software公司维护和开发。Qt支持多种操作系统，包括Windows、Linux、Mac OS X和Android等。 Qt具有以下特点：</p>\n<ul>\n<li>跨平台性：Qt可以在多种操作系统和设备上运行，包括桌面系统、移动设备和嵌入式设备。</li>\n<li>高性能：Qt采用了先进的图形渲染技术，可以实现高性能的图形用户界面。</li>\n<li>可扩展性：Qt提供了丰富的API和工具，可以方便地扩展应用程序的功能。</li>\n<li>可维护性：Qt具有良好的可维护性，可以方便地处理各种软件问题和需求变更。</li>\n<li>开源性：Qt是开源软件，可以自由地使用、修改和发布。</li>\n</ul>\n<p>Qt的应用领域包括：</p>\n<ul>\n<li>商业应用：Qt可用于开发各种商业应用程序，包括桌面应用、移动应用和Web应用。 *嵌入式应用：Qt可用于开发各种嵌入式应用，包括汽车电子、医疗设备、工业控制和家电等。</li>\n<li>游戏开发：Qt可用于开发2D和3D游戏，支持多种游戏引擎和渲染技术。</li>\n<li>教育应用：Qt可用于开发各种教育应用，包括学习工具、教学软件和多媒体教室等。</li>\n</ul>\n<h4 id=\"Qt的跨平台开发能力\"><a href=\"#Qt的跨平台开发能力\" class=\"headerlink\" title=\"Qt的跨平台开发能力\"></a>Qt的跨平台开发能力</h4><p>Qt具有强大的跨平台开发能力，可以在多种操作系统和设备上运行，包括Windows、Linux、Mac OS X和Android等。Qt通过使用Qt库和Qt框架，实现了跨平台的统一开发模型，使开发人员可以使用相同的代码和工具在不同平台上开发应用程序。 Qt库提供了一组通用的API，用于创建图形用户界面和处理用户交互。Qt库支持多种渲染引擎，包括Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等，可以根据不同平台和设备选择合适的渲染引擎。 Qt框架提供了一组跨平台的核心功能，包括窗口系统、事件处理、文件系统、网络通信、多媒体支持等。Qt框架通过使用Qt Quick、Qt Quick 2、Qt Style Sheets和Qt SVG等技术，实现了跨平台的统一开发模型。 Qt还提供了一组丰富的工具，包括Qt Designer、Qt Creator、Qt Script等，用于快速开发应用程序和界面。Qt Designer可以用于创建和编辑应用程序的用户界面，Qt Creator可以用于编写和调试应用程序代码，Qt Script可以用于创建自动化脚本和机器学习算法等。</p>\n<h4 id=\"Qt-开源许可\"><a href=\"#Qt-开源许可\" class=\"headerlink\" title=\"Qt 开源许可\"></a>Qt 开源许可</h4><p>Qt Software公司提供了两种不同的许可类型，用于授权Qt软件的使用：</p>\n<ol>\n<li>Qt Professional License：适用于商业应用程序开发，提供了完整的Qt功能和技术支持。Qt Professional License的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt Professional License的授权费用根据所选定的授权期限和授权数量而定。</li>\n<li>Qt Enterprise License：适用于商业应用程序开发和嵌入式设备应用程序开发，提供了完整的Qt功能和技术支持。Qt Enterprise License的授权方式是按照每个设备或每个应用程序进行授权，每个设备或应用程序需要单独授权。Qt Enterprise License的授权费用根据所选定的授权期限和授权数量而定。</li>\n</ol>\n<p>此外，Qt还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。Qt个人开发许可证的授权方式是按照每个开发人员的数量进行授权，每个开发人员需要单独授权。Qt个人开发许可证的授权费用为零。</p>\n<h3 id=\"2、QT安装\"><a href=\"#2、QT安装\" class=\"headerlink\" title=\"2、QT安装\"></a>2、QT安装</h3><p>对于学习QT来说，直接安装最新版就行，可以是体验学习最新功能。</p>\n<p>Qt Software公司目前正在维护和开发的Qt版本是Qt 6.3，该版本是Qt 6的最新稳定版本。Qt 6.3包含了许多新特性和改进，例如：</p>\n<ul>\n<li>新的Qt Quick 2.5.1模块，提供了更多的功能和API。</li>\n<li>新的Qt Quick CSS 2.5.1模块，提供了更多的CSS3支持。</li>\n<li>新的Qt Quick Test 1.5.1模块，提供了更多的自动化测试工具。</li>\n<li>新的Qt Creator 6.3 IDE，提供了更多的开发工具和功能。</li>\n<li>新的Qt Platform Plugins 6.3模块，提供了更多的平台插件支持。</li>\n</ul>\n<p>此外，Qt还提供了许多其他版本，例如Qt 6.2.1、Qt 6.1.2等，可以根据自己的需求选择适合的版本。Qt Software公司还提供了免费的个人开发许可证，适用于个人和非商业用途的应用程序开发。Qt个人开发许可证不提供技术支持和商业应用程序的授权，但可以免费使用Qt库和Qt框架的全部功能。</p>\n<p>以下是在Windows操作系统上安装Qt的步骤：</p>\n<ol>\n<li>下载Qt安装包：访问Qt官方网站（<a href=\"https://www.qt.io/download/%EF%BC%89%EF%BC%8C%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E8%87%AA%E5%B7%B1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84Qt%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E4%BE%8B%E5%A6%82%E2%80%9CQt\">https://www.qt.io/download/），选择适合自己操作系统的Qt安装包，例如“Qt</a> 5.15.2 for Windows x86-64”。</li>\n<li>运行安装包：双击下载的Qt安装包，按照提示进行安装。</li>\n<li>选择安装选项：在安装过程中，可以选择安装Qt库、Qt框架、Qt Designer、Qt Creator等不同组件。如果需要使用Qt Creator进行开发，建议选择安装Qt Creator。</li>\n<li>安装完成：安装完成后，可以在开始菜单中找到Qt相关的应用程序，例如Qt Creator、Qt Designer等。</li>\n</ol>\n<h3 id=\"3、Hello-Word\"><a href=\"#3、Hello-Word\" class=\"headerlink\" title=\"3、Hello Word\"></a>3、Hello Word</h3><p>入门一个新的开发平台，第一步就是先把他跑起来，我们看一下一个经典的hello word。</p>\n<p>使用Qt开发一个显示“Hello Qt”的应用程序，主要有以下步骤：</p>\n<ol>\n<li>打开Qt Creator：打开Qt Creator软件，选择“新建”-&gt;“应用程序”，然后选择“Qt Quick应用程序”模板。</li>\n<li>设计用户界面：在Qt Creator的工具栏中选择“设计”模式，使用Qt Quick Designer工具设计用户界面。在设计好的用户界面中，添加一个文本框，用于显示“Hello Qt”。</li>\n<li>编写代码：在Qt Creator的工具栏中选择“代码”模式，打开应用程序的源代码文件。在文件中添加以下代码：</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cCopy code<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QApplication&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;QLabel&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-function\">QApplication <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(argc, argv)</span></span>;<br><br>    <span class=\"hljs-function\">QLabel <span class=\"hljs-title\">label</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;Hello Qt&quot;</span>)</span></span>;<br><br>    <span class=\"hljs-keyword\">return</span> a.<span class=\"hljs-built_in\">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这段代码使用QApplication类创建应用程序，并使用QLabel类创建一个文本框，用于显示“Hello Qt”。</p>\n<p>运行应用程序：保存源代码文件并运行应用程序。在Qt Creator的工具栏中选择“运行”按钮，或者按下F9键，运行应用程序。应用程序将显示一个文本框，显示“Hello Qt”。</p>\n<p><img src=\"/QT%E7%AC%94%E8%AE%B0.assets/image-20230722235831580.png\" alt=\"image-20230722235831580\"></p>\n<p>在Qt Creator中创建新应用时，可以选择以下三个模式：</p>\n<ol>\n<li>Qt Quick应用程序：使用Qt Quick技术创建一个应用程序，可以快速开发高性能的用户界面。Qt Quick是一个基于Qt库的高性能渲染引擎，可以使用XML语法定义用户界面，并且可以在多种平台上运行。使用Qt Quick应用程序模板可以快速创建一个基于Qt Quick的应用程序，并且可以使用Qt Designer和Qt Creator的代码编辑器来编辑应用程序的用户界面和代码。</li>\n<li>Qt Quick模板应用程序：使用Qt Quick模板创建一个应用程序，可以快速开发一些常见的应用程序模板。Qt Quick模板应用程序模板提供了一些预定义的模板，例如电子表格、日历、图库等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。</li>\n<li>Qt Quick小应用程序：使用Qt Quick小应用程序模板创建一个应用程序，可以快速开发一些小型的、简单的应用程序。Qt Quick小应用程序模板提供了一些预定义的小应用程序模板，例如计时器、时钟、记事本等，可以直接使用这些模板来创建应用程序，可以节省开发时间和精力。</li>\n</ol>\n<p>在Qt开发中，可以使用Qmake或Cmake来构建和管理应用程序。 Qmake是Qt Software公司开发的一种编译工具，用于构建和管理Qt应用程序。Qmake使用Qt库和Qt Designer来生成编译所需的Makefile文件，可以自动处理Qt库和Qt Designer文件之间的依赖关系，使得编译过程更加简单和方便。Qmake可以用于构建Qt应用程序的所有阶段，包括编译、链接和安装等。 Cmake是一种跨平台的编译工具，用于构建和管理C&#x2F;C++应用程序。Cmake使用一种高级语言来描述编译规则和依赖关系，可以自动处理编译器、链接器、库文件等的依赖关系，使得编译过程更加简单和方便。Cmake可以用于构建C&#x2F;C++应用程序的所有阶段，包括编译、链接和安装等。 在Qt开发中，如果需要使用Qt库和Qt Designer来构建应用程序，可以使用Qmake；如果需要使用C&#x2F;C++库和工具来构建应用程序，可以使用Cmake。因此，可以根据自己的需求和经验选择适合的工具来构建和管理应用程序。</p>\n<h3 id=\"4、QT框架\"><a href=\"#4、QT框架\" class=\"headerlink\" title=\"4、QT框架\"></a>4、QT框架</h3><p>####4.1 QT框架中常用的一些模块<br>QTcore是一个基础模块，提供了QT框架的基本功能，如内存管理、线程支持、时间管理、随机数生成等。它还包含了QObject、QCoreApplication、QEvent等类，用于创建和处理应用程序的基本对象和事件。QTcore是QT框架的基础，所有的其他模块都需要依赖QTcore。<br>QTgui是一个用于处理图形用户界面功能的模块。它提供了各种图形组件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。QTgui是QT框架中用于处理图形用户界面功能的模块<br>QML（Qt Quick）：QML是一个用于创建交互式应用程序的编程语言，它提供了一种简单的方式来创建和管理图形用户界面。QML是Qt的跨平台语言，可以在Qt的各种平台上运行。<br>Qt Widgets：Qt Widgets是一个用于创建桌面应用程序的组件库，它提供了基本的GUI组件，如按钮、文本框、复选框等。Qt Widgets与QML一起用于创建应用程序的图形用户界面。<br>Qt Charts：Qt Charts是一个用于创建图表的组件库，它提供了各种图表类型，如折线图、柱状图、饼图等。Qt Charts可以用于创建图表性的数据可视化。<br>Qt Data Visualization：Qt Data Visualization是一个用于创建数据可视化的组件库，它提供了各种图表和图表组件，如散点图、柱状图、饼图等。Qt Data Visualization可以用于创建图表性的数据可视化。<br>Qt Network：Qt Network是一个用于处理网络通信的组件库，它提供了各种网络操作，如创建TCP&#x2F;IP连接、发送和接收数据等。Qt Network可以用于创建网络应用程序。<br>Qt SQL：Qt SQL是一个用于处理数据库操作的组件库，它提供了各种数据库连接和操作，如创建表、插入数据、查询数据等。Qt SQL可以用于创建数据库应用程序。<br>Qt WebEngine：Qt WebEngine是一个用于创建Web浏览器应用程序的组件库。它提供了HTML、CSS和JavaScript引擎，用于渲染和显示Web内容。Qt WebEngine可以用于创建跨平台Web应用程序。<br>Qt Positioning：Qt Positioning是一个用于获取设备位置信息的组件库。它提供了用于定位的QGeoLocation类，用于获取当前位置、提供位置更新等。Qt Positioning可以用于创建定位应用程序。<br>Qt Quick Controls 2：Qt Quick Controls 2是一个用于创建快速、响应式和自定义控件的组件库。它提供了许多预定义的控件，如按钮、文本框、复选框等，以及一个用于创建自定义控件的接口。Qt Quick Controls 2可以用于创建具有自定义风格的图形用户界面。<br>Qt Quick Controls 1：Qt Quick Controls 1是一个用于创建快速、响应式和自定义控件的组件库。它提供了与Qt Quick 1兼容的控件，以及一个用于创建自定义控件的接口。Qt Quick Controls 1可以用于创建具有自定义风格的图形用户界面。</p>\n<p>####4.2 QT框架中的一些全局定义<br>qglobal.h：包含了一些全局定义<br>比如：</p>\n<p>QT_VERSION：表示QT的版本号，例如QT_VERSION(5, 14, 2)。<br>Qt::Alignment：表示对齐方式，例如Qt::AlignLeft。<br>Qt::ButtonRole：表示按钮角色，例如Qt::ButtonRole::AcceptRole。<br>Qt::CheckState：表示复选框状态，例如Qt::CheckState::Checked。<br>Qt::ConnectionType：表示连接类型，例如Qt::ConnectionType::Auto。<br>Qt::DateFormat：表示日期格式，例如Qt::DateFormat::ISO8601。<br>Qt::Key：表示键盘键，例如Qt::Key::Key_A。<br>Qt::Modifier：表示键盘修饰符，例如Qt::Modifier::ShiftModifier。<br>Qt::Orientation：表示方向，例如Qt::Orientation::Horizontal。<br>Qt::Permission：表示权限，例如Qt::Permission::WriteUser。<br>Qt::ScrollBarPolicy：表示滚动条策略，例如Qt::ScrollBarPolicy::ScrollBarAsNeeded。<br>Qt::TextInteractionFlag：表示文本交互标志，例如Qt::TextInteractionFlag::NoTextInteraction。</p>\n<p>在QTglobal.h中，有一些常用的全局函数，例如：</p>\n<p>qint64 qrand()：生成一个随机数。<br>qint64 qsrand(qint64 seed)：设置随机数种子。<br>QString QLocale::language()：获取当前语言。<br>QString QLocale::country()：获取当前国家。<br>QString QLocale::encoding()：获取当前编码。<br>qint64 QDateTime::currentDateTime().toMSecsSinceEpoch()：获取当前日期时间的毫秒数。<br>QDateTime QDateTime::fromMSecsSinceEpoch(qint64 msecsSinceEpoch)：将毫秒数转换为QDateTime对象。<br>QString QDateTime::toPythonString()：将QDateTime对象转换为Python字符串。<br>QDateTime QDateTime::fromPythonString(const QString &amp;str))：将Python字符串转换为QDateTime对象。</p>\n<p>####4.3 QT的元对象系统<br>QT的元对象系统（Meta Object System，MOS）是一种用于处理QObject类的元数据和运行时信息的机制。它提供了动态地创建、查询和销毁QObject子类的接口，使得QT框架可以更好地适应不同的需求和提高代码的可维护性。</p>\n<p>QT的元对象系统主要包含以下几个部分：</p>\n<p>QMetaObject：这是一个基类，用于表示所有类的元对象。它包含了类的元数据，如名称、信号、槽函数、属性等。<br>QObject：这是一个基类，表示所有类的基类。它实现了QMetaObject。<br>QMetaType：这是一个类，用于处理QVariant类型的元数据。<br>QMetaProperty：这是一个类，用于表示类的属性。<br>QMetaMethod：这是一个类，用于表示类的槽函数。<br>QSignal：这是一个类，用于表示信号。<br>QSlot：这是一个类，用于表示槽函数。<br>QT的元对象系统提供了丰富的接口，用于处理QObject类的元数据和运行时信息。以下是一个简单的例子，展示了如何使用元对象系统：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">#<span class=\"hljs-keyword\">include</span> &lt;QObject&gt;<br>#<span class=\"hljs-keyword\">include</span> &lt;QMetaObject&gt;<br>#<span class=\"hljs-keyword\">include</span> &lt;QDebug&gt;<br><br><span class=\"hljs-keyword\">class</span> MyClass : public QObject<br>&#123;<br>   Q_OBJECT<br><br>public:<br>   <span class=\"hljs-constructor\">MyClass()</span> &#123;<br>       q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Constructor called&quot;</span>;<br>   &#125;<br><br>   ~<span class=\"hljs-constructor\">MyClass()</span> &#123;<br>       q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Destructor called&quot;</span>;<br>   &#125;<br><br>public slots:<br>   void my<span class=\"hljs-constructor\">Slot()</span> &#123;<br>       q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;mySlot() called&quot;</span>;<br>   &#125;<br>&#125;;<br><br><span class=\"hljs-built_in\">int</span> main<span class=\"hljs-literal\">()</span> &#123;<br>   MyClass obj;<br><br>   <span class=\"hljs-comment\">// 获取MyClass的元对象</span><br>   QMetaObject metaObj = obj.meta<span class=\"hljs-constructor\">Object()</span>;<br><br>   <span class=\"hljs-comment\">// 获取类的名称</span><br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Class name: &quot;</span> &lt;&lt; metaObj.<span class=\"hljs-keyword\">class</span><span class=\"hljs-constructor\">Name()</span>;<br><br>   <span class=\"hljs-comment\">// 获取构造函数</span><br>   QMetaMethod constructor = metaObj.constructor(<span class=\"hljs-number\">0</span>);<br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Constructor: &quot;</span> &lt;&lt; constructor.signature<span class=\"hljs-literal\">()</span>;<br><br>   <span class=\"hljs-comment\">// 获取析构函数</span><br>   QMetaMethod destructor = metaObj.<span class=\"hljs-keyword\">method</span>(<span class=\"hljs-string\">&quot;destructor&quot;</span>);<br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;Destructor: &quot;</span> &lt;&lt; destructor.signature<span class=\"hljs-literal\">()</span>;<br><br>   <span class=\"hljs-comment\">// 获取mySlot()槽函数</span><br>   QMetaMethod slot = metaObj.<span class=\"hljs-keyword\">method</span>(<span class=\"hljs-string\">&quot;mySlot()&quot;</span>);<br>   q<span class=\"hljs-constructor\">Debug()</span> &lt;&lt; <span class=\"hljs-string\">&quot;mySlot(): &quot;</span> &lt;&lt; slot.signature<span class=\"hljs-literal\">()</span>;<br><br>   return <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个例子展示了如何使用QT的元对象系统获取类的基本信息，例如名称、构造函数、析构函数和槽函数。通过元对象系统，QT可以更好地管理和处理QObject类的元数据和运行时信息，提高代码的可维护性和可扩展性。</p>\n"},{"title":"STM32笔记","author":"杨超","comments":1,"index_img":"/img/reboot.png","excerpt":"STM32笔记","date":"2023-01-20T02:00:00.000Z","updated":"2023-01-20T02:00:00.000Z","sticky":2,"_content":"\n","source":"_posts/编程笔记/STM32笔记.md","raw":"---\ntitle: STM32笔记\ncategories: 嵌入式\ntags: STM32\nauthor: 杨超\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: STM32笔记\ndate: 2023-01-20 10:00:00\nupdated: 2023-01-20 10:00:00\nsticky: 2\n---\n\n","slug":"编程笔记/STM32笔记","published":1,"_id":"clw7v678r000me8lbemve2uw2","layout":"post","photos":[],"link":"","content":"","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":""},{"title":"rt-thread笔记","author":"杨超","comments":1,"index_img":"/img/reboot.png","excerpt":"rt-thread是一个由国内团队打造的rtos","date":"2023-06-01T02:00:00.000Z","updated":"2023-07-01T12:00:00.000Z","sticky":1,"_content":"\nrt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。下面是rt-thread的官网：https://www.rt-thread.org/ \n\n本篇博客用于记录我个人学习rt-thread的思考以及过程。\n\n***\n\n##1、什么是rtos?\n\n\n\n\n## 参考\n[^1]: <rt-thread内核指南>","source":"_posts/编程笔记/rt-thread.md","raw":"---\ntitle: rt-thread笔记\ncategories: 嵌入式\ntags: rtos\nauthor: 杨超\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: rt-thread是一个由国内团队打造的rtos\ndate: 2023-06-01 10:00:00\nupdated: 2023-07-01 20:00:00\nsticky: 1\n---\n\nrt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。下面是rt-thread的官网：https://www.rt-thread.org/ \n\n本篇博客用于记录我个人学习rt-thread的思考以及过程。\n\n***\n\n##1、什么是rtos?\n\n\n\n\n## 参考\n[^1]: <rt-thread内核指南>","slug":"编程笔记/rt-thread","published":1,"_id":"clw7v678t000oe8lb8ax04sq4","layout":"post","photos":[],"link":"","content":"<p>rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。下面是rt-thread的官网：<a href=\"https://www.rt-thread.org/\">https://www.rt-thread.org/</a> </p>\n<p>本篇博客用于记录我个人学习rt-thread的思考以及过程。</p>\n<hr>\n<p>##1、什么是rtos?</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;rt-thread内核指南&gt;\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。下面是rt-thread的官网：<a href=\"https://www.rt-thread.org/\">https://www.rt-thread.org/</a> </p>\n<p>本篇博客用于记录我个人学习rt-thread的思考以及过程。</p>\n<hr>\n<p>##1、什么是rtos?</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;rt-thread内核指南&gt;\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"title":"rthread笔记","author":"Noodles","comments":1,"index_img":"/img/reboot.png","excerpt":"rt-thread是一个由国内团队打造的rtos","date":"2022-09-22T02:00:00.000Z","updated":"2022-09-28T12:00:00.000Z","sticky":3,"_content":"\n现在很多设备都需要智能化，需要接入网络，所以嵌入式开发热度不断增长，但是很多设备上并不适合跑Linux这种重型的操作系统。所以RTOS很好的解决了这些场景的问题。rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。\n\n***\n\n#### rt-thread介绍\n\n##### 1、什么是rtos?\n\n> RTOS（Real Time Operating System）是一种专为嵌入式系统设计的操作系统。它是一种实时性较强的操作系统，能够提供高效的实时任务调度和管理。\n>\n> RTOS的主要特点是实时性、可裁剪性、可靠性、安全性等。它通常采用抢占式调度方式，确保实时任务能够及时得到处理。同时，RTOS还提供了多种内存管理机制，以满足嵌入式系统的不同需求。\n>\n> 在嵌入式系统中，RTOS常被用于管理硬件资源、调度任务、处理中断等操作。它可以提供高效的实时性、可靠性、安全性和可扩展性，是嵌入式系统开发的重要工具之一。\n>\n> 常见的RTOS包括VxWorks、QNX、RTEMS、uC/OS等。这些操作系统都有自己的特点和应用场景，可以根据具体需求选择合适的RTOS进行开发。\n\n以上是文心一言给的答复，我说说我的理解，RTOS全称Real Time Operating System，顾名思义就是实时操作系统。什么叫实时，简单理解就是响应快，在嵌入式领域，尤其是一些简单的嵌入式领域，资源很有限往往flash，内存就几十K，当然它处理的事情往往也较为单一，简单。所以最早的时候其实是跑的裸机，也就是说没有操作系统，系统上电后就是一个while循环然后直接就跑了起来，然后再结合中断处理一些支线任务。然而随着发展，要处理的事情越来越多，裸机就很难管理。但是像Linux，win等系统不能在单片机及其有限的资源下发挥作用。所以一种能提供任务管理，内存管理等基础的功能，同时又不需要占用很多资源的操作系统就能很好的解决此种场景下的问题。\n\n##### 2、一些常见的RTOS\n\n1. VxWorks：VxWorks是风河公司（Wind River）开发的一款嵌入式操作系统，具有高度的可靠性和实时性。\n2. QNX：QNX是一款由加拿大QNX公司开发的嵌入式操作系统，具有响应速度快、小型化、高度可定制性等特点。\n3. RTEMS：RTEMS是一款由美国RTEMS Project Group开发的嵌入式操作系统，具有可移植性、可扩展性、高度实时性等特点。\n4. uC/OS-II：uC/os-II是一款由MicroC/OS-II公司开发的嵌入式操作系统，具有高度的可移植性和可靠性。\n5. eCos：eCos是一款由开放源代码嵌入式系统组织开发的嵌入式操作系统，具有可移植性、可扩展性等特点。\n6. FreeRTOS：FreeRTOS是一款由Real Time Engineers开发的嵌入式操作系统，具有高度可移植性和可靠性。\n7. rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。\n8. 阿里巴巴的YunOS：YunOS是阿里巴巴集团开发的物联网操作系统，致力于为智能设备提供安全、便捷、互联互通的解决方案。\n9. 腾讯的Tencent OS Server：Tencent OS Server是腾讯公司开发的物联网操作系统，致力于为智能设备和应用程序提供高效、稳定、安全的运行环境。\n10. LiteOS是华为发布的轻量级物联网操作系统，它基于微内核架构，具有轻巧、可剪裁、高度安全等特点，适用于各种智能硬件设备。\n11. 等等。。。\n\n实现一个操作系统是又难度，但也不是多难，所以其实有很多的RTOS，但是一个操作系统发展的怎么样，重要的是看它的生态。而这个生态需要好的维护，好的论坛以及更多的开发者投入等等。\n\n##### 3、为什么选择rt-thread来学习？\n\n第二节我们就能看到我们能找到的RTOS很多，甚至你自己可以根据网上的教程自己写一个，我知道的比较好的教程有《30天开发一个操作系统》作者是一个日本的工程师，还有极客时间上有一个操作系统教程，B站也有很多视频教程。但是对于一个工程师，更多的是关注应用，所以稳定性，易用性是重点要考虑的角度。rt-thread作为国内团队开发并维护的开源系统，现在已经在很多设备上运行，而且提供了完善的开发工具链，你可以使用他很容易的开发出产品。而且它提供了可选的版本和丰富的模块，可以完成从简单到复杂各种产品的开发。当然还有一点，这个是一个国内团队开发维护的开源产品，这就意味着它有相对友好的中文文档。当然如果你只是为了学习操作系统的原理以及实现，其实代码简单的FreeRTOS是更好的选择。而且现在已经有很多设备在使用，下面是rt-thread的官网：https://www.rt-thread.org/  想详细了解相关信息可以，在官网进行了解。\n\n##### 4、rt-thread简介\n\n> RT-Thread，全称是 Real Time-Thread，顾名思义，它是一个嵌入式实时多线程操作系统，基本属性之一是支持多任务，允许多个任务同时运行并不意味着处理器在同一时刻真地执行了多个任务。事实上，一个处理器核心在某一时刻只能运行一个任务，由于每次对一个任务的执行时间很短、任务与任务之间通过任务调度器进行非常快速地切换（调度器根据优先级决定此刻该执行的任务），给人造成多个任务在一个时刻同时运行的错觉。在 RT-Thread 系统中，任务通过线程实现的，RT-Thread 中的线程调度器也就是以上提到的任务调度器。\n>\n> RT-Thread 主要采用 C 语言编写，浅显易懂，方便移植。它把面向对象的设计方法应用到实时系统设计中，使得代码风格优雅、架构清晰、系统模块化并且可裁剪性非常好。针对资源受限的微控制器（MCU）系统，可通过方便易用的工具，裁剪出仅需要 3KB Flash、1.2KB RAM 内存资源的 NANO 版本（NANO 是 RT-Thread 官方于 2017 年 7 月份发布的一个极简版内核；而对于资源丰富的物联网设备，RT-Thread 又能使用在线的软件包管理工具，配合系统配置工具实现直观快速的模块化裁剪，无缝地导入丰富的软件功能包，实现类似 Android 的图形界面及触摸滑动效果、智能语音交互效果等复杂功能。\n>\n> 相较于 Linux 操作系统，RT-Thread 体积小，成本低，功耗低、启动快速，除此以外 RT-Thread 还具有实时性高、占用资源小等特点，非常适用于各种资源受限（如成本、功耗限制等）的场合。虽然 32 位 MCU 是它的主要运行平台，实际上很多带有 MMU、基于 ARM9、ARM11 甚至 Cortex-A 系列级别 CPU 的应用处理器在特定应用场合也适合使用 RT-Thread。\n\n以上是rt-thread官方文档的描述，很好的概括了rt-thread的特点。\n\n##### 5、rt-thread的该如何学习\n\n我看到过一个学习方法，总共分为三步：第一步，事前建模，第二部动手实践，第三步事后总结。事前建模就是在学习一个知识前，先明确目的，考虑清楚我学这个是为了干什么，它是怎么实现的？如果是我自己做我会怎么做？ 第二部动手实践就是当学习完一个知识点之后实际的去跑一下，而且尽可能多的去操作，让自己形成感性的认识。之后再总结一下为了做这个事情，作者是怎么做的，和我的想发有啥差异，它这么做的好处是啥，有啥不足，有没有改进的方法，等等。这个方法我认为很适合工程师或者工科的学生使用。\n\n所以具体到rt-thread的学习主要如下：\n\n1. 了解RT-Thread的基本概念和原理：RT-Thread是一种嵌入式实时操作系统，其核心概念包括任务管理、线程调度、内存管理、中断处理等。首先需要了解这些基本概念和原理，以便建立对RT-Thread的总体认识。\n2. 学习RT-Thread的文档和示例：RT-Thread官方提供了详细的文档和示例，包括安装和配置、任务管理、线程调度、内存管理、中断处理等方面的内容。可以通过阅读文档和示例，深入学习RT-Thread的使用方法和技巧。\n3. 实验和实践：通过实验和实践来加深对RT-Thread的理解。可以结合硬件平台和开发板进行实验，例如在树莓派、Arduino等设备上运行RT-Thread，并实现简单的任务和调度。\n4. 了解RT-Thread的社区和资源：RT-Thread的社区是一个很好的学习和交流平台，可以获取最新的RT-Thread信息和教程，以及解决问题的方法和技巧。可以通过加入RT-Thread的社区，与其他开发者交流和学习。\n5. 学习RT-Thread的扩展功能：RT-Thread还提供了一些扩展功能，例如设备驱动程序、网络支持、文件系统等。如果需要使用这些功能，可以通过学习相关的文档和示例来掌握。\n\n##### 6、小结：\n\n前面作为学习rt-thread的前置知识，接下来就要开始正式的进入rt-thread。我们必须先依赖前置知识，对要学习的内容做一个大致了解，从而明确学习目标，建立自己的模型。\n\n\n#### 参考\n\n[^1]: <rt-thread内核指南>","source":"_posts/编程笔记/rtThread.md","raw":"---\ntitle: rthread笔记\ncategories: 操作系统\ntags: rtThread\nauthor: Noodles\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: rt-thread是一个由国内团队打造的rtos\ndate: 2022-09-22 10:00:00\nupdated: 2022-09-28 20:00:00\nsticky: 3\n---\n\n现在很多设备都需要智能化，需要接入网络，所以嵌入式开发热度不断增长，但是很多设备上并不适合跑Linux这种重型的操作系统。所以RTOS很好的解决了这些场景的问题。rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。\n\n***\n\n#### rt-thread介绍\n\n##### 1、什么是rtos?\n\n> RTOS（Real Time Operating System）是一种专为嵌入式系统设计的操作系统。它是一种实时性较强的操作系统，能够提供高效的实时任务调度和管理。\n>\n> RTOS的主要特点是实时性、可裁剪性、可靠性、安全性等。它通常采用抢占式调度方式，确保实时任务能够及时得到处理。同时，RTOS还提供了多种内存管理机制，以满足嵌入式系统的不同需求。\n>\n> 在嵌入式系统中，RTOS常被用于管理硬件资源、调度任务、处理中断等操作。它可以提供高效的实时性、可靠性、安全性和可扩展性，是嵌入式系统开发的重要工具之一。\n>\n> 常见的RTOS包括VxWorks、QNX、RTEMS、uC/OS等。这些操作系统都有自己的特点和应用场景，可以根据具体需求选择合适的RTOS进行开发。\n\n以上是文心一言给的答复，我说说我的理解，RTOS全称Real Time Operating System，顾名思义就是实时操作系统。什么叫实时，简单理解就是响应快，在嵌入式领域，尤其是一些简单的嵌入式领域，资源很有限往往flash，内存就几十K，当然它处理的事情往往也较为单一，简单。所以最早的时候其实是跑的裸机，也就是说没有操作系统，系统上电后就是一个while循环然后直接就跑了起来，然后再结合中断处理一些支线任务。然而随着发展，要处理的事情越来越多，裸机就很难管理。但是像Linux，win等系统不能在单片机及其有限的资源下发挥作用。所以一种能提供任务管理，内存管理等基础的功能，同时又不需要占用很多资源的操作系统就能很好的解决此种场景下的问题。\n\n##### 2、一些常见的RTOS\n\n1. VxWorks：VxWorks是风河公司（Wind River）开发的一款嵌入式操作系统，具有高度的可靠性和实时性。\n2. QNX：QNX是一款由加拿大QNX公司开发的嵌入式操作系统，具有响应速度快、小型化、高度可定制性等特点。\n3. RTEMS：RTEMS是一款由美国RTEMS Project Group开发的嵌入式操作系统，具有可移植性、可扩展性、高度实时性等特点。\n4. uC/OS-II：uC/os-II是一款由MicroC/OS-II公司开发的嵌入式操作系统，具有高度的可移植性和可靠性。\n5. eCos：eCos是一款由开放源代码嵌入式系统组织开发的嵌入式操作系统，具有可移植性、可扩展性等特点。\n6. FreeRTOS：FreeRTOS是一款由Real Time Engineers开发的嵌入式操作系统，具有高度可移植性和可靠性。\n7. rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。\n8. 阿里巴巴的YunOS：YunOS是阿里巴巴集团开发的物联网操作系统，致力于为智能设备提供安全、便捷、互联互通的解决方案。\n9. 腾讯的Tencent OS Server：Tencent OS Server是腾讯公司开发的物联网操作系统，致力于为智能设备和应用程序提供高效、稳定、安全的运行环境。\n10. LiteOS是华为发布的轻量级物联网操作系统，它基于微内核架构，具有轻巧、可剪裁、高度安全等特点，适用于各种智能硬件设备。\n11. 等等。。。\n\n实现一个操作系统是又难度，但也不是多难，所以其实有很多的RTOS，但是一个操作系统发展的怎么样，重要的是看它的生态。而这个生态需要好的维护，好的论坛以及更多的开发者投入等等。\n\n##### 3、为什么选择rt-thread来学习？\n\n第二节我们就能看到我们能找到的RTOS很多，甚至你自己可以根据网上的教程自己写一个，我知道的比较好的教程有《30天开发一个操作系统》作者是一个日本的工程师，还有极客时间上有一个操作系统教程，B站也有很多视频教程。但是对于一个工程师，更多的是关注应用，所以稳定性，易用性是重点要考虑的角度。rt-thread作为国内团队开发并维护的开源系统，现在已经在很多设备上运行，而且提供了完善的开发工具链，你可以使用他很容易的开发出产品。而且它提供了可选的版本和丰富的模块，可以完成从简单到复杂各种产品的开发。当然还有一点，这个是一个国内团队开发维护的开源产品，这就意味着它有相对友好的中文文档。当然如果你只是为了学习操作系统的原理以及实现，其实代码简单的FreeRTOS是更好的选择。而且现在已经有很多设备在使用，下面是rt-thread的官网：https://www.rt-thread.org/  想详细了解相关信息可以，在官网进行了解。\n\n##### 4、rt-thread简介\n\n> RT-Thread，全称是 Real Time-Thread，顾名思义，它是一个嵌入式实时多线程操作系统，基本属性之一是支持多任务，允许多个任务同时运行并不意味着处理器在同一时刻真地执行了多个任务。事实上，一个处理器核心在某一时刻只能运行一个任务，由于每次对一个任务的执行时间很短、任务与任务之间通过任务调度器进行非常快速地切换（调度器根据优先级决定此刻该执行的任务），给人造成多个任务在一个时刻同时运行的错觉。在 RT-Thread 系统中，任务通过线程实现的，RT-Thread 中的线程调度器也就是以上提到的任务调度器。\n>\n> RT-Thread 主要采用 C 语言编写，浅显易懂，方便移植。它把面向对象的设计方法应用到实时系统设计中，使得代码风格优雅、架构清晰、系统模块化并且可裁剪性非常好。针对资源受限的微控制器（MCU）系统，可通过方便易用的工具，裁剪出仅需要 3KB Flash、1.2KB RAM 内存资源的 NANO 版本（NANO 是 RT-Thread 官方于 2017 年 7 月份发布的一个极简版内核；而对于资源丰富的物联网设备，RT-Thread 又能使用在线的软件包管理工具，配合系统配置工具实现直观快速的模块化裁剪，无缝地导入丰富的软件功能包，实现类似 Android 的图形界面及触摸滑动效果、智能语音交互效果等复杂功能。\n>\n> 相较于 Linux 操作系统，RT-Thread 体积小，成本低，功耗低、启动快速，除此以外 RT-Thread 还具有实时性高、占用资源小等特点，非常适用于各种资源受限（如成本、功耗限制等）的场合。虽然 32 位 MCU 是它的主要运行平台，实际上很多带有 MMU、基于 ARM9、ARM11 甚至 Cortex-A 系列级别 CPU 的应用处理器在特定应用场合也适合使用 RT-Thread。\n\n以上是rt-thread官方文档的描述，很好的概括了rt-thread的特点。\n\n##### 5、rt-thread的该如何学习\n\n我看到过一个学习方法，总共分为三步：第一步，事前建模，第二部动手实践，第三步事后总结。事前建模就是在学习一个知识前，先明确目的，考虑清楚我学这个是为了干什么，它是怎么实现的？如果是我自己做我会怎么做？ 第二部动手实践就是当学习完一个知识点之后实际的去跑一下，而且尽可能多的去操作，让自己形成感性的认识。之后再总结一下为了做这个事情，作者是怎么做的，和我的想发有啥差异，它这么做的好处是啥，有啥不足，有没有改进的方法，等等。这个方法我认为很适合工程师或者工科的学生使用。\n\n所以具体到rt-thread的学习主要如下：\n\n1. 了解RT-Thread的基本概念和原理：RT-Thread是一种嵌入式实时操作系统，其核心概念包括任务管理、线程调度、内存管理、中断处理等。首先需要了解这些基本概念和原理，以便建立对RT-Thread的总体认识。\n2. 学习RT-Thread的文档和示例：RT-Thread官方提供了详细的文档和示例，包括安装和配置、任务管理、线程调度、内存管理、中断处理等方面的内容。可以通过阅读文档和示例，深入学习RT-Thread的使用方法和技巧。\n3. 实验和实践：通过实验和实践来加深对RT-Thread的理解。可以结合硬件平台和开发板进行实验，例如在树莓派、Arduino等设备上运行RT-Thread，并实现简单的任务和调度。\n4. 了解RT-Thread的社区和资源：RT-Thread的社区是一个很好的学习和交流平台，可以获取最新的RT-Thread信息和教程，以及解决问题的方法和技巧。可以通过加入RT-Thread的社区，与其他开发者交流和学习。\n5. 学习RT-Thread的扩展功能：RT-Thread还提供了一些扩展功能，例如设备驱动程序、网络支持、文件系统等。如果需要使用这些功能，可以通过学习相关的文档和示例来掌握。\n\n##### 6、小结：\n\n前面作为学习rt-thread的前置知识，接下来就要开始正式的进入rt-thread。我们必须先依赖前置知识，对要学习的内容做一个大致了解，从而明确学习目标，建立自己的模型。\n\n\n#### 参考\n\n[^1]: <rt-thread内核指南>","slug":"编程笔记/rtThread","published":1,"_id":"clw7v678v000se8lberiy3tcm","layout":"post","photos":[],"link":"","content":"<p>现在很多设备都需要智能化，需要接入网络，所以嵌入式开发热度不断增长，但是很多设备上并不适合跑Linux这种重型的操作系统。所以RTOS很好的解决了这些场景的问题。rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。</p>\n<hr>\n<h4 id=\"rt-thread介绍\"><a href=\"#rt-thread介绍\" class=\"headerlink\" title=\"rt-thread介绍\"></a>rt-thread介绍</h4><h5 id=\"1、什么是rtos\"><a href=\"#1、什么是rtos\" class=\"headerlink\" title=\"1、什么是rtos?\"></a>1、什么是rtos?</h5><blockquote>\n<p>RTOS（Real Time Operating System）是一种专为嵌入式系统设计的操作系统。它是一种实时性较强的操作系统，能够提供高效的实时任务调度和管理。</p>\n<p>RTOS的主要特点是实时性、可裁剪性、可靠性、安全性等。它通常采用抢占式调度方式，确保实时任务能够及时得到处理。同时，RTOS还提供了多种内存管理机制，以满足嵌入式系统的不同需求。</p>\n<p>在嵌入式系统中，RTOS常被用于管理硬件资源、调度任务、处理中断等操作。它可以提供高效的实时性、可靠性、安全性和可扩展性，是嵌入式系统开发的重要工具之一。</p>\n<p>常见的RTOS包括VxWorks、QNX、RTEMS、uC&#x2F;OS等。这些操作系统都有自己的特点和应用场景，可以根据具体需求选择合适的RTOS进行开发。</p>\n</blockquote>\n<p>以上是文心一言给的答复，我说说我的理解，RTOS全称Real Time Operating System，顾名思义就是实时操作系统。什么叫实时，简单理解就是响应快，在嵌入式领域，尤其是一些简单的嵌入式领域，资源很有限往往flash，内存就几十K，当然它处理的事情往往也较为单一，简单。所以最早的时候其实是跑的裸机，也就是说没有操作系统，系统上电后就是一个while循环然后直接就跑了起来，然后再结合中断处理一些支线任务。然而随着发展，要处理的事情越来越多，裸机就很难管理。但是像Linux，win等系统不能在单片机及其有限的资源下发挥作用。所以一种能提供任务管理，内存管理等基础的功能，同时又不需要占用很多资源的操作系统就能很好的解决此种场景下的问题。</p>\n<h5 id=\"2、一些常见的RTOS\"><a href=\"#2、一些常见的RTOS\" class=\"headerlink\" title=\"2、一些常见的RTOS\"></a>2、一些常见的RTOS</h5><ol>\n<li>VxWorks：VxWorks是风河公司（Wind River）开发的一款嵌入式操作系统，具有高度的可靠性和实时性。</li>\n<li>QNX：QNX是一款由加拿大QNX公司开发的嵌入式操作系统，具有响应速度快、小型化、高度可定制性等特点。</li>\n<li>RTEMS：RTEMS是一款由美国RTEMS Project Group开发的嵌入式操作系统，具有可移植性、可扩展性、高度实时性等特点。</li>\n<li>uC&#x2F;OS-II：uC&#x2F;os-II是一款由MicroC&#x2F;OS-II公司开发的嵌入式操作系统，具有高度的可移植性和可靠性。</li>\n<li>eCos：eCos是一款由开放源代码嵌入式系统组织开发的嵌入式操作系统，具有可移植性、可扩展性等特点。</li>\n<li>FreeRTOS：FreeRTOS是一款由Real Time Engineers开发的嵌入式操作系统，具有高度可移植性和可靠性。</li>\n<li>rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。</li>\n<li>阿里巴巴的YunOS：YunOS是阿里巴巴集团开发的物联网操作系统，致力于为智能设备提供安全、便捷、互联互通的解决方案。</li>\n<li>腾讯的Tencent OS Server：Tencent OS Server是腾讯公司开发的物联网操作系统，致力于为智能设备和应用程序提供高效、稳定、安全的运行环境。</li>\n<li>LiteOS是华为发布的轻量级物联网操作系统，它基于微内核架构，具有轻巧、可剪裁、高度安全等特点，适用于各种智能硬件设备。</li>\n<li>等等。。。</li>\n</ol>\n<p>实现一个操作系统是又难度，但也不是多难，所以其实有很多的RTOS，但是一个操作系统发展的怎么样，重要的是看它的生态。而这个生态需要好的维护，好的论坛以及更多的开发者投入等等。</p>\n<h5 id=\"3、为什么选择rt-thread来学习？\"><a href=\"#3、为什么选择rt-thread来学习？\" class=\"headerlink\" title=\"3、为什么选择rt-thread来学习？\"></a>3、为什么选择rt-thread来学习？</h5><p>第二节我们就能看到我们能找到的RTOS很多，甚至你自己可以根据网上的教程自己写一个，我知道的比较好的教程有《30天开发一个操作系统》作者是一个日本的工程师，还有极客时间上有一个操作系统教程，B站也有很多视频教程。但是对于一个工程师，更多的是关注应用，所以稳定性，易用性是重点要考虑的角度。rt-thread作为国内团队开发并维护的开源系统，现在已经在很多设备上运行，而且提供了完善的开发工具链，你可以使用他很容易的开发出产品。而且它提供了可选的版本和丰富的模块，可以完成从简单到复杂各种产品的开发。当然还有一点，这个是一个国内团队开发维护的开源产品，这就意味着它有相对友好的中文文档。当然如果你只是为了学习操作系统的原理以及实现，其实代码简单的FreeRTOS是更好的选择。而且现在已经有很多设备在使用，下面是rt-thread的官网：<a href=\"https://www.rt-thread.org/\">https://www.rt-thread.org/</a>  想详细了解相关信息可以，在官网进行了解。</p>\n<h5 id=\"4、rt-thread简介\"><a href=\"#4、rt-thread简介\" class=\"headerlink\" title=\"4、rt-thread简介\"></a>4、rt-thread简介</h5><blockquote>\n<p>RT-Thread，全称是 Real Time-Thread，顾名思义，它是一个嵌入式实时多线程操作系统，基本属性之一是支持多任务，允许多个任务同时运行并不意味着处理器在同一时刻真地执行了多个任务。事实上，一个处理器核心在某一时刻只能运行一个任务，由于每次对一个任务的执行时间很短、任务与任务之间通过任务调度器进行非常快速地切换（调度器根据优先级决定此刻该执行的任务），给人造成多个任务在一个时刻同时运行的错觉。在 RT-Thread 系统中，任务通过线程实现的，RT-Thread 中的线程调度器也就是以上提到的任务调度器。</p>\n<p>RT-Thread 主要采用 C 语言编写，浅显易懂，方便移植。它把面向对象的设计方法应用到实时系统设计中，使得代码风格优雅、架构清晰、系统模块化并且可裁剪性非常好。针对资源受限的微控制器（MCU）系统，可通过方便易用的工具，裁剪出仅需要 3KB Flash、1.2KB RAM 内存资源的 NANO 版本（NANO 是 RT-Thread 官方于 2017 年 7 月份发布的一个极简版内核；而对于资源丰富的物联网设备，RT-Thread 又能使用在线的软件包管理工具，配合系统配置工具实现直观快速的模块化裁剪，无缝地导入丰富的软件功能包，实现类似 Android 的图形界面及触摸滑动效果、智能语音交互效果等复杂功能。</p>\n<p>相较于 Linux 操作系统，RT-Thread 体积小，成本低，功耗低、启动快速，除此以外 RT-Thread 还具有实时性高、占用资源小等特点，非常适用于各种资源受限（如成本、功耗限制等）的场合。虽然 32 位 MCU 是它的主要运行平台，实际上很多带有 MMU、基于 ARM9、ARM11 甚至 Cortex-A 系列级别 CPU 的应用处理器在特定应用场合也适合使用 RT-Thread。</p>\n</blockquote>\n<p>以上是rt-thread官方文档的描述，很好的概括了rt-thread的特点。</p>\n<h5 id=\"5、rt-thread的该如何学习\"><a href=\"#5、rt-thread的该如何学习\" class=\"headerlink\" title=\"5、rt-thread的该如何学习\"></a>5、rt-thread的该如何学习</h5><p>我看到过一个学习方法，总共分为三步：第一步，事前建模，第二部动手实践，第三步事后总结。事前建模就是在学习一个知识前，先明确目的，考虑清楚我学这个是为了干什么，它是怎么实现的？如果是我自己做我会怎么做？ 第二部动手实践就是当学习完一个知识点之后实际的去跑一下，而且尽可能多的去操作，让自己形成感性的认识。之后再总结一下为了做这个事情，作者是怎么做的，和我的想发有啥差异，它这么做的好处是啥，有啥不足，有没有改进的方法，等等。这个方法我认为很适合工程师或者工科的学生使用。</p>\n<p>所以具体到rt-thread的学习主要如下：</p>\n<ol>\n<li>了解RT-Thread的基本概念和原理：RT-Thread是一种嵌入式实时操作系统，其核心概念包括任务管理、线程调度、内存管理、中断处理等。首先需要了解这些基本概念和原理，以便建立对RT-Thread的总体认识。</li>\n<li>学习RT-Thread的文档和示例：RT-Thread官方提供了详细的文档和示例，包括安装和配置、任务管理、线程调度、内存管理、中断处理等方面的内容。可以通过阅读文档和示例，深入学习RT-Thread的使用方法和技巧。</li>\n<li>实验和实践：通过实验和实践来加深对RT-Thread的理解。可以结合硬件平台和开发板进行实验，例如在树莓派、Arduino等设备上运行RT-Thread，并实现简单的任务和调度。</li>\n<li>了解RT-Thread的社区和资源：RT-Thread的社区是一个很好的学习和交流平台，可以获取最新的RT-Thread信息和教程，以及解决问题的方法和技巧。可以通过加入RT-Thread的社区，与其他开发者交流和学习。</li>\n<li>学习RT-Thread的扩展功能：RT-Thread还提供了一些扩展功能，例如设备驱动程序、网络支持、文件系统等。如果需要使用这些功能，可以通过学习相关的文档和示例来掌握。</li>\n</ol>\n<h5 id=\"6、小结：\"><a href=\"#6、小结：\" class=\"headerlink\" title=\"6、小结：\"></a>6、小结：</h5><p>前面作为学习rt-thread的前置知识，接下来就要开始正式的进入rt-thread。我们必须先依赖前置知识，对要学习的内容做一个大致了解，从而明确学习目标，建立自己的模型。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;rt-thread内核指南&gt;\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>现在很多设备都需要智能化，需要接入网络，所以嵌入式开发热度不断增长，但是很多设备上并不适合跑Linux这种重型的操作系统。所以RTOS很好的解决了这些场景的问题。rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。</p>\n<hr>\n<h4 id=\"rt-thread介绍\"><a href=\"#rt-thread介绍\" class=\"headerlink\" title=\"rt-thread介绍\"></a>rt-thread介绍</h4><h5 id=\"1、什么是rtos\"><a href=\"#1、什么是rtos\" class=\"headerlink\" title=\"1、什么是rtos?\"></a>1、什么是rtos?</h5><blockquote>\n<p>RTOS（Real Time Operating System）是一种专为嵌入式系统设计的操作系统。它是一种实时性较强的操作系统，能够提供高效的实时任务调度和管理。</p>\n<p>RTOS的主要特点是实时性、可裁剪性、可靠性、安全性等。它通常采用抢占式调度方式，确保实时任务能够及时得到处理。同时，RTOS还提供了多种内存管理机制，以满足嵌入式系统的不同需求。</p>\n<p>在嵌入式系统中，RTOS常被用于管理硬件资源、调度任务、处理中断等操作。它可以提供高效的实时性、可靠性、安全性和可扩展性，是嵌入式系统开发的重要工具之一。</p>\n<p>常见的RTOS包括VxWorks、QNX、RTEMS、uC&#x2F;OS等。这些操作系统都有自己的特点和应用场景，可以根据具体需求选择合适的RTOS进行开发。</p>\n</blockquote>\n<p>以上是文心一言给的答复，我说说我的理解，RTOS全称Real Time Operating System，顾名思义就是实时操作系统。什么叫实时，简单理解就是响应快，在嵌入式领域，尤其是一些简单的嵌入式领域，资源很有限往往flash，内存就几十K，当然它处理的事情往往也较为单一，简单。所以最早的时候其实是跑的裸机，也就是说没有操作系统，系统上电后就是一个while循环然后直接就跑了起来，然后再结合中断处理一些支线任务。然而随着发展，要处理的事情越来越多，裸机就很难管理。但是像Linux，win等系统不能在单片机及其有限的资源下发挥作用。所以一种能提供任务管理，内存管理等基础的功能，同时又不需要占用很多资源的操作系统就能很好的解决此种场景下的问题。</p>\n<h5 id=\"2、一些常见的RTOS\"><a href=\"#2、一些常见的RTOS\" class=\"headerlink\" title=\"2、一些常见的RTOS\"></a>2、一些常见的RTOS</h5><ol>\n<li>VxWorks：VxWorks是风河公司（Wind River）开发的一款嵌入式操作系统，具有高度的可靠性和实时性。</li>\n<li>QNX：QNX是一款由加拿大QNX公司开发的嵌入式操作系统，具有响应速度快、小型化、高度可定制性等特点。</li>\n<li>RTEMS：RTEMS是一款由美国RTEMS Project Group开发的嵌入式操作系统，具有可移植性、可扩展性、高度实时性等特点。</li>\n<li>uC&#x2F;OS-II：uC&#x2F;os-II是一款由MicroC&#x2F;OS-II公司开发的嵌入式操作系统，具有高度的可移植性和可靠性。</li>\n<li>eCos：eCos是一款由开放源代码嵌入式系统组织开发的嵌入式操作系统，具有可移植性、可扩展性等特点。</li>\n<li>FreeRTOS：FreeRTOS是一款由Real Time Engineers开发的嵌入式操作系统，具有高度可移植性和可靠性。</li>\n<li>rt-thread是一个由国内团队打造的rtos,现在发展很好；有完善的社区和丰富的资料，对于想学习rtos或者想要使用rtos开发的团队或者个人很友好。</li>\n<li>阿里巴巴的YunOS：YunOS是阿里巴巴集团开发的物联网操作系统，致力于为智能设备提供安全、便捷、互联互通的解决方案。</li>\n<li>腾讯的Tencent OS Server：Tencent OS Server是腾讯公司开发的物联网操作系统，致力于为智能设备和应用程序提供高效、稳定、安全的运行环境。</li>\n<li>LiteOS是华为发布的轻量级物联网操作系统，它基于微内核架构，具有轻巧、可剪裁、高度安全等特点，适用于各种智能硬件设备。</li>\n<li>等等。。。</li>\n</ol>\n<p>实现一个操作系统是又难度，但也不是多难，所以其实有很多的RTOS，但是一个操作系统发展的怎么样，重要的是看它的生态。而这个生态需要好的维护，好的论坛以及更多的开发者投入等等。</p>\n<h5 id=\"3、为什么选择rt-thread来学习？\"><a href=\"#3、为什么选择rt-thread来学习？\" class=\"headerlink\" title=\"3、为什么选择rt-thread来学习？\"></a>3、为什么选择rt-thread来学习？</h5><p>第二节我们就能看到我们能找到的RTOS很多，甚至你自己可以根据网上的教程自己写一个，我知道的比较好的教程有《30天开发一个操作系统》作者是一个日本的工程师，还有极客时间上有一个操作系统教程，B站也有很多视频教程。但是对于一个工程师，更多的是关注应用，所以稳定性，易用性是重点要考虑的角度。rt-thread作为国内团队开发并维护的开源系统，现在已经在很多设备上运行，而且提供了完善的开发工具链，你可以使用他很容易的开发出产品。而且它提供了可选的版本和丰富的模块，可以完成从简单到复杂各种产品的开发。当然还有一点，这个是一个国内团队开发维护的开源产品，这就意味着它有相对友好的中文文档。当然如果你只是为了学习操作系统的原理以及实现，其实代码简单的FreeRTOS是更好的选择。而且现在已经有很多设备在使用，下面是rt-thread的官网：<a href=\"https://www.rt-thread.org/\">https://www.rt-thread.org/</a>  想详细了解相关信息可以，在官网进行了解。</p>\n<h5 id=\"4、rt-thread简介\"><a href=\"#4、rt-thread简介\" class=\"headerlink\" title=\"4、rt-thread简介\"></a>4、rt-thread简介</h5><blockquote>\n<p>RT-Thread，全称是 Real Time-Thread，顾名思义，它是一个嵌入式实时多线程操作系统，基本属性之一是支持多任务，允许多个任务同时运行并不意味着处理器在同一时刻真地执行了多个任务。事实上，一个处理器核心在某一时刻只能运行一个任务，由于每次对一个任务的执行时间很短、任务与任务之间通过任务调度器进行非常快速地切换（调度器根据优先级决定此刻该执行的任务），给人造成多个任务在一个时刻同时运行的错觉。在 RT-Thread 系统中，任务通过线程实现的，RT-Thread 中的线程调度器也就是以上提到的任务调度器。</p>\n<p>RT-Thread 主要采用 C 语言编写，浅显易懂，方便移植。它把面向对象的设计方法应用到实时系统设计中，使得代码风格优雅、架构清晰、系统模块化并且可裁剪性非常好。针对资源受限的微控制器（MCU）系统，可通过方便易用的工具，裁剪出仅需要 3KB Flash、1.2KB RAM 内存资源的 NANO 版本（NANO 是 RT-Thread 官方于 2017 年 7 月份发布的一个极简版内核；而对于资源丰富的物联网设备，RT-Thread 又能使用在线的软件包管理工具，配合系统配置工具实现直观快速的模块化裁剪，无缝地导入丰富的软件功能包，实现类似 Android 的图形界面及触摸滑动效果、智能语音交互效果等复杂功能。</p>\n<p>相较于 Linux 操作系统，RT-Thread 体积小，成本低，功耗低、启动快速，除此以外 RT-Thread 还具有实时性高、占用资源小等特点，非常适用于各种资源受限（如成本、功耗限制等）的场合。虽然 32 位 MCU 是它的主要运行平台，实际上很多带有 MMU、基于 ARM9、ARM11 甚至 Cortex-A 系列级别 CPU 的应用处理器在特定应用场合也适合使用 RT-Thread。</p>\n</blockquote>\n<p>以上是rt-thread官方文档的描述，很好的概括了rt-thread的特点。</p>\n<h5 id=\"5、rt-thread的该如何学习\"><a href=\"#5、rt-thread的该如何学习\" class=\"headerlink\" title=\"5、rt-thread的该如何学习\"></a>5、rt-thread的该如何学习</h5><p>我看到过一个学习方法，总共分为三步：第一步，事前建模，第二部动手实践，第三步事后总结。事前建模就是在学习一个知识前，先明确目的，考虑清楚我学这个是为了干什么，它是怎么实现的？如果是我自己做我会怎么做？ 第二部动手实践就是当学习完一个知识点之后实际的去跑一下，而且尽可能多的去操作，让自己形成感性的认识。之后再总结一下为了做这个事情，作者是怎么做的，和我的想发有啥差异，它这么做的好处是啥，有啥不足，有没有改进的方法，等等。这个方法我认为很适合工程师或者工科的学生使用。</p>\n<p>所以具体到rt-thread的学习主要如下：</p>\n<ol>\n<li>了解RT-Thread的基本概念和原理：RT-Thread是一种嵌入式实时操作系统，其核心概念包括任务管理、线程调度、内存管理、中断处理等。首先需要了解这些基本概念和原理，以便建立对RT-Thread的总体认识。</li>\n<li>学习RT-Thread的文档和示例：RT-Thread官方提供了详细的文档和示例，包括安装和配置、任务管理、线程调度、内存管理、中断处理等方面的内容。可以通过阅读文档和示例，深入学习RT-Thread的使用方法和技巧。</li>\n<li>实验和实践：通过实验和实践来加深对RT-Thread的理解。可以结合硬件平台和开发板进行实验，例如在树莓派、Arduino等设备上运行RT-Thread，并实现简单的任务和调度。</li>\n<li>了解RT-Thread的社区和资源：RT-Thread的社区是一个很好的学习和交流平台，可以获取最新的RT-Thread信息和教程，以及解决问题的方法和技巧。可以通过加入RT-Thread的社区，与其他开发者交流和学习。</li>\n<li>学习RT-Thread的扩展功能：RT-Thread还提供了一些扩展功能，例如设备驱动程序、网络支持、文件系统等。如果需要使用这些功能，可以通过学习相关的文档和示例来掌握。</li>\n</ol>\n<h5 id=\"6、小结：\"><a href=\"#6、小结：\" class=\"headerlink\" title=\"6、小结：\"></a>6、小结：</h5><p>前面作为学习rt-thread的前置知识，接下来就要开始正式的进入rt-thread。我们必须先依赖前置知识，对要学习的内容做一个大致了解，从而明确学习目标，建立自己的模型。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;rt-thread内核指南&gt;\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"title":"opencv笔记","author":"Noodles","comments":1,"index_img":"/img/reboot.png","excerpt":"学习QT开发的笔记","date":"2023-07-22T02:00:00.000Z","updated":"2023-08-28T02:00:00.000Z","sticky":1,"_content":"\nopencv笔记\n\n安装：\n\n编译工具\n\n1. sudo apt install g++\n2. sudo apt install cmake\n3. sudo apt install make\n4. sudo apt install wget unzip\n\n依赖库\n\nsudo apt-get install build-essential libgtk2.0-dev libgtk-3-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev\n\n下载指定版本：wget -O opencv.zip https://github.com/opencv/archive/4.5.0.zip\n下载最新版本：wget -O opencv.zip https://github.com/opencv/opencv/archive/master.zip\n\n","source":"_posts/编程笔记/opencv笔记.md","raw":"---\ntitle: opencv笔记\ncategories: opencv\ntags: opencv\nauthor: Noodles\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: 学习QT开发的笔记\ndate: 2023-07-22 10:00:00\nupdated: 2023-08-28 10:00:00\nsticky: 1\n---\n\nopencv笔记\n\n安装：\n\n编译工具\n\n1. sudo apt install g++\n2. sudo apt install cmake\n3. sudo apt install make\n4. sudo apt install wget unzip\n\n依赖库\n\nsudo apt-get install build-essential libgtk2.0-dev libgtk-3-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev\n\n下载指定版本：wget -O opencv.zip https://github.com/opencv/archive/4.5.0.zip\n下载最新版本：wget -O opencv.zip https://github.com/opencv/opencv/archive/master.zip\n\n","slug":"编程笔记/opencv笔记","published":1,"_id":"clw7v678v000ue8lbgy6z0rqo","layout":"post","photos":[],"link":"","content":"<p>opencv笔记</p>\n<p>安装：</p>\n<p>编译工具</p>\n<ol>\n<li>sudo apt install g++</li>\n<li>sudo apt install cmake</li>\n<li>sudo apt install make</li>\n<li>sudo apt install wget unzip</li>\n</ol>\n<p>依赖库</p>\n<p>sudo apt-get install build-essential libgtk2.0-dev libgtk-3-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</p>\n<p>下载指定版本：wget -O opencv.zip <a href=\"https://github.com/opencv/archive/4.5.0.zip\">https://github.com/opencv/archive/4.5.0.zip</a><br>下载最新版本：wget -O opencv.zip <a href=\"https://github.com/opencv/opencv/archive/master.zip\">https://github.com/opencv/opencv/archive/master.zip</a></p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>opencv笔记</p>\n<p>安装：</p>\n<p>编译工具</p>\n<ol>\n<li>sudo apt install g++</li>\n<li>sudo apt install cmake</li>\n<li>sudo apt install make</li>\n<li>sudo apt install wget unzip</li>\n</ol>\n<p>依赖库</p>\n<p>sudo apt-get install build-essential libgtk2.0-dev libgtk-3-dev libavcodec-dev libavformat-dev libjpeg-dev libswscale-dev libtiff5-dev</p>\n<p>下载指定版本：wget -O opencv.zip <a href=\"https://github.com/opencv/archive/4.5.0.zip\">https://github.com/opencv/archive/4.5.0.zip</a><br>下载最新版本：wget -O opencv.zip <a href=\"https://github.com/opencv/opencv/archive/master.zip\">https://github.com/opencv/opencv/archive/master.zip</a></p>\n"},{"title":"rust","author":"Noodles","comments":1,"index_img":"/img/px.png","excerpt":"安全、效率是软件的发展方向","date":"2022-11-22T02:00:00.000Z","updated":"2022-09-28T12:00:00.000Z","_content":"\n## 为什么要学习rust\n\nrust越来越火了，但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：\n\n1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。\n\n2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。\n\n3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。\n\n4 \n\n## 下面是学习rust的一些资料\n\n一个优秀的RUST教程：[Rust语言圣经](https://course.rs/about-book.html)\n\n## rust笔记\n\n完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。\n\nrust常用命令：\n\n```shell\n版本更新：\n$ rustup update\n\n卸载：\n$ rustup self uninstall\n\n查询版本\n$ rustc -V\n\n打开本地文档\n$ rustup doc\n\n编译release版本（运行速度快于debug版本，但编译会变慢）\n$ cargo run --release\n$ cargo build --release\n\n快速的检查一下代码能否编译通过\ncargo check\n```\n\nVscode好用的rust插件：\n\nrust-analyzer\n\n其他推荐的插件\n\n1. `Even Better TOML`，支持 .toml 文件完整特性\n2. `Error Lens`, 更好的获得错误展示\n3. `One Dark Pro`, 非常好看的 VSCode 主题\n4. `CodeLLDB`, Debugger 程序\n\nrust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。\n\n```shell\n项目目录如下\nworld_hello\n.\n├── .git\n├── .gitignore\n├── Cargo.toml\n└── src\n    └── main.rs\n```\n\nhello,word!\n\n```rust\nfn greet_world() {\n    let southern_germany = \"Grüß Gott!\";\n    let chinese = \"世界，你好\";\n    let english = \"World, hello\";\n    let regions = [southern_germany, chinese, english];\n    for region in regions.iter() {\n        println!(\"{}\", &region);\n    }\n}\n\nfn main() {\n    greet_world();\n}\n```\n\n学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。\n\ntips：[解决下载依赖慢的方法](https://course.rs/first-try/slowly-downloading.html)\n\n计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。\n\nrust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。\n\n1、混合编程范式，包含面向对象和函数式编程\n2、语义：所有权，MOVE、COPY、借用、生命周期、DROP\n3、类型系统：泛型、trait、一切皆类型、多态、类型推断\n4、安全内存管理：栈、RAII、堆\n\n对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。\n\n\n\n此处我们简单看一下,代码是如何变成最终的机器码的?我们在一个编辑器写代码,写的就是人可以理解的字符,但是机器是不懂的,机器最终只会执行一堆二进制码,也就是机器码.在我们使用对于的编程语言写完代码后,如果要在硬件上执行,就需要做一定的转换,将代码转化为机器可以识别的二进制码.这就是编译器.编译器需要根据语法规则,将人编写的代码转化为机器码,一般情况下分为,三个大的步骤,编译,链接,优化.\n\nRust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。\n\n现在的编程语言层出不群,从工程角度看,是因为没有一种编程语言可以满足所有的应用场景.比如C语言,灵活强大,但是对于应用层的开发,不能满足快速的应用开发,同时内存安全不能得到保障.\n\nrust似乎是想要做到既要又要,\n\n\n\n\n\n\n\n\n\n","source":"_posts/编程笔记/rust.md","raw":"---\ntitle: rust\ncategories: rust\ntags: rust\nauthor: Noodles\ncomments: true\nindex_img: /img/px.png\nexcerpt: 安全、效率是软件的发展方向\ndate: 2022-11-22 10:00:00\nupdated: 2022-09-28 20:00:00\n---\n\n## 为什么要学习rust\n\nrust越来越火了，但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：\n\n1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。\n\n2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。\n\n3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。\n\n4 \n\n## 下面是学习rust的一些资料\n\n一个优秀的RUST教程：[Rust语言圣经](https://course.rs/about-book.html)\n\n## rust笔记\n\n完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。\n\nrust常用命令：\n\n```shell\n版本更新：\n$ rustup update\n\n卸载：\n$ rustup self uninstall\n\n查询版本\n$ rustc -V\n\n打开本地文档\n$ rustup doc\n\n编译release版本（运行速度快于debug版本，但编译会变慢）\n$ cargo run --release\n$ cargo build --release\n\n快速的检查一下代码能否编译通过\ncargo check\n```\n\nVscode好用的rust插件：\n\nrust-analyzer\n\n其他推荐的插件\n\n1. `Even Better TOML`，支持 .toml 文件完整特性\n2. `Error Lens`, 更好的获得错误展示\n3. `One Dark Pro`, 非常好看的 VSCode 主题\n4. `CodeLLDB`, Debugger 程序\n\nrust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。\n\n```shell\n项目目录如下\nworld_hello\n.\n├── .git\n├── .gitignore\n├── Cargo.toml\n└── src\n    └── main.rs\n```\n\nhello,word!\n\n```rust\nfn greet_world() {\n    let southern_germany = \"Grüß Gott!\";\n    let chinese = \"世界，你好\";\n    let english = \"World, hello\";\n    let regions = [southern_germany, chinese, english];\n    for region in regions.iter() {\n        println!(\"{}\", &region);\n    }\n}\n\nfn main() {\n    greet_world();\n}\n```\n\n学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。\n\ntips：[解决下载依赖慢的方法](https://course.rs/first-try/slowly-downloading.html)\n\n计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。\n\nrust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。\n\n1、混合编程范式，包含面向对象和函数式编程\n2、语义：所有权，MOVE、COPY、借用、生命周期、DROP\n3、类型系统：泛型、trait、一切皆类型、多态、类型推断\n4、安全内存管理：栈、RAII、堆\n\n对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。\n\n\n\n此处我们简单看一下,代码是如何变成最终的机器码的?我们在一个编辑器写代码,写的就是人可以理解的字符,但是机器是不懂的,机器最终只会执行一堆二进制码,也就是机器码.在我们使用对于的编程语言写完代码后,如果要在硬件上执行,就需要做一定的转换,将代码转化为机器可以识别的二进制码.这就是编译器.编译器需要根据语法规则,将人编写的代码转化为机器码,一般情况下分为,三个大的步骤,编译,链接,优化.\n\nRust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。\n\n现在的编程语言层出不群,从工程角度看,是因为没有一种编程语言可以满足所有的应用场景.比如C语言,灵活强大,但是对于应用层的开发,不能满足快速的应用开发,同时内存安全不能得到保障.\n\nrust似乎是想要做到既要又要,\n\n\n\n\n\n\n\n\n\n","slug":"编程笔记/rust","published":1,"_id":"clw7v678z000ye8lbg48q68ux","layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要学习rust\"><a href=\"#为什么要学习rust\" class=\"headerlink\" title=\"为什么要学习rust\"></a>为什么要学习rust</h2><p>rust越来越火了，但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：</p>\n<p>1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。</p>\n<p>2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。</p>\n<p>3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。</p>\n<p>4 </p>\n<h2 id=\"下面是学习rust的一些资料\"><a href=\"#下面是学习rust的一些资料\" class=\"headerlink\" title=\"下面是学习rust的一些资料\"></a>下面是学习rust的一些资料</h2><p>一个优秀的RUST教程：<a href=\"https://course.rs/about-book.html\">Rust语言圣经</a></p>\n<h2 id=\"rust笔记\"><a href=\"#rust笔记\" class=\"headerlink\" title=\"rust笔记\"></a>rust笔记</h2><p>完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。</p>\n<p>rust常用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">版本更新：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup update</span><br><br>卸载：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup self uninstall</span><br><br>查询版本<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustc -V</span><br><br>打开本地文档<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup doc</span><br><br>编译release版本（运行速度快于debug版本，但编译会变慢）<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo run --release</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo build --release</span><br><br>快速的检查一下代码能否编译通过<br>cargo check<br></code></pre></td></tr></table></figure>\n\n<p>Vscode好用的rust插件：</p>\n<p>rust-analyzer</p>\n<p>其他推荐的插件</p>\n<ol>\n<li><code>Even Better TOML</code>，支持 .toml 文件完整特性</li>\n<li><code>Error Lens</code>, 更好的获得错误展示</li>\n<li><code>One Dark Pro</code>, 非常好看的 VSCode 主题</li>\n<li><code>CodeLLDB</code>, Debugger 程序</li>\n</ol>\n<p>rust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">项目目录如下<br>world_hello<br>.<br>├── .git<br>├── .gitignore<br>├── Cargo.toml<br>└── src<br>    └── main.rs<br></code></pre></td></tr></table></figure>\n\n<p>hello,word!</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">greet_world</span>() &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">southern_germany</span> = <span class=\"hljs-string\">&quot;Grüß Gott!&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">chinese</span> = <span class=\"hljs-string\">&quot;世界，你好&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">english</span> = <span class=\"hljs-string\">&quot;World, hello&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">regions</span> = [southern_germany, chinese, english];<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">region</span> <span class=\"hljs-keyword\">in</span> regions.<span class=\"hljs-title function_ invoke__\">iter</span>() &#123;<br>        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, &amp;region);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() &#123;<br>    <span class=\"hljs-title function_ invoke__\">greet_world</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。</p>\n<p>tips：<a href=\"https://course.rs/first-try/slowly-downloading.html\">解决下载依赖慢的方法</a></p>\n<p>计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。</p>\n<p>rust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。</p>\n<p>1、混合编程范式，包含面向对象和函数式编程<br>2、语义：所有权，MOVE、COPY、借用、生命周期、DROP<br>3、类型系统：泛型、trait、一切皆类型、多态、类型推断<br>4、安全内存管理：栈、RAII、堆</p>\n<p>对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。</p>\n<p>此处我们简单看一下,代码是如何变成最终的机器码的?我们在一个编辑器写代码,写的就是人可以理解的字符,但是机器是不懂的,机器最终只会执行一堆二进制码,也就是机器码.在我们使用对于的编程语言写完代码后,如果要在硬件上执行,就需要做一定的转换,将代码转化为机器可以识别的二进制码.这就是编译器.编译器需要根据语法规则,将人编写的代码转化为机器码,一般情况下分为,三个大的步骤,编译,链接,优化.</p>\n<p>Rust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。</p>\n<p>现在的编程语言层出不群,从工程角度看,是因为没有一种编程语言可以满足所有的应用场景.比如C语言,灵活强大,但是对于应用层的开发,不能满足快速的应用开发,同时内存安全不能得到保障.</p>\n<p>rust似乎是想要做到既要又要,</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<h2 id=\"为什么要学习rust\"><a href=\"#为什么要学习rust\" class=\"headerlink\" title=\"为什么要学习rust\"></a>为什么要学习rust</h2><p>rust越来越火了，但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：</p>\n<p>1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。</p>\n<p>2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。</p>\n<p>3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。</p>\n<p>4 </p>\n<h2 id=\"下面是学习rust的一些资料\"><a href=\"#下面是学习rust的一些资料\" class=\"headerlink\" title=\"下面是学习rust的一些资料\"></a>下面是学习rust的一些资料</h2><p>一个优秀的RUST教程：<a href=\"https://course.rs/about-book.html\">Rust语言圣经</a></p>\n<h2 id=\"rust笔记\"><a href=\"#rust笔记\" class=\"headerlink\" title=\"rust笔记\"></a>rust笔记</h2><p>完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。</p>\n<p>rust常用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">版本更新：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup update</span><br><br>卸载：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup self uninstall</span><br><br>查询版本<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustc -V</span><br><br>打开本地文档<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup doc</span><br><br>编译release版本（运行速度快于debug版本，但编译会变慢）<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo run --release</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo build --release</span><br><br>快速的检查一下代码能否编译通过<br>cargo check<br></code></pre></td></tr></table></figure>\n\n<p>Vscode好用的rust插件：</p>\n<p>rust-analyzer</p>\n<p>其他推荐的插件</p>\n<ol>\n<li><code>Even Better TOML</code>，支持 .toml 文件完整特性</li>\n<li><code>Error Lens</code>, 更好的获得错误展示</li>\n<li><code>One Dark Pro</code>, 非常好看的 VSCode 主题</li>\n<li><code>CodeLLDB</code>, Debugger 程序</li>\n</ol>\n<p>rust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">项目目录如下<br>world_hello<br>.<br>├── .git<br>├── .gitignore<br>├── Cargo.toml<br>└── src<br>    └── main.rs<br></code></pre></td></tr></table></figure>\n\n<p>hello,word!</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">greet_world</span>() &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">southern_germany</span> = <span class=\"hljs-string\">&quot;Grüß Gott!&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">chinese</span> = <span class=\"hljs-string\">&quot;世界，你好&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">english</span> = <span class=\"hljs-string\">&quot;World, hello&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">regions</span> = [southern_germany, chinese, english];<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">region</span> <span class=\"hljs-keyword\">in</span> regions.<span class=\"hljs-title function_ invoke__\">iter</span>() &#123;<br>        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, &amp;region);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() &#123;<br>    <span class=\"hljs-title function_ invoke__\">greet_world</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。</p>\n<p>tips：<a href=\"https://course.rs/first-try/slowly-downloading.html\">解决下载依赖慢的方法</a></p>\n<p>计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。</p>\n<p>rust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。</p>\n<p>1、混合编程范式，包含面向对象和函数式编程<br>2、语义：所有权，MOVE、COPY、借用、生命周期、DROP<br>3、类型系统：泛型、trait、一切皆类型、多态、类型推断<br>4、安全内存管理：栈、RAII、堆</p>\n<p>对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。</p>\n<p>此处我们简单看一下,代码是如何变成最终的机器码的?我们在一个编辑器写代码,写的就是人可以理解的字符,但是机器是不懂的,机器最终只会执行一堆二进制码,也就是机器码.在我们使用对于的编程语言写完代码后,如果要在硬件上执行,就需要做一定的转换,将代码转化为机器可以识别的二进制码.这就是编译器.编译器需要根据语法规则,将人编写的代码转化为机器码,一般情况下分为,三个大的步骤,编译,链接,优化.</p>\n<p>Rust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。</p>\n<p>现在的编程语言层出不群,从工程角度看,是因为没有一种编程语言可以满足所有的应用场景.比如C语言,灵活强大,但是对于应用层的开发,不能满足快速的应用开发,同时内存安全不能得到保障.</p>\n<p>rust似乎是想要做到既要又要,</p>\n"},{"title":"手撸一个操作系统","author":"杨超","comments":1,"index_img":"/img/reboot.png","excerpt":"基于RSIC-V的操作系统学习笔记","date":"2023-01-20T02:00:00.000Z","updated":"2023-01-20T02:00:00.000Z","sticky":2,"_content":"\n作为一个程序员，手撸一个操作系统是一项特别有意义的事情。有很多类似的教程《30天开发一个操作系统》，极客时间上也有一门手写一个操作系统的课。最近在了解RSIC-V，刚好在B站刷到，基于RSIC-V的课程，计划进行学习，并自己实现一个简单操作系统，本篇用与记录所学知识。\n\n课程相关资料：\n\nGitHub：[GitHub - plctlab/riscv-operating-system-mooc: 《从头写一个RISC-V OS》课程配套的资源](https://github.com/plctlab/riscv-operating-system-mooc)\n\nGitee ： [riscv-operating-system-mooc: 开放课程《循序渐进，学习开发一个 RISC-V 上的操作系统》配套教材代码仓库。 mirror to https://github.com/plctlab/riscv-operating-system-mooc (gitee.com)](https://gitee.com/unicornx/riscv-operating-system-mooc?_from=gitee_search)\n\n## part1：准备知识\n\n### 1、计算机系统漫游\n\n除了看视频外这个链接可以看一下\n\n[图解系统介绍 | 小林coding (xiaolincoding.com)](https://xiaolincoding.com/os/)\n\n计算机的硬件组成\n\n![image-20230824212717637](手撸一个操作系统.assets/image-20230824212717637.png)\n\n冯诺依曼和哈佛架构\n\n![image-20230824212826832](手撸一个操作系统.assets/image-20230824212826832.png)\n\n冯.诺依曼架构\n(Von Neumann architecture):又称普林斯顿架构\n(Princetion architecture),特点是指令和数据不加区别地存储在存储器中，经由同一个总线传输。优点是总线开销小，控制逻辑实现更简单；缺点是执行效率较低。\n哈佛架构(Harvard architecture):特点是将程序指令和数据分开存储。优点是执行效率较高，缺点是总线开销更大，控制逻辑实现更复杂。\n\n程序的存储和执行\n\n程序的执行主要分为取指，译码，执行\n\n![image-20230824213121458](手撸一个操作系统.assets/image-20230824213121458.png)\n\n编程语言的进化\n\n![image-20230824213356585](手撸一个操作系统.assets/image-20230824213356585.png)\n\n\n\n存储设备的层次结构\n\n![image-20230824213649411](手撸一个操作系统.assets/image-20230824213649411.png)\n\n![image-20230824213704443](手撸一个操作系统.assets/image-20230824213704443.png)\n\n![image-20230824213736098](手撸一个操作系统.assets/image-20230824213736098.png)\n\n\n\n### 2、RISC-V ISA介绍\n\n参考资料：\n\n【参考1】：The RISC-V Instruction SetManual,Volume l:Unprivileged ISA,Document Version 20191213\n【参考2】：The RISC-V Instruction Set Manual,.\nVolume ll:Privileged Architecture,Document\nVersion 20190608-Priv-MSU-Ratified\n【参考3】：RISC-V手册（中文版）：\nhttp://riscvbook.com/chinese/\n\n\n\nISA（instruction set architecture）中文叫做指令集架构，是底层硬件电路面向上层软件提供的一层接口规范。\n\nISA定义了基本数据类型，寄存器，指令，寻址模式，异常或者中断的处理方式等等. \n\n其为上层软件提供一层抽象，制定规则和约束，让编程着不用了解具体的电路结构。\n\nIBM360是第一个讲ISA与其实现分离的计算机\n\n![image-20230824214300676](手撸一个操作系统.assets/image-20230824214300676-16928845828971.png)\n\n\n\nCISI复杂指令集（complex instruction set computing）\n\n针对特定的功能实现特定的指令，所以导致指令数目比较多，但是生成的程序长度较短\n\nRISC精简指令集（reduced instruction set computing）\n\n只定义常用指令集，对复杂的功能采用常用指令集组合实现，指令集数目比较精简，但是生成的程序长度相对较长。\n\n\n\n现在，精简指令集和CISI也逐渐有相互融合的趋势。\n\nISA的宽度\n\n指令集宽度指的是CPU中通用寄存器的宽度（二进制的位数），着决定了寻址范围的大小，以及数据运算的能力。\n\n![image-20230824215242094](手撸一个操作系统.assets/image-20230824215242094.png)\n\n注意：指令集宽度和指令集编码长度无关\n\n一些知名的ISA\n\n![image-20230824215358560](手撸一个操作系统.assets/image-20230824215358560.png)\n\n\n\n\n\n了解了指令集的基本概念我们接下来看看，我们的主角RISC-V ISA\n\n计算机的发展历史中出现了很多指令集架构，但是基本都是由某一个机构或者公司持有，但是在通用计算机软件领域我们都知道，基本所有方向的软件，都会有一款开源软件发展壮大，比如Linux，GCC,MySQL等等\n\n![image-20230824220410033](手撸一个操作系统.assets/image-20230824220410033.png)\n\n对比软件业界的自由与开发，是不是也应该有一个开源的IAS?\n\n这里插播一下我的看法，为什么闭源的软件等发展到一定程度会没落？后续补\n\n\n\nRISC-V 读作“risk-five” 代表着Berkeley所研发的第五代精简指令集。\n\n这个项目2010年开始与加州伯克利分校，最早是希望选择一款ISA用于科研和教学。而经过前期多年的研究和选型，最终决定放弃使用现成的X86和ARM等ISA,而是自己实现一款ISA.\n\n主要是X86和ISA都过于复杂，而且是被商业机构所拥有。\n\nRISC-V最早的研发人员主要有：\n\n![image-20230824221424337](手撸一个操作系统.assets/image-20230824221424337.png)\n\nRISC-V 是一款高质量，免许可，开放的精简指令集。\n\n它的标准由RISC-V基金会维护，该机构是非盈利机构\n\n[RISC-V International – RISC-V: The Open Standard RISC Instruction Set Architecture (riscv.org)](https://riscv.org/)\n\nRISC-V 适用于所有类型的计算机系统，从微控制器到超级计算机\n\nRISC-V 不是一家公司，也不是一款CPU实现\n\nRISC-V 的发展现状\n\n分析机构Semico Research在其近来新发的，名为RSC-V市场分析：新兴市场”的报告中指出，预计到2025年，市场将总共消费624亿个R1SC-VCPU内核，其中预计工业领域将是最大的细分市场，拥有167亿个内核。Semico预测，在包括计算机，消费者，通讯，运输和工业市场在内的细分市场，RISC-VCPU内核的复合年增长率(CAGR)在2018年至2025年之间的平均复合年增长率将高达146.2%\n\nRISC-V成员已经超过700个，分布在全球50个国家，成员信息可以通过以下链接查询\n\n[Members – RISC-V International (riscv.org)](https://riscv.org/members/)\n\nRISC-V的特点\n\n简单，清晰的分层设计，模块化，稳定，社区化\n\n相关规范可以在下面地址下载：\n\n[Specifications – RISC-V International (riscv.org)](https://riscv.org/technical/specifications/)\n\n\n\nRISC-V ISA的命名规范\n\nISA命名格式：RV[###][][###][abc.Xyz]\n,RV:用于标识RISC-V体系架构的前缀，即RISC-V\n的缩写。\n\n[###]:{32,64,128}用于标识处理器的字宽，也就是\n处理器的寄存器的宽度（单位为bt)\n,[abc..xyz]:标识该处理器支持的指令集模块集合。\n例子：RV32IMA,RV64GC\n\n![image-20230824222726212](手撸一个操作系统.assets/image-20230824222726212.png)\n\n\n\n模块化:\n\n![image-20230824222822188](手撸一个操作系统.assets/image-20230824222822188.png)\n\n\n\n![image-20230824222953626](手撸一个操作系统.assets/image-20230824222953626.png)\n\n\n\n![image-20230824223028026](手撸一个操作系统.assets/image-20230824223028026.png)\n\n![image-20230824223125093](手撸一个操作系统.assets/image-20230824223125093.png)\n\n\n\n\"硬件线程\" 是指计算机系统中的硬件线程。硬件线程是处理器内核中的基本线程单元，它们可以被操作系统和应用程序分配和调度。硬件线程可以并行执行多个任务，从而提高计算机系统的性能和效率。在现代计算机系统中，多核处理器通常具有多个硬件线程，这些线程可以共享处理器的资源，并且可以在多个任务之间进行调度。\n\n![image-20230824223717584](手撸一个操作系统.assets/image-20230824223717584.png)\n\n特权级别\n\n![image-20230824223851477](手撸一个操作系统.assets/image-20230824223851477.png)\n\n![image-20230824223930452](手撸一个操作系统.assets/image-20230824223930452.png)\n\n![image-20230824223945391](手撸一个操作系统.assets/image-20230824223945391.png)\n\n![image-20230824224001232](手撸一个操作系统.assets/image-20230824224001232.png)\n\n\n\n### 3、编译与链接\n\n前面两章了解了计算机的硬件组成和操作系统以及指令集，下面我们看以下，我们的代码是怎么变成CPU可执行的二进制文件的。\n\n![image-20230829215232994](手撸一个操作系统.assets/image-20230829215232994.png)\n\n\n\n![image-20230829215308884](手撸一个操作系统.assets/image-20230829215308884.png)\n\n\n\nGCC涉及的文件类型\n\n1. .c:C源文件\n2. cc/.cX/.cpp:C++源文件\n3. i:经过预处理的C源文件\n4. .S/.S:汇编语言源文件\n5. h:头(header)文件\n6. o:目标(object)文件\n7. a/.so：编译后的静态库（archive)文件和共享库(shared object)文件\n8. a.out:可执行文件\n\n\n\n多个文件时候可以使用cmake 管理\n\n![image-20230829215518228](手撸一个操作系统.assets/image-20230829215518228.png)\n\n\n\n​\tELF(executable linkable format)是一种类Linux系统上的二进制文件格式标准\n\n![image-20230829215740035](手撸一个操作系统.assets/image-20230829215740035.png)\n\n\n\n![image-20230829215758026](手撸一个操作系统.assets/image-20230829215758026.png)\n\n\n\n![image-20230829215822277](手撸一个操作系统.assets/image-20230829215822277.png)\n\n\n\n### 4、嵌入式开发介绍\n\n嵌入开发是一种址比较综合性的技术，它不单指纯粹的软件开发技术，也不单是一种硬件配置技术；它是在特定的硬件环境下针对某硬件进行开发，是一种系统级别的与硬件结合比较紧密的软件开发技术\n\n交叉编译\n\n我们把嵌入式开发中用到的机器根据角色分为三类：\n\n构建系统：执行构建编译动作的计算机\n\n主机：运行构建机可执行二进制的系统\n\n目标系统：\n\n![image-20230829220314335](手撸一个操作系统.assets/image-20230829220314335.png)\n\n![image-20230829220330403](手撸一个操作系统.assets/image-20230829220330403.png)\n\nGDB：\n\n![image-20230829220440581](手撸一个操作系统.assets/image-20230829220440581.png)\n\n\n\nQEMU网站：https://www.qemu.org/\n\nQEMU是一套由(Fabrice Bellard)编写的以GPL许可\n证分发源码的计算机系统模拟软件，在GNU/几inux平\n台上使用广泛。\n支持多种体系架构。譬如：1A-32(x86),AMD64,\nMiPS32/64,R1SC-V32/64等等。\nQEMU有两种主要运作模式：\nUser mode:直接运行应用程序。\nSystem mode。模拟整个计算机系统，包括中央处理\n器及其他周边设备。\n\n安装 \n\n• Ubuntu 上 apt install \n\n• 源码编译安装\n\n Ø qemu-system-riscv32 ... -kernel ./test.elf \n\nØ qemu-system-riscv32 ... -kernel ./test.elf -s -S\n\n • -s: “-gdb tcp::1234” 的缩写，启动 gdbserver 并在 1234 端口号上监听客户端 \n\n• -S: 在启动时停止CPU (只有到在客户端键入'c' 才会开 始执行\n\n\n\nCmake:\n\n https://www.gnu.org/software/make/ \n\nØ make 是什么\n\n • make是一种自动化工程管理工具。 Ø Makefile 是什么 \n\n• 配合 make，用于描述构建工程过程中所管理的对象以 及如何构造工程的过程。\n\n Ø make 如何找到 Makefile \n\n• 隐式查找：当前目录下按顺序找寻文件名为 “GNUmakefile” 、 “makefile” 、 “Makefile”的文件\n\n • 显式查找：-f\n\n![image-20230829220831618](手撸一个操作系统.assets/image-20230829220831618.png)\n\n![image-20230829220841660](手撸一个操作系统.assets/image-20230829220841660.png)\n\n![image-20230829220857602](手撸一个操作系统.assets/image-20230829220857602.png)\n\n![image-20230829220934206](手撸一个操作系统.assets/image-20230829220934206.png)\n\n\n\n### 5、RSIC-V汇编语言介绍\n\n【参考 1】：The RISC-V Instruction Set Manual，Volume I: Unprivileged ISA， Document Version 20191213\n\n【参考 2】：Using as： https://sourceware.org/binutils/docs/as/ \n\nmkdir /tools/binutils -p //新建一个安装目录\n\n.configure prefix=/tools/binutils\n\nmake \n\nsudo make install\n\nbinutils工具就安装到/tools/binutils中去了\n\n\n\n【参考 3】：How to Use Inline Assembly Language in C Code： https://gcc.gnu.org/onlinedocs/gcc/Using- Assembly-Language-with-C.htm\n\nRISC-V汇编\n\n一个完整的RISC-V汇编程序有多条语句，一条典型的RISC汇编语句由3部分组成\n\n[label:] [operation] [comment]\n\nlabel(标号)：GUN汇编中，任何以冒号结尾的标识都被认为是个标号\n\noperation 可以有以下多种类型\n\n- instruction（指令）：直接对应二进制机器指令的字符串\n- pseudo-instruction（伪指令）：为提高编写代码的效率，可用用一天伪指令指示汇编器产生实际多条实际的指令（instruction）\n- directive（指示/伪操作）：通过类似指令的形式（以”.“开头），通知汇编器如何控制代码的产生等，不对应具体的指令\n- macro采用.macro/.endm自定义的宏\n\ncomment(注释)：常用方式，”#“开头到当前行结束\n\n\n\n汇编指令操作对象\n\n寄存器\n\n- 33个通用寄存器，X0-X31\n- 在RISC-V中，Hart在执行算数逻辑运算时所操作的数据必须直接来自寄存器\n\n\n\n内存\n\n- Hart可以执行在寄存器和内存之间的数据读写操作\n- 读写操作使用字节（byte）为基本单位进行寻址\n- RV32可以访问最多 2^32 个字节的内存空间\n\n\n\n![image-20230829222922989](手撸一个操作系统.assets/image-20230829222922989.png)\n\n\n\n小端序与大端序\n\n主机字节学：以恶搞多字节整数在计算机内存中存储的字节序称为主机字节序（HBO-host byte order）或者叫本地字节序\n\n不同类型的CPU的HBO不同，这跟CPU的设计有关。分为大端序和小端序。\n\n![image-20230902222148480](手撸一个操作系统.assets/image-20230902222148480.png)\n\n\n\nRISC-V汇编指令编码格式\n\n![image-20230902222334334](手撸一个操作系统.assets/image-20230902222334334.png)\n\n\n\n![image-20230902222508766](手撸一个操作系统.assets/image-20230902222508766-16936647102112.png)\n\n\n\n![image-20230902222532744](手撸一个操作系统.assets/image-20230902222532744.png)\n\n\n\n汇编指令详解\n\n\n\nADD:\n\n![image-20230902222638671](手撸一个操作系统.assets/image-20230902222638671.png)\n\n\n\n\n\n## part2：操作系统实作\n\n### 6、RV OS介绍\n\n参考链接：The RISC-V Instruction Set Manual， Volume II: Privileged Architecture，Document Version 20190608-Priv-MSU-Ratified\n\n![image-20230915214212061](手撸一个操作系统.assets/image-20230915214212061.png)\n\nFreeRTOS（https://www.freertos.org/）是一个很流行的应用在嵌入 式设备上的实时操作系统内核。诞生于 2003 年。采用 MIT 许可证发 布。 • 设计小巧，整个核心代码只有 3 到 4 个 C 文件 • 可读性强，易维护，大部分的代码都是 C 语言编写，很少的部分 采用汇编语言。 • 支持优先级多线程（threads）、互斥锁（mutex）、信号量 （semaphore）和软件计时器（software timer），支持低功耗 处理以及一定程度的内存保护。 • 支持多种平台架构，包括 ARM，x86，RISC-V 等 • 已经被移植到多款微处理器上。\n\nRT-Thread（https://www.rt-thread.org/）“是一个集实时操作系统（RTOS）内核、中 间件组件和开发者社区于一体的技术平台，...... 也是一个组件完整丰富、高度可伸缩、 简易开发、超低功耗、高安全性的物联网操作系统” 。诞生于 2006 年。采用 Apache 2.0 许可证发布。 • 面向对象的实时内核； • 8，32 或 256 个优先级的多线程调度。对于同优先级线程使用时间片轮转调度法； • 提供信号量，也提供互斥信号量以防止优先级反转； • 支持其他高效通信方式，比如邮箱、消息队列和事件标志； • 支持静态内存分配方法，也支持线程安全的动态内存管理； • 对高层应用提供设备框架。 • 支持多种平台架构，包括 ARM, MIPS, X86, Xtensa, C-Sky, RISC-V 等 • 几乎支持市场上所有主流的 MCU 和 Wi-Fi 芯片。\n\nRVOS（https://github.com/plctlab/riscv-operating-system-mooc）是一个用于教 学演示的操作系统内核。诞生于 2021 年。采用 BSD 2-Clause 许可证发布。 • 设计小巧，整个核心有效代码 ~ 1000 行； • 可读性强，易维护，绝大部分代码为 C 语言，很少部分采用汇编； • 演示了简单的内存分配管理实现； • 演示了可抢占多线程调度实现，线程调度采用轮转调度法； • 演示了简单的任务互斥实现； • 演示了软件定时器实现； • 演示了系统调用实现（M + U 模式）； • 支持 RV32； • 支持 QEMU-virt 平台。\n\n### 7、Hello RVOS\n\n### 8、内存管理\n\n### 9、上下文切换\n\n### 10、Trap和Exception\n\n### 11、外设，中断\n\n### 12、硬件定时器\n\n### 13、抢占式多任务\n\n### 14、任务和锁\n\n### 15、软件定时器\n\n### 16、系统调用\n\n","source":"_posts/编程笔记/手撸一个操作系统.md","raw":"---\ntitle: 手撸一个操作系统\ncategories: 笔记\ntags: 操作系统\nauthor: 杨超\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: 基于RSIC-V的操作系统学习笔记\ndate: 2023-01-20 10:00:00\nupdated: 2023-01-20 10:00:00\nsticky: 2\n---\n\n作为一个程序员，手撸一个操作系统是一项特别有意义的事情。有很多类似的教程《30天开发一个操作系统》，极客时间上也有一门手写一个操作系统的课。最近在了解RSIC-V，刚好在B站刷到，基于RSIC-V的课程，计划进行学习，并自己实现一个简单操作系统，本篇用与记录所学知识。\n\n课程相关资料：\n\nGitHub：[GitHub - plctlab/riscv-operating-system-mooc: 《从头写一个RISC-V OS》课程配套的资源](https://github.com/plctlab/riscv-operating-system-mooc)\n\nGitee ： [riscv-operating-system-mooc: 开放课程《循序渐进，学习开发一个 RISC-V 上的操作系统》配套教材代码仓库。 mirror to https://github.com/plctlab/riscv-operating-system-mooc (gitee.com)](https://gitee.com/unicornx/riscv-operating-system-mooc?_from=gitee_search)\n\n## part1：准备知识\n\n### 1、计算机系统漫游\n\n除了看视频外这个链接可以看一下\n\n[图解系统介绍 | 小林coding (xiaolincoding.com)](https://xiaolincoding.com/os/)\n\n计算机的硬件组成\n\n![image-20230824212717637](手撸一个操作系统.assets/image-20230824212717637.png)\n\n冯诺依曼和哈佛架构\n\n![image-20230824212826832](手撸一个操作系统.assets/image-20230824212826832.png)\n\n冯.诺依曼架构\n(Von Neumann architecture):又称普林斯顿架构\n(Princetion architecture),特点是指令和数据不加区别地存储在存储器中，经由同一个总线传输。优点是总线开销小，控制逻辑实现更简单；缺点是执行效率较低。\n哈佛架构(Harvard architecture):特点是将程序指令和数据分开存储。优点是执行效率较高，缺点是总线开销更大，控制逻辑实现更复杂。\n\n程序的存储和执行\n\n程序的执行主要分为取指，译码，执行\n\n![image-20230824213121458](手撸一个操作系统.assets/image-20230824213121458.png)\n\n编程语言的进化\n\n![image-20230824213356585](手撸一个操作系统.assets/image-20230824213356585.png)\n\n\n\n存储设备的层次结构\n\n![image-20230824213649411](手撸一个操作系统.assets/image-20230824213649411.png)\n\n![image-20230824213704443](手撸一个操作系统.assets/image-20230824213704443.png)\n\n![image-20230824213736098](手撸一个操作系统.assets/image-20230824213736098.png)\n\n\n\n### 2、RISC-V ISA介绍\n\n参考资料：\n\n【参考1】：The RISC-V Instruction SetManual,Volume l:Unprivileged ISA,Document Version 20191213\n【参考2】：The RISC-V Instruction Set Manual,.\nVolume ll:Privileged Architecture,Document\nVersion 20190608-Priv-MSU-Ratified\n【参考3】：RISC-V手册（中文版）：\nhttp://riscvbook.com/chinese/\n\n\n\nISA（instruction set architecture）中文叫做指令集架构，是底层硬件电路面向上层软件提供的一层接口规范。\n\nISA定义了基本数据类型，寄存器，指令，寻址模式，异常或者中断的处理方式等等. \n\n其为上层软件提供一层抽象，制定规则和约束，让编程着不用了解具体的电路结构。\n\nIBM360是第一个讲ISA与其实现分离的计算机\n\n![image-20230824214300676](手撸一个操作系统.assets/image-20230824214300676-16928845828971.png)\n\n\n\nCISI复杂指令集（complex instruction set computing）\n\n针对特定的功能实现特定的指令，所以导致指令数目比较多，但是生成的程序长度较短\n\nRISC精简指令集（reduced instruction set computing）\n\n只定义常用指令集，对复杂的功能采用常用指令集组合实现，指令集数目比较精简，但是生成的程序长度相对较长。\n\n\n\n现在，精简指令集和CISI也逐渐有相互融合的趋势。\n\nISA的宽度\n\n指令集宽度指的是CPU中通用寄存器的宽度（二进制的位数），着决定了寻址范围的大小，以及数据运算的能力。\n\n![image-20230824215242094](手撸一个操作系统.assets/image-20230824215242094.png)\n\n注意：指令集宽度和指令集编码长度无关\n\n一些知名的ISA\n\n![image-20230824215358560](手撸一个操作系统.assets/image-20230824215358560.png)\n\n\n\n\n\n了解了指令集的基本概念我们接下来看看，我们的主角RISC-V ISA\n\n计算机的发展历史中出现了很多指令集架构，但是基本都是由某一个机构或者公司持有，但是在通用计算机软件领域我们都知道，基本所有方向的软件，都会有一款开源软件发展壮大，比如Linux，GCC,MySQL等等\n\n![image-20230824220410033](手撸一个操作系统.assets/image-20230824220410033.png)\n\n对比软件业界的自由与开发，是不是也应该有一个开源的IAS?\n\n这里插播一下我的看法，为什么闭源的软件等发展到一定程度会没落？后续补\n\n\n\nRISC-V 读作“risk-five” 代表着Berkeley所研发的第五代精简指令集。\n\n这个项目2010年开始与加州伯克利分校，最早是希望选择一款ISA用于科研和教学。而经过前期多年的研究和选型，最终决定放弃使用现成的X86和ARM等ISA,而是自己实现一款ISA.\n\n主要是X86和ISA都过于复杂，而且是被商业机构所拥有。\n\nRISC-V最早的研发人员主要有：\n\n![image-20230824221424337](手撸一个操作系统.assets/image-20230824221424337.png)\n\nRISC-V 是一款高质量，免许可，开放的精简指令集。\n\n它的标准由RISC-V基金会维护，该机构是非盈利机构\n\n[RISC-V International – RISC-V: The Open Standard RISC Instruction Set Architecture (riscv.org)](https://riscv.org/)\n\nRISC-V 适用于所有类型的计算机系统，从微控制器到超级计算机\n\nRISC-V 不是一家公司，也不是一款CPU实现\n\nRISC-V 的发展现状\n\n分析机构Semico Research在其近来新发的，名为RSC-V市场分析：新兴市场”的报告中指出，预计到2025年，市场将总共消费624亿个R1SC-VCPU内核，其中预计工业领域将是最大的细分市场，拥有167亿个内核。Semico预测，在包括计算机，消费者，通讯，运输和工业市场在内的细分市场，RISC-VCPU内核的复合年增长率(CAGR)在2018年至2025年之间的平均复合年增长率将高达146.2%\n\nRISC-V成员已经超过700个，分布在全球50个国家，成员信息可以通过以下链接查询\n\n[Members – RISC-V International (riscv.org)](https://riscv.org/members/)\n\nRISC-V的特点\n\n简单，清晰的分层设计，模块化，稳定，社区化\n\n相关规范可以在下面地址下载：\n\n[Specifications – RISC-V International (riscv.org)](https://riscv.org/technical/specifications/)\n\n\n\nRISC-V ISA的命名规范\n\nISA命名格式：RV[###][][###][abc.Xyz]\n,RV:用于标识RISC-V体系架构的前缀，即RISC-V\n的缩写。\n\n[###]:{32,64,128}用于标识处理器的字宽，也就是\n处理器的寄存器的宽度（单位为bt)\n,[abc..xyz]:标识该处理器支持的指令集模块集合。\n例子：RV32IMA,RV64GC\n\n![image-20230824222726212](手撸一个操作系统.assets/image-20230824222726212.png)\n\n\n\n模块化:\n\n![image-20230824222822188](手撸一个操作系统.assets/image-20230824222822188.png)\n\n\n\n![image-20230824222953626](手撸一个操作系统.assets/image-20230824222953626.png)\n\n\n\n![image-20230824223028026](手撸一个操作系统.assets/image-20230824223028026.png)\n\n![image-20230824223125093](手撸一个操作系统.assets/image-20230824223125093.png)\n\n\n\n\"硬件线程\" 是指计算机系统中的硬件线程。硬件线程是处理器内核中的基本线程单元，它们可以被操作系统和应用程序分配和调度。硬件线程可以并行执行多个任务，从而提高计算机系统的性能和效率。在现代计算机系统中，多核处理器通常具有多个硬件线程，这些线程可以共享处理器的资源，并且可以在多个任务之间进行调度。\n\n![image-20230824223717584](手撸一个操作系统.assets/image-20230824223717584.png)\n\n特权级别\n\n![image-20230824223851477](手撸一个操作系统.assets/image-20230824223851477.png)\n\n![image-20230824223930452](手撸一个操作系统.assets/image-20230824223930452.png)\n\n![image-20230824223945391](手撸一个操作系统.assets/image-20230824223945391.png)\n\n![image-20230824224001232](手撸一个操作系统.assets/image-20230824224001232.png)\n\n\n\n### 3、编译与链接\n\n前面两章了解了计算机的硬件组成和操作系统以及指令集，下面我们看以下，我们的代码是怎么变成CPU可执行的二进制文件的。\n\n![image-20230829215232994](手撸一个操作系统.assets/image-20230829215232994.png)\n\n\n\n![image-20230829215308884](手撸一个操作系统.assets/image-20230829215308884.png)\n\n\n\nGCC涉及的文件类型\n\n1. .c:C源文件\n2. cc/.cX/.cpp:C++源文件\n3. i:经过预处理的C源文件\n4. .S/.S:汇编语言源文件\n5. h:头(header)文件\n6. o:目标(object)文件\n7. a/.so：编译后的静态库（archive)文件和共享库(shared object)文件\n8. a.out:可执行文件\n\n\n\n多个文件时候可以使用cmake 管理\n\n![image-20230829215518228](手撸一个操作系统.assets/image-20230829215518228.png)\n\n\n\n​\tELF(executable linkable format)是一种类Linux系统上的二进制文件格式标准\n\n![image-20230829215740035](手撸一个操作系统.assets/image-20230829215740035.png)\n\n\n\n![image-20230829215758026](手撸一个操作系统.assets/image-20230829215758026.png)\n\n\n\n![image-20230829215822277](手撸一个操作系统.assets/image-20230829215822277.png)\n\n\n\n### 4、嵌入式开发介绍\n\n嵌入开发是一种址比较综合性的技术，它不单指纯粹的软件开发技术，也不单是一种硬件配置技术；它是在特定的硬件环境下针对某硬件进行开发，是一种系统级别的与硬件结合比较紧密的软件开发技术\n\n交叉编译\n\n我们把嵌入式开发中用到的机器根据角色分为三类：\n\n构建系统：执行构建编译动作的计算机\n\n主机：运行构建机可执行二进制的系统\n\n目标系统：\n\n![image-20230829220314335](手撸一个操作系统.assets/image-20230829220314335.png)\n\n![image-20230829220330403](手撸一个操作系统.assets/image-20230829220330403.png)\n\nGDB：\n\n![image-20230829220440581](手撸一个操作系统.assets/image-20230829220440581.png)\n\n\n\nQEMU网站：https://www.qemu.org/\n\nQEMU是一套由(Fabrice Bellard)编写的以GPL许可\n证分发源码的计算机系统模拟软件，在GNU/几inux平\n台上使用广泛。\n支持多种体系架构。譬如：1A-32(x86),AMD64,\nMiPS32/64,R1SC-V32/64等等。\nQEMU有两种主要运作模式：\nUser mode:直接运行应用程序。\nSystem mode。模拟整个计算机系统，包括中央处理\n器及其他周边设备。\n\n安装 \n\n• Ubuntu 上 apt install \n\n• 源码编译安装\n\n Ø qemu-system-riscv32 ... -kernel ./test.elf \n\nØ qemu-system-riscv32 ... -kernel ./test.elf -s -S\n\n • -s: “-gdb tcp::1234” 的缩写，启动 gdbserver 并在 1234 端口号上监听客户端 \n\n• -S: 在启动时停止CPU (只有到在客户端键入'c' 才会开 始执行\n\n\n\nCmake:\n\n https://www.gnu.org/software/make/ \n\nØ make 是什么\n\n • make是一种自动化工程管理工具。 Ø Makefile 是什么 \n\n• 配合 make，用于描述构建工程过程中所管理的对象以 及如何构造工程的过程。\n\n Ø make 如何找到 Makefile \n\n• 隐式查找：当前目录下按顺序找寻文件名为 “GNUmakefile” 、 “makefile” 、 “Makefile”的文件\n\n • 显式查找：-f\n\n![image-20230829220831618](手撸一个操作系统.assets/image-20230829220831618.png)\n\n![image-20230829220841660](手撸一个操作系统.assets/image-20230829220841660.png)\n\n![image-20230829220857602](手撸一个操作系统.assets/image-20230829220857602.png)\n\n![image-20230829220934206](手撸一个操作系统.assets/image-20230829220934206.png)\n\n\n\n### 5、RSIC-V汇编语言介绍\n\n【参考 1】：The RISC-V Instruction Set Manual，Volume I: Unprivileged ISA， Document Version 20191213\n\n【参考 2】：Using as： https://sourceware.org/binutils/docs/as/ \n\nmkdir /tools/binutils -p //新建一个安装目录\n\n.configure prefix=/tools/binutils\n\nmake \n\nsudo make install\n\nbinutils工具就安装到/tools/binutils中去了\n\n\n\n【参考 3】：How to Use Inline Assembly Language in C Code： https://gcc.gnu.org/onlinedocs/gcc/Using- Assembly-Language-with-C.htm\n\nRISC-V汇编\n\n一个完整的RISC-V汇编程序有多条语句，一条典型的RISC汇编语句由3部分组成\n\n[label:] [operation] [comment]\n\nlabel(标号)：GUN汇编中，任何以冒号结尾的标识都被认为是个标号\n\noperation 可以有以下多种类型\n\n- instruction（指令）：直接对应二进制机器指令的字符串\n- pseudo-instruction（伪指令）：为提高编写代码的效率，可用用一天伪指令指示汇编器产生实际多条实际的指令（instruction）\n- directive（指示/伪操作）：通过类似指令的形式（以”.“开头），通知汇编器如何控制代码的产生等，不对应具体的指令\n- macro采用.macro/.endm自定义的宏\n\ncomment(注释)：常用方式，”#“开头到当前行结束\n\n\n\n汇编指令操作对象\n\n寄存器\n\n- 33个通用寄存器，X0-X31\n- 在RISC-V中，Hart在执行算数逻辑运算时所操作的数据必须直接来自寄存器\n\n\n\n内存\n\n- Hart可以执行在寄存器和内存之间的数据读写操作\n- 读写操作使用字节（byte）为基本单位进行寻址\n- RV32可以访问最多 2^32 个字节的内存空间\n\n\n\n![image-20230829222922989](手撸一个操作系统.assets/image-20230829222922989.png)\n\n\n\n小端序与大端序\n\n主机字节学：以恶搞多字节整数在计算机内存中存储的字节序称为主机字节序（HBO-host byte order）或者叫本地字节序\n\n不同类型的CPU的HBO不同，这跟CPU的设计有关。分为大端序和小端序。\n\n![image-20230902222148480](手撸一个操作系统.assets/image-20230902222148480.png)\n\n\n\nRISC-V汇编指令编码格式\n\n![image-20230902222334334](手撸一个操作系统.assets/image-20230902222334334.png)\n\n\n\n![image-20230902222508766](手撸一个操作系统.assets/image-20230902222508766-16936647102112.png)\n\n\n\n![image-20230902222532744](手撸一个操作系统.assets/image-20230902222532744.png)\n\n\n\n汇编指令详解\n\n\n\nADD:\n\n![image-20230902222638671](手撸一个操作系统.assets/image-20230902222638671.png)\n\n\n\n\n\n## part2：操作系统实作\n\n### 6、RV OS介绍\n\n参考链接：The RISC-V Instruction Set Manual， Volume II: Privileged Architecture，Document Version 20190608-Priv-MSU-Ratified\n\n![image-20230915214212061](手撸一个操作系统.assets/image-20230915214212061.png)\n\nFreeRTOS（https://www.freertos.org/）是一个很流行的应用在嵌入 式设备上的实时操作系统内核。诞生于 2003 年。采用 MIT 许可证发 布。 • 设计小巧，整个核心代码只有 3 到 4 个 C 文件 • 可读性强，易维护，大部分的代码都是 C 语言编写，很少的部分 采用汇编语言。 • 支持优先级多线程（threads）、互斥锁（mutex）、信号量 （semaphore）和软件计时器（software timer），支持低功耗 处理以及一定程度的内存保护。 • 支持多种平台架构，包括 ARM，x86，RISC-V 等 • 已经被移植到多款微处理器上。\n\nRT-Thread（https://www.rt-thread.org/）“是一个集实时操作系统（RTOS）内核、中 间件组件和开发者社区于一体的技术平台，...... 也是一个组件完整丰富、高度可伸缩、 简易开发、超低功耗、高安全性的物联网操作系统” 。诞生于 2006 年。采用 Apache 2.0 许可证发布。 • 面向对象的实时内核； • 8，32 或 256 个优先级的多线程调度。对于同优先级线程使用时间片轮转调度法； • 提供信号量，也提供互斥信号量以防止优先级反转； • 支持其他高效通信方式，比如邮箱、消息队列和事件标志； • 支持静态内存分配方法，也支持线程安全的动态内存管理； • 对高层应用提供设备框架。 • 支持多种平台架构，包括 ARM, MIPS, X86, Xtensa, C-Sky, RISC-V 等 • 几乎支持市场上所有主流的 MCU 和 Wi-Fi 芯片。\n\nRVOS（https://github.com/plctlab/riscv-operating-system-mooc）是一个用于教 学演示的操作系统内核。诞生于 2021 年。采用 BSD 2-Clause 许可证发布。 • 设计小巧，整个核心有效代码 ~ 1000 行； • 可读性强，易维护，绝大部分代码为 C 语言，很少部分采用汇编； • 演示了简单的内存分配管理实现； • 演示了可抢占多线程调度实现，线程调度采用轮转调度法； • 演示了简单的任务互斥实现； • 演示了软件定时器实现； • 演示了系统调用实现（M + U 模式）； • 支持 RV32； • 支持 QEMU-virt 平台。\n\n### 7、Hello RVOS\n\n### 8、内存管理\n\n### 9、上下文切换\n\n### 10、Trap和Exception\n\n### 11、外设，中断\n\n### 12、硬件定时器\n\n### 13、抢占式多任务\n\n### 14、任务和锁\n\n### 15、软件定时器\n\n### 16、系统调用\n\n","slug":"编程笔记/手撸一个操作系统","published":1,"_id":"clw7v67900010e8lbbiqj4mdl","layout":"post","photos":[],"link":"","content":"<p>作为一个程序员，手撸一个操作系统是一项特别有意义的事情。有很多类似的教程《30天开发一个操作系统》，极客时间上也有一门手写一个操作系统的课。最近在了解RSIC-V，刚好在B站刷到，基于RSIC-V的课程，计划进行学习，并自己实现一个简单操作系统，本篇用与记录所学知识。</p>\n<p>课程相关资料：</p>\n<p>GitHub：<a href=\"https://github.com/plctlab/riscv-operating-system-mooc\">GitHub - plctlab&#x2F;riscv-operating-system-mooc: 《从头写一个RISC-V OS》课程配套的资源</a></p>\n<p>Gitee ： <a href=\"https://gitee.com/unicornx/riscv-operating-system-mooc?_from=gitee_search\">riscv-operating-system-mooc: 开放课程《循序渐进，学习开发一个 RISC-V 上的操作系统》配套教材代码仓库。 mirror to https://github.com/plctlab/riscv-operating-system-mooc (gitee.com)</a></p>\n<h2 id=\"part1：准备知识\"><a href=\"#part1：准备知识\" class=\"headerlink\" title=\"part1：准备知识\"></a>part1：准备知识</h2><h3 id=\"1、计算机系统漫游\"><a href=\"#1、计算机系统漫游\" class=\"headerlink\" title=\"1、计算机系统漫游\"></a>1、计算机系统漫游</h3><p>除了看视频外这个链接可以看一下</p>\n<p><a href=\"https://xiaolincoding.com/os/\">图解系统介绍 | 小林coding (xiaolincoding.com)</a></p>\n<p>计算机的硬件组成</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824212717637.png\" alt=\"image-20230824212717637\"></p>\n<p>冯诺依曼和哈佛架构</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824212826832.png\" alt=\"image-20230824212826832\"></p>\n<p>冯.诺依曼架构<br>(Von Neumann architecture):又称普林斯顿架构<br>(Princetion architecture),特点是指令和数据不加区别地存储在存储器中，经由同一个总线传输。优点是总线开销小，控制逻辑实现更简单；缺点是执行效率较低。<br>哈佛架构(Harvard architecture):特点是将程序指令和数据分开存储。优点是执行效率较高，缺点是总线开销更大，控制逻辑实现更复杂。</p>\n<p>程序的存储和执行</p>\n<p>程序的执行主要分为取指，译码，执行</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213121458.png\" alt=\"image-20230824213121458\"></p>\n<p>编程语言的进化</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213356585.png\" alt=\"image-20230824213356585\"></p>\n<p>存储设备的层次结构</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213649411.png\" alt=\"image-20230824213649411\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213704443.png\" alt=\"image-20230824213704443\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213736098.png\" alt=\"image-20230824213736098\"></p>\n<h3 id=\"2、RISC-V-ISA介绍\"><a href=\"#2、RISC-V-ISA介绍\" class=\"headerlink\" title=\"2、RISC-V ISA介绍\"></a>2、RISC-V ISA介绍</h3><p>参考资料：</p>\n<p>【参考1】：The RISC-V Instruction SetManual,Volume l:Unprivileged ISA,Document Version 20191213<br>【参考2】：The RISC-V Instruction Set Manual,.<br>Volume ll:Privileged Architecture,Document<br>Version 20190608-Priv-MSU-Ratified<br>【参考3】：RISC-V手册（中文版）：<br><a href=\"http://riscvbook.com/chinese/\">http://riscvbook.com/chinese/</a></p>\n<p>ISA（instruction set architecture）中文叫做指令集架构，是底层硬件电路面向上层软件提供的一层接口规范。</p>\n<p>ISA定义了基本数据类型，寄存器，指令，寻址模式，异常或者中断的处理方式等等. </p>\n<p>其为上层软件提供一层抽象，制定规则和约束，让编程着不用了解具体的电路结构。</p>\n<p>IBM360是第一个讲ISA与其实现分离的计算机</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824214300676-16928845828971.png\" alt=\"image-20230824214300676\"></p>\n<p>CISI复杂指令集（complex instruction set computing）</p>\n<p>针对特定的功能实现特定的指令，所以导致指令数目比较多，但是生成的程序长度较短</p>\n<p>RISC精简指令集（reduced instruction set computing）</p>\n<p>只定义常用指令集，对复杂的功能采用常用指令集组合实现，指令集数目比较精简，但是生成的程序长度相对较长。</p>\n<p>现在，精简指令集和CISI也逐渐有相互融合的趋势。</p>\n<p>ISA的宽度</p>\n<p>指令集宽度指的是CPU中通用寄存器的宽度（二进制的位数），着决定了寻址范围的大小，以及数据运算的能力。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824215242094.png\" alt=\"image-20230824215242094\"></p>\n<p>注意：指令集宽度和指令集编码长度无关</p>\n<p>一些知名的ISA</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824215358560.png\" alt=\"image-20230824215358560\"></p>\n<p>了解了指令集的基本概念我们接下来看看，我们的主角RISC-V ISA</p>\n<p>计算机的发展历史中出现了很多指令集架构，但是基本都是由某一个机构或者公司持有，但是在通用计算机软件领域我们都知道，基本所有方向的软件，都会有一款开源软件发展壮大，比如Linux，GCC,MySQL等等</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824220410033.png\" alt=\"image-20230824220410033\"></p>\n<p>对比软件业界的自由与开发，是不是也应该有一个开源的IAS?</p>\n<p>这里插播一下我的看法，为什么闭源的软件等发展到一定程度会没落？后续补</p>\n<p>RISC-V 读作“risk-five” 代表着Berkeley所研发的第五代精简指令集。</p>\n<p>这个项目2010年开始与加州伯克利分校，最早是希望选择一款ISA用于科研和教学。而经过前期多年的研究和选型，最终决定放弃使用现成的X86和ARM等ISA,而是自己实现一款ISA.</p>\n<p>主要是X86和ISA都过于复杂，而且是被商业机构所拥有。</p>\n<p>RISC-V最早的研发人员主要有：</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824221424337.png\" alt=\"image-20230824221424337\"></p>\n<p>RISC-V 是一款高质量，免许可，开放的精简指令集。</p>\n<p>它的标准由RISC-V基金会维护，该机构是非盈利机构</p>\n<p><a href=\"https://riscv.org/\">RISC-V International – RISC-V: The Open Standard RISC Instruction Set Architecture (riscv.org)</a></p>\n<p>RISC-V 适用于所有类型的计算机系统，从微控制器到超级计算机</p>\n<p>RISC-V 不是一家公司，也不是一款CPU实现</p>\n<p>RISC-V 的发展现状</p>\n<p>分析机构Semico Research在其近来新发的，名为RSC-V市场分析：新兴市场”的报告中指出，预计到2025年，市场将总共消费624亿个R1SC-VCPU内核，其中预计工业领域将是最大的细分市场，拥有167亿个内核。Semico预测，在包括计算机，消费者，通讯，运输和工业市场在内的细分市场，RISC-VCPU内核的复合年增长率(CAGR)在2018年至2025年之间的平均复合年增长率将高达146.2%</p>\n<p>RISC-V成员已经超过700个，分布在全球50个国家，成员信息可以通过以下链接查询</p>\n<p><a href=\"https://riscv.org/members/\">Members – RISC-V International (riscv.org)</a></p>\n<p>RISC-V的特点</p>\n<p>简单，清晰的分层设计，模块化，稳定，社区化</p>\n<p>相关规范可以在下面地址下载：</p>\n<p><a href=\"https://riscv.org/technical/specifications/\">Specifications – RISC-V International (riscv.org)</a></p>\n<p>RISC-V ISA的命名规范</p>\n<p>ISA命名格式：RV<a href=\"%7B32,64,128%7D%E7%94%A8%E4%BA%8E%E6%A0%87%E8%AF%86%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%AD%97%E5%AE%BD%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF\">###</a>[###][abc.Xyz]<br>,RV:用于标识RISC-V体系架构的前缀，即RISC-V<br>的缩写。</p>\n<p>处理器的寄存器的宽度（单位为bt)<br>,[abc..xyz]:标识该处理器支持的指令集模块集合。<br>例子：RV32IMA,RV64GC</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824222726212.png\" alt=\"image-20230824222726212\"></p>\n<p>模块化:</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824222822188.png\" alt=\"image-20230824222822188\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824222953626.png\" alt=\"image-20230824222953626\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223028026.png\" alt=\"image-20230824223028026\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223125093.png\" alt=\"image-20230824223125093\"></p>\n<p>“硬件线程” 是指计算机系统中的硬件线程。硬件线程是处理器内核中的基本线程单元，它们可以被操作系统和应用程序分配和调度。硬件线程可以并行执行多个任务，从而提高计算机系统的性能和效率。在现代计算机系统中，多核处理器通常具有多个硬件线程，这些线程可以共享处理器的资源，并且可以在多个任务之间进行调度。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223717584.png\" alt=\"image-20230824223717584\"></p>\n<p>特权级别</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223851477.png\" alt=\"image-20230824223851477\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223930452.png\" alt=\"image-20230824223930452\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223945391.png\" alt=\"image-20230824223945391\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824224001232.png\" alt=\"image-20230824224001232\"></p>\n<h3 id=\"3、编译与链接\"><a href=\"#3、编译与链接\" class=\"headerlink\" title=\"3、编译与链接\"></a>3、编译与链接</h3><p>前面两章了解了计算机的硬件组成和操作系统以及指令集，下面我们看以下，我们的代码是怎么变成CPU可执行的二进制文件的。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215232994.png\" alt=\"image-20230829215232994\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215308884.png\" alt=\"image-20230829215308884\"></p>\n<p>GCC涉及的文件类型</p>\n<ol>\n<li>.c:C源文件</li>\n<li>cc&#x2F;.cX&#x2F;.cpp:C++源文件</li>\n<li>i:经过预处理的C源文件</li>\n<li>.S&#x2F;.S:汇编语言源文件</li>\n<li>h:头(header)文件</li>\n<li>o:目标(object)文件</li>\n<li>a&#x2F;.so：编译后的静态库（archive)文件和共享库(shared object)文件</li>\n<li>a.out:可执行文件</li>\n</ol>\n<p>多个文件时候可以使用cmake 管理</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215518228.png\" alt=\"image-20230829215518228\"></p>\n<p>​\tELF(executable linkable format)是一种类Linux系统上的二进制文件格式标准</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215740035.png\" alt=\"image-20230829215740035\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215758026.png\" alt=\"image-20230829215758026\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215822277.png\" alt=\"image-20230829215822277\"></p>\n<h3 id=\"4、嵌入式开发介绍\"><a href=\"#4、嵌入式开发介绍\" class=\"headerlink\" title=\"4、嵌入式开发介绍\"></a>4、嵌入式开发介绍</h3><p>嵌入开发是一种址比较综合性的技术，它不单指纯粹的软件开发技术，也不单是一种硬件配置技术；它是在特定的硬件环境下针对某硬件进行开发，是一种系统级别的与硬件结合比较紧密的软件开发技术</p>\n<p>交叉编译</p>\n<p>我们把嵌入式开发中用到的机器根据角色分为三类：</p>\n<p>构建系统：执行构建编译动作的计算机</p>\n<p>主机：运行构建机可执行二进制的系统</p>\n<p>目标系统：</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220314335.png\" alt=\"image-20230829220314335\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220330403.png\" alt=\"image-20230829220330403\"></p>\n<p>GDB：</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220440581.png\" alt=\"image-20230829220440581\"></p>\n<p>QEMU网站：<a href=\"https://www.qemu.org/\">https://www.qemu.org/</a></p>\n<p>QEMU是一套由(Fabrice Bellard)编写的以GPL许可<br>证分发源码的计算机系统模拟软件，在GNU&#x2F;几inux平<br>台上使用广泛。<br>支持多种体系架构。譬如：1A-32(x86),AMD64,<br>MiPS32&#x2F;64,R1SC-V32&#x2F;64等等。<br>QEMU有两种主要运作模式：<br>User mode:直接运行应用程序。<br>System mode。模拟整个计算机系统，包括中央处理<br>器及其他周边设备。</p>\n<p>安装 </p>\n<p>• Ubuntu 上 apt install </p>\n<p>• 源码编译安装</p>\n<p> Ø qemu-system-riscv32 … -kernel .&#x2F;test.elf </p>\n<p>Ø qemu-system-riscv32 … -kernel .&#x2F;test.elf -s -S</p>\n<p> • -s: “-gdb tcp::1234” 的缩写，启动 gdbserver 并在 1234 端口号上监听客户端 </p>\n<p>• -S: 在启动时停止CPU (只有到在客户端键入’c’ 才会开 始执行</p>\n<p>Cmake:</p>\n<p> <a href=\"https://www.gnu.org/software/make/\">https://www.gnu.org/software/make/</a> </p>\n<p>Ø make 是什么</p>\n<p> • make是一种自动化工程管理工具。 Ø Makefile 是什么 </p>\n<p>• 配合 make，用于描述构建工程过程中所管理的对象以 及如何构造工程的过程。</p>\n<p> Ø make 如何找到 Makefile </p>\n<p>• 隐式查找：当前目录下按顺序找寻文件名为 “GNUmakefile” 、 “makefile” 、 “Makefile”的文件</p>\n<p> • 显式查找：-f</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220831618.png\" alt=\"image-20230829220831618\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220841660.png\" alt=\"image-20230829220841660\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220857602.png\" alt=\"image-20230829220857602\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220934206.png\" alt=\"image-20230829220934206\"></p>\n<h3 id=\"5、RSIC-V汇编语言介绍\"><a href=\"#5、RSIC-V汇编语言介绍\" class=\"headerlink\" title=\"5、RSIC-V汇编语言介绍\"></a>5、RSIC-V汇编语言介绍</h3><p>【参考 1】：The RISC-V Instruction Set Manual，Volume I: Unprivileged ISA， Document Version 20191213</p>\n<p>【参考 2】：Using as： <a href=\"https://sourceware.org/binutils/docs/as/\">https://sourceware.org/binutils/docs/as/</a> </p>\n<p>mkdir &#x2F;tools&#x2F;binutils -p &#x2F;&#x2F;新建一个安装目录</p>\n<p>.configure prefix&#x3D;&#x2F;tools&#x2F;binutils</p>\n<p>make </p>\n<p>sudo make install</p>\n<p>binutils工具就安装到&#x2F;tools&#x2F;binutils中去了</p>\n<p>【参考 3】：How to Use Inline Assembly Language in C Code： <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Using-\">https://gcc.gnu.org/onlinedocs/gcc/Using-</a> Assembly-Language-with-C.htm</p>\n<p>RISC-V汇编</p>\n<p>一个完整的RISC-V汇编程序有多条语句，一条典型的RISC汇编语句由3部分组成</p>\n<p>[label:] [operation] [comment]</p>\n<p>label(标号)：GUN汇编中，任何以冒号结尾的标识都被认为是个标号</p>\n<p>operation 可以有以下多种类型</p>\n<ul>\n<li>instruction（指令）：直接对应二进制机器指令的字符串</li>\n<li>pseudo-instruction（伪指令）：为提高编写代码的效率，可用用一天伪指令指示汇编器产生实际多条实际的指令（instruction）</li>\n<li>directive（指示&#x2F;伪操作）：通过类似指令的形式（以”.“开头），通知汇编器如何控制代码的产生等，不对应具体的指令</li>\n<li>macro采用.macro&#x2F;.endm自定义的宏</li>\n</ul>\n<p>comment(注释)：常用方式，”#“开头到当前行结束</p>\n<p>汇编指令操作对象</p>\n<p>寄存器</p>\n<ul>\n<li>33个通用寄存器，X0-X31</li>\n<li>在RISC-V中，Hart在执行算数逻辑运算时所操作的数据必须直接来自寄存器</li>\n</ul>\n<p>内存</p>\n<ul>\n<li>Hart可以执行在寄存器和内存之间的数据读写操作</li>\n<li>读写操作使用字节（byte）为基本单位进行寻址</li>\n<li>RV32可以访问最多 2^32 个字节的内存空间</li>\n</ul>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829222922989.png\" alt=\"image-20230829222922989\"></p>\n<p>小端序与大端序</p>\n<p>主机字节学：以恶搞多字节整数在计算机内存中存储的字节序称为主机字节序（HBO-host byte order）或者叫本地字节序</p>\n<p>不同类型的CPU的HBO不同，这跟CPU的设计有关。分为大端序和小端序。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222148480.png\" alt=\"image-20230902222148480\"></p>\n<p>RISC-V汇编指令编码格式</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222334334.png\" alt=\"image-20230902222334334\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222508766-16936647102112.png\" alt=\"image-20230902222508766\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222532744.png\" alt=\"image-20230902222532744\"></p>\n<p>汇编指令详解</p>\n<p>ADD:</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222638671.png\" alt=\"image-20230902222638671\"></p>\n<h2 id=\"part2：操作系统实作\"><a href=\"#part2：操作系统实作\" class=\"headerlink\" title=\"part2：操作系统实作\"></a>part2：操作系统实作</h2><h3 id=\"6、RV-OS介绍\"><a href=\"#6、RV-OS介绍\" class=\"headerlink\" title=\"6、RV OS介绍\"></a>6、RV OS介绍</h3><p>参考链接：The RISC-V Instruction Set Manual， Volume II: Privileged Architecture，Document Version 20190608-Priv-MSU-Ratified</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230915214212061.png\" alt=\"image-20230915214212061\"></p>\n<p>FreeRTOS（<a href=\"https://www.freertos.org/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E6%B5%81%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%A8%E5%B5%8C%E5%85%A5\">https://www.freertos.org/）是一个很流行的应用在嵌入</a> 式设备上的实时操作系统内核。诞生于 2003 年。采用 MIT 许可证发 布。 • 设计小巧，整个核心代码只有 3 到 4 个 C 文件 • 可读性强，易维护，大部分的代码都是 C 语言编写，很少的部分 采用汇编语言。 • 支持优先级多线程（threads）、互斥锁（mutex）、信号量 （semaphore）和软件计时器（software timer），支持低功耗 处理以及一定程度的内存保护。 • 支持多种平台架构，包括 ARM，x86，RISC-V 等 • 已经被移植到多款微处理器上。</p>\n<p>RT-Thread（<a href=\"https://www.rt-thread.org/%EF%BC%89%E2%80%9C%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9B%86%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88RTOS%EF%BC%89%E5%86%85%E6%A0%B8%E3%80%81%E4%B8%AD\">https://www.rt-thread.org/）“是一个集实时操作系统（RTOS）内核、中</a> 间件组件和开发者社区于一体的技术平台，…… 也是一个组件完整丰富、高度可伸缩、 简易开发、超低功耗、高安全性的物联网操作系统” 。诞生于 2006 年。采用 Apache 2.0 许可证发布。 • 面向对象的实时内核； • 8，32 或 256 个优先级的多线程调度。对于同优先级线程使用时间片轮转调度法； • 提供信号量，也提供互斥信号量以防止优先级反转； • 支持其他高效通信方式，比如邮箱、消息队列和事件标志； • 支持静态内存分配方法，也支持线程安全的动态内存管理； • 对高层应用提供设备框架。 • 支持多种平台架构，包括 ARM, MIPS, X86, Xtensa, C-Sky, RISC-V 等 • 几乎支持市场上所有主流的 MCU 和 Wi-Fi 芯片。</p>\n<p>RVOS（<a href=\"https://github.com/plctlab/riscv-operating-system-mooc%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E7%94%A8%E4%BA%8E%E6%95%99\">https://github.com/plctlab/riscv-operating-system-mooc）是一个用于教</a> 学演示的操作系统内核。诞生于 2021 年。采用 BSD 2-Clause 许可证发布。 • 设计小巧，整个核心有效代码 ~ 1000 行； • 可读性强，易维护，绝大部分代码为 C 语言，很少部分采用汇编； • 演示了简单的内存分配管理实现； • 演示了可抢占多线程调度实现，线程调度采用轮转调度法； • 演示了简单的任务互斥实现； • 演示了软件定时器实现； • 演示了系统调用实现（M + U 模式）； • 支持 RV32； • 支持 QEMU-virt 平台。</p>\n<h3 id=\"7、Hello-RVOS\"><a href=\"#7、Hello-RVOS\" class=\"headerlink\" title=\"7、Hello RVOS\"></a>7、Hello RVOS</h3><h3 id=\"8、内存管理\"><a href=\"#8、内存管理\" class=\"headerlink\" title=\"8、内存管理\"></a>8、内存管理</h3><h3 id=\"9、上下文切换\"><a href=\"#9、上下文切换\" class=\"headerlink\" title=\"9、上下文切换\"></a>9、上下文切换</h3><h3 id=\"10、Trap和Exception\"><a href=\"#10、Trap和Exception\" class=\"headerlink\" title=\"10、Trap和Exception\"></a>10、Trap和Exception</h3><h3 id=\"11、外设，中断\"><a href=\"#11、外设，中断\" class=\"headerlink\" title=\"11、外设，中断\"></a>11、外设，中断</h3><h3 id=\"12、硬件定时器\"><a href=\"#12、硬件定时器\" class=\"headerlink\" title=\"12、硬件定时器\"></a>12、硬件定时器</h3><h3 id=\"13、抢占式多任务\"><a href=\"#13、抢占式多任务\" class=\"headerlink\" title=\"13、抢占式多任务\"></a>13、抢占式多任务</h3><h3 id=\"14、任务和锁\"><a href=\"#14、任务和锁\" class=\"headerlink\" title=\"14、任务和锁\"></a>14、任务和锁</h3><h3 id=\"15、软件定时器\"><a href=\"#15、软件定时器\" class=\"headerlink\" title=\"15、软件定时器\"></a>15、软件定时器</h3><h3 id=\"16、系统调用\"><a href=\"#16、系统调用\" class=\"headerlink\" title=\"16、系统调用\"></a>16、系统调用</h3>","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>作为一个程序员，手撸一个操作系统是一项特别有意义的事情。有很多类似的教程《30天开发一个操作系统》，极客时间上也有一门手写一个操作系统的课。最近在了解RSIC-V，刚好在B站刷到，基于RSIC-V的课程，计划进行学习，并自己实现一个简单操作系统，本篇用与记录所学知识。</p>\n<p>课程相关资料：</p>\n<p>GitHub：<a href=\"https://github.com/plctlab/riscv-operating-system-mooc\">GitHub - plctlab&#x2F;riscv-operating-system-mooc: 《从头写一个RISC-V OS》课程配套的资源</a></p>\n<p>Gitee ： <a href=\"https://gitee.com/unicornx/riscv-operating-system-mooc?_from=gitee_search\">riscv-operating-system-mooc: 开放课程《循序渐进，学习开发一个 RISC-V 上的操作系统》配套教材代码仓库。 mirror to https://github.com/plctlab/riscv-operating-system-mooc (gitee.com)</a></p>\n<h2 id=\"part1：准备知识\"><a href=\"#part1：准备知识\" class=\"headerlink\" title=\"part1：准备知识\"></a>part1：准备知识</h2><h3 id=\"1、计算机系统漫游\"><a href=\"#1、计算机系统漫游\" class=\"headerlink\" title=\"1、计算机系统漫游\"></a>1、计算机系统漫游</h3><p>除了看视频外这个链接可以看一下</p>\n<p><a href=\"https://xiaolincoding.com/os/\">图解系统介绍 | 小林coding (xiaolincoding.com)</a></p>\n<p>计算机的硬件组成</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824212717637.png\" alt=\"image-20230824212717637\"></p>\n<p>冯诺依曼和哈佛架构</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824212826832.png\" alt=\"image-20230824212826832\"></p>\n<p>冯.诺依曼架构<br>(Von Neumann architecture):又称普林斯顿架构<br>(Princetion architecture),特点是指令和数据不加区别地存储在存储器中，经由同一个总线传输。优点是总线开销小，控制逻辑实现更简单；缺点是执行效率较低。<br>哈佛架构(Harvard architecture):特点是将程序指令和数据分开存储。优点是执行效率较高，缺点是总线开销更大，控制逻辑实现更复杂。</p>\n<p>程序的存储和执行</p>\n<p>程序的执行主要分为取指，译码，执行</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213121458.png\" alt=\"image-20230824213121458\"></p>\n<p>编程语言的进化</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213356585.png\" alt=\"image-20230824213356585\"></p>\n<p>存储设备的层次结构</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213649411.png\" alt=\"image-20230824213649411\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213704443.png\" alt=\"image-20230824213704443\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824213736098.png\" alt=\"image-20230824213736098\"></p>\n<h3 id=\"2、RISC-V-ISA介绍\"><a href=\"#2、RISC-V-ISA介绍\" class=\"headerlink\" title=\"2、RISC-V ISA介绍\"></a>2、RISC-V ISA介绍</h3><p>参考资料：</p>\n<p>【参考1】：The RISC-V Instruction SetManual,Volume l:Unprivileged ISA,Document Version 20191213<br>【参考2】：The RISC-V Instruction Set Manual,.<br>Volume ll:Privileged Architecture,Document<br>Version 20190608-Priv-MSU-Ratified<br>【参考3】：RISC-V手册（中文版）：<br><a href=\"http://riscvbook.com/chinese/\">http://riscvbook.com/chinese/</a></p>\n<p>ISA（instruction set architecture）中文叫做指令集架构，是底层硬件电路面向上层软件提供的一层接口规范。</p>\n<p>ISA定义了基本数据类型，寄存器，指令，寻址模式，异常或者中断的处理方式等等. </p>\n<p>其为上层软件提供一层抽象，制定规则和约束，让编程着不用了解具体的电路结构。</p>\n<p>IBM360是第一个讲ISA与其实现分离的计算机</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824214300676-16928845828971.png\" alt=\"image-20230824214300676\"></p>\n<p>CISI复杂指令集（complex instruction set computing）</p>\n<p>针对特定的功能实现特定的指令，所以导致指令数目比较多，但是生成的程序长度较短</p>\n<p>RISC精简指令集（reduced instruction set computing）</p>\n<p>只定义常用指令集，对复杂的功能采用常用指令集组合实现，指令集数目比较精简，但是生成的程序长度相对较长。</p>\n<p>现在，精简指令集和CISI也逐渐有相互融合的趋势。</p>\n<p>ISA的宽度</p>\n<p>指令集宽度指的是CPU中通用寄存器的宽度（二进制的位数），着决定了寻址范围的大小，以及数据运算的能力。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824215242094.png\" alt=\"image-20230824215242094\"></p>\n<p>注意：指令集宽度和指令集编码长度无关</p>\n<p>一些知名的ISA</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824215358560.png\" alt=\"image-20230824215358560\"></p>\n<p>了解了指令集的基本概念我们接下来看看，我们的主角RISC-V ISA</p>\n<p>计算机的发展历史中出现了很多指令集架构，但是基本都是由某一个机构或者公司持有，但是在通用计算机软件领域我们都知道，基本所有方向的软件，都会有一款开源软件发展壮大，比如Linux，GCC,MySQL等等</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824220410033.png\" alt=\"image-20230824220410033\"></p>\n<p>对比软件业界的自由与开发，是不是也应该有一个开源的IAS?</p>\n<p>这里插播一下我的看法，为什么闭源的软件等发展到一定程度会没落？后续补</p>\n<p>RISC-V 读作“risk-five” 代表着Berkeley所研发的第五代精简指令集。</p>\n<p>这个项目2010年开始与加州伯克利分校，最早是希望选择一款ISA用于科研和教学。而经过前期多年的研究和选型，最终决定放弃使用现成的X86和ARM等ISA,而是自己实现一款ISA.</p>\n<p>主要是X86和ISA都过于复杂，而且是被商业机构所拥有。</p>\n<p>RISC-V最早的研发人员主要有：</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824221424337.png\" alt=\"image-20230824221424337\"></p>\n<p>RISC-V 是一款高质量，免许可，开放的精简指令集。</p>\n<p>它的标准由RISC-V基金会维护，该机构是非盈利机构</p>\n<p><a href=\"https://riscv.org/\">RISC-V International – RISC-V: The Open Standard RISC Instruction Set Architecture (riscv.org)</a></p>\n<p>RISC-V 适用于所有类型的计算机系统，从微控制器到超级计算机</p>\n<p>RISC-V 不是一家公司，也不是一款CPU实现</p>\n<p>RISC-V 的发展现状</p>\n<p>分析机构Semico Research在其近来新发的，名为RSC-V市场分析：新兴市场”的报告中指出，预计到2025年，市场将总共消费624亿个R1SC-VCPU内核，其中预计工业领域将是最大的细分市场，拥有167亿个内核。Semico预测，在包括计算机，消费者，通讯，运输和工业市场在内的细分市场，RISC-VCPU内核的复合年增长率(CAGR)在2018年至2025年之间的平均复合年增长率将高达146.2%</p>\n<p>RISC-V成员已经超过700个，分布在全球50个国家，成员信息可以通过以下链接查询</p>\n<p><a href=\"https://riscv.org/members/\">Members – RISC-V International (riscv.org)</a></p>\n<p>RISC-V的特点</p>\n<p>简单，清晰的分层设计，模块化，稳定，社区化</p>\n<p>相关规范可以在下面地址下载：</p>\n<p><a href=\"https://riscv.org/technical/specifications/\">Specifications – RISC-V International (riscv.org)</a></p>\n<p>RISC-V ISA的命名规范</p>\n<p>ISA命名格式：RV<a href=\"%7B32,64,128%7D%E7%94%A8%E4%BA%8E%E6%A0%87%E8%AF%86%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%AD%97%E5%AE%BD%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF\">###</a>[###][abc.Xyz]<br>,RV:用于标识RISC-V体系架构的前缀，即RISC-V<br>的缩写。</p>\n<p>处理器的寄存器的宽度（单位为bt)<br>,[abc..xyz]:标识该处理器支持的指令集模块集合。<br>例子：RV32IMA,RV64GC</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824222726212.png\" alt=\"image-20230824222726212\"></p>\n<p>模块化:</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824222822188.png\" alt=\"image-20230824222822188\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824222953626.png\" alt=\"image-20230824222953626\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223028026.png\" alt=\"image-20230824223028026\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223125093.png\" alt=\"image-20230824223125093\"></p>\n<p>“硬件线程” 是指计算机系统中的硬件线程。硬件线程是处理器内核中的基本线程单元，它们可以被操作系统和应用程序分配和调度。硬件线程可以并行执行多个任务，从而提高计算机系统的性能和效率。在现代计算机系统中，多核处理器通常具有多个硬件线程，这些线程可以共享处理器的资源，并且可以在多个任务之间进行调度。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223717584.png\" alt=\"image-20230824223717584\"></p>\n<p>特权级别</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223851477.png\" alt=\"image-20230824223851477\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223930452.png\" alt=\"image-20230824223930452\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824223945391.png\" alt=\"image-20230824223945391\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230824224001232.png\" alt=\"image-20230824224001232\"></p>\n<h3 id=\"3、编译与链接\"><a href=\"#3、编译与链接\" class=\"headerlink\" title=\"3、编译与链接\"></a>3、编译与链接</h3><p>前面两章了解了计算机的硬件组成和操作系统以及指令集，下面我们看以下，我们的代码是怎么变成CPU可执行的二进制文件的。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215232994.png\" alt=\"image-20230829215232994\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215308884.png\" alt=\"image-20230829215308884\"></p>\n<p>GCC涉及的文件类型</p>\n<ol>\n<li>.c:C源文件</li>\n<li>cc&#x2F;.cX&#x2F;.cpp:C++源文件</li>\n<li>i:经过预处理的C源文件</li>\n<li>.S&#x2F;.S:汇编语言源文件</li>\n<li>h:头(header)文件</li>\n<li>o:目标(object)文件</li>\n<li>a&#x2F;.so：编译后的静态库（archive)文件和共享库(shared object)文件</li>\n<li>a.out:可执行文件</li>\n</ol>\n<p>多个文件时候可以使用cmake 管理</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215518228.png\" alt=\"image-20230829215518228\"></p>\n<p>​\tELF(executable linkable format)是一种类Linux系统上的二进制文件格式标准</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215740035.png\" alt=\"image-20230829215740035\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215758026.png\" alt=\"image-20230829215758026\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829215822277.png\" alt=\"image-20230829215822277\"></p>\n<h3 id=\"4、嵌入式开发介绍\"><a href=\"#4、嵌入式开发介绍\" class=\"headerlink\" title=\"4、嵌入式开发介绍\"></a>4、嵌入式开发介绍</h3><p>嵌入开发是一种址比较综合性的技术，它不单指纯粹的软件开发技术，也不单是一种硬件配置技术；它是在特定的硬件环境下针对某硬件进行开发，是一种系统级别的与硬件结合比较紧密的软件开发技术</p>\n<p>交叉编译</p>\n<p>我们把嵌入式开发中用到的机器根据角色分为三类：</p>\n<p>构建系统：执行构建编译动作的计算机</p>\n<p>主机：运行构建机可执行二进制的系统</p>\n<p>目标系统：</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220314335.png\" alt=\"image-20230829220314335\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220330403.png\" alt=\"image-20230829220330403\"></p>\n<p>GDB：</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220440581.png\" alt=\"image-20230829220440581\"></p>\n<p>QEMU网站：<a href=\"https://www.qemu.org/\">https://www.qemu.org/</a></p>\n<p>QEMU是一套由(Fabrice Bellard)编写的以GPL许可<br>证分发源码的计算机系统模拟软件，在GNU&#x2F;几inux平<br>台上使用广泛。<br>支持多种体系架构。譬如：1A-32(x86),AMD64,<br>MiPS32&#x2F;64,R1SC-V32&#x2F;64等等。<br>QEMU有两种主要运作模式：<br>User mode:直接运行应用程序。<br>System mode。模拟整个计算机系统，包括中央处理<br>器及其他周边设备。</p>\n<p>安装 </p>\n<p>• Ubuntu 上 apt install </p>\n<p>• 源码编译安装</p>\n<p> Ø qemu-system-riscv32 … -kernel .&#x2F;test.elf </p>\n<p>Ø qemu-system-riscv32 … -kernel .&#x2F;test.elf -s -S</p>\n<p> • -s: “-gdb tcp::1234” 的缩写，启动 gdbserver 并在 1234 端口号上监听客户端 </p>\n<p>• -S: 在启动时停止CPU (只有到在客户端键入’c’ 才会开 始执行</p>\n<p>Cmake:</p>\n<p> <a href=\"https://www.gnu.org/software/make/\">https://www.gnu.org/software/make/</a> </p>\n<p>Ø make 是什么</p>\n<p> • make是一种自动化工程管理工具。 Ø Makefile 是什么 </p>\n<p>• 配合 make，用于描述构建工程过程中所管理的对象以 及如何构造工程的过程。</p>\n<p> Ø make 如何找到 Makefile </p>\n<p>• 隐式查找：当前目录下按顺序找寻文件名为 “GNUmakefile” 、 “makefile” 、 “Makefile”的文件</p>\n<p> • 显式查找：-f</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220831618.png\" alt=\"image-20230829220831618\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220841660.png\" alt=\"image-20230829220841660\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220857602.png\" alt=\"image-20230829220857602\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829220934206.png\" alt=\"image-20230829220934206\"></p>\n<h3 id=\"5、RSIC-V汇编语言介绍\"><a href=\"#5、RSIC-V汇编语言介绍\" class=\"headerlink\" title=\"5、RSIC-V汇编语言介绍\"></a>5、RSIC-V汇编语言介绍</h3><p>【参考 1】：The RISC-V Instruction Set Manual，Volume I: Unprivileged ISA， Document Version 20191213</p>\n<p>【参考 2】：Using as： <a href=\"https://sourceware.org/binutils/docs/as/\">https://sourceware.org/binutils/docs/as/</a> </p>\n<p>mkdir &#x2F;tools&#x2F;binutils -p &#x2F;&#x2F;新建一个安装目录</p>\n<p>.configure prefix&#x3D;&#x2F;tools&#x2F;binutils</p>\n<p>make </p>\n<p>sudo make install</p>\n<p>binutils工具就安装到&#x2F;tools&#x2F;binutils中去了</p>\n<p>【参考 3】：How to Use Inline Assembly Language in C Code： <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Using-\">https://gcc.gnu.org/onlinedocs/gcc/Using-</a> Assembly-Language-with-C.htm</p>\n<p>RISC-V汇编</p>\n<p>一个完整的RISC-V汇编程序有多条语句，一条典型的RISC汇编语句由3部分组成</p>\n<p>[label:] [operation] [comment]</p>\n<p>label(标号)：GUN汇编中，任何以冒号结尾的标识都被认为是个标号</p>\n<p>operation 可以有以下多种类型</p>\n<ul>\n<li>instruction（指令）：直接对应二进制机器指令的字符串</li>\n<li>pseudo-instruction（伪指令）：为提高编写代码的效率，可用用一天伪指令指示汇编器产生实际多条实际的指令（instruction）</li>\n<li>directive（指示&#x2F;伪操作）：通过类似指令的形式（以”.“开头），通知汇编器如何控制代码的产生等，不对应具体的指令</li>\n<li>macro采用.macro&#x2F;.endm自定义的宏</li>\n</ul>\n<p>comment(注释)：常用方式，”#“开头到当前行结束</p>\n<p>汇编指令操作对象</p>\n<p>寄存器</p>\n<ul>\n<li>33个通用寄存器，X0-X31</li>\n<li>在RISC-V中，Hart在执行算数逻辑运算时所操作的数据必须直接来自寄存器</li>\n</ul>\n<p>内存</p>\n<ul>\n<li>Hart可以执行在寄存器和内存之间的数据读写操作</li>\n<li>读写操作使用字节（byte）为基本单位进行寻址</li>\n<li>RV32可以访问最多 2^32 个字节的内存空间</li>\n</ul>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230829222922989.png\" alt=\"image-20230829222922989\"></p>\n<p>小端序与大端序</p>\n<p>主机字节学：以恶搞多字节整数在计算机内存中存储的字节序称为主机字节序（HBO-host byte order）或者叫本地字节序</p>\n<p>不同类型的CPU的HBO不同，这跟CPU的设计有关。分为大端序和小端序。</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222148480.png\" alt=\"image-20230902222148480\"></p>\n<p>RISC-V汇编指令编码格式</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222334334.png\" alt=\"image-20230902222334334\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222508766-16936647102112.png\" alt=\"image-20230902222508766\"></p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222532744.png\" alt=\"image-20230902222532744\"></p>\n<p>汇编指令详解</p>\n<p>ADD:</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230902222638671.png\" alt=\"image-20230902222638671\"></p>\n<h2 id=\"part2：操作系统实作\"><a href=\"#part2：操作系统实作\" class=\"headerlink\" title=\"part2：操作系统实作\"></a>part2：操作系统实作</h2><h3 id=\"6、RV-OS介绍\"><a href=\"#6、RV-OS介绍\" class=\"headerlink\" title=\"6、RV OS介绍\"></a>6、RV OS介绍</h3><p>参考链接：The RISC-V Instruction Set Manual， Volume II: Privileged Architecture，Document Version 20190608-Priv-MSU-Ratified</p>\n<p><img src=\"/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20230915214212061.png\" alt=\"image-20230915214212061\"></p>\n<p>FreeRTOS（<a href=\"https://www.freertos.org/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BE%88%E6%B5%81%E8%A1%8C%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%A8%E5%B5%8C%E5%85%A5\">https://www.freertos.org/）是一个很流行的应用在嵌入</a> 式设备上的实时操作系统内核。诞生于 2003 年。采用 MIT 许可证发 布。 • 设计小巧，整个核心代码只有 3 到 4 个 C 文件 • 可读性强，易维护，大部分的代码都是 C 语言编写，很少的部分 采用汇编语言。 • 支持优先级多线程（threads）、互斥锁（mutex）、信号量 （semaphore）和软件计时器（software timer），支持低功耗 处理以及一定程度的内存保护。 • 支持多种平台架构，包括 ARM，x86，RISC-V 等 • 已经被移植到多款微处理器上。</p>\n<p>RT-Thread（<a href=\"https://www.rt-thread.org/%EF%BC%89%E2%80%9C%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9B%86%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88RTOS%EF%BC%89%E5%86%85%E6%A0%B8%E3%80%81%E4%B8%AD\">https://www.rt-thread.org/）“是一个集实时操作系统（RTOS）内核、中</a> 间件组件和开发者社区于一体的技术平台，…… 也是一个组件完整丰富、高度可伸缩、 简易开发、超低功耗、高安全性的物联网操作系统” 。诞生于 2006 年。采用 Apache 2.0 许可证发布。 • 面向对象的实时内核； • 8，32 或 256 个优先级的多线程调度。对于同优先级线程使用时间片轮转调度法； • 提供信号量，也提供互斥信号量以防止优先级反转； • 支持其他高效通信方式，比如邮箱、消息队列和事件标志； • 支持静态内存分配方法，也支持线程安全的动态内存管理； • 对高层应用提供设备框架。 • 支持多种平台架构，包括 ARM, MIPS, X86, Xtensa, C-Sky, RISC-V 等 • 几乎支持市场上所有主流的 MCU 和 Wi-Fi 芯片。</p>\n<p>RVOS（<a href=\"https://github.com/plctlab/riscv-operating-system-mooc%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E7%94%A8%E4%BA%8E%E6%95%99\">https://github.com/plctlab/riscv-operating-system-mooc）是一个用于教</a> 学演示的操作系统内核。诞生于 2021 年。采用 BSD 2-Clause 许可证发布。 • 设计小巧，整个核心有效代码 ~ 1000 行； • 可读性强，易维护，绝大部分代码为 C 语言，很少部分采用汇编； • 演示了简单的内存分配管理实现； • 演示了可抢占多线程调度实现，线程调度采用轮转调度法； • 演示了简单的任务互斥实现； • 演示了软件定时器实现； • 演示了系统调用实现（M + U 模式）； • 支持 RV32； • 支持 QEMU-virt 平台。</p>\n<h3 id=\"7、Hello-RVOS\"><a href=\"#7、Hello-RVOS\" class=\"headerlink\" title=\"7、Hello RVOS\"></a>7、Hello RVOS</h3><h3 id=\"8、内存管理\"><a href=\"#8、内存管理\" class=\"headerlink\" title=\"8、内存管理\"></a>8、内存管理</h3><h3 id=\"9、上下文切换\"><a href=\"#9、上下文切换\" class=\"headerlink\" title=\"9、上下文切换\"></a>9、上下文切换</h3><h3 id=\"10、Trap和Exception\"><a href=\"#10、Trap和Exception\" class=\"headerlink\" title=\"10、Trap和Exception\"></a>10、Trap和Exception</h3><h3 id=\"11、外设，中断\"><a href=\"#11、外设，中断\" class=\"headerlink\" title=\"11、外设，中断\"></a>11、外设，中断</h3><h3 id=\"12、硬件定时器\"><a href=\"#12、硬件定时器\" class=\"headerlink\" title=\"12、硬件定时器\"></a>12、硬件定时器</h3><h3 id=\"13、抢占式多任务\"><a href=\"#13、抢占式多任务\" class=\"headerlink\" title=\"13、抢占式多任务\"></a>13、抢占式多任务</h3><h3 id=\"14、任务和锁\"><a href=\"#14、任务和锁\" class=\"headerlink\" title=\"14、任务和锁\"></a>14、任务和锁</h3><h3 id=\"15、软件定时器\"><a href=\"#15、软件定时器\" class=\"headerlink\" title=\"15、软件定时器\"></a>15、软件定时器</h3><h3 id=\"16、系统调用\"><a href=\"#16、系统调用\" class=\"headerlink\" title=\"16、系统调用\"></a>16、系统调用</h3>"},{"title":"现代C++核心特性解析","author":"杨超","comments":1,"index_img":"/img/c++.png","excerpt":"《现代c++核心特性解析》阅读笔记","date":"2023-01-20T02:00:00.000Z","updated":"2023-04-20T02:00:00.000Z","sticky":2,"_content":"\n本片博客以谢丙堃的《现代c++核心特性解析》为框架，记录学习现代C++特性的历程。\n\n## 1、新基础类型\n\n### 1.1、long long 类型\n\nlong long 类型在C++ C++11中被纳入C++标准中，其至少表示64位整型，它是一个有符号类型，对应的无符号类型为unsigned long long; 同时还心中对应占位符 lld%\\llu%。在头文件中配套增加 LLONG_MAX\\LLONG_MIN\\ULLONG_MAX。\n\n### 1.2、新增字符类型char16_t和char32_t\n\n\n## 左值与右指\n\n#### 左值\n","source":"_posts/编程笔记/现代C++核心特性.md","raw":"---\ntitle: 现代C++核心特性解析\ncategories: 笔记\ntags: C++\nauthor: 杨超\ncomments: true\nindex_img: /img/c++.png\nexcerpt: 《现代c++核心特性解析》阅读笔记\ndate: 2023-01-20 10:00:00\nupdated: 2023-04-20 10:00:00\nsticky: 2\n---\n\n本片博客以谢丙堃的《现代c++核心特性解析》为框架，记录学习现代C++特性的历程。\n\n## 1、新基础类型\n\n### 1.1、long long 类型\n\nlong long 类型在C++ C++11中被纳入C++标准中，其至少表示64位整型，它是一个有符号类型，对应的无符号类型为unsigned long long; 同时还心中对应占位符 lld%\\llu%。在头文件中配套增加 LLONG_MAX\\LLONG_MIN\\ULLONG_MAX。\n\n### 1.2、新增字符类型char16_t和char32_t\n\n\n## 左值与右指\n\n#### 左值\n","slug":"编程笔记/现代C++核心特性","published":1,"layout":"post","photos":[],"link":"","_id":"clw7v67910014e8lbdn86cmis","content":"<p>本片博客以谢丙堃的《现代c++核心特性解析》为框架，记录学习现代C++特性的历程。</p>\n<h2 id=\"1、新基础类型\"><a href=\"#1、新基础类型\" class=\"headerlink\" title=\"1、新基础类型\"></a>1、新基础类型</h2><h3 id=\"1-1、long-long-类型\"><a href=\"#1-1、long-long-类型\" class=\"headerlink\" title=\"1.1、long long 类型\"></a>1.1、long long 类型</h3><p>long long 类型在C++ C++11中被纳入C++标准中，其至少表示64位整型，它是一个有符号类型，对应的无符号类型为unsigned long long; 同时还心中对应占位符 lld%\\llu%。在头文件中配套增加 LLONG_MAX\\LLONG_MIN\\ULLONG_MAX。</p>\n<h3 id=\"1-2、新增字符类型char16-t和char32-t\"><a href=\"#1-2、新增字符类型char16-t和char32-t\" class=\"headerlink\" title=\"1.2、新增字符类型char16_t和char32_t\"></a>1.2、新增字符类型char16_t和char32_t</h3><h2 id=\"左值与右指\"><a href=\"#左值与右指\" class=\"headerlink\" title=\"左值与右指\"></a>左值与右指</h2><h4 id=\"左值\"><a href=\"#左值\" class=\"headerlink\" title=\"左值\"></a>左值</h4>","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>本片博客以谢丙堃的《现代c++核心特性解析》为框架，记录学习现代C++特性的历程。</p>\n<h2 id=\"1、新基础类型\"><a href=\"#1、新基础类型\" class=\"headerlink\" title=\"1、新基础类型\"></a>1、新基础类型</h2><h3 id=\"1-1、long-long-类型\"><a href=\"#1-1、long-long-类型\" class=\"headerlink\" title=\"1.1、long long 类型\"></a>1.1、long long 类型</h3><p>long long 类型在C++ C++11中被纳入C++标准中，其至少表示64位整型，它是一个有符号类型，对应的无符号类型为unsigned long long; 同时还心中对应占位符 lld%\\llu%。在头文件中配套增加 LLONG_MAX\\LLONG_MIN\\ULLONG_MAX。</p>\n<h3 id=\"1-2、新增字符类型char16-t和char32-t\"><a href=\"#1-2、新增字符类型char16-t和char32-t\" class=\"headerlink\" title=\"1.2、新增字符类型char16_t和char32_t\"></a>1.2、新增字符类型char16_t和char32_t</h3><h2 id=\"左值与右指\"><a href=\"#左值与右指\" class=\"headerlink\" title=\"左值与右指\"></a>左值与右指</h2><h4 id=\"左值\"><a href=\"#左值\" class=\"headerlink\" title=\"左值\"></a>左值</h4>"},{"title":"三十岁生日","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"斑马线扫过底盘，消失在后视镜中","date":"2023-01-20T02:00:00.000Z","updated":"2023-01-20T02:00:00.000Z","sticky":2,"_content":"\n三十岁生日\n\n车在路上行驶\n\n遇到了第30个斑马线\n\n一脚油门\n\n斑马线扫过底盘\n\n消失在后视镜中\n\n路的尽头消失在阳关明媚的草原","source":"_posts/诗歌/三十岁生日.md","raw":"---\ntitle: 三十岁生日\ncategories: 写作\ntags: 诗歌\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 斑马线扫过底盘，消失在后视镜中\ndate: 2023-01-20 10:00:00\nupdated: 2023-01-20 10:00:00\nsticky: 2\n---\n\n三十岁生日\n\n车在路上行驶\n\n遇到了第30个斑马线\n\n一脚油门\n\n斑马线扫过底盘\n\n消失在后视镜中\n\n路的尽头消失在阳关明媚的草原","slug":"诗歌/三十岁生日","published":1,"_id":"clw7v67920016e8lbe9une8v3","layout":"post","photos":[],"link":"","content":"<p>三十岁生日</p>\n<p>车在路上行驶</p>\n<p>遇到了第30个斑马线</p>\n<p>一脚油门</p>\n<p>斑马线扫过底盘</p>\n<p>消失在后视镜中</p>\n<p>路的尽头消失在阳关明媚的草原</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>三十岁生日</p>\n<p>车在路上行驶</p>\n<p>遇到了第30个斑马线</p>\n<p>一脚油门</p>\n<p>斑马线扫过底盘</p>\n<p>消失在后视镜中</p>\n<p>路的尽头消失在阳关明媚的草原</p>\n"},{"title":"读书笔记--《造房子》--王澍","author":"Noodles","comments":1,"index_img":"/img/book.png","excerpt":"不继承自然是一种摧毁，以继承之名无学养地恣意兴造破坏尤甚。","date":"2024-03-03T02:00:00.000Z","updated":"2022-03-03T12:00:00.000Z","sticky":3,"_content":"\n我喜欢这本书的书名《造房子》，既朴实又包含建筑的本质。建筑的本质就是人为了有一个庇所，而自发的劳作，去建造一个可以安身的地方。所以当我第一次看到王澍先生这本书名的时候就被吸引。我想书名如此，那么内容一定更加的精彩。\n\n书的主要内容是作者之前已经发表过的一些列随笔及一篇访谈稿。全书主要由10篇建筑文化随笔，4篇建筑作品历程，6篇散文随笔和1篇对谈构成。\n在建筑文化随笔中，从宋代山水画的意境，到明清园林的审美情趣，作者深入剖析中国传统文化、艺术，更以建筑的角度，从中探寻传统文化、东方哲学的美学价值。\n建筑作品历程包括中国美院象山校区、宁波美术馆等，从设计开端、建造过程，直至建成后续，作者用深入浅出的语言，还原这些作品的诞生历程。从中，我们看到的是作者对于“好的建筑”以及“如何做出重返传统的当代建筑”的深入思考。篇散文随笔和对谈部分，作者漫谈个人经历、社会与人生，更触及当下人关心的居住空间等话题。\n\n衣食住行是人生存的必要条件，住在里面的价值看似并不重要，是的没有衣可能会被冻死，没有食可能会被饿死，住在基础的生存条件来看确实没有那么重要。但住确是人精神世界的投射。\n\n人在思考怎么住的时候，才正真有了精神世界。\n\n书中多次提及中国现代建筑发展对中国传统建筑的摧毁，当然很多摧毁并不是建筑发展导致，而是这些年中国发展的一个缩影。\n\n在我的老家，我上个的小学已经被拆，我小时候住过的房子也被拆了。当然如果以现在的标准判断，那是因为我们社会发展的好，我们住进了更大更好的拆迁房。但发展就可以不继承吗？作者在讲宁波博物馆建成后，很多观众多次去观看。他们说“因为这个地方全部被拆光了，变成了一个新城，只有在这座建筑能找到自己过去生活过的痕迹。”\n\n正如书中说，不继承自然是一种摧毁，以继承之名无学养地恣意兴造破坏尤甚。先不说后面的尤甚，就光不继承，就摧毁了多少传统。建筑的摧毁只是表象，真正摧毁的是中国人积累下来的传统与文化。\n\n书中作者还有一个观点我觉得很有意思，作者说他习惯把建筑的材料不叫作材料，而叫做物品。一个物品中是包含情趣的，而材料是个冷冰冰的词。我一直也有这样的想法。现在我们的装修都用那种压缩板材定制家具，我就是感觉这就是一种很没有情趣的做法。不像以前的家具都是匠人花费精力设计，制作，有纹路，有味道，有温度，有质感。在经过人的长期使用，就跟人形成了情感的连接。而这种对一个个物件的情感连接的汇聚，是家的一部分。\n\n3月3日：昨天看了这本书还没看完，先写到这里，阅读完成后再补充。\n\n还有印象深刻的是作者说到的自己两件事情，一个是自己在中学的时候，看过了《法国大革命史》和《中国通史》，所以在上历史课的时候觉得课程太过垃圾，然后上课的时候自己写的笔记被历史老师发现，老师看了以后说：“这个学生，将来一定了不得”。还有一件事情，作者刚进大学，被选为学生代表听校长钱锺韩训话，钱校长说：“好学生就是感向老师挑战的学生。”，而且还说那些老师没啥了不起的，只要你提前三天对你上的课认真准备，你在课堂上问三个问题就可能让老师哑口无言。\n\n我不能说这样的教育一定是好的，但是我们现行的很多学校，父母遵守的教育方法一定是有问题的。我们现在很多学校的教育方法就如是按照福柯所说的\"规训\"。而这样的方法本来是被设计来管理囚犯或者军队的呀。服从是军人的天职，但是不是学生的天职。\n\n","source":"_posts/读书笔记/《造房子》.md","raw":"---\ntitle: 读书笔记--《造房子》--王澍\ncategories: 读书笔记\ntags: 建筑\nauthor: Noodles\ncomments: true\nindex_img: /img/book.png\nexcerpt: 不继承自然是一种摧毁，以继承之名无学养地恣意兴造破坏尤甚。\ndate: 2024-03-03 10:00:00\nupdated: 2022-03-03 20:00:00\nsticky: 3\n---\n\n我喜欢这本书的书名《造房子》，既朴实又包含建筑的本质。建筑的本质就是人为了有一个庇所，而自发的劳作，去建造一个可以安身的地方。所以当我第一次看到王澍先生这本书名的时候就被吸引。我想书名如此，那么内容一定更加的精彩。\n\n书的主要内容是作者之前已经发表过的一些列随笔及一篇访谈稿。全书主要由10篇建筑文化随笔，4篇建筑作品历程，6篇散文随笔和1篇对谈构成。\n在建筑文化随笔中，从宋代山水画的意境，到明清园林的审美情趣，作者深入剖析中国传统文化、艺术，更以建筑的角度，从中探寻传统文化、东方哲学的美学价值。\n建筑作品历程包括中国美院象山校区、宁波美术馆等，从设计开端、建造过程，直至建成后续，作者用深入浅出的语言，还原这些作品的诞生历程。从中，我们看到的是作者对于“好的建筑”以及“如何做出重返传统的当代建筑”的深入思考。篇散文随笔和对谈部分，作者漫谈个人经历、社会与人生，更触及当下人关心的居住空间等话题。\n\n衣食住行是人生存的必要条件，住在里面的价值看似并不重要，是的没有衣可能会被冻死，没有食可能会被饿死，住在基础的生存条件来看确实没有那么重要。但住确是人精神世界的投射。\n\n人在思考怎么住的时候，才正真有了精神世界。\n\n书中多次提及中国现代建筑发展对中国传统建筑的摧毁，当然很多摧毁并不是建筑发展导致，而是这些年中国发展的一个缩影。\n\n在我的老家，我上个的小学已经被拆，我小时候住过的房子也被拆了。当然如果以现在的标准判断，那是因为我们社会发展的好，我们住进了更大更好的拆迁房。但发展就可以不继承吗？作者在讲宁波博物馆建成后，很多观众多次去观看。他们说“因为这个地方全部被拆光了，变成了一个新城，只有在这座建筑能找到自己过去生活过的痕迹。”\n\n正如书中说，不继承自然是一种摧毁，以继承之名无学养地恣意兴造破坏尤甚。先不说后面的尤甚，就光不继承，就摧毁了多少传统。建筑的摧毁只是表象，真正摧毁的是中国人积累下来的传统与文化。\n\n书中作者还有一个观点我觉得很有意思，作者说他习惯把建筑的材料不叫作材料，而叫做物品。一个物品中是包含情趣的，而材料是个冷冰冰的词。我一直也有这样的想法。现在我们的装修都用那种压缩板材定制家具，我就是感觉这就是一种很没有情趣的做法。不像以前的家具都是匠人花费精力设计，制作，有纹路，有味道，有温度，有质感。在经过人的长期使用，就跟人形成了情感的连接。而这种对一个个物件的情感连接的汇聚，是家的一部分。\n\n3月3日：昨天看了这本书还没看完，先写到这里，阅读完成后再补充。\n\n还有印象深刻的是作者说到的自己两件事情，一个是自己在中学的时候，看过了《法国大革命史》和《中国通史》，所以在上历史课的时候觉得课程太过垃圾，然后上课的时候自己写的笔记被历史老师发现，老师看了以后说：“这个学生，将来一定了不得”。还有一件事情，作者刚进大学，被选为学生代表听校长钱锺韩训话，钱校长说：“好学生就是感向老师挑战的学生。”，而且还说那些老师没啥了不起的，只要你提前三天对你上的课认真准备，你在课堂上问三个问题就可能让老师哑口无言。\n\n我不能说这样的教育一定是好的，但是我们现行的很多学校，父母遵守的教育方法一定是有问题的。我们现在很多学校的教育方法就如是按照福柯所说的\"规训\"。而这样的方法本来是被设计来管理囚犯或者军队的呀。服从是军人的天职，但是不是学生的天职。\n\n","slug":"读书笔记/《造房子》","published":1,"_id":"clw7v67930019e8lb3pf5hoyy","layout":"post","photos":[],"link":"","content":"<p>我喜欢这本书的书名《造房子》，既朴实又包含建筑的本质。建筑的本质就是人为了有一个庇所，而自发的劳作，去建造一个可以安身的地方。所以当我第一次看到王澍先生这本书名的时候就被吸引。我想书名如此，那么内容一定更加的精彩。</p>\n<p>书的主要内容是作者之前已经发表过的一些列随笔及一篇访谈稿。全书主要由10篇建筑文化随笔，4篇建筑作品历程，6篇散文随笔和1篇对谈构成。<br>在建筑文化随笔中，从宋代山水画的意境，到明清园林的审美情趣，作者深入剖析中国传统文化、艺术，更以建筑的角度，从中探寻传统文化、东方哲学的美学价值。<br>建筑作品历程包括中国美院象山校区、宁波美术馆等，从设计开端、建造过程，直至建成后续，作者用深入浅出的语言，还原这些作品的诞生历程。从中，我们看到的是作者对于“好的建筑”以及“如何做出重返传统的当代建筑”的深入思考。篇散文随笔和对谈部分，作者漫谈个人经历、社会与人生，更触及当下人关心的居住空间等话题。</p>\n<p>衣食住行是人生存的必要条件，住在里面的价值看似并不重要，是的没有衣可能会被冻死，没有食可能会被饿死，住在基础的生存条件来看确实没有那么重要。但住确是人精神世界的投射。</p>\n<p>人在思考怎么住的时候，才正真有了精神世界。</p>\n<p>书中多次提及中国现代建筑发展对中国传统建筑的摧毁，当然很多摧毁并不是建筑发展导致，而是这些年中国发展的一个缩影。</p>\n<p>在我的老家，我上个的小学已经被拆，我小时候住过的房子也被拆了。当然如果以现在的标准判断，那是因为我们社会发展的好，我们住进了更大更好的拆迁房。但发展就可以不继承吗？作者在讲宁波博物馆建成后，很多观众多次去观看。他们说“因为这个地方全部被拆光了，变成了一个新城，只有在这座建筑能找到自己过去生活过的痕迹。”</p>\n<p>正如书中说，不继承自然是一种摧毁，以继承之名无学养地恣意兴造破坏尤甚。先不说后面的尤甚，就光不继承，就摧毁了多少传统。建筑的摧毁只是表象，真正摧毁的是中国人积累下来的传统与文化。</p>\n<p>书中作者还有一个观点我觉得很有意思，作者说他习惯把建筑的材料不叫作材料，而叫做物品。一个物品中是包含情趣的，而材料是个冷冰冰的词。我一直也有这样的想法。现在我们的装修都用那种压缩板材定制家具，我就是感觉这就是一种很没有情趣的做法。不像以前的家具都是匠人花费精力设计，制作，有纹路，有味道，有温度，有质感。在经过人的长期使用，就跟人形成了情感的连接。而这种对一个个物件的情感连接的汇聚，是家的一部分。</p>\n<p>3月3日：昨天看了这本书还没看完，先写到这里，阅读完成后再补充。</p>\n<p>还有印象深刻的是作者说到的自己两件事情，一个是自己在中学的时候，看过了《法国大革命史》和《中国通史》，所以在上历史课的时候觉得课程太过垃圾，然后上课的时候自己写的笔记被历史老师发现，老师看了以后说：“这个学生，将来一定了不得”。还有一件事情，作者刚进大学，被选为学生代表听校长钱锺韩训话，钱校长说：“好学生就是感向老师挑战的学生。”，而且还说那些老师没啥了不起的，只要你提前三天对你上的课认真准备，你在课堂上问三个问题就可能让老师哑口无言。</p>\n<p>我不能说这样的教育一定是好的，但是我们现行的很多学校，父母遵守的教育方法一定是有问题的。我们现在很多学校的教育方法就如是按照福柯所说的”规训”。而这样的方法本来是被设计来管理囚犯或者军队的呀。服从是军人的天职，但是不是学生的天职。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>我喜欢这本书的书名《造房子》，既朴实又包含建筑的本质。建筑的本质就是人为了有一个庇所，而自发的劳作，去建造一个可以安身的地方。所以当我第一次看到王澍先生这本书名的时候就被吸引。我想书名如此，那么内容一定更加的精彩。</p>\n<p>书的主要内容是作者之前已经发表过的一些列随笔及一篇访谈稿。全书主要由10篇建筑文化随笔，4篇建筑作品历程，6篇散文随笔和1篇对谈构成。<br>在建筑文化随笔中，从宋代山水画的意境，到明清园林的审美情趣，作者深入剖析中国传统文化、艺术，更以建筑的角度，从中探寻传统文化、东方哲学的美学价值。<br>建筑作品历程包括中国美院象山校区、宁波美术馆等，从设计开端、建造过程，直至建成后续，作者用深入浅出的语言，还原这些作品的诞生历程。从中，我们看到的是作者对于“好的建筑”以及“如何做出重返传统的当代建筑”的深入思考。篇散文随笔和对谈部分，作者漫谈个人经历、社会与人生，更触及当下人关心的居住空间等话题。</p>\n<p>衣食住行是人生存的必要条件，住在里面的价值看似并不重要，是的没有衣可能会被冻死，没有食可能会被饿死，住在基础的生存条件来看确实没有那么重要。但住确是人精神世界的投射。</p>\n<p>人在思考怎么住的时候，才正真有了精神世界。</p>\n<p>书中多次提及中国现代建筑发展对中国传统建筑的摧毁，当然很多摧毁并不是建筑发展导致，而是这些年中国发展的一个缩影。</p>\n<p>在我的老家，我上个的小学已经被拆，我小时候住过的房子也被拆了。当然如果以现在的标准判断，那是因为我们社会发展的好，我们住进了更大更好的拆迁房。但发展就可以不继承吗？作者在讲宁波博物馆建成后，很多观众多次去观看。他们说“因为这个地方全部被拆光了，变成了一个新城，只有在这座建筑能找到自己过去生活过的痕迹。”</p>\n<p>正如书中说，不继承自然是一种摧毁，以继承之名无学养地恣意兴造破坏尤甚。先不说后面的尤甚，就光不继承，就摧毁了多少传统。建筑的摧毁只是表象，真正摧毁的是中国人积累下来的传统与文化。</p>\n<p>书中作者还有一个观点我觉得很有意思，作者说他习惯把建筑的材料不叫作材料，而叫做物品。一个物品中是包含情趣的，而材料是个冷冰冰的词。我一直也有这样的想法。现在我们的装修都用那种压缩板材定制家具，我就是感觉这就是一种很没有情趣的做法。不像以前的家具都是匠人花费精力设计，制作，有纹路，有味道，有温度，有质感。在经过人的长期使用，就跟人形成了情感的连接。而这种对一个个物件的情感连接的汇聚，是家的一部分。</p>\n<p>3月3日：昨天看了这本书还没看完，先写到这里，阅读完成后再补充。</p>\n<p>还有印象深刻的是作者说到的自己两件事情，一个是自己在中学的时候，看过了《法国大革命史》和《中国通史》，所以在上历史课的时候觉得课程太过垃圾，然后上课的时候自己写的笔记被历史老师发现，老师看了以后说：“这个学生，将来一定了不得”。还有一件事情，作者刚进大学，被选为学生代表听校长钱锺韩训话，钱校长说：“好学生就是感向老师挑战的学生。”，而且还说那些老师没啥了不起的，只要你提前三天对你上的课认真准备，你在课堂上问三个问题就可能让老师哑口无言。</p>\n<p>我不能说这样的教育一定是好的，但是我们现行的很多学校，父母遵守的教育方法一定是有问题的。我们现在很多学校的教育方法就如是按照福柯所说的”规训”。而这样的方法本来是被设计来管理囚犯或者军队的呀。服从是军人的天职，但是不是学生的天职。</p>\n"},{"title":"王阳明一切心法","author":"杨超","comments":1,"index_img":"/img/book.png","excerpt":"熊逸的《王阳明一切心法》读书笔记","date":"2022-11-22T02:00:00.000Z","updated":"2022-09-28T12:00:00.000Z","sticky":2,"_content":"\n王阳明的一切心学是中国古代哲学的一个重要流派，其主张“心外无物，心外无理”，强调通过内心的反省和修养来达到人生的最高境界。以下是我对王阳明一切心学的读书笔记，分为以下几个部分：\n\n一、心学的基本概念\n\n王阳明的心学主要强调“心”的重要性，认为人的本性是善良的，但会被欲望和杂念所蒙蔽。因此，心学强调通过内心的反省和修养来恢复本性，达到内心的平静和智慧。心学提出了“致良知”、“知行合一”、“格物致知”等重要概念，其中“致良知”被认为是心学的核心。\n\n二、心学的影响和意义\n\n心学对中国古代哲学产生了深远的影响，不仅影响了程朱理学和陆王心学等哲学流派，也对中国的文化、艺术、政治等方面产生了影响。心学强调的内心修养和自我反省，对中国人的道德观念和行为准则产生了重要影响，也为中国文人提供了精神上的支持和指导。\n\n三、对心学的评价和反思\n\n对于心学的评价和反思，不同的人有不同的看法。一方面，心学的内心修养和自我反省的方法，有助于人们提高自我认识和自我控制能力，有助于培养人的道德品质和精神修养。另一方面，心学也受到了批评，认为其过于强调内心修养而忽视外部世界，容易导致主观主义和个人主义。\n\n四、从心学中得到的启示\n\n从心学中，我得到了以下启示：\n\n内心修养的重要性：心学强调了内心修养的重要性，这启示我要时刻保持内心的平静和清明，去除杂念和欲望，保持一颗清净的心态。\n自我反省的重要性：心学强调了自我反省的重要性，这启示我要时刻审视自己的言行举止，反思自己的行为是否符合道德标准，是否有改进的空间。\n精神修养的重要性：心学强调了精神修养的重要性，这启示我要注重精神上的修养和成长，通过学习、冥想、艺术等方式来丰富自己的精神生活。\n全面看待问题的重要性：心学也启示我要全面看待问题，不能过于主观主义或个人主义，也要考虑他人的利益和社会的整体利益。\n总的来说，王阳明的心学是一种重视内心修养和精神成长的哲学思想，其强调的“致良知”、“知行合一”、“格物致知”等概念，对于我们的人生观、价值观、道德观等方面都有很大的启示和帮助。\n","source":"_posts/读书笔记/王阳明一切心法.md","raw":"---\ntitle: 王阳明一切心法\ncategories: 读书笔记\ntags: 哲学\nauthor: 杨超\ncomments: true\nindex_img: /img/book.png\nexcerpt: 熊逸的《王阳明一切心法》读书笔记\ndate: 2022-11-22 10:00:00\nupdated: 2022-09-28 20:00:00\nsticky: 2\n---\n\n王阳明的一切心学是中国古代哲学的一个重要流派，其主张“心外无物，心外无理”，强调通过内心的反省和修养来达到人生的最高境界。以下是我对王阳明一切心学的读书笔记，分为以下几个部分：\n\n一、心学的基本概念\n\n王阳明的心学主要强调“心”的重要性，认为人的本性是善良的，但会被欲望和杂念所蒙蔽。因此，心学强调通过内心的反省和修养来恢复本性，达到内心的平静和智慧。心学提出了“致良知”、“知行合一”、“格物致知”等重要概念，其中“致良知”被认为是心学的核心。\n\n二、心学的影响和意义\n\n心学对中国古代哲学产生了深远的影响，不仅影响了程朱理学和陆王心学等哲学流派，也对中国的文化、艺术、政治等方面产生了影响。心学强调的内心修养和自我反省，对中国人的道德观念和行为准则产生了重要影响，也为中国文人提供了精神上的支持和指导。\n\n三、对心学的评价和反思\n\n对于心学的评价和反思，不同的人有不同的看法。一方面，心学的内心修养和自我反省的方法，有助于人们提高自我认识和自我控制能力，有助于培养人的道德品质和精神修养。另一方面，心学也受到了批评，认为其过于强调内心修养而忽视外部世界，容易导致主观主义和个人主义。\n\n四、从心学中得到的启示\n\n从心学中，我得到了以下启示：\n\n内心修养的重要性：心学强调了内心修养的重要性，这启示我要时刻保持内心的平静和清明，去除杂念和欲望，保持一颗清净的心态。\n自我反省的重要性：心学强调了自我反省的重要性，这启示我要时刻审视自己的言行举止，反思自己的行为是否符合道德标准，是否有改进的空间。\n精神修养的重要性：心学强调了精神修养的重要性，这启示我要注重精神上的修养和成长，通过学习、冥想、艺术等方式来丰富自己的精神生活。\n全面看待问题的重要性：心学也启示我要全面看待问题，不能过于主观主义或个人主义，也要考虑他人的利益和社会的整体利益。\n总的来说，王阳明的心学是一种重视内心修养和精神成长的哲学思想，其强调的“致良知”、“知行合一”、“格物致知”等概念，对于我们的人生观、价值观、道德观等方面都有很大的启示和帮助。\n","slug":"读书笔记/王阳明一切心法","published":1,"_id":"clw7v6795001fe8lbd0stgrv7","layout":"post","photos":[],"link":"","content":"<p>王阳明的一切心学是中国古代哲学的一个重要流派，其主张“心外无物，心外无理”，强调通过内心的反省和修养来达到人生的最高境界。以下是我对王阳明一切心学的读书笔记，分为以下几个部分：</p>\n<p>一、心学的基本概念</p>\n<p>王阳明的心学主要强调“心”的重要性，认为人的本性是善良的，但会被欲望和杂念所蒙蔽。因此，心学强调通过内心的反省和修养来恢复本性，达到内心的平静和智慧。心学提出了“致良知”、“知行合一”、“格物致知”等重要概念，其中“致良知”被认为是心学的核心。</p>\n<p>二、心学的影响和意义</p>\n<p>心学对中国古代哲学产生了深远的影响，不仅影响了程朱理学和陆王心学等哲学流派，也对中国的文化、艺术、政治等方面产生了影响。心学强调的内心修养和自我反省，对中国人的道德观念和行为准则产生了重要影响，也为中国文人提供了精神上的支持和指导。</p>\n<p>三、对心学的评价和反思</p>\n<p>对于心学的评价和反思，不同的人有不同的看法。一方面，心学的内心修养和自我反省的方法，有助于人们提高自我认识和自我控制能力，有助于培养人的道德品质和精神修养。另一方面，心学也受到了批评，认为其过于强调内心修养而忽视外部世界，容易导致主观主义和个人主义。</p>\n<p>四、从心学中得到的启示</p>\n<p>从心学中，我得到了以下启示：</p>\n<p>内心修养的重要性：心学强调了内心修养的重要性，这启示我要时刻保持内心的平静和清明，去除杂念和欲望，保持一颗清净的心态。<br>自我反省的重要性：心学强调了自我反省的重要性，这启示我要时刻审视自己的言行举止，反思自己的行为是否符合道德标准，是否有改进的空间。<br>精神修养的重要性：心学强调了精神修养的重要性，这启示我要注重精神上的修养和成长，通过学习、冥想、艺术等方式来丰富自己的精神生活。<br>全面看待问题的重要性：心学也启示我要全面看待问题，不能过于主观主义或个人主义，也要考虑他人的利益和社会的整体利益。<br>总的来说，王阳明的心学是一种重视内心修养和精神成长的哲学思想，其强调的“致良知”、“知行合一”、“格物致知”等概念，对于我们的人生观、价值观、道德观等方面都有很大的启示和帮助。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>王阳明的一切心学是中国古代哲学的一个重要流派，其主张“心外无物，心外无理”，强调通过内心的反省和修养来达到人生的最高境界。以下是我对王阳明一切心学的读书笔记，分为以下几个部分：</p>\n<p>一、心学的基本概念</p>\n<p>王阳明的心学主要强调“心”的重要性，认为人的本性是善良的，但会被欲望和杂念所蒙蔽。因此，心学强调通过内心的反省和修养来恢复本性，达到内心的平静和智慧。心学提出了“致良知”、“知行合一”、“格物致知”等重要概念，其中“致良知”被认为是心学的核心。</p>\n<p>二、心学的影响和意义</p>\n<p>心学对中国古代哲学产生了深远的影响，不仅影响了程朱理学和陆王心学等哲学流派，也对中国的文化、艺术、政治等方面产生了影响。心学强调的内心修养和自我反省，对中国人的道德观念和行为准则产生了重要影响，也为中国文人提供了精神上的支持和指导。</p>\n<p>三、对心学的评价和反思</p>\n<p>对于心学的评价和反思，不同的人有不同的看法。一方面，心学的内心修养和自我反省的方法，有助于人们提高自我认识和自我控制能力，有助于培养人的道德品质和精神修养。另一方面，心学也受到了批评，认为其过于强调内心修养而忽视外部世界，容易导致主观主义和个人主义。</p>\n<p>四、从心学中得到的启示</p>\n<p>从心学中，我得到了以下启示：</p>\n<p>内心修养的重要性：心学强调了内心修养的重要性，这启示我要时刻保持内心的平静和清明，去除杂念和欲望，保持一颗清净的心态。<br>自我反省的重要性：心学强调了自我反省的重要性，这启示我要时刻审视自己的言行举止，反思自己的行为是否符合道德标准，是否有改进的空间。<br>精神修养的重要性：心学强调了精神修养的重要性，这启示我要注重精神上的修养和成长，通过学习、冥想、艺术等方式来丰富自己的精神生活。<br>全面看待问题的重要性：心学也启示我要全面看待问题，不能过于主观主义或个人主义，也要考虑他人的利益和社会的整体利益。<br>总的来说，王阳明的心学是一种重视内心修养和精神成长的哲学思想，其强调的“致良知”、“知行合一”、“格物致知”等概念，对于我们的人生观、价值观、道德观等方面都有很大的启示和帮助。</p>\n"},{"title":"GDB笔记","author":"Noodles","comments":1,"index_img":"/img/reboot.png","excerpt":"本篇博客作为GDB的使用方法记录，方便使用时查找，不不定期更新。","date":"2023-06-22T02:00:00.000Z","updated":"2023-06-28T02:00:00.000Z","sticky":3,"_content":"\nGDB笔记\n\n本篇博客作为GDB的使用方法记录，方便使用时查找，不不定期更新。文中使用方法均时基于WSL:Ubuntu-20.4.如果想了解更多GDB至少，可以查看GDB官方手册：[Top (Debugging with GDB) (sourceware.org)](https://sourceware.org/gdb/onlinedocs/gdb/)\n\n[Documentation for GDB version 13.2.90.20230625-git (sourceware.org)](https://sourceware.org/gdb/onlinedocs/)\n\n\n\n#### 1、GDB介绍：\n\n​        GDB是GNU调试器，一个用于C和C++等编程语言的开源调试器。GDB支持多种操作系统和编程语言，并提供了丰富的调试功能，如断点、单步执行、变量查看等。当然如果你要开始看这个教程了，那么就必然知道他是用来干啥的。\n\n#### 2、安装\n\n```shell\n$ sudo apt-get install gdb\n```\n\n#### 3、基本操作\n\n##### 进入GDB界面：\n\n```shell\nroot@Noodles:/usr1/code# gdb\nGNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1\nCopyright (C) 2022 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<https://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\n```\n\n进入GDB界面不显示提示信息：\n\n如果不想显示这个信息，则可以使用`-q`选项把提示信息关掉:\n\n```shell\n$ gdb -q\n(gdb)\n```\n\n你可以在~/.bashrc中，为gdb设置一个别名：\n\n```shell\nalias gdb=\"gdb -q\"\n```\n\n##### 信息查询\n\n###### 查询版本信息\n\n```shell\n查询版本信息：(gdb) show version\n(gdb) show version\nGNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1\nCopyright (C) 2022 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<https://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\n```\n\n```shell\n版权相关信息：(gdb) show copying或者\n(gdb) show copying\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n(gdb) show warranty\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n```\n\n###### 输出信息多的时候不暂停输出：\n\n当GDB输出信息较多时，会暂停输出，并打印提示信息：\n\n```shell\n--Type <RET> for more, q to quit, c to continue without paging--qq\n```\n\n如果想要全部输出不暂停，可以使用\n\n“set pagination off`”或者“`set height 0`”命令。这样gdb就会全部输出，不会暂停。\n\n##### 进入GDB\n\n编译文件，生成a.out go\n\n```shell\nroot@Noodles:/usr1/code# gdb a.out \n```\n\n\n\n#### 4、函数相关\n\n##### 列出函数名称：“`info functions`”\n\n使用gdb调试时，使用“`info functions`”命令可以列出可执行文件的所有函数名称\n\n以下代码为例：\n\n```c++\n#include <stdio.h>\n#include <pthread.h>\nvoid *thread_func(void *p_arg)\n{\n        while (1)\n        {\n                sleep(10);\n        }\n}\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n使用gdb调试时，使用“`info functions`”命令可以列出可执行文件的所有函数名称。如下：\n\n```shell\n(gdb) info functions\nAll defined functions:\n\nFile a.c:\nint main(void);\nvoid *thread_func(void *);\n\nNon-debugging symbols:\n0x0805079c  _PROCEDURE_LINKAGE_TABLE_\n0x080507ac  _cleanup@plt\n0x080507bc  atexit\n0x080507bc  atexit@plt\n0x080507cc  __fpstart\n0x080507cc  __fpstart@plt\n0x080507dc  exit@plt\n0x080507ec  __deregister_frame_info_bases@plt\n0x080507fc  __register_frame_info_bases@plt\n0x0805080c  _Jv_RegisterClasses@plt\n0x0805081c  sleep\n0x0805081c  sleep@plt\n0x0805082c  pthread_create@plt\n0x0805083c  _start\n0x080508b4  _mcount\n0x080508b8  __do_global_dtors_aux\n0x08050914  frame_dummy\n0x080509f4  __do_global_ctors_aux\n0x08050a24  _init\n0x08050a31  _fini\n```\n\n另外这个命令也支持正则表达式：“`info functions regex`”，这样只会列出符合正则表达式的函数名称，例如：\n\n```\n(gdb) info functions thre*\nAll functions matching regular expression \"thre*\":\n\nFile a.c:\nvoid *thread_func(void *);\n\nNon-debugging symbols:\n0x0805082c  pthread_create@plt\n```\n\n可以看到gdb只会列出名字里包含“`thre`”的函数。\n\n###### 进入或者跳过函数：step、set step-mode on\n\n使用GDB调试的时候，使用step命令（s）进入函数，如果不想进入某个函数可以直接使用next命令（缩写为n）不进入函数，gdb会等函数执行完，再显示下一行要执行的程序代码。\n\n默认情况下，gdb不会进入不带调试信息的函数。可以执行“set step-mode on”命令，这样gdb就不会跳过没有调试信息的函数。\n\n###### 退出正在调试的函数：“`finish`”或者“`return`”\n\n当单步调试一个函数时，如果不想继续跟踪下去了，可以有两种方式退出。\n\n第一种用“`finish`”命令，这样函数会继续执行完，并且打印返回值，然后等待输入接下来的命令。\n\n第二种用“`return`”命令，这样函数不会继续执行下面的语句，而是直接返回。也可以用“`return expression`”命令指定函数的返回值\n\n###### 直接执行函数：`call`”或“`print`\n\n使用gdb调试程序时，可以使用“`call`”或“`print`”命令直接调用函数执行\n\n###### 打印函数堆栈信息：i frame\n\n使用gdb调试程序时，可以使用“`i frame`”命令（`i`是`info`命令缩写）显示函数堆栈帧信息。执行该命令，会输出函数的堆栈地址，指令寄存器的值，局部变量地址等信息，可以对照汇编指令分析函数的栈信息。\n\n###### 打印尾调用栈帧信息：\n\n当一个函数最后一条指令是调用另外一个函数时，开启优化选项的编译器常常以最后被调用的函数返回值作为调用者的返回值，这称之为“尾调用（Tail call）”。以上面程序为例，编译程序（使用‘-O’）\n\n```shell\ngcc -g -O -o test test.c\n```\n\n查看`main`函数汇编代码：\n\n```shell\n(gdb) disassemble main\nDump of assembler code for function main:\n0x0000000000400565 <+0>:     sub    $0x8,%rsp\n0x0000000000400569 <+4>:     callq  0x400536 <a>\n0x000000000040056e <+9>:     mov    $0x0,%eax\n0x0000000000400573 <+14>:    add    $0x8,%rsp\n0x0000000000400577 <+18>:    retq\n```\n\n可以看到`main`函数直接调用了函数`a`，根本看不到函数`b`和函数`c`的影子。\n\n在函数`a`入口处打上断点，程序停止后，打印堆栈帧信息：\n\n```shell\n(gdb) i frame\nStack level 0, frame at 0x7fffffffe590:\n rip = 0x400536 in a (test.c:4); saved rip = 0x40056e\n called by frame at 0x7fffffffe5a0\n source language c.\n Arglist at 0x7fffffffe580, args:\n Locals at 0x7fffffffe580, Previous frame's sp is 0x7fffffffe590\n Saved registers:\n  rip at 0x7fffffffe588\n```\n\n看不到尾调用的相关信息。\n\n可以设置“`debug entry-values`”选项为非0的值，这样除了输出正常的函数堆栈帧信息以外，还可以输出尾调用的相关信息：\n\n```shell\n(gdb) set debug entry-values 1\n(gdb) b test.c:4\nBreakpoint 1 at 0x400536: file test.c, line 4.\n(gdb) r\nStarting program: /home/nanxiao/test\n\nBreakpoint 1, a () at test.c:4\n4       {\n(gdb) i frame\ntailcall: initial:\nStack level 0, frame at 0x7fffffffe590:\n rip = 0x400536 in a (test.c:4); saved rip = 0x40056e\n called by frame at 0x7fffffffe5a0\n source language c.\n Arglist at 0x7fffffffe580, args:\n Locals at 0x7fffffffe580, Previous frame's sp is 0x7fffffffe590\n Saved registers:\n  rip at 0x7fffffffe588\n```\n\n可以看到输出了“`tailcall: initial:`”信息。\n\n###### 选择函数堆栈帧：“`frame n`”\n\n用gdb调试程序时，当程序暂停后，可以用“`frame n`”命令选择函数堆栈帧，其中`n`是层数。用gdb调试程序时，当程序暂停后，可以用“`frame n`”命令选择函数堆栈帧，其中`n`是层数。\n\n备注，此处需要加入例子说明\n\n用gdb调试程序时，当程序暂停后，可以用“`frame n`”命令选择函数堆栈帧，其中`n`是层数。\n\n###### 上下切换函数堆栈\n\n用gdb调试程序时，当程序暂停后，可以用“`up n`”或“`down n`”命令向上或向下选择函数堆栈帧，其中`n`是层数。\n\n例子：\n\n```\n#include <stdio.h>\n\nint func1(int a)\n{\n        return 2 * a;\n}\n\nint func2(int a)\n{\n        int c = 0;\n        c = 2 * func1(a);\n        return c;\n}\n\nint func3(int a)\n{\n        int c = 0;\n        c = 2 * func2(a);\n        return c;\n}\n\nint main(void)\n{\n        printf(\"%d\\n\", func3(10));\n        return 0;\n}\n```\n\n用gdb调试程序时，当程序暂停后，可以用“`up n`”或“`down n`”命令向上或向下选择函数堆栈帧，其中`n`是层数。以上面程序为例：\n\n```\n(gdb) b test.c:5\nBreakpoint 1 at 0x40053d: file test.c, line 5.\n(gdb) r\nStarting program: /home/nanxiao/test\n\nBreakpoint 1, func1 (a=10) at test.c:5\n5               return 2 * a;\n(gdb) bt\n#0  func1 (a=10) at test.c:5\n#1  0x0000000000400560 in func2 (a=10) at test.c:11\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n#3  0x000000000040059e in main () at test.c:24\n(gdb) frame 2\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n18              c = 2 * func2(a);\n(gdb) up 1\n#3  0x000000000040059e in main () at test.c:24\n24              printf(\"%d\\n\", func3(10));\n(gdb) down 2\n#1  0x0000000000400560 in func2 (a=10) at test.c:11\n11              c = 2 * func1(a);\n```\n\n可以看到程序断住后，先执行“`frame 2`”命令，切换到`fun3`函数。接着执行“`up 1`”命令，此时会切换到`main`函数，也就是会往外层的堆栈帧移动一层。反之，当执行“`down 2`”命令后，又会向内层堆栈帧移动二层。如果不指定`n`，则`n`默认为`1`.\n\n还有“`up-silently n`”和“`down-silently n`”这两个命令，与“`up n`”和“`down n`”命令区别在于，切换堆栈帧后，不会打印信息，仍以上面程序为例：\n\n```\n(gdb) up\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n18              c = 2 * func2(a);\n(gdb) bt\n#0  func1 (a=10) at test.c:5\n#1  0x0000000000400560 in func2 (a=10) at test.c:11\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n#3  0x000000000040059e in main () at test.c:24\n(gdb) up-silently\n(gdb) i frame\nStack level 3, frame at 0x7fffffffe5a0:\n rip = 0x40059e in main (test.c:24); saved rip = 0x7ffff7a35ec5\n caller of frame at 0x7fffffffe590\n source language c.\n Arglist at 0x7fffffffe590, args:\n Locals at 0x7fffffffe590, Previous frame's sp is 0x7fffffffe5a0\n Saved registers:\n  rbp at 0x7fffffffe590, rip at 0x7fffffffe598\n```\n\n可以看到从`func3`切换到`main`函数堆栈帧时，并没有打印出相关信息。\n\n#### 5、断点：b\n\n###### 在匿名空间设置断点\n\n例子：\n\n```c++\nnamespace Foo\n{\n  void foo()\n  {\n  }\n}\n\nnamespace\n{\n  void bar()\n  {\n  }\n}\n```\n\n在gdb中，如果要对namespace Foo中的foo函数设置断点，可以使用如下命令：\n\n```\n(gdb) b Foo::foo\n```\n\n如果要对匿名空间中的bar函数设置断点，可以使用如下命令：\n\n```\n(gdb) b (anonymous namespace)::bar\n```\n\n###### 在程序地址上打断点\n\n例子：\n\n```\n0000000000400522 <main>:\n  400522:       55                      push   %rbp\n  400523:       48 89 e5                mov    %rsp,%rbp\n  400526:       8b 05 00 1b 00 00       mov    0x1b00(%rip),%eax        # 40202c <he+0xc>\n  40052c:       85 c0                   test   %eax,%eax\n  40052e:       75 07                   jne    400537 <main+0x15>\n  400530:       b8 7c 06 40 00          mov    $0x40067c,%eax\n  400535:       eb 05                   jmp    40053c <main+0x1a>\n```\n\n当调试汇编程序，或者没有调试信息的程序时，经常需要在程序地址上打断点，方法为`b *address`。例如：\n\n```\n(gdb) b *0x400522\n```\n\n该方法，需要结合frame打印函数栈信息的命令结合，先打印栈信息，在选择地址打断点\n\n###### 在程序入口处打断点\n\n方法一\n\n```shell\n$ strip a.out\n$ readelf -h a.out \nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x400440\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          4496 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         9\n  Size of section headers:           64 (bytes)\n  Number of section headers:         29\n  Section header string table index: 28\n```\n\n方法二\n\n```shell\n$ gdb a.out \n>>> info files\nSymbols from \"/home/me/a.out\".\nLocal exec file:\n\t`/home/me/a.out', file type elf64-x86-64.\n\tEntry point: 0x400440\n\t0x0000000000400238 - 0x0000000000400254 is .interp\n\t0x0000000000400254 - 0x0000000000400274 is .note.ABI-tag\n\t0x0000000000400274 - 0x0000000000400298 is .note.gnu.build-id\n\t0x0000000000400298 - 0x00000000004002b4 is .gnu.hash\n\t0x00000000004002b8 - 0x0000000000400318 is .dynsym\n\t0x0000000000400318 - 0x0000000000400355 is .dynstr\n\t0x0000000000400356 - 0x000000000040035e is .gnu.version\n\t0x0000000000400360 - 0x0000000000400380 is .gnu.version_r\n\t0x0000000000400380 - 0x0000000000400398 is .rela.dyn\n\t0x0000000000400398 - 0x00000000004003e0 is .rela.plt\n\t0x00000000004003e0 - 0x00000000004003fa is .init\n\t0x0000000000400400 - 0x0000000000400440 is .plt\n\t0x0000000000400440 - 0x00000000004005c2 is .text\n\t0x00000000004005c4 - 0x00000000004005cd is .fini\n\t0x00000000004005d0 - 0x00000000004005e0 is .rodata\n\t0x00000000004005e0 - 0x0000000000400614 is .eh_frame_hdr\n\t0x0000000000400618 - 0x000000000040070c is .eh_frame\n\t0x0000000000600e10 - 0x0000000000600e18 is .init_array\n\t0x0000000000600e18 - 0x0000000000600e20 is .fini_array\n\t0x0000000000600e20 - 0x0000000000600e28 is .jcr\n\t0x0000000000600e28 - 0x0000000000600ff8 is .dynamic\n\t0x0000000000600ff8 - 0x0000000000601000 is .got\n\t0x0000000000601000 - 0x0000000000601030 is .got.plt\n\t0x0000000000601030 - 0x0000000000601040 is .data\n\t0x0000000000601040 - 0x0000000000601048 is .bss\n```\n\n当调试没有调试信息的程序时，直接运行`start`命令是没有效果的：\n\n```\n(gdb) start\nFunction \"main\" not defined.\n```\n\n如果不知道main在何处，那么可以在程序入口处打断点。先通过`readelf`或者进入gdb，执行`info files`获得入口地址，然后：\n\n```shell\n(gdb) b *0x400440\n(gdb) r\n```\n\n###### 在文件行号打断点\n\n这个比较简单，如果要在当前文件中的某一行打断点，直接`b linenum`即可，例如：\n\n```\n(gdb) b 7\n```\n\n也可以显式指定文件，`b file:linenum`例如：\n\n```\n(gdb) b file.c:6\nBreakpoint 1 at 0x40053b: file.c:6. (2 locations)\n(gdb) i breakpoints \nNum     Type           Disp Enb Address            What\n1       breakpoint     keep y   <MULTIPLE>         \n1.1                         y     0x000000000040053b in print_a at a/file.c:6\n1.2                         y     0x000000000040054b in print_b at b/file.c:6\n```\n\n可以看出，gdb会对所有匹配的文件设置断点。你可以通过指定（部分）路径，来区分相同的文件名：\n\n```\n(gdb) b a/file.c:6\n```\n\n注意：通过行号进行设置断点的一个弊端是，如果你更改了源程序，那么之前设置的断点就可能不是你想要的了。\n\n###### 保存已经设置的断点\n\n在gdb中，可以使用如下命令将设置的断点保存下来：\n\n```\n(gdb) save breakpoints file-name-to-save\n```\n\n下此调试时，可以使用如下命令批量设置保存的断点：\n\n```\n(gdb) source file-name-to-save\n(gdb) info breakpoints \nNum     Type           Disp Enb Address            What\n1       breakpoint     keep y   0x00000000005a7af0 in gdb_main at /home/xmj/project/binutils-trunk/gdb/main.c:1061\n2       breakpoint     keep y   0x00000000005a6bd0 in captured_main at /home/xmj/project/binutils-trunk/gdb/main.c:310\n3       breakpoint     keep y   0x00000000005a68b\n```\n\n###### 设置临时断点\n\n在使用gdb时，如果想让断点只生效一次，可以使用“tbreak”命令（缩写为：tb）。以上面程序为例：\n\n```\n(gdb) tb a.c:15\nTemporary breakpoint 1 at 0x400500: file a.c, line 15.\n(gdb) i b\nNum     Type           Disp Enb Address            What\n1       breakpoint     del  y   0x0000000000400500 in main at a.c:15\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:15\n15              printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n(gdb) i b\nNo breakpoints or watchpoints.\n```\n\n首先在文件的第15行设置临时断点，当程序断住后，用“i b”（\"info breakpoints\"缩写）命令查看断点，发现断点没有了。也就是断点命中一次后，就被删掉了。\n\n\n\n###### 设置条件断点：\n\n例子：\n\n```\n#include <stdio.h>\n\t\nint main(void)\n{\n        int i = 0;\n\t\tint sum = 0;\n\n\t\tfor (i = 1; i <= 200; i++)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\n\t\tprintf(\"%d\\n\", sum);\n        return 0;\n}\n```\n\ngdb可以设置条件断点，也就是只有在条件满足时，断点才会被触发，命令是“`break … if cond`”。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cc: file a.c, line 5.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:5\n5                       int i = 0;\n(gdb) b 10 if i==101\nBreakpoint 2 at 0x4004e3: file a.c, line 10.\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nBreakpoint 2, main () at a.c:10\n10                                      sum += i;\n(gdb) p sum\n$1 = 5050\n```\n\n可以看到设定断点只在`i`的值为`101`时触发，此时打印`sum`的值为`5050`。\n\n###### 忽略断点：\n\n例子：\n\n```c\n#include <stdio.h>\n\t\nint main(void)\n{\n        int i = 0;\n\t\tint sum = 0;\n\n\t\tfor (i = 1; i <= 200; i++)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\n\t\tprintf(\"%d\\n\", sum);\n        return 0;\n}\n```\n\n在设置断点以后，可以忽略断点，命令是“`ignore bnum count`”：意思是接下来`count`次编号为`bnum`的断点触发都不会让程序中断，只有第`count + 1`次断点触发才会让程序中断。以上面程序为例：\n\n```shell\n(gdb) b 10\nBreakpoint 1 at 0x4004e3: file a.c, line 10.\n(gdb) ignore 1 5\nWill ignore next 5 crossings of breakpoint 1.\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nBreakpoint 1, main () at a.c:10\n10                                      sum += i;\n(gdb) p i\n$1 = 6\n```\n\n可以看到设定忽略断点前`5`次触发后，第一次断点断住时，打印`i`的值是`6`。如果想让断点下次就生效，可以将`count`置为`0`：“`ignore 1 0`”。\n\n#### 6、观察点\n\n##### 设置观察点\n\n例子：\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nint main(int argc, char* argv[])\n{\n        pthread_t t1;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n\t\t\n        sleep(1000);\n        return 0;\n}\n```\n\ngdb可以使用“`watch`”命令设置观察点，也就是当一个变量值发生变化时，程序会停下来。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4005a8: file a.c, line 19.\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nTemporary breakpoint 1, main () at a.c:19\n19              pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n(gdb) watch a\nHardware watchpoint 2: a\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff782c700 (LWP 8813)]\n[Switching to Thread 0x7ffff782c700 (LWP 8813)]\nHardware watchpoint 2: a\n\nOld value = 0\nNew value = 1\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: a\n\nOld value = 1\nNew value = 2\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n```\n\n可以看到，使用“`watch a`”命令以后，当`a`的值变化：由`0`变成`1`，由`1`变成`2`，程序都会停下来。\n此外也可以使用“`watch *(data type*)address`”这样的命令，仍以上面程序为例:\n\n```\n(gdb) p &a\n$1 = (int *) 0x6009c8 <a>\n(gdb) watch *(int*)0x6009c8\nHardware watchpoint 2: *(int*)0x6009c8\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff782c700 (LWP 15431)]\n[Switching to Thread 0x7ffff782c700 (LWP 15431)]\nHardware watchpoint 2: *(int*)0x6009c8\n\nOld value = 0\nNew value = 1\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: *(int*)0x6009c8\n\nOld value = 1\nNew value = 2\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n```\n\n先得到`a`的地址：`0x6009c8`，接着用“`watch *(int*)0x6009c8`”设置观察点，可以看到同“`watch a`”命令效果一样。\n观察点可以通过软件或硬件的方式实现，取决于具体的系统。但是软件实现的观察点会导致程序运行很慢，使用时需注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n如果系统支持硬件观测的话，当设置观测点是会打印如下信息：\nHardware watchpoint num: expr\n\n如果不想用硬件观测点的话可如下设置：\nset can-use-hw-watchpoints\n\n\n\n##### 设置观察点之对特定线程生效\n\n```shell\n#include <stdio.h>\n#include <pthread.h>\n\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nvoid *thread2_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n\t\tpthread_create(&t2, NULL, thread2_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\ngdb可以使用“`watch expr thread threadnum`”命令设置观察点只针对特定线程生效，也就是只有编号为`threadnum`的线程改变了变量的值，程序才会停下来，其它编号线程改变变量的值不会让程序停住。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4005d4: file a.c, line 28.\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nTemporary breakpoint 1, main () at a.c:28\n28              pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n(gdb) n\n[New Thread 0x7ffff782c700 (LWP 25443)]\n29              pthread_create(&t2, NULL, thread2_func, \"Thread 2\");\n(gdb)\n[New Thread 0x7ffff6e2b700 (LWP 25444)]\n31              sleep(1000);\n(gdb) i threads\n  Id   Target Id         Frame\n  3    Thread 0x7ffff6e2b700 (LWP 25444) 0x00007ffff7915911 in clone () from /lib64/libc.so.6\n  2    Thread 0x7ffff782c700 (LWP 25443) 0x00007ffff78d9bcd in nanosleep () from /lib64/libc.so.6\n* 1    Thread 0x7ffff7fe9700 (LWP 25413) main () at a.c:31\n(gdb) wa a thread 2\nHardware watchpoint 2: a\n(gdb) c\nContinuing.\n[Switching to Thread 0x7ffff782c700 (LWP 25443)]\nHardware watchpoint 2: a\n\nOld value = 1\nNew value = 3\nthread1_func (p_arg=0x400718) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: a\n\nOld value = 3\nNew value = 5\nthread1_func (p_arg=0x400718) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: a\n\nOld value = 5\nNew value = 7\nthread1_func (p_arg=0x400718) at a.c:11\n11                      sleep(10);\n```\n\n可以看到，使用“`wa a thread 2`”命令（`wa`是`watch`命令的缩写）以后，只有`thread1_func`改变`a`的值才会让程序停下来。\n需要注意的是这种针对特定线程设置观察点方式只对硬件观察点才生效，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n##### 设置读观察点\n\n```shell\n#include <stdio.h>\n#include <pthread.h>\n\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%d\\n\", a);\n                sleep(10);\n        }\n}\n\nint main(void)\n{\n        pthread_t t1;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n\n        sleep(1000);\n        return;\n}\n```\n\ngdb可以使用“`rwatch`”命令设置读观察点，也就是当发生读取变量行为时，程序就会暂停住。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4005f3: file a.c, line 19.\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nTemporary breakpoint 1, main () at a.c:19\n19              pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n(gdb) rw a\nHardware read watchpoint 2: a\n(gdb) c\nContinuing.\n[New Thread 0x7ffff782c700 (LWP 5540)]\n[Switching to Thread 0x7ffff782c700 (LWP 5540)]\nHardware read watchpoint 2: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40071c) at a.c:10\n10                      printf(\"%d\\n\", a);\n(gdb) c\nContinuing.\n0\nHardware read watchpoint 2: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40071c) at a.c:10\n10                      printf(\"%d\\n\", a);\n(gdb) c\nContinuing.\n0\nHardware read watchpoint 2: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40071c) at a.c:10\n10                      printf(\"%d\\n\", a);\n```\n\n可以看到，使用“`rw a`”命令（`rw`是`rwatch`命令的缩写）以后，每次访问`a`的值都会让程序停下来。\n需要注意的是`rwatch`命令只对硬件观察点才生效，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n##### 设置写观察点\n\n```\n#include <stdio.h>\n#include <pthread.h>\n\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nvoid *thread2_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%d\\n\", a);;\n                sleep(10);\n        }\n}\n\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread2_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\ngdb可以使用“`awatch`”命令设置读写观察点，也就是当发生读取变量或改变变量值的行为时，程序就会暂停住。以上面程序为例:\n\n```\n(gdb) aw a\nHardware access (read/write) watchpoint 1: a\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff782c700 (LWP 16938)]\n[Switching to Thread 0x7ffff782c700 (LWP 16938)]\nHardware access (read/write) watchpoint 1: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40076c) at a.c:10\n10                      a++;\n(gdb) c\nContinuing.\nHardware access (read/write) watchpoint 1: a\n\nOld value = 0\nNew value = 1\nthread1_func (p_arg=0x40076c) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\n[New Thread 0x7ffff6e2b700 (LWP 16939)]\n[Switching to Thread 0x7ffff6e2b700 (LWP 16939)]\nHardware access (read/write) watchpoint 1: a\n\nValue = 1\n0x00000000004005f2 in thread2_func (p_arg=0x400775) at a.c:19\n19                      printf(\"%d\\n\", a);;\n(gdb) c\nContinuing.\n1\n[Switching to Thread 0x7ffff782c700 (LWP 16938)]\nHardware access (read/write) watchpoint 1: a\n\nValue = 1\n0x00000000004005c6 in thread1_func (p_arg=0x40076c) at a.c:10\n10                      a++;\n```\n\n可以看到，使用“`aw a`”命令（`aw`是`awatch`命令的缩写）以后，每次读取或改变`a`的值都会让程序停下来。\n需要注意的是`awatch`命令只对硬件观察点才生效，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n#### 7、Catchpoint\n\n##### 让Catchpoint只触发一次\n\n```shell\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n    pid_t pid;\n    int i = 0;\n\n    for (i = 0; i < 2; i++)\n    {\n\t    pid = fork();\n\t    if (pid < 0)\n\t    {\n\t        exit(1);\n\t    }\n\t    else if (pid == 0)\n\t    {\n\t        exit(0);\n\t    }\n    }\n    printf(\"hello world\\n\");\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`tcatch`”命令设置`catchpoint`只触发一次，以上面程序为例：\n\n```\n(gdb) tcatch fork\nCatchpoint 1 (fork)\n(gdb) r\nStarting program: /home/nan/a\n\nTemporary catchpoint 1 (forked process 27377), 0x00000034e42acdbd in fork () from /lib64/libc.so.6\n(gdb) c\nContinuing.\nhello world\n[Inferior 1 (process 27373) exited normally]\n(gdb) q\n```\n\n可以看到当程序只在第一次调用`fork`时暂停。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 为fork调用设置catchpoint\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n    pid_t pid;\n\n    pid = fork();\n    if (pid < 0)\n    {\n        exit(1);\n    }\n    else if (pid > 0)\n    {\n        exit(0);\n    }\n    printf(\"hello world\\n\");\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`catch fork`”命令为`fork`调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch fork\nCatchpoint 1 (fork)\n(gdb) r\nStarting program: /home/nan/a \n\nCatchpoint 1 (forked process 33499), 0x00000034e42acdbd in fork () from /lib64/libc.so.6\n(gdb) bt\n#0  0x00000034e42acdbd in fork () from /lib64/libc.so.6\n#1  0x0000000000400561 in main () at a.c:9\n```\n\n可以看到当`fork`调用发生后，gdb会暂停程序的运行。\n注意：目前只有HP-UX和GNU/Linux支持这个功能。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 为vfork调用设置catchpoint\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n    pid_t pid;\n\n    pid = vfork();\n    if (pid < 0)\n    {\n        exit(1);\n    }\n    else if (pid > 0)\n    {\n        exit(0);\n    }\n    printf(\"hello world\\n\");\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`catch vfork`”命令为`vfork`调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch vfork\nCatchpoint 1 (vfork)\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (vforked process 27312), 0x00000034e42acfc4 in vfork ()\n   from /lib64/libc.so.6\n(gdb) bt\n#0  0x00000034e42acfc4 in vfork () from /lib64/libc.so.6\n#1  0x0000000000400561 in main () at a.c:9\n```\n\n可以看到当`vfork`调用发生后，gdb会暂停程序的运行。\n注意：目前只有HP-UX和GNU/Linux支持这个功能。\n\n##### 为exec调用设置catchpoint\n\n```shell\n#include <unistd.h>\n\nint main(void) {\n    execl(\"/bin/ls\", \"ls\", NULL);\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`catch exec`”命令为`exec`系列系统调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch exec\nCatchpoint 1 (exec)\n(gdb) r\nStarting program: /home/nan/a\nprocess 32927 is executing new program: /bin/ls\n\nCatchpoint 1 (exec'd /bin/ls), 0x00000034e3a00b00 in _start () from /lib64/ld-linux-x86-64.so.2\n(gdb) bt\n#0  0x00000034e3a00b00 in _start () from /lib64/ld-linux-x86-64.so.2\n#1  0x0000000000000001 in ?? ()\n#2  0x00007fffffffe73d in ?? ()\n#3  0x0000000000000000 in ?? ()\n```\n\n可以看到当`execl`调用发生后，gdb会暂停程序的运行。\n注意：目前只有HP-UX和GNU/Linux支持这个功能。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 为系统调用调用设置catchpoint\n\n```c\n#include <stdio.h>\n\nint main(void)\n{\n    char p1[] = \"Sam\";\n    char *p2 = \"Bob\";\n\n    printf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以使用`catch syscall [name | number]`为关注的系统调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch syscall mmap\nCatchpoint 1 (syscall 'mmap' [9])\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (returned from syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n```\n\n可以看到当`mmap`调用发生后，gdb会暂停程序的运行。\n也可以使用系统调用的编号设置`catchpoint`，仍以上面程序为例：\n\n```\n(gdb) catch syscall 9\nCatchpoint 1 (syscall 'mmap' [9])\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (returned from syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n```\n\n可以看到和使用`catch syscall mmap`效果是一样的。（系统调用和编号的映射参考具体的`xml`文件，以我的系统为例，就是在`/usr/local/share/gdb/syscalls`文件夹下的`amd64-linux.xml`。）\n\n如果不指定具体的系统调用，则会为所有的系统调用设置`catchpoint`，仍以上面程序为例：\n\n```\n(gdb) catch syscall\nCatchpoint 1 (any syscall)\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (call to syscall brk), 0x00000034e3a1618a in brk ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (returned from syscall brk), 0x00000034e3a1618a in brk ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb)\nContinuing.\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 通过为ptrace调用设置catchpoint破解anti-debugging的程序\n\n```c\n#include <sys/ptrace.h>\n#include <stdio.h>\n \nint main()                                                                      \n{\n        if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0 ) {\n                printf(\"Gdb is debugging me, exit.\\n\");\n                return 1;\n        }\n        printf(\"No debugger, continuing\\n\");\n        return 0;\n}\n```\n\n有些程序不想被gdb调试，它们就会在程序中调用“`ptrace`”函数，一旦返回失败，就证明程序正在被gdb等类似的程序追踪，所以就直接退出。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400508: file a.c, line 6.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:6\n6                       if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0 ) {\n(gdb) n\n7                               printf(\"Gdb is debugging me, exit.\\n\");\n(gdb)\nGdb is debugging me, exit.\n8                               return 1;\n```\n\n破解这类程序的办法就是为`ptrace`调用设置`catchpoint`，通过修改`ptrace`的返回值，达到目的。仍以上面程序为例：\n\n```\n(gdb) catch syscall ptrace\nCatchpoint 2 (syscall 'ptrace' [101])\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nCatchpoint 2 (call to syscall ptrace), 0x00007ffff7b2be9c in ptrace () from /lib64/libc.so.6\n(gdb) c\nContinuing.\n\nCatchpoint 2 (returned from syscall ptrace), 0x00007ffff7b2be9c in ptrace () from /lib64/libc.so.6\n(gdb) set $rax = 0\n(gdb) c\nContinuing.\nNo debugger, continuing\n[Inferior 1 (process 11491) exited normally]\n```\n\n可以看到，通过修改`rax`寄存器的值，达到修改返回值的目的，从而让gdb可以继续调试程序（打印“`No debugger, continuing`”）。\n详细过程，可以参见这篇文章[避開 PTRACE_TRACME 反追蹤技巧](http://blog.linux.org.tw/~jserv/archives/2011_08.html).\n\n\n\n#### 8、打印\n\n##### 打印ASCII和宽字符字符串\n\n```c\n#include <stdio.h>\n#include <wchar.h>\n\nint main(void)\n{\n        char str1[] = \"abcd\";\n        wchar_t str2[] = L\"abcd\";\n        \n        return 0;\n}\n```\n\n用gdb调试程序时，可以使用“`x/s`”命令打印ASCII字符串。以上面程序为例：\n\n```\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n(gdb) n\n7               wchar_t str2[] = L\"abcd\";\n(gdb) \n9               return 0;\n(gdb) x/s str1\n0x804779f:      \"abcd\"\n```\n\n可以看到打印出了`str1`字符串的值。\n\n打印宽字符字符串时，要根据宽字符的长度决定如何打印。仍以上面程序为例：\n\n```\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n(gdb) n\n7               wchar_t str2[] = L\"abcd\";\n(gdb) \n9               return 0;\n(gdb) p sizeof(wchar_t)\n$1 = 4\n(gdb) x/ws str2\n0x8047788:      U\"abcd\"\n```\n\n由于当前平台宽字符的长度为4个字节，则用“`x/ws`”命令。如果是2个字节，则用“`x/hs`”命令。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Memory.html).\n\n##### 打印STL容器中的内容\n\n```c\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main ()\n{\n  vector<int> vec(10); // 10 zero-initialized elements\n\n  for (int i = 0; i < vec.size(); i++)\n    vec[i] = i;\n\n  cout << \"vec contains:\";\n  for (int i = 0; i < vec.size(); i++)\n    cout << ' ' << vec[i];\n  cout << '\\n';\n\n  return 0;\n}\n```\n\n在gdb中，如果要打印C++ STL容器的内容，缺省的显示结果可读性很差：\n\n```\n(gdb) p vec\n$1 = {<std::_Vector_base<int, std::allocator<int> >> = {\n    _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, _M_start = 0x404010, _M_finish = 0x404038, \n          _M_end_of_storage = 0x404038}}, <No data fields>}\n```\n\ngdb 7.0之后，可以使用gcc提供的python脚本，来改善显示结果：\n\n```\n(gdb) p vec\n$1 = std::vector of length 10, capacity 10 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n\n某些发行版(Fedora 11+)，不需要额外的设置工作。可在gdb命令行下验证（若没有显示，可按下文的方法进行设置）。\n\n```\n\t(gdb) info pretty-printer\n```\n\n方法如下:\n\n1. 获得python脚本，建议使用gcc默认安装的\n\n   ```\n    sudo find / -name \"*libstdcxx*\"\n   ```\n\n2. 若本机查找不到python脚本，建议下载gcc对应版本源码包，相对目录如下\n\n   ```\n    gcc-4.8.1/libstdc++-v3/python\n   ```\n\n3. 也可直接下载最新版本\n\n   ```\n    svn co svn://gcc.gnu.org/svn/gcc/trunk/libstdc++-v3/python\n   ```\n\n4. 将如下代码添加到.gdbinit文件中（假设python脚本位于 /home/maude/gdb_printers/ 下）\n\n   ```\n    python\n    import sys\n    sys.path.insert(0, '/home/maude/gdb_printers/python')\n    from libstdcxx.v6.printers import register_libstdcxx_printers\n    register_libstdcxx_printers (None)\n    end\n   ```\n\n（源自https://sourceware.org/gdb/wiki/STLSupport）\n\n`p vec`的输出无法阅读，但能给我们提示，从而得到无需脚本支持的技巧：\n\n```\n(gdb) p *(vec._M_impl._M_start)@vec.size()\n$2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n\n\n\n将 [dbinit_stl_views](http://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt) 下载下来,，执行命令\n\n```shell\ncat dbinit_stl_views-1.03.txt >> ~/.gdbinit\n```\n\n即可\n一些常用的容器及其对应的命令关系\n\n```shell\nstd::vector<T>  pvector stl_variable \nstd::list<T>  plist stl_variable T \nstd::map<T,T>  pmap stl_variable \nstd::multimap<T,T>  pmap stl_variable \nstd::set<T>  pset stl_variable T \nstd::multiset<T>  pset stl_variable \nstd::deque<T>  pdequeue stl_variable \nstd::stack<T>  pstack stl_variable \nstd::queue<T>  pqueue stl_variable \nstd::priority_queue<T>  ppqueue stl_variable \nstd::bitset<n><td>  pbitset stl_variable \nstd::string  pstring stl_variable \nstd::widestring  pwstring stl_variable  \n```\n\n##### 打印大数组中的内容\n\n```c\nint main()\n{\n  int array[201];\n  int i;\n\n  for (i = 0; i < 201; i++)\n    array[i] = i;\n\n  return 0;\n}\n```\n\n在gdb中，如果要打印大数组的内容，缺省最多会显示200个元素：\n\n```\n(gdb) p array\n$1 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, \n  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, \n  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, \n  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199...}\n```\n\n可以使用如下命令，设置这个最大限制数：\n\n```\n(gdb) set print elements number-of-elements\n```\n\n也可以使用如下命令，设置为没有限制：\n\n```\n(gdb) set print elements 0\n```\n\n或\n\n```\n(gdb) set print elements unlimited\n(gdb) p array\n$2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, \n  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, \n  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, \n  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/download/onlinedocs/gdb/Print-Settings.html#Print-Settings)\n\n##### 打印数组中任意连续元素值\n\n```c\nint main(void)\n{\n  int array[201];\n  int i;\n\n  for (i = 0; i < 201; i++)\n    array[i] = i;\n\n  return 0;\n}\n```\n\n在gdb中，如果要打印数组中任意连续元素的值，可以使用“`p array[index]@num`”命令（`p`是`print`命令的缩写）。其中`index`是数组索引（从0开始计数），`num`是连续多少个元素。以上面代码为例：\n\n```\n(gdb) p array\n$8 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n  63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n  94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n  120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\n  145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,\n  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\n  195, 196, 197, 198, 199...}\n(gdb) p array[60]@10\n$9 = {60, 61, 62, 63, 64, 65, 66, 67, 68, 69}\n```\n\n可以看到打印了`array`数组第60~69个元素的值。\n如果要打印从数组开头连续元素的值，也可使用这个命令：“`p *array@num`”：\n\n```\n(gdb) p *array@10\n$2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Arrays.html#Arrays)\n\n##### 打印数组的索引下标\n\n```c\n#include <stdio.h>\n\nint num[10] = { \n  1 << 0,\n  1 << 1,\n  1 << 2,\n  1 << 3,\n  1 << 4,\n  1 << 5,\n  1 << 6,\n  1 << 7,\n  1 << 8,\n  1 << 9\n};\n\nint main (void)\n{\n  int i;\n\n  for (i = 0; i < 10; i++)\n    printf (\"num[%d] = %d\\n\", i, num[i]);\n\n  return 0;\n}\n```\n\n在gdb中，当打印一个数组时，缺省是不打印索引下标的：\n\n```\n(gdb) p num\n$1 = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512}\n```\n\n如果要打印索引下标，则可以通过如下命令进行设置：\n\n```\n(gdb) set print array-indexes on\n\n(gdb) p num\n$2 = {[0] = 1, [1] = 2, [2] = 4, [3] = 8, [4] = 16, [5] = 32, [6] = 64, [7] = 128, [8] = 256, [9] = 512}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print)\n\n##### 打印函数局部变量的值\n\n```c\n#include <stdio.h>\n\nvoid fun_a(void)\n{\n\tint a = 0;\n\tprintf(\"%d\\n\", a);\n}\n\nvoid fun_b(void)\n{\n\tint b = 1;\n\tfun_a();\n\tprintf(\"%d\\n\", b);\n}\n\nvoid fun_c(void)\n{\n\tint c = 2;\n\tfun_b();\n\tprintf(\"%d\\n\", c);\n}\n\nvoid fun_d(void)\n{\n\tint d = 3;\n\tfun_c();\n\tprintf(\"%d\\n\", d);\n}\n\nint main(void)\n{\n\tint var = -1;\n\tfun_d();\n\treturn 0;\n}\n```\n\n如果要打印函数局部变量的值，可以使用“bt full”命令（bt是backtrace的缩写）。首先我们在函数fun_a里打上断点，当程序断住时，显示调用栈信息：\n\n```\n(gdb) bt\n#0  fun_a () at a.c:6\n#1  0x000109b0 in fun_b () at a.c:12\n#2  0x000109e4 in fun_c () at a.c:19\n#3  0x00010a18 in fun_d () at a.c:26\n#4  0x00010a4c in main () at a.c:33\n```\n\n接下来，用“bt full”命令显示各个函数的局部变量值：\n\n```\n(gdb) bt full\n#0  fun_a () at a.c:6\n        a = 0\n#1  0x000109b0 in fun_b () at a.c:12\n        b = 1\n#2  0x000109e4 in fun_c () at a.c:19\n        c = 2\n#3  0x00010a18 in fun_d () at a.c:26\n        d = 3\n#4  0x00010a4c in main () at a.c:33\n        var = -1\n```\n\n也可以使用如下“bt full n”，意思是从内向外显示n个栈桢，及其局部变量，例如：\n\n```\n(gdb) bt full 2\n#0  fun_a () at a.c:6\n        a = 0\n#1  0x000109b0 in fun_b () at a.c:12\n        b = 1\n(More stack frames follow...)\n```\n\n而“bt full -n”，意思是从外向内显示n个栈桢，及其局部变量，例如：\n\n```\n(gdb) bt full -2\n#3  0x00010a18 in fun_d () at a.c:26\n        d = 3\n#4  0x00010a4c in main () at a.c:33\n        var = -1\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Backtrace.html)\n\n\n\n如果只是想打印当前函数局部变量的值，可以使用如下命令：\n\n```\n(gdb) info locals\na = 0\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Frame-Info.html#index-info-locals)\n\n##### 打印进程内存信息\n\n用gdb调试程序时，如果想查看进程的内存映射信息，可以使用“i proc mappings”命令（i是info命令缩写），例如:\n\n```\n(gdb) i proc mappings\nprocess 27676 flags:\nPR_STOPPED Process (LWP) is stopped\nPR_ISTOP Stopped on an event of interest\nPR_RLC Run-on-last-close is in effect\nPR_MSACCT Microstate accounting enabled\nPR_PCOMPAT Micro-state accounting inherited on fork\nPR_FAULTED : Incurred a traced hardware fault FLTBPT: Breakpoint trap\n\nMapped address spaces:\n\n    Start Addr   End Addr       Size     Offset   Flags\n     0x8046000  0x8047fff     0x2000 0xfffff000 -s--rwx\n     0x8050000  0x8050fff     0x1000          0 ----r-x\n     0x8060000  0x8060fff     0x1000          0 ----rwx\n    0xfee40000 0xfef4efff   0x10f000          0 ----r-x\n    0xfef50000 0xfef55fff     0x6000          0 ----rwx\n    0xfef5f000 0xfef66fff     0x8000   0x10f000 ----rwx\n    0xfef67000 0xfef68fff     0x2000          0 ----rwx\n    0xfef70000 0xfef70fff     0x1000          0 ----rwx\n    0xfef80000 0xfef80fff     0x1000          0 ---sr--\n    0xfef90000 0xfef90fff     0x1000          0 ----rw-\n    0xfefa0000 0xfefa0fff     0x1000          0 ----rw-\n    0xfefb0000 0xfefb0fff     0x1000          0 ----rwx\n    0xfefc0000 0xfefeafff    0x2b000          0 ----r-x\n    0xfeff0000 0xfeff0fff     0x1000          0 ----rwx\n    0xfeffb000 0xfeffcfff     0x2000    0x2b000 ----rwx\n    0xfeffd000 0xfeffdfff     0x1000          0 ----rwx\n```\n\n首先输出了进程的flags，接着是进程的内存映射信息。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/SVR4-Process-Information.html#index-info-proc-exe).\n\n此外，也可以用\"i files\"（还有一个同样作用的命令：“i target”）命令，它可以更详细地输出进程的内存信息，包括引用的动态链接库等等，例如：\n\n```\n(gdb) i files\nSymbols from \"/data1/nan/a\".\nUnix /proc child process:\n    Using the running image of child Thread 1 (LWP 1) via /proc.\n    While running this, GDB does not access memory from...\nLocal exec file:\n    `/data1/nan/a', file type elf32-i386-sol2.\n    Entry point: 0x8050950\n    0x080500f4 - 0x08050105 is .interp\n    0x08050108 - 0x08050114 is .eh_frame_hdr\n    0x08050114 - 0x08050218 is .hash\n    0x08050218 - 0x08050418 is .dynsym\n    0x08050418 - 0x080507e6 is .dynstr\n    0x080507e8 - 0x08050818 is .SUNW_version\n    0x08050818 - 0x08050858 is .SUNW_versym\n    0x08050858 - 0x08050890 is .SUNW_reloc\n    0x08050890 - 0x080508c8 is .rel.plt\n    0x080508c8 - 0x08050948 is .plt\n    ......\n\t0xfef5fb58 - 0xfef5fc48 is .dynamic in /usr/lib/libc.so.1\n    0xfef5fc80 - 0xfef650e2 is .data in /usr/lib/libc.so.1\n    0xfef650e2 - 0xfef650e2 is .bssf in /usr/lib/libc.so.1\n    0xfef650e8 - 0xfef65be0 is .picdata in /usr/lib/libc.so.1\n    0xfef65be0 - 0xfef666a7 is .data1 in /usr/lib/libc.so.1\n    0xfef666a8 - 0xfef680dc is .bss in /usr/lib/libc.so.1\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Files.html)\n\n##### 打印静态变量的值\n\n```c\n/* main.c */\nextern void print_var_1(void);\nextern void print_var_2(void);\n\nint main(void)\n{\n  print_var_1();\n  print_var_2();\n  return 0;\n}\n\n/* static-1.c */\n#include <stdio.h>\n\nstatic int var = 1;\n\nvoid print_var_1(void)\n{ \n  printf(\"var = %d\\n\", var);\n} \n\n/* static-2.c */\n#include <stdio.h>\n\nstatic int var = 2;\n\nvoid print_var_2(void)\n{ \n  printf(\"var = %d\\n\", var);\n} \n```\n\n在gdb中，如果直接打印静态变量，则结果并不一定是你想要的：\n\n```\n$ gcc -g main.c static-1.c static-2.c\n$ gdb -q ./a.out\n(gdb) start\n(gdb) p var\n$1 = 2\n\n$ gcc -g main.c static-2.c static-1.c\n$ gdb -q ./a.out\n(gdb) start\n(gdb) p var\n$1 = 1\n```\n\n你可以显式地指定文件名（上下文）：\n\n```\n(gdb) p 'static-1.c'::var\n$1 = 1\n(gdb) p 'static-2.c'::var\n$2 = 2\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables)\n\n##### 打印变量的类型和所在文件\n\n```c\n#include <stdio.h>\n\nstruct child {\n  char name[10];\n  enum { boy, girl } gender;\n};\n\nstruct child he = { \"Tom\", boy };\n\nint main (void)\n{\n  static struct child she = { \"Jerry\", girl };\n  printf (\"Hello %s %s.\\n\", he.gender == boy ? \"boy\" : \"girl\", he.name);\n  printf (\"Hello %s %s.\\n\", she.gender == boy ? \"boy\" : \"girl\", she.name);\n  return 0;\n}\n```\n\n在gdb中，可以使用如下命令查看变量的类型：\n\n```\n(gdb) whatis he\ntype = struct child\n```\n\n如果想查看详细的类型信息：\n\n```\n(gdb) ptype he\ntype = struct child {\n    char name[10];\n    enum {boy, girl} gender;\n}\n```\n\n如果想查看定义该变量的文件：\n\n```\n(gdb) i variables he\nAll variables matching regular expression \"he\":\n\nFile variable.c:\nstruct child he;\n\nNon-debugging symbols:\n0x0000000000402030  she\n0x00007ffff7dd3380  __check_rhosts_file\n```\n\n哦，gdb会显示所有包含（匹配）该表达式的变量。如果只想查看完全匹配给定名字的变量：\n\n```\n(gdb) i variables ^he$\nAll variables matching regular expression \"^he$\":\n\nFile variable.c:\nstruct child he;\n```\n\n注：`info variables`不会显示局部变量，即使是static的也没有太多的信息。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Symbols.html)\n\n##### 打印内存的值\n\n```c\n#include <stdio.h>\n\nint main(void)\n{\n        int i = 0;\n        char a[100];\n\n        for (i = 0; i < sizeof(a); i++)\n        {\n                a[i] = i;\n        }\n\n        return 0;\n}\n```\n\ngdb中使用“`x`”命令来打印内存的值，格式为“`x/nfu addr`”。含义为以`f`格式打印从`addr`开始的`n`个长度单元为`u`的内存值。参数具体含义如下：\na）n：输出单元的个数。\nb）f：是输出格式。比如`x`是以16进制形式输出，`o`是以8进制形式输出,等等。\nc）u：标明一个单元的长度。`b`是一个`byte`，`h`是两个`byte`（halfword），`w`是四个`byte`（word），`g`是八个`byte`（giant word）。\n\n以上面程序为例：\n（1） 以16进制格式打印数组前`a`16个byte的值：\n\n```\n(gdb) x/16xb a\n0x7fffffffe4a0: 0x00    0x01    0x02    0x03    0x04    0x05    0x06    0x07\n0x7fffffffe4a8: 0x08    0x09    0x0a    0x0b    0x0c    0x0d    0x0e    0x0f\n```\n\n（2） 以无符号10进制格式打印数组`a`前16个byte的值：\n\n```\n(gdb) x/16ub a\n0x7fffffffe4a0: 0       1       2       3       4       5       6       7\n0x7fffffffe4a8: 8       9       10      11      12      13      14      15\n```\n\n（3） 以2进制格式打印数组前16个`a`byte的值：\n\n```\n(gdb) x/16tb a\n0x7fffffffe4a0: 00000000        00000001        00000010        00000011        00000100        00000101        00000110        00000111\n0x7fffffffe4a8: 00001000        00001001        00001010        00001011        00001100        00001101        00001110        00001111\n```\n\n（4） 以16进制格式打印数组`a`前16个word（4个byte）的值：\n\n```\n(gdb) x/16xw a\n0x7fffffffe4a0: 0x03020100      0x07060504      0x0b0a0908      0x0f0e0d0c\n0x7fffffffe4b0: 0x13121110      0x17161514      0x1b1a1918      0x1f1e1d1c\n0x7fffffffe4c0: 0x23222120      0x27262524      0x2b2a2928      0x2f2e2d2c\n0x7fffffffe4d0: 0x33323130      0x37363534      0x3b3a3938      0x3f3e3d3c\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Memory.html).\n\n##### 打印源代码行\n\n如上所示，在gdb中可以使用`list`（简写为l）命令来显示源代码以及行号。`list`命令可以指定行号，函数：\n\n```\n(gdb) l 24\n(gdb) l main\n```\n\n还可以指定向前或向后打印：\n\n```\n(gdb) l -\n(gdb) l +\n```\n\n还可以指定范围：\n\n```\n(gdb) l 1,10\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/List.html#List)\n\n##### 每行打印一个结构体成员\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n\ntypedef struct\n{\n        int a;\n        int b;\n        int c;\n        int d;\n        pthread_mutex_t mutex;\n}ex_st;\n\nint main(void) {\n        ex_st st = {1, 2, 3, 4, PTHREAD_MUTEX_INITIALIZER};\n        printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n        return 0;\n}\n```\n\n默认情况下，gdb以一种“紧凑”的方式打印结构体。以上面代码为例：\n\n```\n(gdb) n\n15              printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n(gdb) p st\n$1 = {a = 1, b = 2, c = 3, d = 4, mutex = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0,\n      __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\\000' <repeats 39 times>, __align = 0}}\n```\n\n可以看到结构体的显示很混乱，尤其是结构体里还嵌套着其它结构体时。\n\n可以执行“set print pretty on”命令，这样每行只会显示结构体的一名成员，而且还会根据成员的定义层次进行缩进：\n\n```\n(gdb) set print pretty on\n(gdb) p st\n$2 = {\n  a = 1,\n  b = 2,\n  c = 3,\n  d = 4,\n  mutex = {\n    __data = {\n      __lock = 0,\n      __count = 0,\n      __owner = 0,\n      __nusers = 0,\n      __kind = 0,\n      __spins = 0,\n      __list = {\n        __prev = 0x0,\n        __next = 0x0\n      }\n    },\n    __size = '\\000' <repeats 39 times>,\n    __align = 0\n  }\n}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-print-settings)\n\n##### 按照派生类型打印对象\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass Shape {\n public:\n  virtual void draw () {}\n};\n\nclass Circle : public Shape {\n int radius;\n public:\n  Circle () { radius = 1; }\n  void draw () { cout << \"drawing a circle...\\n\"; }\n};\n\nclass Square : public Shape {\n int height;\n public:\n  Square () { height = 2; }\n  void draw () { cout << \"drawing a square...\\n\"; }\n};\n\nvoid drawShape (class Shape &p)\n{\n  p.draw ();\n}\n\nint main (void)\n{\n  Circle a;\n  Square b;\n  drawShape (a);\n  drawShape (b);\n  return 0;\n}\n```\n\n在gdb中，当打印一个对象时，缺省是按照声明的类型进行打印：\n\n```\n(gdb) frame\n#0  drawShape (p=...) at object.cxx:25\n25\t  p.draw ();\n(gdb) p p\n$1 = (Shape &) @0x7fffffffde90: {_vptr.Shape = 0x400a80 <vtable for Circle+16>}\n```\n\n在这个例子中，p虽然声明为class Shape，但它实际的派生类型可能为class Circle和Square。如果要缺省按照派生类型进行打印，则可以通过如下命令进行设置：\n\n```\n(gdb) set print object on\n\n(gdb) p p\n$2 = (Circle &) @0x7fffffffde90: {<Shape> = {_vptr.Shape = 0x400a80 <vtable for Circle+16>}, radius = 1}\n```\n\n当打印对象类型信息时，该设置也会起作用：\n\n```\n(gdb) whatis p\ntype = Shape &\n(gdb) ptype p\ntype = class Shape {\n  public:\n    virtual void draw(void);\n} &\n\n(gdb) set print object on\n(gdb) whatis p\ntype = /* real type = Circle & */\nShape &\n(gdb) ptype p\ntype = /* real type = Circle & */\nclass Shape {\n  public:\n    virtual void draw(void);\n} &\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print)\n\n##### 指定程序的输入输出设备\n\n```c++\n#include <stdio.h>\n\nint main(void)\n{\n  int i;\n\n  for (i = 0; i < 100; i++)\n    {\n      printf(\"i = %d\\n\", i);\n    }\n\n  return 0;\n}\n```\n\n在gdb中，缺省情况下程序的输入输出是和gdb使用同一个终端。你也可以为程序指定一个单独的输入输出终端。\n\n首先，打开一个新终端，使用如下命令获得设备文件名：\n\n```\n$ tty\n/dev/pts/2\n```\n\n然后，通过命令行选项指定程序的输入输出设备：\n\n```\n$ gdb -tty /dev/pts/2 ./a.out\n(gdb) r\n```\n\n或者，在gdb中，使用命令进行设置：\n\n```\n(gdb) tty /dev/pts/2\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Input_002fOutput.html#index-tty)\n\n##### 使用“$\\”和“$\\_”变量\n\n##### 打印程序动态分配内存的信息\n\n```c++\n#include <stdio.h>\n#include <malloc.h>\n\nint main(void)\n{\n        char *p[10];\n        int i = 0;\n\n        for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n        {\n                p[i] = malloc(100000);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用下面的自定义命令，打印程序动态分配内存的信息：\n\n```\ndefine mallocinfo\n  set $__f = fopen(\"/dev/tty\", \"w\")\n  call malloc_info(0, $__f)\n  call fclose($__f)\nend\n```\n\n以上面程序为例：\n\n```\nTemporary breakpoint 5, main () at a.c:7\n7               int i = 0;\n(gdb) mallocinfo \n<malloc version=\"1\">\n<heap nr=\"0\">\n<sizes>\n</sizes>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"135168\"/>\n<system type=\"max\" size=\"135168\"/>\n<aspace type=\"total\" size=\"135168\"/>\n<aspace type=\"mprotect\" size=\"135168\"/>\n</heap>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"135168\"/>\n<system type=\"max\" size=\"135168\"/>\n<aspace type=\"total\" size=\"135168\"/>\n<aspace type=\"mprotect\" size=\"135168\"/>\n</malloc>\n$20 = 0\n$21 = 0\n(gdb) n\n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) mallocinfo \n<malloc version=\"1\">\n<heap nr=\"0\">\n<sizes>\n</sizes>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"532480\"/>\n<system type=\"max\" size=\"532480\"/>\n<aspace type=\"total\" size=\"532480\"/>\n<aspace type=\"mprotect\" size=\"532480\"/>\n</heap>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"532480\"/>\n<system type=\"max\" size=\"532480\"/>\n<aspace type=\"total\" size=\"532480\"/>\n<aspace type=\"mprotect\" size=\"532480\"/>\n</malloc>\n$22 = 0\n$23 = 0\n(gdb) n\n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) mallocinfo \n<malloc version=\"1\">\n<heap nr=\"0\">\n<sizes>\n</sizes>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"1134592\"/>\n<system type=\"max\" size=\"1134592\"/>\n<aspace type=\"total\" size=\"1134592\"/>\n<aspace type=\"mprotect\" size=\"1134592\"/>\n</heap>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"1134592\"/>\n<system type=\"max\" size=\"1134592\"/>\n<aspace type=\"total\" size=\"1134592\"/>\n<aspace type=\"mprotect\" size=\"1134592\"/>\n</malloc>\n$24 = 0\n$25 = 0\n```\n\n可以看到gdb输出了动态分配内存的变化信息。\n参见[stackoverflow](http://stackoverflow.com/questions/1471226/most-tricky-useful-commands-for-gdb-debugger).\n\n##### 打印调用栈帧中变量的值\n\n```c++\n#include <stdio.h>\n\nint func1(int a)\n{\n  int b = 1;\n  return b * a;\n}\n\nint func2(int a)\n{\n  int b = 2;\n  return b * func1(a);\n}\n\nint func3(int a)\n{\n  int b = 3;\n  return b * func2(a);\n}\n\nint main(void)\n{\n  printf(\"%d\\n\", func3(10));\n  return 0;\n}\n```\n\n在gdb中，如果想查看调用栈帧中的变量，可以先切换到该栈帧中，然后打印：\n\n```\n(gdb) b func1\n(gdb) r\n(gdb) bt\n#0  func1 (a=10) at frame.c:5\n#1  0x0000000000400560 in func2 (a=10) at frame.c:12\n#2  0x0000000000400582 in func3 (a=10) at frame.c:18\n#3  0x0000000000400596 in main () at frame.c:23\n(gdb) f 1\n(gdb) p b\n(gdb) f 2\n(gdb) p b\n```\n\n也可以不进行切换，直接打印：\n\n```\n(gdb) p func2::b\n$1 = 2\n(gdb) p func3::b\n$2 = 3\n```\n\n同样，对于C++的函数名，需要使用单引号括起来，比如：\n\n```\n(gdb) p '(anonymous namespace)::SSAA::handleStore'::n->pi->inst->dump()\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables)\n\n\n\n#### 9、多进程/线程\n\n##### 调试已经运行的进程\n\n```c++\n#include <stdio.h>\n#include <pthread.h>\nvoid *thread_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%s\\n\", (char*)p_arg);\n                sleep(10);\n        }\n}\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n调试已经运行的进程有两种方法：一种是gdb启动时，指定进程的ID：gdb program processID（也可以用-p或者--pid指定进程ID，例如：gdb program -p=10210）。以上面代码为例，用“ps”命令已经获得进程ID为10210：\n\n```\nbash-3.2# gdb -q a 10210\nReading symbols from /data/nan/a...done.\nAttaching to program `/data/nan/a', process 10210\n[New process 10210]\nRetry #1:\nRetry #2:\nRetry #3:\nRetry #4:\nReading symbols from /usr/lib/libc.so.1...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\n[New LWP    3        ]\n[New LWP    2        ]\n[New Thread 1 (LWP 1)]\n[New Thread 2 (LWP 2)]\n[New Thread 3 (LWP 3)]\nLoaded symbols for /usr/lib/libc.so.1\nReading symbols from /lib/ld.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib/ld.so.1\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n(gdb) bt\n#0  0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n#1  0xfeedcae4 in sleep () from /usr/lib/libc.so.1\n#2  0x080509ef in main () at a.c:17\n```\n\n如果嫌每次ps查看进程号比较麻烦，请尝试如下脚本\n\n```shell\n# 保存为xgdb.sh（添加可执行权限）\n# 用法 xgdb.sh a \nprog_bin=$1\nrunning_name=$(basename $prog_bin)\npid=$(/sbin/pidof $running_name)\ngdb attach $pid\n```\n\n另一种是先启动gdb，然后用“attach”命令“附着”在进程上：\n\n```\nbash-3.2# gdb -q a\nReading symbols from /data/nan/a...done.\n(gdb) attach 10210\nAttaching to program `/data/nan/a', process 10210\n[New process 10210]\nRetry #1:\nRetry #2:\nRetry #3:\nRetry #4:\nReading symbols from /usr/lib/libc.so.1...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\n[New LWP    3        ]\n[New LWP    2        ]\n[New Thread 1 (LWP 1)]\n[New Thread 2 (LWP 2)]\n[New Thread 3 (LWP 3)]\nLoaded symbols for /usr/lib/libc.so.1\nReading symbols from /lib/ld.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib/ld.so.1\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n(gdb) bt\n#0  0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n#1  0xfeedcae4 in sleep () from /usr/lib/libc.so.1\n#2  0x080509ef in main () at a.c:17\n```\n\n如果不想继续调试了，可以用“detach”命令“脱离”进程：\n\n```\n(gdb) detach\nDetaching from program: /data/nan/a, process 10210\n(gdb) bt\nNo stack.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Attach.html#index-attach)\n\n##### 调试子进程\n\n```c++\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n\tpid_t pid;\n\n\tpid = fork();\n\tif (pid < 0)\n\t{\n\t\texit(1);\n\t}\n\telse if (pid > 0)\n\t{\n\t\texit(0);\n\t}\n\tprintf(\"hello world\\n\");\n\treturn 0;\n}\n```\n\n在调试多进程程序时，gdb默认会追踪父进程。例如：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 8.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:8\n8               pid = fork();\n(gdb) n\n9               if (pid < 0)\n(gdb) hello world\n\n13              else if (pid > 0)\n(gdb)\n15                      exit(0);\n(gdb)\n[Inferior 1 (process 12786) exited normally]\n```\n\n可以看到程序执行到第15行：父进程退出。\n\n如果要调试子进程，要使用如下命令：“set follow-fork-mode child”，例如：\n\n```\n(gdb) set follow-fork-mode child\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 8.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:8\n8               pid = fork();\n(gdb) n\n[New process 12241]\n[Switching to process 12241]\n9               if (pid < 0)\n(gdb)\n13              else if (pid > 0)\n(gdb)\n17              printf(\"hello world\\n\");\n(gdb)\nhello world\n18              return 0;\n```\n\n可以看到程序执行到第17行：子进程打印“hello world”。\n\n这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Forks.html)\n\n##### 同时调试父进程和子进程\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(void) {\n    pid_t pid;\n\n    pid = fork();\n    if (pid < 0)\n    {\n        exit(1);\n    }\n    else if (pid > 0)\n    {\n        printf(\"Parent\\n\");\n        exit(0);\n    }\n    printf(\"Child\\n\");\n    return 0;\n}\n```\n\n在调试多进程程序时，gdb默认只会追踪父进程的运行，而子进程会独立运行，gdb不会控制。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 7.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:7\n7           pid = fork();\n(gdb) n\n8           if (pid < 0)\n(gdb) Child\n\n12          else if (pid > 0)\n(gdb)\n14              printf(\"Parent\\n\");\n(gdb)\nParent\n15              exit(0);\n```\n\n可以看到当单步执行到第8行时，程序打印出“Child” ，证明子进程已经开始独立运行。\n\n如果要同时调试父进程和子进程，可以使用“`set detach-on-fork off`”（默认`detach-on-fork`是`on`）命令，这样gdb就能同时调试父子进程，并且在调试一个进程时，另外一个进程处于挂起状态。仍以上面程序为例：\n\n```\n(gdb) set detach-on-fork off\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 7.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:7\n7           pid = fork();\n(gdb) n\n[New process 1050]\n8           if (pid < 0)\n(gdb)\n12          else if (pid > 0)\n(gdb) i inferior\n  Num  Description       Executable\n  2    process 1050      /data2/home/nanxiao/a\n* 1    process 1046      /data2/home/nanxiao/a\n(gdb) n\n14              printf(\"Parent\\n\");\n(gdb) n\nParent\n15              exit(0);\n(gdb)\n[Inferior 1 (process 1046) exited normally]\n(gdb)\nThe program is not being run.\n(gdb) i inferiors\n  Num  Description       Executable\n  2    process 1050      /data2/home/nanxiao/a\n* 1    <null>            /data2/home/nanxiao/a\n(gdb) inferior 2\n[Switching to inferior 2 [process 1050] (/data2/home/nanxiao/a)]\n[Switching to thread 2 (process 1050)]\n#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6\n(gdb) bt\n#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6\n#1  0x0000000000400561 in main () at a.c:7\n(gdb) n\nSingle stepping until exit from function fork,\nwhich has no line number information.\nmain () at a.c:8\n8           if (pid < 0)\n(gdb)\n12          else if (pid > 0)\n(gdb)\n17          printf(\"Child\\n\");\n(gdb)\nChild\n18          return 0;\n(gdb)\n```\n\n在使用“`set detach-on-fork off`”命令后，用“`i inferiors`”（`i`是`info`命令缩写）查看进程状态，可以看到父子进程都在被gdb调试的状态，前面显示“*”是正在调试的进程。当父进程退出后，用“`inferior infno`”切换到子进程去调试。\n\n这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Forks.html)\n\n此外，如果想让父子进程都同时运行，可以使用“`set schedule-multiple on`”（默认`schedule-multiple`是`off`）命令，仍以上述代码为例：\n\n```\n(gdb) set detach-on-fork off\n(gdb) set schedule-multiple on\n(gdb) start\nTemporary breakpoint 1 at 0x40059c: file a.c, line 7.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:7\n7           pid = fork();\n(gdb) n\n[New process 26597]\nChild\n```\n\n可以看到打印出了“Child”，证明子进程也在运行了。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/All_002dStop-Mode.html#All_002dStop-Mode)\n\n##### 查看线程信息\n\n```c++\n#include <stdio.h>\n#include <pthread.h>\nvoid *thread_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%s\\n\", (char*)p_arg);\n                sleep(10);\n        }\n}\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n用gdb调试多线程程序，可以用“i threads”命令（i是info命令缩写）查看所有线程的信息，以上面程序为例（运行平台为Linux，CPU为X86_64）:\n\n```\n  (gdb) i threads\n  Id   Target Id         Frame\n  3    Thread 0x7ffff6e2b700 (LWP 31773) 0x00007ffff7915911 in clone () from /lib64/libc.so.6\n  2    Thread 0x7ffff782c700 (LWP 31744) 0x00007ffff78d9bcd in nanosleep () from /lib64/libc.so.6\n* 1    Thread 0x7ffff7fe9700 (LWP 31738) main () at a.c:18\n```\n\n第一项（Id）：是gdb标示每个线程的唯一ID：1，2等等。\n第二项（Target Id）：是具体系统平台用来标示每个线程的ID，不同平台信息可能会不同。 像当前Linux平台显示的就是： Thread 0x7ffff6e2b700 (LWP 31773)。\n第三项（Frame）：显示的是线程执行到哪个函数。\n前面带“*”表示的是“current thread”，可以理解为gdb调试多线程程序时，选择的一个“默认线程”。\n\n再以Solaris平台（CPU为X86_64）为例，可以看到显示信息会略有不同：\n\n```\n(gdb) i threads\n[New Thread 2 (LWP 2)]\n[New Thread 3 (LWP 3)]\n  Id   Target Id         Frame\n  6    Thread 3 (LWP 3)  0xfeec870d in _thr_setup () from /usr/lib/libc.so.1\n  5    Thread 2 (LWP 2)  0xfefc9661 in elf_find_sym () from /usr/lib/ld.so.1\n  4    LWP    3          0xfeec870d in _thr_setup () from /usr/lib/libc.so.1\n  3    LWP    2          0xfefc9661 in elf_find_sym () from /usr/lib/ld.so.1\n* 2    Thread 1 (LWP 1)  main () at a.c:18\n  1    LWP    1          main () at a.c:18\n```\n\n也可以用“i threads [Id...]”指定打印某些线程的信息，例如：\n\n```\n  (gdb) i threads 1 2\n  Id   Target Id         Frame\n  2    Thread 0x7ffff782c700 (LWP 12248) 0x00007ffff78d9bcd in nanosleep () from /lib64/libc.so.6\n* 1    Thread 0x7ffff7fe9700 (LWP 12244) main () at a.c:18\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Threads.html).\n\n##### 在Solaris上使用maintenance命令查看线程信息\n\n用gdb调试多线程程序时，如果想查看线程信息，可以使用“i threads”命令（i是info命令缩写），例如:\n\n```\n(gdb) i threads\n106 process 2689429      0xff04af84 in __lwp_park () from /lib/libc.so.1\n105 process 2623893      0xff04af84 in __lwp_park () from /lib/libc.so.1\n104 process 2558357      0xff04af84 in __lwp_park () from /lib/libc.so.1\n103 process 2492821      0xff04af84 in __lwp_park () from /lib/libc.so.1\n```\n\n在Solaris操作系统上，gdb为Solaris量身定做了一个查看线程信息的命令：“maint info sol-threads”（maint是maintenance命令缩写），例如:\n\n```\n(gdb) maint info sol-threads\nuser   thread #1, lwp 1, (active)\nuser   thread #2, lwp 2, (active)    startfunc: monitor_thread\nuser   thread #3, lwp 3, (asleep)    startfunc: mem_db_thread\n- Sleep func: 0x000aa32c\n```\n\n可以看到相比于info命令，maintenance命令显示了更多信息。例如线程当前状态（active，asleep），入口函数（startfunc）等。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Threads.html)\n\n##### 不显示线程启动和退出信息\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n\nvoid *thread_func(void *p_arg)\n{\n       sleep(10);\n}\n\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n默认情况下，gdb检测到有线程产生和退出时，会打印提示信息，以上面程序为例:\n\n```\n(gdb) r\nStarting program: /data/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[New LWP    2        ]\n[New LWP    3        ]\n[LWP    2         exited]\n[New Thread 2        ]\n[LWP    3         exited]\n[New Thread 3        ]\n```\n\n如果不想显示这些信息，可以使用“`set print thread-events off`”命令，这样当有线程产生和退出时，就不会打印提示信息：\n\n```\n(gdb) set print thread-events off\n(gdb) r\nStarting program: /data/nan/a\n[Thread debugging using libthread_db enabled]\n```\n\n可以看到不再打印相关信息。\n\n这个命令有些平台不支持，使用时需注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Threads.html).\n\n##### 使用“$_thread”变量\n\n##### 一个gdb会话中同时调试多个程序\n\n```c++\na.c:\n#include <stdio.h>\nint func(int a, int b)\n{\n        int c = a * b;\n        printf(\"c is %d\\n\", c);\n}\n\nint main(void)\n{\n        func(1, 2);\n        return 0;\n}\n\n\nb.c:\n#include <stdio.h>\n\nint func1(int a)\n{\n        return 2 * a;\n}\n\nint func2(int a)\n{\n        int c = 0;\n        c = 2 * func1(a);\n        return c;\n}\n\nint func3(int a)\n{\n        int c = 0;\n        c = 2 * func2(a);\n        return c;\n}\n\nint main(void)\n{\n        printf(\"%d\\n\", func3(10));\n        return 0;\n}\n```\n\ngdb支持在一个会话中同时调试多个程序。以上面程序为例，首先调试`a`程序：\n\n```\nroot@bash:~$ gdb a\nGNU gdb (Ubuntu 7.7-0ubuntu3) 7.7\nCopyright (C) 2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x400568: file a.c, line 10.\nStarting program: /home/nanxiao/a\n```\n\n接着使用“`add-inferior [ -copies n ] [ -exec executable ]`”命令加载可执行文件`b`。其中`n`默认为1：\n\n```\n(gdb) add-inferior -copies 2 -exec b\nAdded inferior 2\nReading symbols from b...done.\nAdded inferior 3\nReading symbols from b...done.\n(gdb) i inferiors\n  Num  Description       Executable\n  3    <null>            /home/nanxiao/b\n  2    <null>            /home/nanxiao/b\n* 1    process 1586      /home/nanxiao/a\n(gdb) inferior 2\n[Switching to inferior 2 [<null>] (/home/nanxiao/b)]\n(gdb) start\nTemporary breakpoint 2 at 0x400568: main. (3 locations)\nStarting program: /home/nanxiao/b\n\nTemporary breakpoint 2, main () at b.c:24\n24              printf(\"%d\\n\", func3(10));\n(gdb) i inferiors\n  Num  Description       Executable\n  3    <null>            /home/nanxiao/b\n* 2    process 1590      /home/nanxiao/b\n  1    process 1586      /home/nanxiao/a\n```\n\n可以看到可以调试`b`程序了。\n\n另外也可用“`clone-inferior [ -copies n ] [ infno ]`”克隆现有的`inferior`，其中`n`默认为1，`infno`默认为当前的`inferior`：\n\n```\n(gdb) i inferiors\n  Num  Description       Executable\n  3    <null>            /home/nanxiao/b\n* 2    process 1590      /home/nanxiao/b\n  1    process 1586      /home/nanxiao/a\n(gdb) clone-inferior -copies 1\nAdded inferior 4.\n(gdb) i inferiors\n  Num  Description       Executable\n  4    <null>            /home/nanxiao/b\n  3    <null>            /home/nanxiao/b\n* 2    process 1590      /home/nanxiao/b\n  1    process 1586      /home/nanxiao/a\n```\n\n可以看到又多了一个`b`程序。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html).\n\n##### 打印程序进程空间信息\n\n```c++\na.c:\n#include <stdio.h>\nint func(int a, int b)\n{\n        int c = a * b;\n        printf(\"c is %d\\n\", c);\n}\n\nint main(void)\n{\n        func(1, 2);\n        return 0;\n}\n\n\nb.c:\n#include <stdio.h>\n\nint func1(int a)\n{\n        return 2 * a;\n}\n\nint func2(int a)\n{\n        int c = 0;\n        c = 2 * func1(a);\n        return c;\n}\n\nint func3(int a)\n{\n        int c = 0;\n        c = 2 * func2(a);\n        return c;\n}\n\nint main(void)\n{\n        printf(\"%d\\n\", func3(10));\n        return 0;\n}\n```\n\n使用gdb调试多个进程时，可以使用“`maint info program-spaces`”打印当前所有被调试的进程信息。以上面程序为例：\n\n```\n[root@localhost nan]# gdb a\nGNU gdb (GDB) 7.8.1\n......\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x4004f9: file a.c, line 10.\nStarting program: /home/nan/a \n\nTemporary breakpoint 1, main () at a.c:10\n10              func(1, 2);\n(gdb) add-inferior -exec b\nAdded inferior 2\nReading symbols from b...done.\n(gdb) i inferiors b\nArgs must be numbers or '$' variables.\n(gdb) i inferiors\n  Num  Description       Executable        \n  2    <null>            /home/nan/b       \n* 1    process 15753     /home/nan/a       \n(gdb) inferior 2\n[Switching to inferior 2 [<null>] (/home/nan/b)]\n(gdb) start\nTemporary breakpoint 2 at 0x4004f9: main. (2 locations)\nStarting program: /home/nan/b \n\nTemporary breakpoint 2, main () at b.c:24\n24              printf(\"%d\\n\", func3(10));\n(gdb) i inferiors\n  Num  Description       Executable        \n* 2    process 15902     /home/nan/b       \n  1    process 15753     /home/nan/a       \n(gdb) clone-inferior -copies 2\nAdded inferior 3.\nAdded inferior 4.\n(gdb) i inferiors\n  Num  Description       Executable        \n  4    <null>            /home/nan/b       \n  3    <null>            /home/nan/b       \n* 2    process 15902     /home/nan/b       \n  1    process 15753     /home/nan/a       \n(gdb) maint info program-spaces\n  Id   Executable        \n  4    /home/nan/b       \n        Bound inferiors: ID 4 (process 0)\n  3    /home/nan/b       \n        Bound inferiors: ID 3 (process 0)\n* 2    /home/nan/b       \n        Bound inferiors: ID 2 (process 15902)\n  1    /home/nan/a       \n        Bound inferiors: ID 1 (process 15753)\n```\n\n可以看到执行“`maint info program-spaces`”命令后，打印出当前有4个`program-spaces`（编号从1到4）。另外还有每个`program-spaces`对应的程序，`inferior`编号及进程号。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html).\n\n##### 使用“$_exitcode”变量\n\n\n\n#### 10、core dump文件\n\n##### 为调试进程产生core dump文件\n\n在用gdb调试程序时，我们有时想让被调试的进程产生core dump文件，记录现在进程的状态，以供以后分析。可以用“generate-core-file”命令来产生core dump文件：\n\n```\n(gdb) help generate-core-file\nSave a core file with the current state of the debugged process.\nArgument is optional filename.  Default filename is 'core.<process_id>'.\n\n(gdb) start\nTemporary breakpoint 1 at 0x8050c12: file a.c, line 9.\nStarting program: /data1/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:9\n9           change_var();\n(gdb) generate-core-file\nSaved corefile core.12955\n```\n\n也可使用“gcore”命令：\n\n```\n(gdb) help gcore\nSave a core file with the current state of the debugged process.\nArgument is optional filename.  Default filename is 'core.<process_id>'.\n(gdb) gcore\nSaved corefile core.13256\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html)\n\n##### 加载可执行程序和core dump文件\n\n```c++\n#include <stdio.h>\n\nint main(void) {\n        int *p = NULL;\n        printf(\"hello world\\n\");\n        *p = 0;\n        return 0;\n}\n```\n\n例子程序访问了一个空指针，所以程序会crash并产生core dump文件。用gdb调试core dump文件，通常用这个命令形式：“gdb path/to/the/executable path/to/the/coredump”，然后gdb会显示程序crash的位置：\n\n```\nbash-3.2# gdb -q /data/nan/a /var/core/core.a.22268.1402638140\nReading symbols from /data/nan/a...done.\n[New LWP 1]\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\nCore was generated by `./a'.\nProgram terminated with signal 11, Segmentation fault.\n#0  0x0000000000400cdb in main () at a.c:6\n6               *p = 0;\n```\n\n有时我们想在gdb启动后，动态加载可执行程序和core dump文件，这时可以用“file”和“core”（core-file命令缩写）命令。“file”命令用来读取可执行文件的符号表信息，而“core”命令则是指定core dump文件的位置：\n\n```\nbash-3.2# gdb -q\n(gdb) file /data/nan/a\nReading symbols from /data/nan/a...done.\n(gdb) core /var/core/core.a.22268.1402638140\n[New LWP 1]\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\nCore was generated by `./a'.\nProgram terminated with signal 11, Segmentation fault.\n#0  0x0000000000400cdb in main () at a.c:6\n6               *p = 0;\n```\n\n可以看到gdb同样显示程序crash的位置。\n\n这两个命令可参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Files.html#index-core-dump-file)\n\n#### 11、汇编\n\n##### 设置汇编指令格式\n\n```c++\n#include <stdio.h>\nint global_var;\n\nvoid change_var(){\n    global_var=100;\n}\n\nint main(void){\n    change_var();\n    return 0;\n}\n```\n\n在Intel x86处理器上，gdb默认显示汇编指令格式是AT&T格式。例如：\n\n```\n(gdb) disassemble main\nDump of assembler code for function main:\n   0x08050c0f <+0>:     push   %ebp\n   0x08050c10 <+1>:     mov    %esp,%ebp\n   0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    $0x0,%eax\n   0x08050c1c <+13>:    pop    %ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n可以用“set disassembly-flavor”命令将格式改为intel格式：\n\n```\n(gdb) set disassembly-flavor intel\n(gdb) disassemble main\nDump of assembler code for function main:\n   0x08050c0f <+0>:     push   ebp\n   0x08050c10 <+1>:     mov    ebp,esp\n   0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    eax,0x0\n   0x08050c1c <+13>:    pop    ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n目前“set disassembly-flavor”命令只能用在Intel x86处理器上，并且取值只有“intel”和“att”。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html)\n\n##### 在函数的第一条汇编指令打断点\n\n```c++\n#include <stdio.h>\nint global_var;\n\nvoid change_var(){\n    global_var=100;\n}\n\nint main(void){\n    change_var();\n    return 0;\n}\n```\n\n通常给函数打断点的命令：“b func”（b是break命令的缩写），不会把断点设置在汇编指令层次函数的开头，例如：\n\n```\n(gdb) b main\nBreakpoint 1 at 0x8050c12: file a.c, line 9.\n(gdb) r\nStarting program: /data1/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nBreakpoint 1, main () at a.c:9\n9           change_var();\n(gdb) disassemble\nDump of assembler code for function main:\n   0x08050c0f <+0>:     push   %ebp\n   0x08050c10 <+1>:     mov    %esp,%ebp\n=> 0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    $0x0,%eax\n   0x08050c1c <+13>:    pop    %ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n可以看到程序停在了第三条汇编指令（箭头所指位置）。如果要把断点设置在汇编指令层次函数的开头，要使用如下命令：“b *func”，例如：\n\n```\n(gdb) b *main\nBreakpoint 1 at 0x8050c0f: file a.c, line 8.\n(gdb) r\nStarting program: /data1/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nBreakpoint 1, main () at a.c:8\n8       int main(void){\n(gdb) disassemble\nDump of assembler code for function main:\n=> 0x08050c0f <+0>:     push   %ebp\n   0x08050c10 <+1>:     mov    %esp,%ebp\n   0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    $0x0,%eax\n   0x08050c1c <+13>:    pop    %ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n可以看到程序停在了第一条汇编指令（箭头所指位置）。\n\n##### 自动反汇编后面要执行的代码\n\n```shell\n(gdb) set disassemble-next-line on\n(gdb) start \nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nTemporary breakpoint 3 at 0x400543: file 1.c, line 14.\nStarting program: /home/teawater/tmp/a.out \n\nTemporary breakpoint 3, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14\n14      printf(\"1\\n\");\n=> 0x0000000000400543 <main+19>:    bf f0 05 40 00  mov    $0x4005f0,%edi\n   0x0000000000400548 <main+24>:    e8 c3 fe ff ff  callq  0x400410 <puts@plt>\n(gdb) si\n0x0000000000400548  14      printf(\"1\\n\");\n0x0000000000400543 <main+19>:    bf f0 05 40 00  mov    $0x4005f0,%edi\n=> 0x0000000000400548 <main+24>:    e8 c3 fe ff ff  callq  0x400410 <puts@plt>\n(gdb) \n0x0000000000400410 in puts@plt ()\n=> 0x0000000000400410 <puts@plt+0>: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 <puts@got.plt>\n\n(gdb) set disassemble-next-line auto \n(gdb) start \nTemporary breakpoint 1 at 0x400543: file 1.c, line 14.\nStarting program: /home/teawater/tmp/a.out \n\nTemporary breakpoint 1, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14\n14      printf(\"1\\n\");\n(gdb) si\n0x0000000000400548  14      printf(\"1\\n\");\n(gdb) \n0x0000000000400410 in puts@plt ()\n=> 0x0000000000400410 <puts@plt+0>: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 <puts@got.plt>\n(gdb) \n0x0000000000400416 in puts@plt ()\n=> 0x0000000000400416 <puts@plt+6>: 68 00 00 00 00  pushq  $0x0\n```\n\n如果要在任意情况下反汇编后面要执行的代码：\n\n```\n(gdb) set disassemble-next-line on\n```\n\n如果要在后面的代码没有源码的情况下才反汇编后面要执行的代码：\n\n```\n(gdb) set disassemble-next-line auto\n```\n\n关闭这个功能：\n\n```shell\n(gdb) set disassemble-next-line off\n```\n\n##### 将源程序和汇编指令映射起来\n\n```c++\n#include <stdio.h>\n\ntypedef struct\n{\n        int a;\n        int b;\n        int c;\n        int d;\n}ex_st;\n\nint main(void) {\n        ex_st st = {1, 2, 3, 4};\n        printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n        return 0;\n}\n```\n\n可以用“disas /m fun”（disas是disassemble命令缩写）命令将函数代码和汇编指令映射起来，以上面代码为例：\n\n```\n(gdb) disas /m main\nDump of assembler code for function main:\n11      int main(void) {\n   0x00000000004004c4 <+0>:     push   %rbp\n   0x00000000004004c5 <+1>:     mov    %rsp,%rbp\n   0x00000000004004c8 <+4>:     push   %rbx\n   0x00000000004004c9 <+5>:     sub    $0x18,%rsp\n\n12              ex_st st = {1, 2, 3, 4};\n   0x00000000004004cd <+9>:     movl   $0x1,-0x20(%rbp)\n   0x00000000004004d4 <+16>:    movl   $0x2,-0x1c(%rbp)\n   0x00000000004004db <+23>:    movl   $0x3,-0x18(%rbp)\n   0x00000000004004e2 <+30>:    movl   $0x4,-0x14(%rbp)\n\n13              printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n   0x00000000004004e9 <+37>:    mov    -0x14(%rbp),%esi\n   0x00000000004004ec <+40>:    mov    -0x18(%rbp),%ecx\n   0x00000000004004ef <+43>:    mov    -0x1c(%rbp),%edx\n   0x00000000004004f2 <+46>:    mov    -0x20(%rbp),%ebx\n   0x00000000004004f5 <+49>:    mov    $0x400618,%eax\n   0x00000000004004fa <+54>:    mov    %esi,%r8d\n   0x00000000004004fd <+57>:    mov    %ebx,%esi\n   0x00000000004004ff <+59>:    mov    %rax,%rdi\n   0x0000000000400502 <+62>:    mov    $0x0,%eax\n   0x0000000000400507 <+67>:    callq  0x4003b8 <printf@plt>\n\n14              return 0;\n   0x000000000040050c <+72>:    mov    $0x0,%eax\n\n15      }\n   0x0000000000400511 <+77>:    add    $0x18,%rsp\n   0x0000000000400515 <+81>:    pop    %rbx\n   0x0000000000400516 <+82>:    leaveq\n   0x0000000000400517 <+83>:    retq\n\nEnd of assembler dump.\n```\n\n可以看到每一条C语句下面是对应的汇编代码。\n\n如果只想查看某一行所对应的地址范围，可以：\n\n```\n(gdb) i line 13\nLine 13 of \"foo.c\" starts at address 0x4004e9 <main+37> and ends at 0x40050c <main+72>.\t\n```\n\n如果只想查看这一条语句对应的汇编代码，可以使用“`disassemble [Start],[End]`”命令：\n\n```\n(gdb) disassemble 0x4004e9, 0x40050c\nDump of assembler code from 0x4004e9 to 0x40050c:\n   0x00000000004004e9 <main+37>:        mov    -0x14(%rbp),%esi\n   0x00000000004004ec <main+40>:        mov    -0x18(%rbp),%ecx\n   0x00000000004004ef <main+43>:        mov    -0x1c(%rbp),%edx\n   0x00000000004004f2 <main+46>:        mov    -0x20(%rbp),%ebx\n   0x00000000004004f5 <main+49>:        mov    $0x400618,%eax\n   0x00000000004004fa <main+54>:        mov    %esi,%r8d\n   0x00000000004004fd <main+57>:        mov    %ebx,%esi\n   0x00000000004004ff <main+59>:        mov    %rax,%rdi\n   0x0000000000400502 <main+62>:        mov    $0x0,%eax\n   0x0000000000400507 <main+67>:        callq  0x4003b8 <printf@plt>\nEnd of assembler dump.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html)\n\n##### 显示将要执行的汇编指令\n\n```c++\n#include <stdio.h>\nint global_var;\n\nvoid change_var(){\n    global_var=100;\n}\n\nint main(void){\n    change_var();\n    return 0;\n}\n```\n\n使用gdb调试汇编程序时，可以用“`display /i $pc`”命令显示当程序停止时，将要执行的汇编指令。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400488: file a.c, line 9.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:9\n9           change_var();\n(gdb) display /i $pc\n1: x/i $pc\n=> 0x400488 <main+4>:   mov    $0x0,%eax\n(gdb) si\n0x000000000040048d      9           change_var();\n1: x/i $pc\n=> 0x40048d <main+9>:   callq  0x400474 <change_var>\n(gdb)\nchange_var () at a.c:4\n4       void change_var(){\n1: x/i $pc\n=> 0x400474 <change_var>:       push   %rbp\n```\n\n可以看到打印出了将要执行的汇编指令。此外也可以一次显示多条指令：\n\n```\n(gdb) display /3i $pc\n2: x/3i $pc\n=> 0x400474 <change_var>:       push   %rbp\n   0x400475 <change_var+1>:     mov    %rsp,%rbp\n   0x400478 <change_var+4>:     movl   $0x64,0x2003de(%rip)        # 0x600860 <global_var>\n```\n\n可以看到一次显示了`3`条指令。\n\n取消显示可以用`undisplay`命令。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Auto-Display.html)\n\n##### 打印寄存器的值\n\n用gdb调试程序时，如果想查看寄存器的值，可以使用“i registers”命令（i是info命令缩写），例如:\n\n```\n(gdb) i registers\nrax            0x7ffff7dd9f60   140737351884640\nrbx            0x0      0\nrcx            0x0      0\nrdx            0x7fffffffe608   140737488348680\nrsi            0x7fffffffe5f8   140737488348664\nrdi            0x1      1\nrbp            0x7fffffffe510   0x7fffffffe510\nrsp            0x7fffffffe4c0   0x7fffffffe4c0\nr8             0x7ffff7dd8300   140737351877376\nr9             0x7ffff7deb9e0   140737351956960\nr10            0x7fffffffe360   140737488348000\nr11            0x7ffff7a68be0   140737348275168\nr12            0x4003e0 4195296\nr13            0x7fffffffe5f0   140737488348656\nr14            0x0      0\nr15            0x0      0\nrip            0x4004cd 0x4004cd <main+9>\neflags         0x206    [ PF IF ]\ncs             0x33     51\nss             0x2b     43\nds             0x0      0\nes             0x0      0\nfs             0x0      0\ngs             0x0      0\n```\n\n以上输出不包括浮点寄存器和向量寄存器的内容。使用“i all-registers”命令，可以输出所有寄存器的内容：\n\n```\n(gdb) i all-registers\n\trax            0x7ffff7dd9f60   140737351884640\n\trbx            0x0      0\n\trcx            0x0      0\n\trdx            0x7fffffffe608   140737488348680\n\trsi            0x7fffffffe5f8   140737488348664\n\trdi            0x1      1\n\trbp            0x7fffffffe510   0x7fffffffe510\n\trsp            0x7fffffffe4c0   0x7fffffffe4c0\n\tr8             0x7ffff7dd8300   140737351877376\n\tr9             0x7ffff7deb9e0   140737351956960\n\tr10            0x7fffffffe360   140737488348000\n\tr11            0x7ffff7a68be0   140737348275168\n\tr12            0x4003e0 4195296\n\tr13            0x7fffffffe5f0   140737488348656\n\tr14            0x0      0\n\tr15            0x0      0\n\trip            0x4004cd 0x4004cd <main+9>\n\teflags         0x206    [ PF IF ]\n\tcs             0x33     51\n\tss             0x2b     43\n\tds             0x0      0\n\tes             0x0      0\n\tfs             0x0      0\n\tgs             0x0      0\n\tst0            0        (raw 0x00000000000000000000)\n\tst1            0        (raw 0x00000000000000000000)\n\tst2            0        (raw 0x00000000000000000000)\n\tst3            0        (raw 0x00000000000000000000)\n\tst4            0        (raw 0x00000000000000000000)\n\tst5            0        (raw 0x00000000000000000000)\n\tst6            0        (raw 0x00000000000000000000)\n\tst7            0        (raw 0x00000000000000000000)\n\t......\n```\n\n要打印单个寄存器的值，可以使用“i registers regname”或者“p $regname”，例如：\n\n```\n(gdb) i registers eax\neax            0xf7dd9f60       -136470688\n(gdb) p $eax\n$1 = -136470688\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Registers.html).\n\n##### 显示程序原始机器码\n\n```c++\n#include <stdio.h>\n\nint main(void)\n{\n        printf(\"Hello, world\\n\");\n        return 0;\n}\n```\n\n使用“disassemble /r”命令可以用16进制形式显示程序的原始机器码。以上面程序为例：\n\n```\n(gdb) disassemble /r main\nDump of assembler code for function main:\n   0x0000000000400530 <+0>:     55      push   %rbp\n   0x0000000000400531 <+1>:     48 89 e5        mov    %rsp,%rbp\n   0x0000000000400534 <+4>:     bf e0 05 40 00  mov    $0x4005e0,%edi\n   0x0000000000400539 <+9>:     e8 d2 fe ff ff  callq  0x400410 <puts@plt>\n   0x000000000040053e <+14>:    b8 00 00 00 00  mov    $0x0,%eax\n   0x0000000000400543 <+19>:    5d      pop    %rbp\n   0x0000000000400544 <+20>:    c3      retq\nEnd of assembler dump.\n(gdb) disassemble /r 0x0000000000400534,+4\nDump of assembler code from 0x400534 to 0x400538:\n   0x0000000000400534 <main+4>: bf e0 05 40 00  mov    $0x4005e0,%edi\nEnd of assembler dump.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html)\n\n\n\n#### 12、改变进程的执行\n\n##### 改变字符串的值\n\n```c\n#include <stdio.h>\n\nint main(void)\n{\n\tchar p1[] = \"Sam\";\n\tchar *p2 = \"Bob\";\n\t\n\tprintf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n\treturn 0;\n}\n```\n\n 使用gdb调试程序时，可以用“`set`”命令改变字符串的值，以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x8050af0: file a.c, line 5.\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:5\n5               char p1[] = \"Sam\";\n(gdb) n\n6               char *p2 = \"Bob\";\n(gdb) \n8               printf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n(gdb) set main::p1=\"Jil\"\n(gdb) set main::p2=\"Bill\"\n(gdb) n\np1 is Jil, p2 is Bill\n9               return 0;\n```\n\n可以看到执行`p1`和`p2`的字符串都发生了变化。也可以通过访问内存地址的方法改变字符串的值：\n\n```\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 2, main () at a.c:5\n5               char p1[] = \"Sam\";\n(gdb) n\n6               char *p2 = \"Bob\";\n(gdb) p p1\n$1 = \"Sam\"\n(gdb) p &p1\n$2 = (char (*)[4]) 0x80477a4\n(gdb) set {char [4]} 0x80477a4 = \"Ace\"\n(gdb) n\n8               printf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n(gdb) \np1 is Ace, p2 is Bob\n9               return 0;\n```\n\n在改变字符串的值时候，一定要注意内存越界的问题。\n参见[stackoverflow](http://stackoverflow.com/questions/19503057/in-gdb-how-can-i-write-a-string-to-memory).\n\n\n\n##### 设置变量的值\n\n```c\n#include <stdio.h>\n\nint func(void)\n{\n    int i = 2;\n\n    return i;\n}\n\nint main(void)\n{\n    int a = 0;\n\n    a = func();\n    printf(\"%d\\n\", a);\n    return 0;\n}\n```\n\n在gdb中，可以用“`set var variable=expr`”命令设置变量的值，以上面代码为例：\n\n```\nBreakpoint 2, func () at a.c:5\n5                   int i = 2;\n(gdb) n\n7                   return i;\n(gdb) set var i = 8\n(gdb) p i\n$4 = 8\n```\n\n可以看到在`func`函数里用`set`命令把`i`的值修改成为`8`。\n\n也可以用“`set {type}address=expr`”的方式，含义是给存储地址在`address`，变量类型为`type`的变量赋值，仍以上面代码为例：\n\n```\nBreakpoint 2, func () at a.c:5\n5                   int i = 2;\n(gdb) n\n7                   return i;\n(gdb) p &i\n$5 = (int *) 0x8047a54\n(gdb) set {int}0x8047a54 = 8\n(gdb) p i\n$6 = 8\n```\n\n可以看到`i`的值被修改成为`8`。\n\n另外寄存器也可以作为变量，因此同样可以修改寄存器的值：\n\n```\nBreakpoint 2, func () at a.c:5\n5                   int i = 2;\n(gdb)\n(gdb) n\n7                   return i;\n(gdb)\n8               }\n(gdb) set var $eax = 8\n(gdb) n\nmain () at a.c:15\n15                  printf(\"%d\\n\", a);\n(gdb)\n8\n16                  return 0;\n```\n\n可以看到因为eax寄存器存储着函数的返回值，所以当把eax寄存器的值改为`8`后，函数的返回值也变成了`8`。\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Assignment.html#Assignment)\n\n\n\n##### 修改PC寄存器的值\n\n```c\n#include <stdio.h>\nint main(void)\n{       \n        int a =0;               \n\n        a++;    \n        a++;    \n        printf(\"%d\\n\", a);      \n        return 0;\n}\n```\n\nPC寄存器会存储程序下一条要执行的指令，通过修改这个寄存器的值，可以达到改变程序执行流程的目的。\n上面的程序会输出“`a=2`”，下面介绍一下如何通过修改PC寄存器的值，改变程序执行流程。\n\n```\n4               int a =0;\n(gdb) disassemble main\nDump of assembler code for function main:\n0x08050921 <main+0>:    push   %ebp\n0x08050922 <main+1>:    mov    %esp,%ebp\n0x08050924 <main+3>:    sub    $0x8,%esp\n0x08050927 <main+6>:    and    $0xfffffff0,%esp\n0x0805092a <main+9>:    mov    $0x0,%eax\n0x0805092f <main+14>:   add    $0xf,%eax\n0x08050932 <main+17>:   add    $0xf,%eax\n0x08050935 <main+20>:   shr    $0x4,%eax\n0x08050938 <main+23>:   shl    $0x4,%eax\n0x0805093b <main+26>:   sub    %eax,%esp\n0x0805093d <main+28>:   movl   $0x0,-0x4(%ebp)\n0x08050944 <main+35>:   lea    -0x4(%ebp),%eax\n0x08050947 <main+38>:   incl   (%eax)\n0x08050949 <main+40>:   lea    -0x4(%ebp),%eax\n0x0805094c <main+43>:   incl   (%eax)\n0x0805094e <main+45>:   sub    $0x8,%esp\n0x08050951 <main+48>:   pushl  -0x4(%ebp)\n0x08050954 <main+51>:   push   $0x80509b4\n0x08050959 <main+56>:   call   0x80507cc <printf@plt>\n0x0805095e <main+61>:   add    $0x10,%esp\n0x08050961 <main+64>:   mov    $0x0,%eax\n0x08050966 <main+69>:   leave\n0x08050967 <main+70>:   ret\nEnd of assembler dump.\n(gdb) info line 6\nLine 6 of \"a.c\" starts at address 0x8050944 <main+35> and ends at 0x8050949 <main+40>.\n(gdb) info line 7\nLine 7 of \"a.c\" starts at address 0x8050949 <main+40> and ends at 0x805094e <main+45>.\n```\n\n通过“`info line 6`”和“`info line 7`”命令可以知道两条“`a++;`”语句的汇编指令起始地址分别是`0x8050944`和`0x8050949`。\n\n```\n(gdb) n\n6               a++;\n(gdb) p $pc\n$3 = (void (*)()) 0x8050944 <main+35>\n(gdb) set var $pc=0x08050949\n```\n\n当程序要执行第一条“`a++;`”语句时，打印`pc`寄存器的值，看到`pc`寄存器的值为`0x8050944`，与“`info line 6`”命令得到的一致。接下来，把`pc`寄存器的值改为`0x8050949`，也就是通过“`info line 7`”命令得到的第二条“`a++;`”语句的起始地址。\n\n```\n(gdb) n\n8               printf(\"a=%d\\n\", a);\n(gdb)\na=1\n9               return 0;\n```\n\n接下来执行，可以看到程序输出“`a=1`”，也就是跳过了第一条“`a++;`”语句。\n\n\n\n##### 跳转到指定位置执行\n\n```c\n#include <stdio.h>\n\nvoid fun (int x)\n{\n  if (x < 0)\n    puts (\"error\");\n}\n\nint main (void)\n{\n  int i = 1;\n\n  fun (i--);\n  fun (i--);\n  fun (i--);\n\n  return 0;\n}\n```\n\n当调试程序时，你可能不小心走过了出错的地方：\n\n```\n(gdb) n\n13\t  fun (i--);\n(gdb) \n14\t  fun (i--);\n(gdb) \n15\t  fun (i--);\n(gdb) \nerror\n17\t  return 0;\n```\n\n看起来是在15行，调用fun的时候出错了。常见的办法是在15行设置个断点，然后从头`run`一次。\n\n如果你的环境支持反向执行，那么更好了。\n\n如果不支持，你也可以直接`jump`到15行，再执行一次：\n\n```\n(gdb) b 15\nBreakpoint 2 at 0x40056a: file jump.c, line 15.\n(gdb) j 15\nContinuing at 0x40056a.\n\nBreakpoint 2, main () at jump.c:15\n15\t  fun (i--);\n(gdb) s\nfun (x=-2) at jump.c:5\n5\t  if (x < 0)\n(gdb) n\n6\t    puts (\"error\");\n```\n\n需要注意的是：\n\n1. `jump`命令只改变pc的值，所以改变程序执行可能会出现不同的结果，比如变量i的值\n2. 通过（临时）断点的配合，可以让你的程序跳到指定的位置，并停下来\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Jumping.html#Jumping)\n\n\n\n##### 使用断点命令改变程序的执行\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid drawing (int n)\n{\n  if (n != 0)\n    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n  else\n    puts (\"You win $3000!\");\n}\n\nint main (void)\n{\n  int n;\n\n  srand (time (0));\n  n = rand () % 10;\n  printf (\"Your number is %d\\n\", n);\n  drawing (n);\n\n  return 0;\n}\n```\n\n这个例子程序可能不太好，只是可以用来演示下断点命令的用法：\n\n```\n(gdb) b drawing\nBreakpoint 1 at 0x40064d: file win.c, line 6.\n(gdb) command 1\nType commands for breakpoint(s) 1, one per line.\nEnd with a line saying just \"end\".\n>silent\n>set variable n = 0\n>continue\n>end\n(gdb) r\nStarting program: /home/xmj/tmp/a.out \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nYour number is 6\nYou win $3000!\n[Inferior 1 (process 4134) exited normally]\n```\n\n可以看到，当程序运行到断点处，会自动把变量n的值修改为0，然后继续执行。\n\n如果你在调试一个大程序，重新编译一次会花费很长时间，比如调试编译器的bug，那么你可以用这种方式在gdb中先实验性的修改下试试，而不需要修改源码，重新编译。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Break-Commands.html#Break-Commands)\n\n\n\n##### 修改被调试程序的二进制文件\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid drawing (int n)\n{\n  if (n != 0)\n    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n  else\n    puts (\"You win $3000!\");\n}\n\nint main (void)\n{\n  int n;\n\n  srand (time (0));\n  n = rand () % 10;\n  printf (\"Your number is %d\\n\", n);\n  drawing (n);\n\n  return 0;\n}\n\n\n\n```\n\ngdb不仅可以用来调试程序，还可以修改程序的二进制代码。\n\n缺省情况下，gdb是以只读方式加载程序的。可以通过命令行选项指定为可写：\n\n```\n$ gcc -write ./a.out\n(gdb) show write\nWriting into executable and core files is on.\n```\n\n也可以在gdb中，使用命令设置并重新加载程序：\n\n```\n(gdb) set write on\n(gdb) file ./a.out\n```\n\n接下来，查看反汇编：\n\n```\n(gdb) disassemble /mr drawing \nDump of assembler code for function drawing:\n5\t{\n   0x0000000000400642 <+0>:\t55\tpush   %rbp\n   0x0000000000400643 <+1>:\t48 89 e5\tmov    %rsp,%rbp\n   0x0000000000400646 <+4>:\t48 83 ec 10\tsub    $0x10,%rsp\n   0x000000000040064a <+8>:\t89 7d fc\tmov    %edi,-0x4(%rbp)\n\n6\t  if (n != 0)\n   0x000000000040064d <+11>:\t83 7d fc 00\tcmpl   $0x0,-0x4(%rbp)\n   0x0000000000400651 <+15>:\t74 0c\tje     0x40065f <drawing+29>\n\n7\t    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n   0x0000000000400653 <+17>:\tbf e0 07 40 00\tmov    $0x4007e0,%edi\n   0x0000000000400658 <+22>:\te8 b3 fe ff ff\tcallq  0x400510 <puts@plt>\n   0x000000000040065d <+27>:\teb 0a\tjmp    0x400669 <drawing+39>\n\n8\t  else\n9\t    puts (\"You win $3000!\");\n   0x000000000040065f <+29>:\tbf 12 08 40 00\tmov    $0x400812,%edi\n   0x0000000000400664 <+34>:\te8 a7 fe ff ff\tcallq  0x400510 <puts@plt>\n\n10\t}\n   0x0000000000400669 <+39>:\tc9\tleaveq \n   0x000000000040066a <+40>:\tc3\tretq   \n\nEnd of assembler dump.\n```\n\n修改二进制代码（注意大小端和指令长度）：\n\n```\n(gdb) set variable *(short*)0x400651=0x0ceb\n(gdb) disassemble /mr drawing \nDump of assembler code for function drawing:\n5\t{\n   0x0000000000400642 <+0>:\t55\tpush   %rbp\n   0x0000000000400643 <+1>:\t48 89 e5\tmov    %rsp,%rbp\n   0x0000000000400646 <+4>:\t48 83 ec 10\tsub    $0x10,%rsp\n   0x000000000040064a <+8>:\t89 7d fc\tmov    %edi,-0x4(%rbp)\n\n6\t  if (n != 0)\n   0x000000000040064d <+11>:\t83 7d fc 00\tcmpl   $0x0,-0x4(%rbp)\n   0x0000000000400651 <+15>:\teb 0c\tjmp    0x40065f <drawing+29>\n\n7\t    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n   0x0000000000400653 <+17>:\tbf e0 07 40 00\tmov    $0x4007e0,%edi\n   0x0000000000400658 <+22>:\te8 b3 fe ff ff\tcallq  0x400510 <puts@plt>\n   0x000000000040065d <+27>:\teb 0a\tjmp    0x400669 <drawing+39>\n\n8\t  else\n9\t    puts (\"You win $3000!\");\n   0x000000000040065f <+29>:\tbf 12 08 40 00\tmov    $0x400812,%edi\n   0x0000000000400664 <+34>:\te8 a7 fe ff ff\tcallq  0x400510 <puts@plt>\n\n10\t}\n   0x0000000000400669 <+39>:\tc9\tleaveq \n   0x000000000040066a <+40>:\tc3\tretq   \n\nEnd of assembler dump.\n```\n\n可以看到，条件跳转指令“je”已经被改为无条件跳转“jmp”了。\n\n退出，运行一下：\n\n```\n$ ./a.out \nYour number is 2\nYou win $3000!\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Patching.html#Patching)\n\n\n\n#### 13、信号\n\n##### 查看信号处理信息\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGINT, handler);\n        signal(SIGALRM, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`i signals`”命令（或者“`i handle`”命令，`i`是`info`命令缩写）查看gdb如何处理进程收到的信号:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\nSIGINT        Yes       Yes     No              Interrupt\nSIGQUIT       Yes       Yes     Yes             Quit\n......\nSIGALRM       No        No      Yes             Alarm clock\n......\n```\n\n第一项（`Signal`）：标示每个信号。\n第二项（`Stop`）：表示被调试的程序有对应的信号发生时，gdb是否会暂停程序。\n第三项（`Print`）：表示被调试的程序有对应的信号发生时，gdb是否会打印相关信息。\n第四项（`Pass to program`）：gdb是否会把这个信号发给被调试的程序。\n第五项（`Description`）：信号的描述信息。\n\n从上面的输出可以看到，当`SIGINT`信号发生时，gdb会暂停被调试的程序，并打印相关信息，但不会把这个信号发给被调试的程序。而当`SIGALRM`信号发生时，gdb不会暂停被调试的程序，也不打印相关信息，但会把这个信号发给被调试的程序。\n\n启动gdb调试上面的程序，同时另起一个终端，先后发送`SIGINT`和`SIGALRM`信号给被调试的进程，输出如下：\n\n```\nProgram received signal SIGINT, Interrupt.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 14\n```\n\n可以看到收到`SIGINT`时，程序暂停了，也输出了信号信息，但并没有把`SIGINT`信号交由进程处理（程序没有输出）。而收到`SIGALRM`信号时，程序没有暂停，也没有输出信号信息，但把`SIGALRM`信号交由进程处理了（程序打印了输出）。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n##### 信号发生时是否暂停程序\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGHUP, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`handle signal stop/nostop`”命令设置当信号发生时，是否暂停程序的执行，以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行`continue`命令继续程序的执行。\n\n接下来用“`handle SIGHUP nostop`”命令设置当`SIGHUP`信号发生时，gdb不暂停程序，执行如下：\n\n```\n(gdb) handle SIGHUP nostop\nSignal        Stop      Print   Pass to program Description\nSIGHUP        No        Yes     Yes             Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\nReceive signal: 1\n```\n\n可以看到，程序收到`SIGHUP`信号发生时，没有暂停，而是继续执行。\n\n如果想恢复之前的行为，用“`handle SIGHUP stop`”命令即可。需要注意的是，设置`stop`的同时，默认也会设置`print`（关于`print`，请参见[信号发生时是否打印信号信息](https://www.kancloud.cn/wizardforcel/gdb-tips-100/146797)）。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n##### 信号发生时是否打印信号信息\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGHUP, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`handle signal print/noprint`”命令设置当信号发生时，是否打印信号信息，以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行`continue`命令继续程序的执行。\n\n接下来用“`handle SIGHUP noprint`”命令设置当`SIGHUP`信号发生时，gdb不打印信号信息，执行如下：\n\n```\n(gdb) handle SIGHUP noprint \nSignal        Stop      Print   Pass to program Description\nSIGHUP        No        No      Yes             Hangup\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\nReceive signal: 1\n```\n\n需要注意的是，设置`noprint`的同时，默认也会设置`nostop`。可以看到，程序收到`SIGHUP`信号发生时，没有暂停，也没有打印信号信息。而是继续执行。\n\n如果想恢复之前的行为，用“`handle SIGHUP print`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n##### 信号发生时是否把信号给程序处理\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGHUP, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`handle signal pass(noignore)/nopass(ignore)`”命令设置当信号发生时，是否把信号丢给程序处理.其中`pass`和`noignore`含义相同，`nopass`和`ignore`含义相同。以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会把信号丢给程序处理。\n\n接下来用“`handle SIGHUP nopass`”命令设置当`SIGHUP`信号发生时，gdb不把信号丢给程序处理，执行如下：\n\n```\n(gdb) handle SIGHUP nopass\nSignal        Stop      Print   Pass to program Description\nSIGHUP        Yes       Yes     No              Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\n```\n\n可以看到，`SIGHUP`信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。\n\n如果想恢复之前的行为，用“`handle SIGHUP pass`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n\n\n##### 给程序发送信号\n\n用gdb调试程序时，可以用“`handle signal pass(noignore)/nopass(ignore)`”命令设置当信号发生时，是否把信号丢给程序处理.其中`pass`和`noignore`含义相同，`nopass`和`ignore`含义相同。以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会把信号丢给程序处理。\n\n接下来用“`handle SIGHUP nopass`”命令设置当`SIGHUP`信号发生时，gdb不把信号丢给程序处理，执行如下：\n\n```\n(gdb) handle SIGHUP nopass\nSignal        Stop      Print   Pass to program Description\nSIGHUP        Yes       Yes     No              Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\n```\n\n可以看到，`SIGHUP`信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。\n\n如果想恢复之前的行为，用“`handle SIGHUP pass`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n用gdb调试程序时，可以用“`handle signal pass(noignore)/nopass(ignore)`”命令设置当信号发生时，是否把信号丢给程序处理.其中`pass`和`noignore`含义相同，`nopass`和`ignore`含义相同。以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会把信号丢给程序处理。\n\n接下来用“`handle SIGHUP nopass`”命令设置当`SIGHUP`信号发生时，gdb不把信号丢给程序处理，执行如下：\n\n```\n(gdb) handle SIGHUP nopass\nSignal        Stop      Print   Pass to program Description\nSIGHUP        Yes       Yes     No              Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\n```\n\n可以看到，`SIGHUP`信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。\n\n如果想恢复之前的行为，用“`handle SIGHUP pass`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n\n\n##### 使用“$_siginfo”变量\n\n\n\n\n\n#### 14、共享库\n\n##### 显示共享库链接信息\n\n```c\n#include <hiredis/hiredis.h>\n\nint main(void)\n{\n        char a[1026] = {0};\n        redisContext *c = NULL;\n        void *reply = NULL;\n\n        memset(a, 'a', (sizeof(a) - 1));\n        c = redisConnect(\"127.0.0.1\", 6379);\n        if (NULL != c)\n        {\n              reply = redisCommand(c, \"set 1 %s\", a);\n              freeReplyObject(reply);\n\n              reply = redisCommand(c, \"get 1\");\n              freeReplyObject(reply);\n\n              redisFree(c);\n        }\n        return 0;\n}\n```\n\n使用\"`info sharedlibrary regex`\"命令可以显示程序加载的共享链接库信息，其中`regex`可以是正则表达式，意为显示名字符合`regex`的共享链接库。如果没有`regex`，则列出所有的库。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x109f0: file a.c, line 5.\nStarting program: /export/home/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:5\n5                       char a[1026] = {0};\n(gdb) info sharedlibrary\nFrom        To          Syms Read   Shared Object Library\n0xff3b44a0  0xff3e3490  Yes (*)     /usr/lib/ld.so.1\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n0xff3137f0  0xff31a9f4  Yes (*)     /lib/libsocket.so.1\n0xff215fd4  0xff28545c  Yes (*)     /lib/libnsl.so.1\n0xff0a3a20  0xff14fedc  Yes (*)     /lib/libc.so.1\n0xff320400  0xff3234c8  Yes (*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1\n(*): Shared library is missing debugging information.\n```\n\n可以看到列出所有加载的共享链接库信息，带“`*`”表示库缺少调试信息。\n\n另外也可以使用正则表达式：\n\n```\n(gdb) i sharedlibrary hiredi*\nFrom        To          Syms Read   Shared Object Library\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n```\n\n可以看到只列出了一个库信息。\n参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries).\n\n#### 15、脚本\n\n##### 配置gdb init文件\n\n使用\"`info sharedlibrary regex`\"命令可以显示程序加载的共享链接库信息，其中`regex`可以是正则表达式，意为显示名字符合`regex`的共享链接库。如果没有`regex`，则列出所有的库。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x109f0: file a.c, line 5.\nStarting program: /export/home/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:5\n5                       char a[1026] = {0};\n(gdb) info sharedlibrary\nFrom        To          Syms Read   Shared Object Library\n0xff3b44a0  0xff3e3490  Yes (*)     /usr/lib/ld.so.1\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n0xff3137f0  0xff31a9f4  Yes (*)     /lib/libsocket.so.1\n0xff215fd4  0xff28545c  Yes (*)     /lib/libnsl.so.1\n0xff0a3a20  0xff14fedc  Yes (*)     /lib/libc.so.1\n0xff320400  0xff3234c8  Yes (*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1\n(*): Shared library is missing debugging information.\n```\n\n可以看到列出所有加载的共享链接库信息，带“`*`”表示库缺少调试信息。\n\n另外也可以使用正则表达式：\n\n```\n(gdb) i sharedlibrary hiredi*\nFrom        To          Syms Read   Shared Object Library\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n```\n\n可以看到只列出了一个库信息。\n参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries).\n\n\n\n##### 按何种方式解析脚本文件\n\n```c\n#include <stdio.h>\n\ntypedef struct\n{\n        int a;\n        int b;\n        int c;\n        int d;\n}ex_st;\n\nint main(void) {\n        ex_st st = {1, 2, 3, 4};\n        printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n        return 0;\n}\n```\n\ngdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。\ngdb用“`set script-extension`”命令来决定按何种格式来解析脚本文件。它可以取3个值：\na）`off`：所有的脚本文件都解析成gdb的命令脚本；\nb）`soft`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；\nc）`strict`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；\n以上面程序为例，进行调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) q\nA debugging session is active.\n\n        Inferior 1 [process 24249] will be killed.\n\nQuit anyway? (y or n) y\n```\n\n可以看到gdb退出时，默认行为会提示用户是否退出。\n\n下面写一个脚本文件（[gdb.py](http://gdb.py/)），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：\n\n```\nset confirm off\n```\n\n再次开始调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) show script-extension\nScript filename extension recognition is \"soft\".\n(gdb) source gdb.py\n  File \"gdb.py\", line 1\n    set confirm off\n              ^\nSyntaxError: invalid syntax\n```\n\n可以看到“`script-extension`”默认值是`soft`，接下来执行“`source gdb.py`”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。\n再执行一次：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) set script-extension off\n(gdb) source gdb.py\n(gdb) q\n[root@linux:~]$\n```\n\n这次把“`script-extension`”值改为`off`，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html)\n\n##### 保存历史命令\n\ngdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。\ngdb用“`set script-extension`”命令来决定按何种格式来解析脚本文件。它可以取3个值：\na）`off`：所有的脚本文件都解析成gdb的命令脚本；\nb）`soft`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；\nc）`strict`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；\n以上面程序为例，进行调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) q\nA debugging session is active.\n\n        Inferior 1 [process 24249] will be killed.\n\nQuit anyway? (y or n) y\n```\n\n可以看到gdb退出时，默认行为会提示用户是否退出。\n\n下面写一个脚本文件（[gdb.py](http://gdb.py/)），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：\n\n```\nset confirm off\n```\n\n再次开始调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) show script-extension\nScript filename extension recognition is \"soft\".\n(gdb) source gdb.py\n  File \"gdb.py\", line 1\n    set confirm off\n              ^\nSyntaxError: invalid syntax\n```\n\n可以看到“`script-extension`”默认值是`soft`，接下来执行“`source gdb.py`”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。\n再执行一次：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) set script-extension off\n(gdb) source gdb.py\n(gdb) q\n[root@linux:~]$\n```\n\n这次把“`script-extension`”值改为`off`，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html)\n\n\n\n#### 16、源文件\n\n##### 设置源文件查找路径\n\n```c\n#include <stdio.h>\n#include <time.h>\n\nint main(void) {\n        time_t now = time(NULL);\n        struct tm local = {0};\n        struct tm gmt = {0};\n\n        localtime_r(&now, &local);\n        gmtime_r(&now, &gmt);\n\n        return 0;\n}\n```\n\n有时gdb不能准确地定位到源文件的位置（比如文件被移走了，等等），此时可以用`directory`命令设置查找源文件的路径。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400560: file a.c, line 5.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:5\n5       a.c: No such file or directory.\n(gdb) directory ../ki/\nSource directories searched: /home/nan/../ki:$cdir:$cwd\n(gdb) n\n6               struct tm local = {0};\n(gdb)\n7               struct tm gmt = {0};\n(gdb)\n9               localtime_r(&now, &local);\n(gdb)\n10              gmtime_r(&now, &gmt);\n(gdb) q\n```\n\n可以看到，使用`directory`（或`dir`)命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。\n\n如果希望在gdb启动时，加载code的位置，避免每次在gdb中再次输入命令，可以使用gdb的`-d` 参数\n\n```shell\ngdb -q a.out -d /search/code/some \n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html).\n\n##### 替换查找源文件的目录\n\n```c\n#include <stdio.h>\n#include <time.h>\n\nint main(void) {\n        time_t now = time(NULL);\n        struct tm local = {0};\n        struct tm gmt = {0};\n\n        localtime_r(&now, &local);\n        gmtime_r(&now, &gmt);\n\n        return 0;\n}\n```\n\n有时调试程序时，源代码文件可能已经移到其它的文件夹了。此时可以用`set substitute-path from to`命令设置新的文件夹（`to`）目录替换旧的（`from`）。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400560: file a.c, line 5.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:5\n5       a.c: No such file or directory.\n(gdb) set substitute-path /home/nan /home/ki\n(gdb) n\n6                       struct tm local = {0};\n(gdb)\n7                       struct tm gmt = {0};\n(gdb)\n9                       localtime_r(&now, &local);\n(gdb)\n10                      gmtime_r(&now, &gmt);\n(gdb)\n12                      return 0;\n```\n\n调试时，因为源文件已经移到`/home/ki`这个文件夹下了，所以gdb找不到源文件。使用`set substitute-path /home/nan /home/ki`命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html).\n\n#### 17、图形化界面\n\n##### 进入和退出图形化调试界面\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n启动gdb时指定“`-tui`”参数（例如：`gdb -tui program`），或者运行gdb过程中使用“`Crtl+X+A`”组合键，都可以进入图形化调试界面。以调试上面程序为例：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\nB+>│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   │28                                                                                             │\n   │29                                                                                             │\n   │30                                                                                             │\n   │31                                                                                             │\n   │32                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 22141 In: main                                               Line: 24   PC: 0x40052b\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到，显示了当前的程序的进程号，将要执行的代码行号，`PC`寄存器的值。\n退出图形化调试界面也是用“`Crtl+X+A`”组合键。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI.html).\n\n##### 显示汇编代码窗口\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n使用gdb图形化调试界面时，可以使用“`layout asm`”命令显示汇编代码窗口。以调试上面程序为例：\n\n```\n\t    ┌───────────────────────────────────────────────────────────────────────────────────────────────┐\n  >│0x40052b <main+4>               callq  0x4004f3 <fun2>                                         │\n   │0x400530 <main+9>               mov    $0x0,%eax                                               │\n   │0x400535 <main+14>              leaveq                                                         │\n   │0x400536 <main+15>              retq                                                           │\n   │0x400537                        nop                                                            │\n   │0x400538                        nop                                                            │\n   │0x400539                        nop                                                            │\n   │0x40053a                        nop                                                            │\n   │0x40053b                        nop                                                            │\n   │0x40053c                        nop                                                            │\n   │0x40053d                        nop                                                            │\n   │0x40053e                        nop                                                            │\n   │0x40053f                        nop                                                            │\n   │0x400540 <__libc_csu_fini>      repz retq                                                      │\n   │0x400542                        data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)          │\n   │0x400550 <__libc_csu_init>      mov    %rbp,-0x28(%rsp)                                        │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 44658 In: main                                               Line: 24   PC: 0x40052b\n\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到，显示了当前的程序的汇编代码。\n如果既想显示源代码，又想显示汇编代码，可以使用“`layout split`”命令：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n  >│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   │28                                                                                             │\n   │29                                                                                             │\n   │30                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\n  >│0x40052b <main+4>       callq  0x4004f3 <fun2>                                                 │\n   │0x400530 <main+9>       mov    $0x0,%eax                                                       │\n   │0x400535 <main+14>      leaveq                                                                 │\n   │0x400536 <main+15>      retq                                                                   │\n   │0x400537                nop                                                                    │\n   │0x400538                nop                                                                    │\n   │0x400539                nop                                                                    │\n   │0x40053a                nop                                                                    │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 44658 In: main                                               Line: 24   PC: 0x40052b\n\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到上面显示的是源代码，下面显示的是汇编代码。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html).\n\n##### 显示寄存器窗口\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n使用gdb图形化调试界面时，可以使用“`layout regs`”命令显示寄存器窗口。以调试上面程序为例：\n\n```\n┌──Register group: general─────────────────────────────────────────────────────────────────────────┐\n│rax            0x34e4590f60     227169341280     rbx            0x0      0                        │\n│rcx            0x0      0                        rdx            0x7fffffffe4b8   140737488348344  │\n│rsi            0x7fffffffe4a8   140737488348328  rdi            0x1      1                        │\n│rbp            0x7fffffffe3c0   0x7fffffffe3c0   rsp            0x7fffffffe3c0   0x7fffffffe3c0   │\n│r8             0x34e458f300     227169334016     r9             0x34e3a0e9f0     227157273072     │\n│r10            0x7fffffffe210   140737488347664  r11            0x34e421ec20     227165727776     │\n│r12            0x4003e0 4195296                  r13            0x7fffffffe4a0   140737488348320  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n  >│24              fun2();                                                                        │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到，显示了通用寄存器的内容。\n如果想查看浮点寄存器，可以使用“`tui reg float`”命令：\n\n```\n┌──Register group: float───────────────────────────────────────────────────────────────────────────┐\n│st0            0        (raw 0x00000000000000000000)                                              │\n│st1            0        (raw 0x00000000000000000000)                                              │\n│st2            0        (raw 0x00000000000000000000)                                              │\n│st3            0        (raw 0x00000000000000000000)                                              │\n│st4            0        (raw 0x00000000000000000000)                                              │\n│st5            0        (raw 0x00000000000000000000)                                              │\n│st6            0        (raw 0x00000000000000000000)                                              │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │16              fun1();                                                                        │\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb) tui reg float\n```\n\n“`tui reg system`”命令显示系统寄存器：\n\n```\n┌──Register group: system──────────────────────────────────────────────────────────────────────────┐\n│orig_rax       0xffffffffffffffff       -1                                                        │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │16              fun1();                                                                        │\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb) tui reg system\n(gdb)\n```\n\n想切换回显示通用寄存器内容，可以使用“`tui reg general`”命令：\n\n```\n┌──Register group: general─────────────────────────────────────────────────────────────────────────┐\n│rax            0x34e4590f60     227169341280     rbx            0x0      0                        │\n│rcx            0x0      0                        rdx            0x7fffffffe4b8   140737488348344  │\n│rsi            0x7fffffffe4a8   140737488348328  rdi            0x1      1                        │\n│rbp            0x7fffffffe3c0   0x7fffffffe3c0   rsp            0x7fffffffe3c0   0x7fffffffe3c0   │\n│r8             0x34e458f300     227169334016     r9             0x34e3a0e9f0     227157273072     │\n│r10            0x7fffffffe210   140737488347664  r11            0x34e421ec20     227165727776     │\n│r12            0x4003e0 4195296                  r13            0x7fffffffe4a0   140737488348320  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │16              fun1();                                                                        │\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\n(gdb) tui reg general\n(gdb)\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html).\n\n##### 调整窗口大小\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n使用gdb图形化调试界面时，可以使用“`winheight <win_name> [+ | -]count`”命令调整窗口大小（`winheight`缩写为`win`。`win_name`可以是`src`、`cmd`、`asm`和`regs`）。以调试上面程序为例，这是原始的`src`窗口大小：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21      int main(void)                                                                        22\n   │23      {                                                                                      │\n   │24              fun2();                                                                        │\nB+>│25                                                                                             │\n   │                return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                            32\n   │                                                                                               │\n   │                                                                                               │\n   │                                                                                               │\n   │                                                                                               │\n   │                                                                                               │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 9667 In: main                                                Line: 24   PC: 0x40052b\nUsage: winheight <win_name> [+ | -] <#lines>\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n```\n\n执行“`winheight src -5`”命令后：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n  >│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 9667 In: main                                               Line: 24   PC: 0x40052b\nUsage: winheight <win_name> [+ | -] <#lines>\n(gdb)\n```\n\n可以看到窗口变小了。\n接着执行“`winheight src +5`”命令：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n  >│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   │28                                                                                             │\n   │29                                                                                             │\n   │30                                                                                             │\n   │31                                                                                             │\n   │32                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 9667 In: main                                               Line: 24   PC: 0x40052b\nUsage: winheight <win_name> [+ | -] <#lines>\n(gdb)\n```\n\n可以看到窗口恢复了原样。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html).\n\n#### 18、其他\n\n##### 命令行选项的格式\n\ngdb的帮助信息和在线文档对于长选项的形式使用了不同的风格。你可能有点迷惑，gdb的长选项究竟应该是“-”，还是“--”？\n\n是的，这两种方式都可以。例如：\n\n```\n$ gdb -help\n$ gdb --help\n\n$ gdb -args ./a.out a b c\n$ gdb --args ./a.out a b c\n```\n\n好吧，使用短的。\n\n\n\n##### 支持预处理器宏信息\n\n```c\n#include <stdio.h>\n\n#define NAME \"Joe\"\n\nint main()\n{\n  printf (\"Hello %s\\n\", NAME);\n  return 0;\n}\n```\n\n使用`gcc -g`编译生成的程序，是不包含预处理器宏信息的：\n\n```\n(gdb) p NAME\nNo symbol \"NAME\" in current context.\n```\n\n如果想在gdb中查看宏信息，可以使用`gcc -g3`进行编译：\n\n```\n(gdb) p NAME\n$1 = \"Joe\"\n```\n\n关于预处理器宏的命令，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Macros.html#Macros)\n\n##### 使用命令的缩写形式\n\n在gdb中，你不用必须输入完整的命令，只需命令的（前）几个字母即可。规则是，只要这个缩写不会和其它命令有歧义（注，是否有歧义，这个规则从文档上看不出，看起来需要查看gdb的源代码，或者在实际使用中进行总结）。也可以使用tab键进行命令补全。\n\n其中许多常用命令只使用第一个字母就可以，比如：\n\n```\nb -> break\nc -> continue\nd -> delete\nf -> frame\ni -> info\nj -> jump\nl -> list\nn -> next\np -> print\nr -> run\ns -> step\nu -> until\n```\n\n也有使用两个或几个字母的，比如：\n\n```\naw -> awatch\nbt -> backtrace\ndir -> directory\ndisas -> disassemble\nfin -> finish\nig -> ignore\nni -> nexti\nrw -> rwatch\nsi -> stepi\ntb -> tbreak\nwa -> watch\nwin -> winheight\n```\n\n另外，如果直接按回车键，会重复执行上一次的命令。\n\n\n\n##### 在GDB中执行shell命令和make\n\n你可以不离开gdb，直接执行shell命令，比如：\n\n```\n(gdb) shell ls\n```\n\n或\n\n```\n(gdb) !ls\n```\n\n这里，\"!\"和命令之间不需要有空格（即，有也成）。\n\n特别是当你在构建环境(build目录)下调试程序的时候，可以直接运行make：\n\n```\n(gdb) make CFLAGS=\"-g -O0\"\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Shell-Commands.html#Shell-Commands)\n\n\n\n##### 在GDB中执行cd和pwd命令\n\n是的，gdb确实支持这两个命令，虽然我没有想到它们有什么特别的用处。\n\n也许，当你启动gdb之后，发现需要切换工作目录，但又不想退出gdb的时候：\n\n```\n(gdb) pwd\nWorking directory /home/xmj.\n(gdb) cd tmp\nWorking directory /home/xmj/tmp.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Working-Directory.html#Working-Directory)\n\n\n\n##### 设置命令提示符\n\n\n\n```shell\n$ gdb -q `which gdb`\nReading symbols from /home/xmj/install/binutils-gdb-git/bin/gdb...done.\n(gdb) r -q\nStarting program: /home/xmj/install/binutils-gdb-git/bin/gdb -q\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n(gdb)\n\n\n```\n\n 当你用gdb来调试gdb的时候，通过设置命令提示符，可以帮助你区分这两个gdb：\n\n```\n$ gdb -q `which gdb`\nReading symbols from /home/xmj/install/binutils-gdb-git/bin/gdb...done.\n(gdb) set prompt (main gdb) \n(main gdb) r -q\nStarting program: /home/xmj/install/binutils-gdb-git/bin/gdb -q\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n(gdb) \n```\n\n注意，这里`set prompt (main gdb)`结尾处是有一个空格的。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Prompt.html#Prompt)\n\n\n\n##### 设置被调试程序的参数\n\n\n\n可以在gdb启动时，通过选项指定被调试程序的参数，例如：\n\n```\n$ gdb -args ./a.out a b c\n```\n\n也可以在gdb中，通过命令来设置，例如：\n\n```\n(gdb) set args a b c\n(gdb) show args\nArgument list to give program being debugged when it is started is \"a b c\".\n```\n\n也可以在运行程序时，直接指定：\n\n```\n(gdb) r a b\nStarting program: /home/xmj/tmp/a.out a b\n(gdb) show args\nArgument list to give program being debugged when it is started is \"a b\".\n(gdb) r\nStarting program: /home/xmj/tmp/a.out a b \n```\n\n可以看出，参数已经被保存了，下次运行时直接运行`run`命令，即可。\n\n有意的是，如果我接下来，想让参数为空，该怎么办？是的，直接：\n\n```\n(gdb) set args\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Arguments.html#Arguments)\n\n\n\n##### 设置被调试程序的环境变量\n\n```\n(gdb) u 309\nWarning: couldn't activate thread debugging using libthread_db: Cannot find new threads: generic error\nWarning: couldn't activate thread debugging using libthread_db: Cannot find new threads: generic error\nwarning: Unable to find libthread_db matching inferior's thread library, thread debugging will not be available.\n```\n\n\n\n在gdb中，可以通过命令`set env varname=value`来设置被调试程序的环境变量。对于上面的例子，网上可以搜到一些解决方法，其中一种方法就是设置LD_PRELOAD环境变量：\n\n```\nset env LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0\n```\n\n注意，这个实际路径在不同的机器环境下可能不一样。把这个命令加到~/.gdbinit文件中，就可以了。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Environment.html#Environment)\n\n\n\n##### 得到命令的帮助信息\n\n使用`help`命令可以得到gdb的命令帮助信息：\n\n（1）`help`命令不加任何参数会得到命令的分类：\n\n```\n(gdb) help\nList of classes of commands:\n\naliases -- Aliases of other commands\nbreakpoints -- Making program stop at certain points\ndata -- Examining data\nfiles -- Specifying and examining files\ninternals -- Maintenance commands\nobscure -- Obscure features\nrunning -- Running the program\nstack -- Examining the stack\nstatus -- Status inquiries\nsupport -- Support facilities\ntracepoints -- Tracing of program execution without stopping the program\nuser-defined -- User-defined commands\n\nType \"help\" followed by a class name for a list of commands in that class.\nType \"help all\" for the list of all commands.\nType \"help\" followed by command name for full documentation.\nType \"apropos word\" to search for commands related to \"word\".\nCommand name abbreviations are allowed if unambiguous.\n```\n\n（2）当输入`help class`命令时，可以得到这个类别下所有命令的列表和命令功能：\n\n```\n(gdb) help data\nExamining data.\n\nList of commands:\n\nappend -- Append target code/data to a local file\nappend binary -- Append target code/data to a raw binary file\nappend binary memory -- Append contents of memory to a raw binary file\nappend binary value -- Append the value of an expression to a raw binary file\nappend memory -- Append contents of memory to a raw binary file\nappend value -- Append the value of an expression to a raw binary file\ncall -- Call a function in the program\ndisassemble -- Disassemble a specified section of memory\ndisplay -- Print value of expression EXP each time the program stops\ndump -- Dump target code/data to a local file\ndump binary -- Write target code/data to a raw binary file\ndump binary memory -- Write contents of memory to a raw binary file\ndump binary value -- Write the value of an expression to a raw binary file\n......\n```\n\n（3）也可以用`help command`命令得到某一个具体命令的用法：\n\n```\n(gdb) help mem\nDefine attributes for memory region or reset memory region handling totarget-based.\nUsage: mem auto\n   mem <lo addr> <hi addr> [<mode> <width> <cache>],\nwhere <mode>  may be rw (read/write), ro (read-only) or wo (write-only),\n  <width> may be 8, 16, 32, or 64, and\n  <cache> may be cache or nocache\n```\n\n（4）用`apropos regexp`命令查找所有符合`regexp`正则表达式的命令信息：\n\n```\n(gdb) apropos set\nawatch -- Set a watchpoint for an expression\nb -- Set breakpoint at specified line or function\nbr -- Set breakpoint at specified line or function\nbre -- Set breakpoint at specified line or function\nbrea -- Set breakpoint at specified line or function\n......\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Help.html)\n\n\n\n##### 记录执行DGB的过程\n\n```c\n#include <stdio.h>\n#include <wchar.h>\n\nint main(void)\n{\n        char str1[] = \"abcd\";\n        wchar_t str2[] = L\"abcd\";\n        \n        return 0;\n}\n```\n\n用gdb调试程序时，可以使用“`set logging on`”命令把执行gdb的过程记录下来，方便以后自己参考或是别人帮忙分析。默认的日志文件是“`gdb.txt`”，也可以用“`set logging file file`”改成别的名字。以上面程序为例：\n\n```\n(gdb) set logging file log.txt\n(gdb) set logging on\nCopying output to log.txt.\n(gdb) start\nTemporary breakpoint 1 at 0x8050abe: file a.c, line 6.\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n(gdb) n\n7               wchar_t str2[] = L\"abcd\";\n(gdb) x/s str1\n0x804779f:      \"abcd\"\n(gdb) n       \n9               return 0;\n(gdb) x/ws str2\n0x8047788:      U\"abcd\"\n(gdb) q\nA debugging session is active.\n\n        Inferior 1 [process 9931    ] will be killed.\n\nQuit anyway? (y or n) y\n```\n\n执行完后，查看log.txt文件：\n\n```\nbash-3.2# cat log.txt \nTemporary breakpoint 1 at 0x8050abe: file a.c, line 6.\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n7               wchar_t str2[] = L\"abcd\";\n0x804779f:      \"abcd\"\n9               return 0;\n0x8047788:      U\"abcd\"\nA debugging session is active.\n\n        Inferior 1 [process 9931    ] will be killed.\n\nQuit anyway? (y or n)\n```\n\n可以看到log.txt详细地记录了gdb的执行过程。\n\n此外“`set logging overwrite on`”命令可以让输出覆盖之前的日志文件；而 “`set logging redirect on`”命令会让gdb的日志不会打印在终端。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Logging-Output.html).\n\n\n\n\n\n\n\n\n\n#### 参考\n\n[^1]: <100个GDB小技巧>\n\n[直接执行函数 · 100个gdb小技巧 · 看云 (kancloud.cn)](https://www.kancloud.cn/wizardforcel/gdb-tips-100/146720)\n\n<!--[^2] : <100个GDB小技巧>-->\n\n开源开发工具博客：[Welcome to OSDT Blog | 开源开发工具技术博客（OSDT Blog） (hellogcc.github.io)](https://hellogcc.github.io/)","source":"_posts/编程笔记/GDB使用笔记.md","raw":"---\ntitle: GDB笔记\ncategories: GDB\ntags: linux\nauthor: Noodles\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: 本篇博客作为GDB的使用方法记录，方便使用时查找，不不定期更新。\ndate: 2023-06-22 10:00:00\nupdated: 2023-06-28 10:00:00\nsticky: 3\n---\n\nGDB笔记\n\n本篇博客作为GDB的使用方法记录，方便使用时查找，不不定期更新。文中使用方法均时基于WSL:Ubuntu-20.4.如果想了解更多GDB至少，可以查看GDB官方手册：[Top (Debugging with GDB) (sourceware.org)](https://sourceware.org/gdb/onlinedocs/gdb/)\n\n[Documentation for GDB version 13.2.90.20230625-git (sourceware.org)](https://sourceware.org/gdb/onlinedocs/)\n\n\n\n#### 1、GDB介绍：\n\n​        GDB是GNU调试器，一个用于C和C++等编程语言的开源调试器。GDB支持多种操作系统和编程语言，并提供了丰富的调试功能，如断点、单步执行、变量查看等。当然如果你要开始看这个教程了，那么就必然知道他是用来干啥的。\n\n#### 2、安装\n\n```shell\n$ sudo apt-get install gdb\n```\n\n#### 3、基本操作\n\n##### 进入GDB界面：\n\n```shell\nroot@Noodles:/usr1/code# gdb\nGNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1\nCopyright (C) 2022 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<https://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\n```\n\n进入GDB界面不显示提示信息：\n\n如果不想显示这个信息，则可以使用`-q`选项把提示信息关掉:\n\n```shell\n$ gdb -q\n(gdb)\n```\n\n你可以在~/.bashrc中，为gdb设置一个别名：\n\n```shell\nalias gdb=\"gdb -q\"\n```\n\n##### 信息查询\n\n###### 查询版本信息\n\n```shell\n查询版本信息：(gdb) show version\n(gdb) show version\nGNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1\nCopyright (C) 2022 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<https://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\n```\n\n```shell\n版权相关信息：(gdb) show copying或者\n(gdb) show copying\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n(gdb) show warranty\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n```\n\n###### 输出信息多的时候不暂停输出：\n\n当GDB输出信息较多时，会暂停输出，并打印提示信息：\n\n```shell\n--Type <RET> for more, q to quit, c to continue without paging--qq\n```\n\n如果想要全部输出不暂停，可以使用\n\n“set pagination off`”或者“`set height 0`”命令。这样gdb就会全部输出，不会暂停。\n\n##### 进入GDB\n\n编译文件，生成a.out go\n\n```shell\nroot@Noodles:/usr1/code# gdb a.out \n```\n\n\n\n#### 4、函数相关\n\n##### 列出函数名称：“`info functions`”\n\n使用gdb调试时，使用“`info functions`”命令可以列出可执行文件的所有函数名称\n\n以下代码为例：\n\n```c++\n#include <stdio.h>\n#include <pthread.h>\nvoid *thread_func(void *p_arg)\n{\n        while (1)\n        {\n                sleep(10);\n        }\n}\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n使用gdb调试时，使用“`info functions`”命令可以列出可执行文件的所有函数名称。如下：\n\n```shell\n(gdb) info functions\nAll defined functions:\n\nFile a.c:\nint main(void);\nvoid *thread_func(void *);\n\nNon-debugging symbols:\n0x0805079c  _PROCEDURE_LINKAGE_TABLE_\n0x080507ac  _cleanup@plt\n0x080507bc  atexit\n0x080507bc  atexit@plt\n0x080507cc  __fpstart\n0x080507cc  __fpstart@plt\n0x080507dc  exit@plt\n0x080507ec  __deregister_frame_info_bases@plt\n0x080507fc  __register_frame_info_bases@plt\n0x0805080c  _Jv_RegisterClasses@plt\n0x0805081c  sleep\n0x0805081c  sleep@plt\n0x0805082c  pthread_create@plt\n0x0805083c  _start\n0x080508b4  _mcount\n0x080508b8  __do_global_dtors_aux\n0x08050914  frame_dummy\n0x080509f4  __do_global_ctors_aux\n0x08050a24  _init\n0x08050a31  _fini\n```\n\n另外这个命令也支持正则表达式：“`info functions regex`”，这样只会列出符合正则表达式的函数名称，例如：\n\n```\n(gdb) info functions thre*\nAll functions matching regular expression \"thre*\":\n\nFile a.c:\nvoid *thread_func(void *);\n\nNon-debugging symbols:\n0x0805082c  pthread_create@plt\n```\n\n可以看到gdb只会列出名字里包含“`thre`”的函数。\n\n###### 进入或者跳过函数：step、set step-mode on\n\n使用GDB调试的时候，使用step命令（s）进入函数，如果不想进入某个函数可以直接使用next命令（缩写为n）不进入函数，gdb会等函数执行完，再显示下一行要执行的程序代码。\n\n默认情况下，gdb不会进入不带调试信息的函数。可以执行“set step-mode on”命令，这样gdb就不会跳过没有调试信息的函数。\n\n###### 退出正在调试的函数：“`finish`”或者“`return`”\n\n当单步调试一个函数时，如果不想继续跟踪下去了，可以有两种方式退出。\n\n第一种用“`finish`”命令，这样函数会继续执行完，并且打印返回值，然后等待输入接下来的命令。\n\n第二种用“`return`”命令，这样函数不会继续执行下面的语句，而是直接返回。也可以用“`return expression`”命令指定函数的返回值\n\n###### 直接执行函数：`call`”或“`print`\n\n使用gdb调试程序时，可以使用“`call`”或“`print`”命令直接调用函数执行\n\n###### 打印函数堆栈信息：i frame\n\n使用gdb调试程序时，可以使用“`i frame`”命令（`i`是`info`命令缩写）显示函数堆栈帧信息。执行该命令，会输出函数的堆栈地址，指令寄存器的值，局部变量地址等信息，可以对照汇编指令分析函数的栈信息。\n\n###### 打印尾调用栈帧信息：\n\n当一个函数最后一条指令是调用另外一个函数时，开启优化选项的编译器常常以最后被调用的函数返回值作为调用者的返回值，这称之为“尾调用（Tail call）”。以上面程序为例，编译程序（使用‘-O’）\n\n```shell\ngcc -g -O -o test test.c\n```\n\n查看`main`函数汇编代码：\n\n```shell\n(gdb) disassemble main\nDump of assembler code for function main:\n0x0000000000400565 <+0>:     sub    $0x8,%rsp\n0x0000000000400569 <+4>:     callq  0x400536 <a>\n0x000000000040056e <+9>:     mov    $0x0,%eax\n0x0000000000400573 <+14>:    add    $0x8,%rsp\n0x0000000000400577 <+18>:    retq\n```\n\n可以看到`main`函数直接调用了函数`a`，根本看不到函数`b`和函数`c`的影子。\n\n在函数`a`入口处打上断点，程序停止后，打印堆栈帧信息：\n\n```shell\n(gdb) i frame\nStack level 0, frame at 0x7fffffffe590:\n rip = 0x400536 in a (test.c:4); saved rip = 0x40056e\n called by frame at 0x7fffffffe5a0\n source language c.\n Arglist at 0x7fffffffe580, args:\n Locals at 0x7fffffffe580, Previous frame's sp is 0x7fffffffe590\n Saved registers:\n  rip at 0x7fffffffe588\n```\n\n看不到尾调用的相关信息。\n\n可以设置“`debug entry-values`”选项为非0的值，这样除了输出正常的函数堆栈帧信息以外，还可以输出尾调用的相关信息：\n\n```shell\n(gdb) set debug entry-values 1\n(gdb) b test.c:4\nBreakpoint 1 at 0x400536: file test.c, line 4.\n(gdb) r\nStarting program: /home/nanxiao/test\n\nBreakpoint 1, a () at test.c:4\n4       {\n(gdb) i frame\ntailcall: initial:\nStack level 0, frame at 0x7fffffffe590:\n rip = 0x400536 in a (test.c:4); saved rip = 0x40056e\n called by frame at 0x7fffffffe5a0\n source language c.\n Arglist at 0x7fffffffe580, args:\n Locals at 0x7fffffffe580, Previous frame's sp is 0x7fffffffe590\n Saved registers:\n  rip at 0x7fffffffe588\n```\n\n可以看到输出了“`tailcall: initial:`”信息。\n\n###### 选择函数堆栈帧：“`frame n`”\n\n用gdb调试程序时，当程序暂停后，可以用“`frame n`”命令选择函数堆栈帧，其中`n`是层数。用gdb调试程序时，当程序暂停后，可以用“`frame n`”命令选择函数堆栈帧，其中`n`是层数。\n\n备注，此处需要加入例子说明\n\n用gdb调试程序时，当程序暂停后，可以用“`frame n`”命令选择函数堆栈帧，其中`n`是层数。\n\n###### 上下切换函数堆栈\n\n用gdb调试程序时，当程序暂停后，可以用“`up n`”或“`down n`”命令向上或向下选择函数堆栈帧，其中`n`是层数。\n\n例子：\n\n```\n#include <stdio.h>\n\nint func1(int a)\n{\n        return 2 * a;\n}\n\nint func2(int a)\n{\n        int c = 0;\n        c = 2 * func1(a);\n        return c;\n}\n\nint func3(int a)\n{\n        int c = 0;\n        c = 2 * func2(a);\n        return c;\n}\n\nint main(void)\n{\n        printf(\"%d\\n\", func3(10));\n        return 0;\n}\n```\n\n用gdb调试程序时，当程序暂停后，可以用“`up n`”或“`down n`”命令向上或向下选择函数堆栈帧，其中`n`是层数。以上面程序为例：\n\n```\n(gdb) b test.c:5\nBreakpoint 1 at 0x40053d: file test.c, line 5.\n(gdb) r\nStarting program: /home/nanxiao/test\n\nBreakpoint 1, func1 (a=10) at test.c:5\n5               return 2 * a;\n(gdb) bt\n#0  func1 (a=10) at test.c:5\n#1  0x0000000000400560 in func2 (a=10) at test.c:11\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n#3  0x000000000040059e in main () at test.c:24\n(gdb) frame 2\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n18              c = 2 * func2(a);\n(gdb) up 1\n#3  0x000000000040059e in main () at test.c:24\n24              printf(\"%d\\n\", func3(10));\n(gdb) down 2\n#1  0x0000000000400560 in func2 (a=10) at test.c:11\n11              c = 2 * func1(a);\n```\n\n可以看到程序断住后，先执行“`frame 2`”命令，切换到`fun3`函数。接着执行“`up 1`”命令，此时会切换到`main`函数，也就是会往外层的堆栈帧移动一层。反之，当执行“`down 2`”命令后，又会向内层堆栈帧移动二层。如果不指定`n`，则`n`默认为`1`.\n\n还有“`up-silently n`”和“`down-silently n`”这两个命令，与“`up n`”和“`down n`”命令区别在于，切换堆栈帧后，不会打印信息，仍以上面程序为例：\n\n```\n(gdb) up\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n18              c = 2 * func2(a);\n(gdb) bt\n#0  func1 (a=10) at test.c:5\n#1  0x0000000000400560 in func2 (a=10) at test.c:11\n#2  0x0000000000400586 in func3 (a=10) at test.c:18\n#3  0x000000000040059e in main () at test.c:24\n(gdb) up-silently\n(gdb) i frame\nStack level 3, frame at 0x7fffffffe5a0:\n rip = 0x40059e in main (test.c:24); saved rip = 0x7ffff7a35ec5\n caller of frame at 0x7fffffffe590\n source language c.\n Arglist at 0x7fffffffe590, args:\n Locals at 0x7fffffffe590, Previous frame's sp is 0x7fffffffe5a0\n Saved registers:\n  rbp at 0x7fffffffe590, rip at 0x7fffffffe598\n```\n\n可以看到从`func3`切换到`main`函数堆栈帧时，并没有打印出相关信息。\n\n#### 5、断点：b\n\n###### 在匿名空间设置断点\n\n例子：\n\n```c++\nnamespace Foo\n{\n  void foo()\n  {\n  }\n}\n\nnamespace\n{\n  void bar()\n  {\n  }\n}\n```\n\n在gdb中，如果要对namespace Foo中的foo函数设置断点，可以使用如下命令：\n\n```\n(gdb) b Foo::foo\n```\n\n如果要对匿名空间中的bar函数设置断点，可以使用如下命令：\n\n```\n(gdb) b (anonymous namespace)::bar\n```\n\n###### 在程序地址上打断点\n\n例子：\n\n```\n0000000000400522 <main>:\n  400522:       55                      push   %rbp\n  400523:       48 89 e5                mov    %rsp,%rbp\n  400526:       8b 05 00 1b 00 00       mov    0x1b00(%rip),%eax        # 40202c <he+0xc>\n  40052c:       85 c0                   test   %eax,%eax\n  40052e:       75 07                   jne    400537 <main+0x15>\n  400530:       b8 7c 06 40 00          mov    $0x40067c,%eax\n  400535:       eb 05                   jmp    40053c <main+0x1a>\n```\n\n当调试汇编程序，或者没有调试信息的程序时，经常需要在程序地址上打断点，方法为`b *address`。例如：\n\n```\n(gdb) b *0x400522\n```\n\n该方法，需要结合frame打印函数栈信息的命令结合，先打印栈信息，在选择地址打断点\n\n###### 在程序入口处打断点\n\n方法一\n\n```shell\n$ strip a.out\n$ readelf -h a.out \nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              EXEC (Executable file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x400440\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          4496 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         9\n  Size of section headers:           64 (bytes)\n  Number of section headers:         29\n  Section header string table index: 28\n```\n\n方法二\n\n```shell\n$ gdb a.out \n>>> info files\nSymbols from \"/home/me/a.out\".\nLocal exec file:\n\t`/home/me/a.out', file type elf64-x86-64.\n\tEntry point: 0x400440\n\t0x0000000000400238 - 0x0000000000400254 is .interp\n\t0x0000000000400254 - 0x0000000000400274 is .note.ABI-tag\n\t0x0000000000400274 - 0x0000000000400298 is .note.gnu.build-id\n\t0x0000000000400298 - 0x00000000004002b4 is .gnu.hash\n\t0x00000000004002b8 - 0x0000000000400318 is .dynsym\n\t0x0000000000400318 - 0x0000000000400355 is .dynstr\n\t0x0000000000400356 - 0x000000000040035e is .gnu.version\n\t0x0000000000400360 - 0x0000000000400380 is .gnu.version_r\n\t0x0000000000400380 - 0x0000000000400398 is .rela.dyn\n\t0x0000000000400398 - 0x00000000004003e0 is .rela.plt\n\t0x00000000004003e0 - 0x00000000004003fa is .init\n\t0x0000000000400400 - 0x0000000000400440 is .plt\n\t0x0000000000400440 - 0x00000000004005c2 is .text\n\t0x00000000004005c4 - 0x00000000004005cd is .fini\n\t0x00000000004005d0 - 0x00000000004005e0 is .rodata\n\t0x00000000004005e0 - 0x0000000000400614 is .eh_frame_hdr\n\t0x0000000000400618 - 0x000000000040070c is .eh_frame\n\t0x0000000000600e10 - 0x0000000000600e18 is .init_array\n\t0x0000000000600e18 - 0x0000000000600e20 is .fini_array\n\t0x0000000000600e20 - 0x0000000000600e28 is .jcr\n\t0x0000000000600e28 - 0x0000000000600ff8 is .dynamic\n\t0x0000000000600ff8 - 0x0000000000601000 is .got\n\t0x0000000000601000 - 0x0000000000601030 is .got.plt\n\t0x0000000000601030 - 0x0000000000601040 is .data\n\t0x0000000000601040 - 0x0000000000601048 is .bss\n```\n\n当调试没有调试信息的程序时，直接运行`start`命令是没有效果的：\n\n```\n(gdb) start\nFunction \"main\" not defined.\n```\n\n如果不知道main在何处，那么可以在程序入口处打断点。先通过`readelf`或者进入gdb，执行`info files`获得入口地址，然后：\n\n```shell\n(gdb) b *0x400440\n(gdb) r\n```\n\n###### 在文件行号打断点\n\n这个比较简单，如果要在当前文件中的某一行打断点，直接`b linenum`即可，例如：\n\n```\n(gdb) b 7\n```\n\n也可以显式指定文件，`b file:linenum`例如：\n\n```\n(gdb) b file.c:6\nBreakpoint 1 at 0x40053b: file.c:6. (2 locations)\n(gdb) i breakpoints \nNum     Type           Disp Enb Address            What\n1       breakpoint     keep y   <MULTIPLE>         \n1.1                         y     0x000000000040053b in print_a at a/file.c:6\n1.2                         y     0x000000000040054b in print_b at b/file.c:6\n```\n\n可以看出，gdb会对所有匹配的文件设置断点。你可以通过指定（部分）路径，来区分相同的文件名：\n\n```\n(gdb) b a/file.c:6\n```\n\n注意：通过行号进行设置断点的一个弊端是，如果你更改了源程序，那么之前设置的断点就可能不是你想要的了。\n\n###### 保存已经设置的断点\n\n在gdb中，可以使用如下命令将设置的断点保存下来：\n\n```\n(gdb) save breakpoints file-name-to-save\n```\n\n下此调试时，可以使用如下命令批量设置保存的断点：\n\n```\n(gdb) source file-name-to-save\n(gdb) info breakpoints \nNum     Type           Disp Enb Address            What\n1       breakpoint     keep y   0x00000000005a7af0 in gdb_main at /home/xmj/project/binutils-trunk/gdb/main.c:1061\n2       breakpoint     keep y   0x00000000005a6bd0 in captured_main at /home/xmj/project/binutils-trunk/gdb/main.c:310\n3       breakpoint     keep y   0x00000000005a68b\n```\n\n###### 设置临时断点\n\n在使用gdb时，如果想让断点只生效一次，可以使用“tbreak”命令（缩写为：tb）。以上面程序为例：\n\n```\n(gdb) tb a.c:15\nTemporary breakpoint 1 at 0x400500: file a.c, line 15.\n(gdb) i b\nNum     Type           Disp Enb Address            What\n1       breakpoint     del  y   0x0000000000400500 in main at a.c:15\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:15\n15              printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n(gdb) i b\nNo breakpoints or watchpoints.\n```\n\n首先在文件的第15行设置临时断点，当程序断住后，用“i b”（\"info breakpoints\"缩写）命令查看断点，发现断点没有了。也就是断点命中一次后，就被删掉了。\n\n\n\n###### 设置条件断点：\n\n例子：\n\n```\n#include <stdio.h>\n\t\nint main(void)\n{\n        int i = 0;\n\t\tint sum = 0;\n\n\t\tfor (i = 1; i <= 200; i++)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\n\t\tprintf(\"%d\\n\", sum);\n        return 0;\n}\n```\n\ngdb可以设置条件断点，也就是只有在条件满足时，断点才会被触发，命令是“`break … if cond`”。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cc: file a.c, line 5.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:5\n5                       int i = 0;\n(gdb) b 10 if i==101\nBreakpoint 2 at 0x4004e3: file a.c, line 10.\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nBreakpoint 2, main () at a.c:10\n10                                      sum += i;\n(gdb) p sum\n$1 = 5050\n```\n\n可以看到设定断点只在`i`的值为`101`时触发，此时打印`sum`的值为`5050`。\n\n###### 忽略断点：\n\n例子：\n\n```c\n#include <stdio.h>\n\t\nint main(void)\n{\n        int i = 0;\n\t\tint sum = 0;\n\n\t\tfor (i = 1; i <= 200; i++)\n\t\t{\n\t\t\tsum += i;\n\t\t}\n\t\n\t\tprintf(\"%d\\n\", sum);\n        return 0;\n}\n```\n\n在设置断点以后，可以忽略断点，命令是“`ignore bnum count`”：意思是接下来`count`次编号为`bnum`的断点触发都不会让程序中断，只有第`count + 1`次断点触发才会让程序中断。以上面程序为例：\n\n```shell\n(gdb) b 10\nBreakpoint 1 at 0x4004e3: file a.c, line 10.\n(gdb) ignore 1 5\nWill ignore next 5 crossings of breakpoint 1.\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nBreakpoint 1, main () at a.c:10\n10                                      sum += i;\n(gdb) p i\n$1 = 6\n```\n\n可以看到设定忽略断点前`5`次触发后，第一次断点断住时，打印`i`的值是`6`。如果想让断点下次就生效，可以将`count`置为`0`：“`ignore 1 0`”。\n\n#### 6、观察点\n\n##### 设置观察点\n\n例子：\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n#include <unistd.h>\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nint main(int argc, char* argv[])\n{\n        pthread_t t1;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n\t\t\n        sleep(1000);\n        return 0;\n}\n```\n\ngdb可以使用“`watch`”命令设置观察点，也就是当一个变量值发生变化时，程序会停下来。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4005a8: file a.c, line 19.\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nTemporary breakpoint 1, main () at a.c:19\n19              pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n(gdb) watch a\nHardware watchpoint 2: a\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff782c700 (LWP 8813)]\n[Switching to Thread 0x7ffff782c700 (LWP 8813)]\nHardware watchpoint 2: a\n\nOld value = 0\nNew value = 1\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: a\n\nOld value = 1\nNew value = 2\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n```\n\n可以看到，使用“`watch a`”命令以后，当`a`的值变化：由`0`变成`1`，由`1`变成`2`，程序都会停下来。\n此外也可以使用“`watch *(data type*)address`”这样的命令，仍以上面程序为例:\n\n```\n(gdb) p &a\n$1 = (int *) 0x6009c8 <a>\n(gdb) watch *(int*)0x6009c8\nHardware watchpoint 2: *(int*)0x6009c8\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff782c700 (LWP 15431)]\n[Switching to Thread 0x7ffff782c700 (LWP 15431)]\nHardware watchpoint 2: *(int*)0x6009c8\n\nOld value = 0\nNew value = 1\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: *(int*)0x6009c8\n\nOld value = 1\nNew value = 2\nthread1_func (p_arg=0x4006d8) at a.c:11\n11                      sleep(10);\n```\n\n先得到`a`的地址：`0x6009c8`，接着用“`watch *(int*)0x6009c8`”设置观察点，可以看到同“`watch a`”命令效果一样。\n观察点可以通过软件或硬件的方式实现，取决于具体的系统。但是软件实现的观察点会导致程序运行很慢，使用时需注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n如果系统支持硬件观测的话，当设置观测点是会打印如下信息：\nHardware watchpoint num: expr\n\n如果不想用硬件观测点的话可如下设置：\nset can-use-hw-watchpoints\n\n\n\n##### 设置观察点之对特定线程生效\n\n```shell\n#include <stdio.h>\n#include <pthread.h>\n\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nvoid *thread2_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n\t\tpthread_create(&t2, NULL, thread2_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\ngdb可以使用“`watch expr thread threadnum`”命令设置观察点只针对特定线程生效，也就是只有编号为`threadnum`的线程改变了变量的值，程序才会停下来，其它编号线程改变变量的值不会让程序停住。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4005d4: file a.c, line 28.\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nTemporary breakpoint 1, main () at a.c:28\n28              pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n(gdb) n\n[New Thread 0x7ffff782c700 (LWP 25443)]\n29              pthread_create(&t2, NULL, thread2_func, \"Thread 2\");\n(gdb)\n[New Thread 0x7ffff6e2b700 (LWP 25444)]\n31              sleep(1000);\n(gdb) i threads\n  Id   Target Id         Frame\n  3    Thread 0x7ffff6e2b700 (LWP 25444) 0x00007ffff7915911 in clone () from /lib64/libc.so.6\n  2    Thread 0x7ffff782c700 (LWP 25443) 0x00007ffff78d9bcd in nanosleep () from /lib64/libc.so.6\n* 1    Thread 0x7ffff7fe9700 (LWP 25413) main () at a.c:31\n(gdb) wa a thread 2\nHardware watchpoint 2: a\n(gdb) c\nContinuing.\n[Switching to Thread 0x7ffff782c700 (LWP 25443)]\nHardware watchpoint 2: a\n\nOld value = 1\nNew value = 3\nthread1_func (p_arg=0x400718) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: a\n\nOld value = 3\nNew value = 5\nthread1_func (p_arg=0x400718) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\nHardware watchpoint 2: a\n\nOld value = 5\nNew value = 7\nthread1_func (p_arg=0x400718) at a.c:11\n11                      sleep(10);\n```\n\n可以看到，使用“`wa a thread 2`”命令（`wa`是`watch`命令的缩写）以后，只有`thread1_func`改变`a`的值才会让程序停下来。\n需要注意的是这种针对特定线程设置观察点方式只对硬件观察点才生效，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n##### 设置读观察点\n\n```shell\n#include <stdio.h>\n#include <pthread.h>\n\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%d\\n\", a);\n                sleep(10);\n        }\n}\n\nint main(void)\n{\n        pthread_t t1;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n\n        sleep(1000);\n        return;\n}\n```\n\ngdb可以使用“`rwatch`”命令设置读观察点，也就是当发生读取变量行为时，程序就会暂停住。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4005f3: file a.c, line 19.\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nTemporary breakpoint 1, main () at a.c:19\n19              pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n(gdb) rw a\nHardware read watchpoint 2: a\n(gdb) c\nContinuing.\n[New Thread 0x7ffff782c700 (LWP 5540)]\n[Switching to Thread 0x7ffff782c700 (LWP 5540)]\nHardware read watchpoint 2: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40071c) at a.c:10\n10                      printf(\"%d\\n\", a);\n(gdb) c\nContinuing.\n0\nHardware read watchpoint 2: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40071c) at a.c:10\n10                      printf(\"%d\\n\", a);\n(gdb) c\nContinuing.\n0\nHardware read watchpoint 2: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40071c) at a.c:10\n10                      printf(\"%d\\n\", a);\n```\n\n可以看到，使用“`rw a`”命令（`rw`是`rwatch`命令的缩写）以后，每次访问`a`的值都会让程序停下来。\n需要注意的是`rwatch`命令只对硬件观察点才生效，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n##### 设置写观察点\n\n```\n#include <stdio.h>\n#include <pthread.h>\n\nint a = 0;\n\nvoid *thread1_func(void *p_arg)\n{\n        while (1)\n        {\n                a++;\n                sleep(10);\n        }\n}\n\nvoid *thread2_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%d\\n\", a);;\n                sleep(10);\n        }\n}\n\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread1_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread2_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\ngdb可以使用“`awatch`”命令设置读写观察点，也就是当发生读取变量或改变变量值的行为时，程序就会暂停住。以上面程序为例:\n\n```\n(gdb) aw a\nHardware access (read/write) watchpoint 1: a\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n[New Thread 0x7ffff782c700 (LWP 16938)]\n[Switching to Thread 0x7ffff782c700 (LWP 16938)]\nHardware access (read/write) watchpoint 1: a\n\nValue = 0\n0x00000000004005c6 in thread1_func (p_arg=0x40076c) at a.c:10\n10                      a++;\n(gdb) c\nContinuing.\nHardware access (read/write) watchpoint 1: a\n\nOld value = 0\nNew value = 1\nthread1_func (p_arg=0x40076c) at a.c:11\n11                      sleep(10);\n(gdb) c\nContinuing.\n[New Thread 0x7ffff6e2b700 (LWP 16939)]\n[Switching to Thread 0x7ffff6e2b700 (LWP 16939)]\nHardware access (read/write) watchpoint 1: a\n\nValue = 1\n0x00000000004005f2 in thread2_func (p_arg=0x400775) at a.c:19\n19                      printf(\"%d\\n\", a);;\n(gdb) c\nContinuing.\n1\n[Switching to Thread 0x7ffff782c700 (LWP 16938)]\nHardware access (read/write) watchpoint 1: a\n\nValue = 1\n0x00000000004005c6 in thread1_func (p_arg=0x40076c) at a.c:10\n10                      a++;\n```\n\n可以看到，使用“`aw a`”命令（`aw`是`awatch`命令的缩写）以后，每次读取或改变`a`的值都会让程序停下来。\n需要注意的是`awatch`命令只对硬件观察点才生效，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html).\n\n#### 7、Catchpoint\n\n##### 让Catchpoint只触发一次\n\n```shell\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n    pid_t pid;\n    int i = 0;\n\n    for (i = 0; i < 2; i++)\n    {\n\t    pid = fork();\n\t    if (pid < 0)\n\t    {\n\t        exit(1);\n\t    }\n\t    else if (pid == 0)\n\t    {\n\t        exit(0);\n\t    }\n    }\n    printf(\"hello world\\n\");\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`tcatch`”命令设置`catchpoint`只触发一次，以上面程序为例：\n\n```\n(gdb) tcatch fork\nCatchpoint 1 (fork)\n(gdb) r\nStarting program: /home/nan/a\n\nTemporary catchpoint 1 (forked process 27377), 0x00000034e42acdbd in fork () from /lib64/libc.so.6\n(gdb) c\nContinuing.\nhello world\n[Inferior 1 (process 27373) exited normally]\n(gdb) q\n```\n\n可以看到当程序只在第一次调用`fork`时暂停。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 为fork调用设置catchpoint\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n    pid_t pid;\n\n    pid = fork();\n    if (pid < 0)\n    {\n        exit(1);\n    }\n    else if (pid > 0)\n    {\n        exit(0);\n    }\n    printf(\"hello world\\n\");\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`catch fork`”命令为`fork`调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch fork\nCatchpoint 1 (fork)\n(gdb) r\nStarting program: /home/nan/a \n\nCatchpoint 1 (forked process 33499), 0x00000034e42acdbd in fork () from /lib64/libc.so.6\n(gdb) bt\n#0  0x00000034e42acdbd in fork () from /lib64/libc.so.6\n#1  0x0000000000400561 in main () at a.c:9\n```\n\n可以看到当`fork`调用发生后，gdb会暂停程序的运行。\n注意：目前只有HP-UX和GNU/Linux支持这个功能。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 为vfork调用设置catchpoint\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n    pid_t pid;\n\n    pid = vfork();\n    if (pid < 0)\n    {\n        exit(1);\n    }\n    else if (pid > 0)\n    {\n        exit(0);\n    }\n    printf(\"hello world\\n\");\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`catch vfork`”命令为`vfork`调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch vfork\nCatchpoint 1 (vfork)\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (vforked process 27312), 0x00000034e42acfc4 in vfork ()\n   from /lib64/libc.so.6\n(gdb) bt\n#0  0x00000034e42acfc4 in vfork () from /lib64/libc.so.6\n#1  0x0000000000400561 in main () at a.c:9\n```\n\n可以看到当`vfork`调用发生后，gdb会暂停程序的运行。\n注意：目前只有HP-UX和GNU/Linux支持这个功能。\n\n##### 为exec调用设置catchpoint\n\n```shell\n#include <unistd.h>\n\nint main(void) {\n    execl(\"/bin/ls\", \"ls\", NULL);\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以用“`catch exec`”命令为`exec`系列系统调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch exec\nCatchpoint 1 (exec)\n(gdb) r\nStarting program: /home/nan/a\nprocess 32927 is executing new program: /bin/ls\n\nCatchpoint 1 (exec'd /bin/ls), 0x00000034e3a00b00 in _start () from /lib64/ld-linux-x86-64.so.2\n(gdb) bt\n#0  0x00000034e3a00b00 in _start () from /lib64/ld-linux-x86-64.so.2\n#1  0x0000000000000001 in ?? ()\n#2  0x00007fffffffe73d in ?? ()\n#3  0x0000000000000000 in ?? ()\n```\n\n可以看到当`execl`调用发生后，gdb会暂停程序的运行。\n注意：目前只有HP-UX和GNU/Linux支持这个功能。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 为系统调用调用设置catchpoint\n\n```c\n#include <stdio.h>\n\nint main(void)\n{\n    char p1[] = \"Sam\";\n    char *p2 = \"Bob\";\n\n    printf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n    return 0;\n}\n```\n\n使用gdb调试程序时，可以使用`catch syscall [name | number]`为关注的系统调用设置`catchpoint`，以上面程序为例：\n\n```\n(gdb) catch syscall mmap\nCatchpoint 1 (syscall 'mmap' [9])\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (returned from syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n```\n\n可以看到当`mmap`调用发生后，gdb会暂停程序的运行。\n也可以使用系统调用的编号设置`catchpoint`，仍以上面程序为例：\n\n```\n(gdb) catch syscall 9\nCatchpoint 1 (syscall 'mmap' [9])\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (returned from syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n```\n\n可以看到和使用`catch syscall mmap`效果是一样的。（系统调用和编号的映射参考具体的`xml`文件，以我的系统为例，就是在`/usr/local/share/gdb/syscalls`文件夹下的`amd64-linux.xml`。）\n\n如果不指定具体的系统调用，则会为所有的系统调用设置`catchpoint`，仍以上面程序为例：\n\n```\n(gdb) catch syscall\nCatchpoint 1 (any syscall)\n(gdb) r\nStarting program: /home/nan/a\n\nCatchpoint 1 (call to syscall brk), 0x00000034e3a1618a in brk ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb) c\nContinuing.\n\nCatchpoint 1 (returned from syscall brk), 0x00000034e3a1618a in brk ()\n   from /lib64/ld-linux-x86-64.so.2\n(gdb)\nContinuing.\n\nCatchpoint 1 (call to syscall mmap), 0x00000034e3a16f7a in mmap64 ()\n   from /lib64/ld-linux-x86-64.so.2\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html).\n\n##### 通过为ptrace调用设置catchpoint破解anti-debugging的程序\n\n```c\n#include <sys/ptrace.h>\n#include <stdio.h>\n \nint main()                                                                      \n{\n        if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0 ) {\n                printf(\"Gdb is debugging me, exit.\\n\");\n                return 1;\n        }\n        printf(\"No debugger, continuing\\n\");\n        return 0;\n}\n```\n\n有些程序不想被gdb调试，它们就会在程序中调用“`ptrace`”函数，一旦返回失败，就证明程序正在被gdb等类似的程序追踪，所以就直接退出。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400508: file a.c, line 6.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:6\n6                       if (ptrace(PTRACE_TRACEME, 0, 0, 0) < 0 ) {\n(gdb) n\n7                               printf(\"Gdb is debugging me, exit.\\n\");\n(gdb)\nGdb is debugging me, exit.\n8                               return 1;\n```\n\n破解这类程序的办法就是为`ptrace`调用设置`catchpoint`，通过修改`ptrace`的返回值，达到目的。仍以上面程序为例：\n\n```\n(gdb) catch syscall ptrace\nCatchpoint 2 (syscall 'ptrace' [101])\n(gdb) r\nStarting program: /data2/home/nanxiao/a\n\nCatchpoint 2 (call to syscall ptrace), 0x00007ffff7b2be9c in ptrace () from /lib64/libc.so.6\n(gdb) c\nContinuing.\n\nCatchpoint 2 (returned from syscall ptrace), 0x00007ffff7b2be9c in ptrace () from /lib64/libc.so.6\n(gdb) set $rax = 0\n(gdb) c\nContinuing.\nNo debugger, continuing\n[Inferior 1 (process 11491) exited normally]\n```\n\n可以看到，通过修改`rax`寄存器的值，达到修改返回值的目的，从而让gdb可以继续调试程序（打印“`No debugger, continuing`”）。\n详细过程，可以参见这篇文章[避開 PTRACE_TRACME 反追蹤技巧](http://blog.linux.org.tw/~jserv/archives/2011_08.html).\n\n\n\n#### 8、打印\n\n##### 打印ASCII和宽字符字符串\n\n```c\n#include <stdio.h>\n#include <wchar.h>\n\nint main(void)\n{\n        char str1[] = \"abcd\";\n        wchar_t str2[] = L\"abcd\";\n        \n        return 0;\n}\n```\n\n用gdb调试程序时，可以使用“`x/s`”命令打印ASCII字符串。以上面程序为例：\n\n```\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n(gdb) n\n7               wchar_t str2[] = L\"abcd\";\n(gdb) \n9               return 0;\n(gdb) x/s str1\n0x804779f:      \"abcd\"\n```\n\n可以看到打印出了`str1`字符串的值。\n\n打印宽字符字符串时，要根据宽字符的长度决定如何打印。仍以上面程序为例：\n\n```\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n(gdb) n\n7               wchar_t str2[] = L\"abcd\";\n(gdb) \n9               return 0;\n(gdb) p sizeof(wchar_t)\n$1 = 4\n(gdb) x/ws str2\n0x8047788:      U\"abcd\"\n```\n\n由于当前平台宽字符的长度为4个字节，则用“`x/ws`”命令。如果是2个字节，则用“`x/hs`”命令。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Memory.html).\n\n##### 打印STL容器中的内容\n\n```c\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main ()\n{\n  vector<int> vec(10); // 10 zero-initialized elements\n\n  for (int i = 0; i < vec.size(); i++)\n    vec[i] = i;\n\n  cout << \"vec contains:\";\n  for (int i = 0; i < vec.size(); i++)\n    cout << ' ' << vec[i];\n  cout << '\\n';\n\n  return 0;\n}\n```\n\n在gdb中，如果要打印C++ STL容器的内容，缺省的显示结果可读性很差：\n\n```\n(gdb) p vec\n$1 = {<std::_Vector_base<int, std::allocator<int> >> = {\n    _M_impl = {<std::allocator<int>> = {<__gnu_cxx::new_allocator<int>> = {<No data fields>}, <No data fields>}, _M_start = 0x404010, _M_finish = 0x404038, \n          _M_end_of_storage = 0x404038}}, <No data fields>}\n```\n\ngdb 7.0之后，可以使用gcc提供的python脚本，来改善显示结果：\n\n```\n(gdb) p vec\n$1 = std::vector of length 10, capacity 10 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n\n某些发行版(Fedora 11+)，不需要额外的设置工作。可在gdb命令行下验证（若没有显示，可按下文的方法进行设置）。\n\n```\n\t(gdb) info pretty-printer\n```\n\n方法如下:\n\n1. 获得python脚本，建议使用gcc默认安装的\n\n   ```\n    sudo find / -name \"*libstdcxx*\"\n   ```\n\n2. 若本机查找不到python脚本，建议下载gcc对应版本源码包，相对目录如下\n\n   ```\n    gcc-4.8.1/libstdc++-v3/python\n   ```\n\n3. 也可直接下载最新版本\n\n   ```\n    svn co svn://gcc.gnu.org/svn/gcc/trunk/libstdc++-v3/python\n   ```\n\n4. 将如下代码添加到.gdbinit文件中（假设python脚本位于 /home/maude/gdb_printers/ 下）\n\n   ```\n    python\n    import sys\n    sys.path.insert(0, '/home/maude/gdb_printers/python')\n    from libstdcxx.v6.printers import register_libstdcxx_printers\n    register_libstdcxx_printers (None)\n    end\n   ```\n\n（源自https://sourceware.org/gdb/wiki/STLSupport）\n\n`p vec`的输出无法阅读，但能给我们提示，从而得到无需脚本支持的技巧：\n\n```\n(gdb) p *(vec._M_impl._M_start)@vec.size()\n$2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n\n\n\n将 [dbinit_stl_views](http://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt) 下载下来,，执行命令\n\n```shell\ncat dbinit_stl_views-1.03.txt >> ~/.gdbinit\n```\n\n即可\n一些常用的容器及其对应的命令关系\n\n```shell\nstd::vector<T>  pvector stl_variable \nstd::list<T>  plist stl_variable T \nstd::map<T,T>  pmap stl_variable \nstd::multimap<T,T>  pmap stl_variable \nstd::set<T>  pset stl_variable T \nstd::multiset<T>  pset stl_variable \nstd::deque<T>  pdequeue stl_variable \nstd::stack<T>  pstack stl_variable \nstd::queue<T>  pqueue stl_variable \nstd::priority_queue<T>  ppqueue stl_variable \nstd::bitset<n><td>  pbitset stl_variable \nstd::string  pstring stl_variable \nstd::widestring  pwstring stl_variable  \n```\n\n##### 打印大数组中的内容\n\n```c\nint main()\n{\n  int array[201];\n  int i;\n\n  for (i = 0; i < 201; i++)\n    array[i] = i;\n\n  return 0;\n}\n```\n\n在gdb中，如果要打印大数组的内容，缺省最多会显示200个元素：\n\n```\n(gdb) p array\n$1 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, \n  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, \n  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, \n  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199...}\n```\n\n可以使用如下命令，设置这个最大限制数：\n\n```\n(gdb) set print elements number-of-elements\n```\n\n也可以使用如下命令，设置为没有限制：\n\n```\n(gdb) set print elements 0\n```\n\n或\n\n```\n(gdb) set print elements unlimited\n(gdb) p array\n$2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, \n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, \n  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, \n  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, \n  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/download/onlinedocs/gdb/Print-Settings.html#Print-Settings)\n\n##### 打印数组中任意连续元素值\n\n```c\nint main(void)\n{\n  int array[201];\n  int i;\n\n  for (i = 0; i < 201; i++)\n    array[i] = i;\n\n  return 0;\n}\n```\n\n在gdb中，如果要打印数组中任意连续元素的值，可以使用“`p array[index]@num`”命令（`p`是`print`命令的缩写）。其中`index`是数组索引（从0开始计数），`num`是连续多少个元素。以上面代码为例：\n\n```\n(gdb) p array\n$8 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n  63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n  94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n  120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,\n  145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,\n  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\n  195, 196, 197, 198, 199...}\n(gdb) p array[60]@10\n$9 = {60, 61, 62, 63, 64, 65, 66, 67, 68, 69}\n```\n\n可以看到打印了`array`数组第60~69个元素的值。\n如果要打印从数组开头连续元素的值，也可使用这个命令：“`p *array@num`”：\n\n```\n(gdb) p *array@10\n$2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Arrays.html#Arrays)\n\n##### 打印数组的索引下标\n\n```c\n#include <stdio.h>\n\nint num[10] = { \n  1 << 0,\n  1 << 1,\n  1 << 2,\n  1 << 3,\n  1 << 4,\n  1 << 5,\n  1 << 6,\n  1 << 7,\n  1 << 8,\n  1 << 9\n};\n\nint main (void)\n{\n  int i;\n\n  for (i = 0; i < 10; i++)\n    printf (\"num[%d] = %d\\n\", i, num[i]);\n\n  return 0;\n}\n```\n\n在gdb中，当打印一个数组时，缺省是不打印索引下标的：\n\n```\n(gdb) p num\n$1 = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512}\n```\n\n如果要打印索引下标，则可以通过如下命令进行设置：\n\n```\n(gdb) set print array-indexes on\n\n(gdb) p num\n$2 = {[0] = 1, [1] = 2, [2] = 4, [3] = 8, [4] = 16, [5] = 32, [6] = 64, [7] = 128, [8] = 256, [9] = 512}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print)\n\n##### 打印函数局部变量的值\n\n```c\n#include <stdio.h>\n\nvoid fun_a(void)\n{\n\tint a = 0;\n\tprintf(\"%d\\n\", a);\n}\n\nvoid fun_b(void)\n{\n\tint b = 1;\n\tfun_a();\n\tprintf(\"%d\\n\", b);\n}\n\nvoid fun_c(void)\n{\n\tint c = 2;\n\tfun_b();\n\tprintf(\"%d\\n\", c);\n}\n\nvoid fun_d(void)\n{\n\tint d = 3;\n\tfun_c();\n\tprintf(\"%d\\n\", d);\n}\n\nint main(void)\n{\n\tint var = -1;\n\tfun_d();\n\treturn 0;\n}\n```\n\n如果要打印函数局部变量的值，可以使用“bt full”命令（bt是backtrace的缩写）。首先我们在函数fun_a里打上断点，当程序断住时，显示调用栈信息：\n\n```\n(gdb) bt\n#0  fun_a () at a.c:6\n#1  0x000109b0 in fun_b () at a.c:12\n#2  0x000109e4 in fun_c () at a.c:19\n#3  0x00010a18 in fun_d () at a.c:26\n#4  0x00010a4c in main () at a.c:33\n```\n\n接下来，用“bt full”命令显示各个函数的局部变量值：\n\n```\n(gdb) bt full\n#0  fun_a () at a.c:6\n        a = 0\n#1  0x000109b0 in fun_b () at a.c:12\n        b = 1\n#2  0x000109e4 in fun_c () at a.c:19\n        c = 2\n#3  0x00010a18 in fun_d () at a.c:26\n        d = 3\n#4  0x00010a4c in main () at a.c:33\n        var = -1\n```\n\n也可以使用如下“bt full n”，意思是从内向外显示n个栈桢，及其局部变量，例如：\n\n```\n(gdb) bt full 2\n#0  fun_a () at a.c:6\n        a = 0\n#1  0x000109b0 in fun_b () at a.c:12\n        b = 1\n(More stack frames follow...)\n```\n\n而“bt full -n”，意思是从外向内显示n个栈桢，及其局部变量，例如：\n\n```\n(gdb) bt full -2\n#3  0x00010a18 in fun_d () at a.c:26\n        d = 3\n#4  0x00010a4c in main () at a.c:33\n        var = -1\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Backtrace.html)\n\n\n\n如果只是想打印当前函数局部变量的值，可以使用如下命令：\n\n```\n(gdb) info locals\na = 0\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Frame-Info.html#index-info-locals)\n\n##### 打印进程内存信息\n\n用gdb调试程序时，如果想查看进程的内存映射信息，可以使用“i proc mappings”命令（i是info命令缩写），例如:\n\n```\n(gdb) i proc mappings\nprocess 27676 flags:\nPR_STOPPED Process (LWP) is stopped\nPR_ISTOP Stopped on an event of interest\nPR_RLC Run-on-last-close is in effect\nPR_MSACCT Microstate accounting enabled\nPR_PCOMPAT Micro-state accounting inherited on fork\nPR_FAULTED : Incurred a traced hardware fault FLTBPT: Breakpoint trap\n\nMapped address spaces:\n\n    Start Addr   End Addr       Size     Offset   Flags\n     0x8046000  0x8047fff     0x2000 0xfffff000 -s--rwx\n     0x8050000  0x8050fff     0x1000          0 ----r-x\n     0x8060000  0x8060fff     0x1000          0 ----rwx\n    0xfee40000 0xfef4efff   0x10f000          0 ----r-x\n    0xfef50000 0xfef55fff     0x6000          0 ----rwx\n    0xfef5f000 0xfef66fff     0x8000   0x10f000 ----rwx\n    0xfef67000 0xfef68fff     0x2000          0 ----rwx\n    0xfef70000 0xfef70fff     0x1000          0 ----rwx\n    0xfef80000 0xfef80fff     0x1000          0 ---sr--\n    0xfef90000 0xfef90fff     0x1000          0 ----rw-\n    0xfefa0000 0xfefa0fff     0x1000          0 ----rw-\n    0xfefb0000 0xfefb0fff     0x1000          0 ----rwx\n    0xfefc0000 0xfefeafff    0x2b000          0 ----r-x\n    0xfeff0000 0xfeff0fff     0x1000          0 ----rwx\n    0xfeffb000 0xfeffcfff     0x2000    0x2b000 ----rwx\n    0xfeffd000 0xfeffdfff     0x1000          0 ----rwx\n```\n\n首先输出了进程的flags，接着是进程的内存映射信息。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/SVR4-Process-Information.html#index-info-proc-exe).\n\n此外，也可以用\"i files\"（还有一个同样作用的命令：“i target”）命令，它可以更详细地输出进程的内存信息，包括引用的动态链接库等等，例如：\n\n```\n(gdb) i files\nSymbols from \"/data1/nan/a\".\nUnix /proc child process:\n    Using the running image of child Thread 1 (LWP 1) via /proc.\n    While running this, GDB does not access memory from...\nLocal exec file:\n    `/data1/nan/a', file type elf32-i386-sol2.\n    Entry point: 0x8050950\n    0x080500f4 - 0x08050105 is .interp\n    0x08050108 - 0x08050114 is .eh_frame_hdr\n    0x08050114 - 0x08050218 is .hash\n    0x08050218 - 0x08050418 is .dynsym\n    0x08050418 - 0x080507e6 is .dynstr\n    0x080507e8 - 0x08050818 is .SUNW_version\n    0x08050818 - 0x08050858 is .SUNW_versym\n    0x08050858 - 0x08050890 is .SUNW_reloc\n    0x08050890 - 0x080508c8 is .rel.plt\n    0x080508c8 - 0x08050948 is .plt\n    ......\n\t0xfef5fb58 - 0xfef5fc48 is .dynamic in /usr/lib/libc.so.1\n    0xfef5fc80 - 0xfef650e2 is .data in /usr/lib/libc.so.1\n    0xfef650e2 - 0xfef650e2 is .bssf in /usr/lib/libc.so.1\n    0xfef650e8 - 0xfef65be0 is .picdata in /usr/lib/libc.so.1\n    0xfef65be0 - 0xfef666a7 is .data1 in /usr/lib/libc.so.1\n    0xfef666a8 - 0xfef680dc is .bss in /usr/lib/libc.so.1\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Files.html)\n\n##### 打印静态变量的值\n\n```c\n/* main.c */\nextern void print_var_1(void);\nextern void print_var_2(void);\n\nint main(void)\n{\n  print_var_1();\n  print_var_2();\n  return 0;\n}\n\n/* static-1.c */\n#include <stdio.h>\n\nstatic int var = 1;\n\nvoid print_var_1(void)\n{ \n  printf(\"var = %d\\n\", var);\n} \n\n/* static-2.c */\n#include <stdio.h>\n\nstatic int var = 2;\n\nvoid print_var_2(void)\n{ \n  printf(\"var = %d\\n\", var);\n} \n```\n\n在gdb中，如果直接打印静态变量，则结果并不一定是你想要的：\n\n```\n$ gcc -g main.c static-1.c static-2.c\n$ gdb -q ./a.out\n(gdb) start\n(gdb) p var\n$1 = 2\n\n$ gcc -g main.c static-2.c static-1.c\n$ gdb -q ./a.out\n(gdb) start\n(gdb) p var\n$1 = 1\n```\n\n你可以显式地指定文件名（上下文）：\n\n```\n(gdb) p 'static-1.c'::var\n$1 = 1\n(gdb) p 'static-2.c'::var\n$2 = 2\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables)\n\n##### 打印变量的类型和所在文件\n\n```c\n#include <stdio.h>\n\nstruct child {\n  char name[10];\n  enum { boy, girl } gender;\n};\n\nstruct child he = { \"Tom\", boy };\n\nint main (void)\n{\n  static struct child she = { \"Jerry\", girl };\n  printf (\"Hello %s %s.\\n\", he.gender == boy ? \"boy\" : \"girl\", he.name);\n  printf (\"Hello %s %s.\\n\", she.gender == boy ? \"boy\" : \"girl\", she.name);\n  return 0;\n}\n```\n\n在gdb中，可以使用如下命令查看变量的类型：\n\n```\n(gdb) whatis he\ntype = struct child\n```\n\n如果想查看详细的类型信息：\n\n```\n(gdb) ptype he\ntype = struct child {\n    char name[10];\n    enum {boy, girl} gender;\n}\n```\n\n如果想查看定义该变量的文件：\n\n```\n(gdb) i variables he\nAll variables matching regular expression \"he\":\n\nFile variable.c:\nstruct child he;\n\nNon-debugging symbols:\n0x0000000000402030  she\n0x00007ffff7dd3380  __check_rhosts_file\n```\n\n哦，gdb会显示所有包含（匹配）该表达式的变量。如果只想查看完全匹配给定名字的变量：\n\n```\n(gdb) i variables ^he$\nAll variables matching regular expression \"^he$\":\n\nFile variable.c:\nstruct child he;\n```\n\n注：`info variables`不会显示局部变量，即使是static的也没有太多的信息。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Symbols.html)\n\n##### 打印内存的值\n\n```c\n#include <stdio.h>\n\nint main(void)\n{\n        int i = 0;\n        char a[100];\n\n        for (i = 0; i < sizeof(a); i++)\n        {\n                a[i] = i;\n        }\n\n        return 0;\n}\n```\n\ngdb中使用“`x`”命令来打印内存的值，格式为“`x/nfu addr`”。含义为以`f`格式打印从`addr`开始的`n`个长度单元为`u`的内存值。参数具体含义如下：\na）n：输出单元的个数。\nb）f：是输出格式。比如`x`是以16进制形式输出，`o`是以8进制形式输出,等等。\nc）u：标明一个单元的长度。`b`是一个`byte`，`h`是两个`byte`（halfword），`w`是四个`byte`（word），`g`是八个`byte`（giant word）。\n\n以上面程序为例：\n（1） 以16进制格式打印数组前`a`16个byte的值：\n\n```\n(gdb) x/16xb a\n0x7fffffffe4a0: 0x00    0x01    0x02    0x03    0x04    0x05    0x06    0x07\n0x7fffffffe4a8: 0x08    0x09    0x0a    0x0b    0x0c    0x0d    0x0e    0x0f\n```\n\n（2） 以无符号10进制格式打印数组`a`前16个byte的值：\n\n```\n(gdb) x/16ub a\n0x7fffffffe4a0: 0       1       2       3       4       5       6       7\n0x7fffffffe4a8: 8       9       10      11      12      13      14      15\n```\n\n（3） 以2进制格式打印数组前16个`a`byte的值：\n\n```\n(gdb) x/16tb a\n0x7fffffffe4a0: 00000000        00000001        00000010        00000011        00000100        00000101        00000110        00000111\n0x7fffffffe4a8: 00001000        00001001        00001010        00001011        00001100        00001101        00001110        00001111\n```\n\n（4） 以16进制格式打印数组`a`前16个word（4个byte）的值：\n\n```\n(gdb) x/16xw a\n0x7fffffffe4a0: 0x03020100      0x07060504      0x0b0a0908      0x0f0e0d0c\n0x7fffffffe4b0: 0x13121110      0x17161514      0x1b1a1918      0x1f1e1d1c\n0x7fffffffe4c0: 0x23222120      0x27262524      0x2b2a2928      0x2f2e2d2c\n0x7fffffffe4d0: 0x33323130      0x37363534      0x3b3a3938      0x3f3e3d3c\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Memory.html).\n\n##### 打印源代码行\n\n如上所示，在gdb中可以使用`list`（简写为l）命令来显示源代码以及行号。`list`命令可以指定行号，函数：\n\n```\n(gdb) l 24\n(gdb) l main\n```\n\n还可以指定向前或向后打印：\n\n```\n(gdb) l -\n(gdb) l +\n```\n\n还可以指定范围：\n\n```\n(gdb) l 1,10\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/List.html#List)\n\n##### 每行打印一个结构体成员\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n\ntypedef struct\n{\n        int a;\n        int b;\n        int c;\n        int d;\n        pthread_mutex_t mutex;\n}ex_st;\n\nint main(void) {\n        ex_st st = {1, 2, 3, 4, PTHREAD_MUTEX_INITIALIZER};\n        printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n        return 0;\n}\n```\n\n默认情况下，gdb以一种“紧凑”的方式打印结构体。以上面代码为例：\n\n```\n(gdb) n\n15              printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n(gdb) p st\n$1 = {a = 1, b = 2, c = 3, d = 4, mutex = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0,\n      __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\\000' <repeats 39 times>, __align = 0}}\n```\n\n可以看到结构体的显示很混乱，尤其是结构体里还嵌套着其它结构体时。\n\n可以执行“set print pretty on”命令，这样每行只会显示结构体的一名成员，而且还会根据成员的定义层次进行缩进：\n\n```\n(gdb) set print pretty on\n(gdb) p st\n$2 = {\n  a = 1,\n  b = 2,\n  c = 3,\n  d = 4,\n  mutex = {\n    __data = {\n      __lock = 0,\n      __count = 0,\n      __owner = 0,\n      __nusers = 0,\n      __kind = 0,\n      __spins = 0,\n      __list = {\n        __prev = 0x0,\n        __next = 0x0\n      }\n    },\n    __size = '\\000' <repeats 39 times>,\n    __align = 0\n  }\n}\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-print-settings)\n\n##### 按照派生类型打印对象\n\n```c++\n#include <iostream>\nusing namespace std;\n\nclass Shape {\n public:\n  virtual void draw () {}\n};\n\nclass Circle : public Shape {\n int radius;\n public:\n  Circle () { radius = 1; }\n  void draw () { cout << \"drawing a circle...\\n\"; }\n};\n\nclass Square : public Shape {\n int height;\n public:\n  Square () { height = 2; }\n  void draw () { cout << \"drawing a square...\\n\"; }\n};\n\nvoid drawShape (class Shape &p)\n{\n  p.draw ();\n}\n\nint main (void)\n{\n  Circle a;\n  Square b;\n  drawShape (a);\n  drawShape (b);\n  return 0;\n}\n```\n\n在gdb中，当打印一个对象时，缺省是按照声明的类型进行打印：\n\n```\n(gdb) frame\n#0  drawShape (p=...) at object.cxx:25\n25\t  p.draw ();\n(gdb) p p\n$1 = (Shape &) @0x7fffffffde90: {_vptr.Shape = 0x400a80 <vtable for Circle+16>}\n```\n\n在这个例子中，p虽然声明为class Shape，但它实际的派生类型可能为class Circle和Square。如果要缺省按照派生类型进行打印，则可以通过如下命令进行设置：\n\n```\n(gdb) set print object on\n\n(gdb) p p\n$2 = (Circle &) @0x7fffffffde90: {<Shape> = {_vptr.Shape = 0x400a80 <vtable for Circle+16>}, radius = 1}\n```\n\n当打印对象类型信息时，该设置也会起作用：\n\n```\n(gdb) whatis p\ntype = Shape &\n(gdb) ptype p\ntype = class Shape {\n  public:\n    virtual void draw(void);\n} &\n\n(gdb) set print object on\n(gdb) whatis p\ntype = /* real type = Circle & */\nShape &\n(gdb) ptype p\ntype = /* real type = Circle & */\nclass Shape {\n  public:\n    virtual void draw(void);\n} &\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print)\n\n##### 指定程序的输入输出设备\n\n```c++\n#include <stdio.h>\n\nint main(void)\n{\n  int i;\n\n  for (i = 0; i < 100; i++)\n    {\n      printf(\"i = %d\\n\", i);\n    }\n\n  return 0;\n}\n```\n\n在gdb中，缺省情况下程序的输入输出是和gdb使用同一个终端。你也可以为程序指定一个单独的输入输出终端。\n\n首先，打开一个新终端，使用如下命令获得设备文件名：\n\n```\n$ tty\n/dev/pts/2\n```\n\n然后，通过命令行选项指定程序的输入输出设备：\n\n```\n$ gdb -tty /dev/pts/2 ./a.out\n(gdb) r\n```\n\n或者，在gdb中，使用命令进行设置：\n\n```\n(gdb) tty /dev/pts/2\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Input_002fOutput.html#index-tty)\n\n##### 使用“$\\”和“$\\_”变量\n\n##### 打印程序动态分配内存的信息\n\n```c++\n#include <stdio.h>\n#include <malloc.h>\n\nint main(void)\n{\n        char *p[10];\n        int i = 0;\n\n        for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n        {\n                p[i] = malloc(100000);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用下面的自定义命令，打印程序动态分配内存的信息：\n\n```\ndefine mallocinfo\n  set $__f = fopen(\"/dev/tty\", \"w\")\n  call malloc_info(0, $__f)\n  call fclose($__f)\nend\n```\n\n以上面程序为例：\n\n```\nTemporary breakpoint 5, main () at a.c:7\n7               int i = 0;\n(gdb) mallocinfo \n<malloc version=\"1\">\n<heap nr=\"0\">\n<sizes>\n</sizes>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"135168\"/>\n<system type=\"max\" size=\"135168\"/>\n<aspace type=\"total\" size=\"135168\"/>\n<aspace type=\"mprotect\" size=\"135168\"/>\n</heap>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"135168\"/>\n<system type=\"max\" size=\"135168\"/>\n<aspace type=\"total\" size=\"135168\"/>\n<aspace type=\"mprotect\" size=\"135168\"/>\n</malloc>\n$20 = 0\n$21 = 0\n(gdb) n\n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) mallocinfo \n<malloc version=\"1\">\n<heap nr=\"0\">\n<sizes>\n</sizes>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"532480\"/>\n<system type=\"max\" size=\"532480\"/>\n<aspace type=\"total\" size=\"532480\"/>\n<aspace type=\"mprotect\" size=\"532480\"/>\n</heap>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"532480\"/>\n<system type=\"max\" size=\"532480\"/>\n<aspace type=\"total\" size=\"532480\"/>\n<aspace type=\"mprotect\" size=\"532480\"/>\n</malloc>\n$22 = 0\n$23 = 0\n(gdb) n\n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) \n11                      p[i] = malloc(100000);\n(gdb) \n9               for (i = 0; i < sizeof(p)/sizeof(p[0]); i++)\n(gdb) mallocinfo \n<malloc version=\"1\">\n<heap nr=\"0\">\n<sizes>\n</sizes>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"1134592\"/>\n<system type=\"max\" size=\"1134592\"/>\n<aspace type=\"total\" size=\"1134592\"/>\n<aspace type=\"mprotect\" size=\"1134592\"/>\n</heap>\n<total type=\"fast\" count=\"0\" size=\"0\"/>\n<total type=\"rest\" count=\"0\" size=\"0\"/>\n<system type=\"current\" size=\"1134592\"/>\n<system type=\"max\" size=\"1134592\"/>\n<aspace type=\"total\" size=\"1134592\"/>\n<aspace type=\"mprotect\" size=\"1134592\"/>\n</malloc>\n$24 = 0\n$25 = 0\n```\n\n可以看到gdb输出了动态分配内存的变化信息。\n参见[stackoverflow](http://stackoverflow.com/questions/1471226/most-tricky-useful-commands-for-gdb-debugger).\n\n##### 打印调用栈帧中变量的值\n\n```c++\n#include <stdio.h>\n\nint func1(int a)\n{\n  int b = 1;\n  return b * a;\n}\n\nint func2(int a)\n{\n  int b = 2;\n  return b * func1(a);\n}\n\nint func3(int a)\n{\n  int b = 3;\n  return b * func2(a);\n}\n\nint main(void)\n{\n  printf(\"%d\\n\", func3(10));\n  return 0;\n}\n```\n\n在gdb中，如果想查看调用栈帧中的变量，可以先切换到该栈帧中，然后打印：\n\n```\n(gdb) b func1\n(gdb) r\n(gdb) bt\n#0  func1 (a=10) at frame.c:5\n#1  0x0000000000400560 in func2 (a=10) at frame.c:12\n#2  0x0000000000400582 in func3 (a=10) at frame.c:18\n#3  0x0000000000400596 in main () at frame.c:23\n(gdb) f 1\n(gdb) p b\n(gdb) f 2\n(gdb) p b\n```\n\n也可以不进行切换，直接打印：\n\n```\n(gdb) p func2::b\n$1 = 2\n(gdb) p func3::b\n$2 = 3\n```\n\n同样，对于C++的函数名，需要使用单引号括起来，比如：\n\n```\n(gdb) p '(anonymous namespace)::SSAA::handleStore'::n->pi->inst->dump()\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables)\n\n\n\n#### 9、多进程/线程\n\n##### 调试已经运行的进程\n\n```c++\n#include <stdio.h>\n#include <pthread.h>\nvoid *thread_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%s\\n\", (char*)p_arg);\n                sleep(10);\n        }\n}\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n调试已经运行的进程有两种方法：一种是gdb启动时，指定进程的ID：gdb program processID（也可以用-p或者--pid指定进程ID，例如：gdb program -p=10210）。以上面代码为例，用“ps”命令已经获得进程ID为10210：\n\n```\nbash-3.2# gdb -q a 10210\nReading symbols from /data/nan/a...done.\nAttaching to program `/data/nan/a', process 10210\n[New process 10210]\nRetry #1:\nRetry #2:\nRetry #3:\nRetry #4:\nReading symbols from /usr/lib/libc.so.1...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\n[New LWP    3        ]\n[New LWP    2        ]\n[New Thread 1 (LWP 1)]\n[New Thread 2 (LWP 2)]\n[New Thread 3 (LWP 3)]\nLoaded symbols for /usr/lib/libc.so.1\nReading symbols from /lib/ld.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib/ld.so.1\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n(gdb) bt\n#0  0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n#1  0xfeedcae4 in sleep () from /usr/lib/libc.so.1\n#2  0x080509ef in main () at a.c:17\n```\n\n如果嫌每次ps查看进程号比较麻烦，请尝试如下脚本\n\n```shell\n# 保存为xgdb.sh（添加可执行权限）\n# 用法 xgdb.sh a \nprog_bin=$1\nrunning_name=$(basename $prog_bin)\npid=$(/sbin/pidof $running_name)\ngdb attach $pid\n```\n\n另一种是先启动gdb，然后用“attach”命令“附着”在进程上：\n\n```\nbash-3.2# gdb -q a\nReading symbols from /data/nan/a...done.\n(gdb) attach 10210\nAttaching to program `/data/nan/a', process 10210\n[New process 10210]\nRetry #1:\nRetry #2:\nRetry #3:\nRetry #4:\nReading symbols from /usr/lib/libc.so.1...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\n[New LWP    3        ]\n[New LWP    2        ]\n[New Thread 1 (LWP 1)]\n[New Thread 2 (LWP 2)]\n[New Thread 3 (LWP 3)]\nLoaded symbols for /usr/lib/libc.so.1\nReading symbols from /lib/ld.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib/ld.so.1\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n(gdb) bt\n#0  0xfeeeae55 in ___nanosleep () from /usr/lib/libc.so.1\n#1  0xfeedcae4 in sleep () from /usr/lib/libc.so.1\n#2  0x080509ef in main () at a.c:17\n```\n\n如果不想继续调试了，可以用“detach”命令“脱离”进程：\n\n```\n(gdb) detach\nDetaching from program: /data/nan/a, process 10210\n(gdb) bt\nNo stack.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Attach.html#index-attach)\n\n##### 调试子进程\n\n```c++\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void) {\n\tpid_t pid;\n\n\tpid = fork();\n\tif (pid < 0)\n\t{\n\t\texit(1);\n\t}\n\telse if (pid > 0)\n\t{\n\t\texit(0);\n\t}\n\tprintf(\"hello world\\n\");\n\treturn 0;\n}\n```\n\n在调试多进程程序时，gdb默认会追踪父进程。例如：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 8.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:8\n8               pid = fork();\n(gdb) n\n9               if (pid < 0)\n(gdb) hello world\n\n13              else if (pid > 0)\n(gdb)\n15                      exit(0);\n(gdb)\n[Inferior 1 (process 12786) exited normally]\n```\n\n可以看到程序执行到第15行：父进程退出。\n\n如果要调试子进程，要使用如下命令：“set follow-fork-mode child”，例如：\n\n```\n(gdb) set follow-fork-mode child\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 8.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:8\n8               pid = fork();\n(gdb) n\n[New process 12241]\n[Switching to process 12241]\n9               if (pid < 0)\n(gdb)\n13              else if (pid > 0)\n(gdb)\n17              printf(\"hello world\\n\");\n(gdb)\nhello world\n18              return 0;\n```\n\n可以看到程序执行到第17行：子进程打印“hello world”。\n\n这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Forks.html)\n\n##### 同时调试父进程和子进程\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(void) {\n    pid_t pid;\n\n    pid = fork();\n    if (pid < 0)\n    {\n        exit(1);\n    }\n    else if (pid > 0)\n    {\n        printf(\"Parent\\n\");\n        exit(0);\n    }\n    printf(\"Child\\n\");\n    return 0;\n}\n```\n\n在调试多进程程序时，gdb默认只会追踪父进程的运行，而子进程会独立运行，gdb不会控制。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 7.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:7\n7           pid = fork();\n(gdb) n\n8           if (pid < 0)\n(gdb) Child\n\n12          else if (pid > 0)\n(gdb)\n14              printf(\"Parent\\n\");\n(gdb)\nParent\n15              exit(0);\n```\n\n可以看到当单步执行到第8行时，程序打印出“Child” ，证明子进程已经开始独立运行。\n\n如果要同时调试父进程和子进程，可以使用“`set detach-on-fork off`”（默认`detach-on-fork`是`on`）命令，这样gdb就能同时调试父子进程，并且在调试一个进程时，另外一个进程处于挂起状态。仍以上面程序为例：\n\n```\n(gdb) set detach-on-fork off\n(gdb) start\nTemporary breakpoint 1 at 0x40055c: file a.c, line 7.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:7\n7           pid = fork();\n(gdb) n\n[New process 1050]\n8           if (pid < 0)\n(gdb)\n12          else if (pid > 0)\n(gdb) i inferior\n  Num  Description       Executable\n  2    process 1050      /data2/home/nanxiao/a\n* 1    process 1046      /data2/home/nanxiao/a\n(gdb) n\n14              printf(\"Parent\\n\");\n(gdb) n\nParent\n15              exit(0);\n(gdb)\n[Inferior 1 (process 1046) exited normally]\n(gdb)\nThe program is not being run.\n(gdb) i inferiors\n  Num  Description       Executable\n  2    process 1050      /data2/home/nanxiao/a\n* 1    <null>            /data2/home/nanxiao/a\n(gdb) inferior 2\n[Switching to inferior 2 [process 1050] (/data2/home/nanxiao/a)]\n[Switching to thread 2 (process 1050)]\n#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6\n(gdb) bt\n#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6\n#1  0x0000000000400561 in main () at a.c:7\n(gdb) n\nSingle stepping until exit from function fork,\nwhich has no line number information.\nmain () at a.c:8\n8           if (pid < 0)\n(gdb)\n12          else if (pid > 0)\n(gdb)\n17          printf(\"Child\\n\");\n(gdb)\nChild\n18          return 0;\n(gdb)\n```\n\n在使用“`set detach-on-fork off`”命令后，用“`i inferiors`”（`i`是`info`命令缩写）查看进程状态，可以看到父子进程都在被gdb调试的状态，前面显示“*”是正在调试的进程。当父进程退出后，用“`inferior infno`”切换到子进程去调试。\n\n这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Forks.html)\n\n此外，如果想让父子进程都同时运行，可以使用“`set schedule-multiple on`”（默认`schedule-multiple`是`off`）命令，仍以上述代码为例：\n\n```\n(gdb) set detach-on-fork off\n(gdb) set schedule-multiple on\n(gdb) start\nTemporary breakpoint 1 at 0x40059c: file a.c, line 7.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:7\n7           pid = fork();\n(gdb) n\n[New process 26597]\nChild\n```\n\n可以看到打印出了“Child”，证明子进程也在运行了。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/All_002dStop-Mode.html#All_002dStop-Mode)\n\n##### 查看线程信息\n\n```c++\n#include <stdio.h>\n#include <pthread.h>\nvoid *thread_func(void *p_arg)\n{\n        while (1)\n        {\n                printf(\"%s\\n\", (char*)p_arg);\n                sleep(10);\n        }\n}\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n用gdb调试多线程程序，可以用“i threads”命令（i是info命令缩写）查看所有线程的信息，以上面程序为例（运行平台为Linux，CPU为X86_64）:\n\n```\n  (gdb) i threads\n  Id   Target Id         Frame\n  3    Thread 0x7ffff6e2b700 (LWP 31773) 0x00007ffff7915911 in clone () from /lib64/libc.so.6\n  2    Thread 0x7ffff782c700 (LWP 31744) 0x00007ffff78d9bcd in nanosleep () from /lib64/libc.so.6\n* 1    Thread 0x7ffff7fe9700 (LWP 31738) main () at a.c:18\n```\n\n第一项（Id）：是gdb标示每个线程的唯一ID：1，2等等。\n第二项（Target Id）：是具体系统平台用来标示每个线程的ID，不同平台信息可能会不同。 像当前Linux平台显示的就是： Thread 0x7ffff6e2b700 (LWP 31773)。\n第三项（Frame）：显示的是线程执行到哪个函数。\n前面带“*”表示的是“current thread”，可以理解为gdb调试多线程程序时，选择的一个“默认线程”。\n\n再以Solaris平台（CPU为X86_64）为例，可以看到显示信息会略有不同：\n\n```\n(gdb) i threads\n[New Thread 2 (LWP 2)]\n[New Thread 3 (LWP 3)]\n  Id   Target Id         Frame\n  6    Thread 3 (LWP 3)  0xfeec870d in _thr_setup () from /usr/lib/libc.so.1\n  5    Thread 2 (LWP 2)  0xfefc9661 in elf_find_sym () from /usr/lib/ld.so.1\n  4    LWP    3          0xfeec870d in _thr_setup () from /usr/lib/libc.so.1\n  3    LWP    2          0xfefc9661 in elf_find_sym () from /usr/lib/ld.so.1\n* 2    Thread 1 (LWP 1)  main () at a.c:18\n  1    LWP    1          main () at a.c:18\n```\n\n也可以用“i threads [Id...]”指定打印某些线程的信息，例如：\n\n```\n  (gdb) i threads 1 2\n  Id   Target Id         Frame\n  2    Thread 0x7ffff782c700 (LWP 12248) 0x00007ffff78d9bcd in nanosleep () from /lib64/libc.so.6\n* 1    Thread 0x7ffff7fe9700 (LWP 12244) main () at a.c:18\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Threads.html).\n\n##### 在Solaris上使用maintenance命令查看线程信息\n\n用gdb调试多线程程序时，如果想查看线程信息，可以使用“i threads”命令（i是info命令缩写），例如:\n\n```\n(gdb) i threads\n106 process 2689429      0xff04af84 in __lwp_park () from /lib/libc.so.1\n105 process 2623893      0xff04af84 in __lwp_park () from /lib/libc.so.1\n104 process 2558357      0xff04af84 in __lwp_park () from /lib/libc.so.1\n103 process 2492821      0xff04af84 in __lwp_park () from /lib/libc.so.1\n```\n\n在Solaris操作系统上，gdb为Solaris量身定做了一个查看线程信息的命令：“maint info sol-threads”（maint是maintenance命令缩写），例如:\n\n```\n(gdb) maint info sol-threads\nuser   thread #1, lwp 1, (active)\nuser   thread #2, lwp 2, (active)    startfunc: monitor_thread\nuser   thread #3, lwp 3, (asleep)    startfunc: mem_db_thread\n- Sleep func: 0x000aa32c\n```\n\n可以看到相比于info命令，maintenance命令显示了更多信息。例如线程当前状态（active，asleep），入口函数（startfunc）等。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Threads.html)\n\n##### 不显示线程启动和退出信息\n\n```c\n#include <stdio.h>\n#include <pthread.h>\n\nvoid *thread_func(void *p_arg)\n{\n       sleep(10);\n}\n\nint main(void)\n{\n        pthread_t t1, t2;\n\n        pthread_create(&t1, NULL, thread_func, \"Thread 1\");\n        pthread_create(&t2, NULL, thread_func, \"Thread 2\");\n\n        sleep(1000);\n        return;\n}\n```\n\n默认情况下，gdb检测到有线程产生和退出时，会打印提示信息，以上面程序为例:\n\n```\n(gdb) r\nStarting program: /data/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[New LWP    2        ]\n[New LWP    3        ]\n[LWP    2         exited]\n[New Thread 2        ]\n[LWP    3         exited]\n[New Thread 3        ]\n```\n\n如果不想显示这些信息，可以使用“`set print thread-events off`”命令，这样当有线程产生和退出时，就不会打印提示信息：\n\n```\n(gdb) set print thread-events off\n(gdb) r\nStarting program: /data/nan/a\n[Thread debugging using libthread_db enabled]\n```\n\n可以看到不再打印相关信息。\n\n这个命令有些平台不支持，使用时需注意。参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Threads.html).\n\n##### 使用“$_thread”变量\n\n##### 一个gdb会话中同时调试多个程序\n\n```c++\na.c:\n#include <stdio.h>\nint func(int a, int b)\n{\n        int c = a * b;\n        printf(\"c is %d\\n\", c);\n}\n\nint main(void)\n{\n        func(1, 2);\n        return 0;\n}\n\n\nb.c:\n#include <stdio.h>\n\nint func1(int a)\n{\n        return 2 * a;\n}\n\nint func2(int a)\n{\n        int c = 0;\n        c = 2 * func1(a);\n        return c;\n}\n\nint func3(int a)\n{\n        int c = 0;\n        c = 2 * func2(a);\n        return c;\n}\n\nint main(void)\n{\n        printf(\"%d\\n\", func3(10));\n        return 0;\n}\n```\n\ngdb支持在一个会话中同时调试多个程序。以上面程序为例，首先调试`a`程序：\n\n```\nroot@bash:~$ gdb a\nGNU gdb (Ubuntu 7.7-0ubuntu3) 7.7\nCopyright (C) 2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x400568: file a.c, line 10.\nStarting program: /home/nanxiao/a\n```\n\n接着使用“`add-inferior [ -copies n ] [ -exec executable ]`”命令加载可执行文件`b`。其中`n`默认为1：\n\n```\n(gdb) add-inferior -copies 2 -exec b\nAdded inferior 2\nReading symbols from b...done.\nAdded inferior 3\nReading symbols from b...done.\n(gdb) i inferiors\n  Num  Description       Executable\n  3    <null>            /home/nanxiao/b\n  2    <null>            /home/nanxiao/b\n* 1    process 1586      /home/nanxiao/a\n(gdb) inferior 2\n[Switching to inferior 2 [<null>] (/home/nanxiao/b)]\n(gdb) start\nTemporary breakpoint 2 at 0x400568: main. (3 locations)\nStarting program: /home/nanxiao/b\n\nTemporary breakpoint 2, main () at b.c:24\n24              printf(\"%d\\n\", func3(10));\n(gdb) i inferiors\n  Num  Description       Executable\n  3    <null>            /home/nanxiao/b\n* 2    process 1590      /home/nanxiao/b\n  1    process 1586      /home/nanxiao/a\n```\n\n可以看到可以调试`b`程序了。\n\n另外也可用“`clone-inferior [ -copies n ] [ infno ]`”克隆现有的`inferior`，其中`n`默认为1，`infno`默认为当前的`inferior`：\n\n```\n(gdb) i inferiors\n  Num  Description       Executable\n  3    <null>            /home/nanxiao/b\n* 2    process 1590      /home/nanxiao/b\n  1    process 1586      /home/nanxiao/a\n(gdb) clone-inferior -copies 1\nAdded inferior 4.\n(gdb) i inferiors\n  Num  Description       Executable\n  4    <null>            /home/nanxiao/b\n  3    <null>            /home/nanxiao/b\n* 2    process 1590      /home/nanxiao/b\n  1    process 1586      /home/nanxiao/a\n```\n\n可以看到又多了一个`b`程序。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html).\n\n##### 打印程序进程空间信息\n\n```c++\na.c:\n#include <stdio.h>\nint func(int a, int b)\n{\n        int c = a * b;\n        printf(\"c is %d\\n\", c);\n}\n\nint main(void)\n{\n        func(1, 2);\n        return 0;\n}\n\n\nb.c:\n#include <stdio.h>\n\nint func1(int a)\n{\n        return 2 * a;\n}\n\nint func2(int a)\n{\n        int c = 0;\n        c = 2 * func1(a);\n        return c;\n}\n\nint func3(int a)\n{\n        int c = 0;\n        c = 2 * func2(a);\n        return c;\n}\n\nint main(void)\n{\n        printf(\"%d\\n\", func3(10));\n        return 0;\n}\n```\n\n使用gdb调试多个进程时，可以使用“`maint info program-spaces`”打印当前所有被调试的进程信息。以上面程序为例：\n\n```\n[root@localhost nan]# gdb a\nGNU gdb (GDB) 7.8.1\n......\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x4004f9: file a.c, line 10.\nStarting program: /home/nan/a \n\nTemporary breakpoint 1, main () at a.c:10\n10              func(1, 2);\n(gdb) add-inferior -exec b\nAdded inferior 2\nReading symbols from b...done.\n(gdb) i inferiors b\nArgs must be numbers or '$' variables.\n(gdb) i inferiors\n  Num  Description       Executable        \n  2    <null>            /home/nan/b       \n* 1    process 15753     /home/nan/a       \n(gdb) inferior 2\n[Switching to inferior 2 [<null>] (/home/nan/b)]\n(gdb) start\nTemporary breakpoint 2 at 0x4004f9: main. (2 locations)\nStarting program: /home/nan/b \n\nTemporary breakpoint 2, main () at b.c:24\n24              printf(\"%d\\n\", func3(10));\n(gdb) i inferiors\n  Num  Description       Executable        \n* 2    process 15902     /home/nan/b       \n  1    process 15753     /home/nan/a       \n(gdb) clone-inferior -copies 2\nAdded inferior 3.\nAdded inferior 4.\n(gdb) i inferiors\n  Num  Description       Executable        \n  4    <null>            /home/nan/b       \n  3    <null>            /home/nan/b       \n* 2    process 15902     /home/nan/b       \n  1    process 15753     /home/nan/a       \n(gdb) maint info program-spaces\n  Id   Executable        \n  4    /home/nan/b       \n        Bound inferiors: ID 4 (process 0)\n  3    /home/nan/b       \n        Bound inferiors: ID 3 (process 0)\n* 2    /home/nan/b       \n        Bound inferiors: ID 2 (process 15902)\n  1    /home/nan/a       \n        Bound inferiors: ID 1 (process 15753)\n```\n\n可以看到执行“`maint info program-spaces`”命令后，打印出当前有4个`program-spaces`（编号从1到4）。另外还有每个`program-spaces`对应的程序，`inferior`编号及进程号。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html).\n\n##### 使用“$_exitcode”变量\n\n\n\n#### 10、core dump文件\n\n##### 为调试进程产生core dump文件\n\n在用gdb调试程序时，我们有时想让被调试的进程产生core dump文件，记录现在进程的状态，以供以后分析。可以用“generate-core-file”命令来产生core dump文件：\n\n```\n(gdb) help generate-core-file\nSave a core file with the current state of the debugged process.\nArgument is optional filename.  Default filename is 'core.<process_id>'.\n\n(gdb) start\nTemporary breakpoint 1 at 0x8050c12: file a.c, line 9.\nStarting program: /data1/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:9\n9           change_var();\n(gdb) generate-core-file\nSaved corefile core.12955\n```\n\n也可使用“gcore”命令：\n\n```\n(gdb) help gcore\nSave a core file with the current state of the debugged process.\nArgument is optional filename.  Default filename is 'core.<process_id>'.\n(gdb) gcore\nSaved corefile core.13256\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html)\n\n##### 加载可执行程序和core dump文件\n\n```c++\n#include <stdio.h>\n\nint main(void) {\n        int *p = NULL;\n        printf(\"hello world\\n\");\n        *p = 0;\n        return 0;\n}\n```\n\n例子程序访问了一个空指针，所以程序会crash并产生core dump文件。用gdb调试core dump文件，通常用这个命令形式：“gdb path/to/the/executable path/to/the/coredump”，然后gdb会显示程序crash的位置：\n\n```\nbash-3.2# gdb -q /data/nan/a /var/core/core.a.22268.1402638140\nReading symbols from /data/nan/a...done.\n[New LWP 1]\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\nCore was generated by `./a'.\nProgram terminated with signal 11, Segmentation fault.\n#0  0x0000000000400cdb in main () at a.c:6\n6               *p = 0;\n```\n\n有时我们想在gdb启动后，动态加载可执行程序和core dump文件，这时可以用“file”和“core”（core-file命令缩写）命令。“file”命令用来读取可执行文件的符号表信息，而“core”命令则是指定core dump文件的位置：\n\n```\nbash-3.2# gdb -q\n(gdb) file /data/nan/a\nReading symbols from /data/nan/a...done.\n(gdb) core /var/core/core.a.22268.1402638140\n[New LWP 1]\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\nCore was generated by `./a'.\nProgram terminated with signal 11, Segmentation fault.\n#0  0x0000000000400cdb in main () at a.c:6\n6               *p = 0;\n```\n\n可以看到gdb同样显示程序crash的位置。\n\n这两个命令可参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Files.html#index-core-dump-file)\n\n#### 11、汇编\n\n##### 设置汇编指令格式\n\n```c++\n#include <stdio.h>\nint global_var;\n\nvoid change_var(){\n    global_var=100;\n}\n\nint main(void){\n    change_var();\n    return 0;\n}\n```\n\n在Intel x86处理器上，gdb默认显示汇编指令格式是AT&T格式。例如：\n\n```\n(gdb) disassemble main\nDump of assembler code for function main:\n   0x08050c0f <+0>:     push   %ebp\n   0x08050c10 <+1>:     mov    %esp,%ebp\n   0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    $0x0,%eax\n   0x08050c1c <+13>:    pop    %ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n可以用“set disassembly-flavor”命令将格式改为intel格式：\n\n```\n(gdb) set disassembly-flavor intel\n(gdb) disassemble main\nDump of assembler code for function main:\n   0x08050c0f <+0>:     push   ebp\n   0x08050c10 <+1>:     mov    ebp,esp\n   0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    eax,0x0\n   0x08050c1c <+13>:    pop    ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n目前“set disassembly-flavor”命令只能用在Intel x86处理器上，并且取值只有“intel”和“att”。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html)\n\n##### 在函数的第一条汇编指令打断点\n\n```c++\n#include <stdio.h>\nint global_var;\n\nvoid change_var(){\n    global_var=100;\n}\n\nint main(void){\n    change_var();\n    return 0;\n}\n```\n\n通常给函数打断点的命令：“b func”（b是break命令的缩写），不会把断点设置在汇编指令层次函数的开头，例如：\n\n```\n(gdb) b main\nBreakpoint 1 at 0x8050c12: file a.c, line 9.\n(gdb) r\nStarting program: /data1/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nBreakpoint 1, main () at a.c:9\n9           change_var();\n(gdb) disassemble\nDump of assembler code for function main:\n   0x08050c0f <+0>:     push   %ebp\n   0x08050c10 <+1>:     mov    %esp,%ebp\n=> 0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    $0x0,%eax\n   0x08050c1c <+13>:    pop    %ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n可以看到程序停在了第三条汇编指令（箭头所指位置）。如果要把断点设置在汇编指令层次函数的开头，要使用如下命令：“b *func”，例如：\n\n```\n(gdb) b *main\nBreakpoint 1 at 0x8050c0f: file a.c, line 8.\n(gdb) r\nStarting program: /data1/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nBreakpoint 1, main () at a.c:8\n8       int main(void){\n(gdb) disassemble\nDump of assembler code for function main:\n=> 0x08050c0f <+0>:     push   %ebp\n   0x08050c10 <+1>:     mov    %esp,%ebp\n   0x08050c12 <+3>:     call   0x8050c00 <change_var>\n   0x08050c17 <+8>:     mov    $0x0,%eax\n   0x08050c1c <+13>:    pop    %ebp\n   0x08050c1d <+14>:    ret\nEnd of assembler dump.\n```\n\n可以看到程序停在了第一条汇编指令（箭头所指位置）。\n\n##### 自动反汇编后面要执行的代码\n\n```shell\n(gdb) set disassemble-next-line on\n(gdb) start \nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nTemporary breakpoint 3 at 0x400543: file 1.c, line 14.\nStarting program: /home/teawater/tmp/a.out \n\nTemporary breakpoint 3, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14\n14      printf(\"1\\n\");\n=> 0x0000000000400543 <main+19>:    bf f0 05 40 00  mov    $0x4005f0,%edi\n   0x0000000000400548 <main+24>:    e8 c3 fe ff ff  callq  0x400410 <puts@plt>\n(gdb) si\n0x0000000000400548  14      printf(\"1\\n\");\n0x0000000000400543 <main+19>:    bf f0 05 40 00  mov    $0x4005f0,%edi\n=> 0x0000000000400548 <main+24>:    e8 c3 fe ff ff  callq  0x400410 <puts@plt>\n(gdb) \n0x0000000000400410 in puts@plt ()\n=> 0x0000000000400410 <puts@plt+0>: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 <puts@got.plt>\n\n(gdb) set disassemble-next-line auto \n(gdb) start \nTemporary breakpoint 1 at 0x400543: file 1.c, line 14.\nStarting program: /home/teawater/tmp/a.out \n\nTemporary breakpoint 1, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14\n14      printf(\"1\\n\");\n(gdb) si\n0x0000000000400548  14      printf(\"1\\n\");\n(gdb) \n0x0000000000400410 in puts@plt ()\n=> 0x0000000000400410 <puts@plt+0>: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 <puts@got.plt>\n(gdb) \n0x0000000000400416 in puts@plt ()\n=> 0x0000000000400416 <puts@plt+6>: 68 00 00 00 00  pushq  $0x0\n```\n\n如果要在任意情况下反汇编后面要执行的代码：\n\n```\n(gdb) set disassemble-next-line on\n```\n\n如果要在后面的代码没有源码的情况下才反汇编后面要执行的代码：\n\n```\n(gdb) set disassemble-next-line auto\n```\n\n关闭这个功能：\n\n```shell\n(gdb) set disassemble-next-line off\n```\n\n##### 将源程序和汇编指令映射起来\n\n```c++\n#include <stdio.h>\n\ntypedef struct\n{\n        int a;\n        int b;\n        int c;\n        int d;\n}ex_st;\n\nint main(void) {\n        ex_st st = {1, 2, 3, 4};\n        printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n        return 0;\n}\n```\n\n可以用“disas /m fun”（disas是disassemble命令缩写）命令将函数代码和汇编指令映射起来，以上面代码为例：\n\n```\n(gdb) disas /m main\nDump of assembler code for function main:\n11      int main(void) {\n   0x00000000004004c4 <+0>:     push   %rbp\n   0x00000000004004c5 <+1>:     mov    %rsp,%rbp\n   0x00000000004004c8 <+4>:     push   %rbx\n   0x00000000004004c9 <+5>:     sub    $0x18,%rsp\n\n12              ex_st st = {1, 2, 3, 4};\n   0x00000000004004cd <+9>:     movl   $0x1,-0x20(%rbp)\n   0x00000000004004d4 <+16>:    movl   $0x2,-0x1c(%rbp)\n   0x00000000004004db <+23>:    movl   $0x3,-0x18(%rbp)\n   0x00000000004004e2 <+30>:    movl   $0x4,-0x14(%rbp)\n\n13              printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n   0x00000000004004e9 <+37>:    mov    -0x14(%rbp),%esi\n   0x00000000004004ec <+40>:    mov    -0x18(%rbp),%ecx\n   0x00000000004004ef <+43>:    mov    -0x1c(%rbp),%edx\n   0x00000000004004f2 <+46>:    mov    -0x20(%rbp),%ebx\n   0x00000000004004f5 <+49>:    mov    $0x400618,%eax\n   0x00000000004004fa <+54>:    mov    %esi,%r8d\n   0x00000000004004fd <+57>:    mov    %ebx,%esi\n   0x00000000004004ff <+59>:    mov    %rax,%rdi\n   0x0000000000400502 <+62>:    mov    $0x0,%eax\n   0x0000000000400507 <+67>:    callq  0x4003b8 <printf@plt>\n\n14              return 0;\n   0x000000000040050c <+72>:    mov    $0x0,%eax\n\n15      }\n   0x0000000000400511 <+77>:    add    $0x18,%rsp\n   0x0000000000400515 <+81>:    pop    %rbx\n   0x0000000000400516 <+82>:    leaveq\n   0x0000000000400517 <+83>:    retq\n\nEnd of assembler dump.\n```\n\n可以看到每一条C语句下面是对应的汇编代码。\n\n如果只想查看某一行所对应的地址范围，可以：\n\n```\n(gdb) i line 13\nLine 13 of \"foo.c\" starts at address 0x4004e9 <main+37> and ends at 0x40050c <main+72>.\t\n```\n\n如果只想查看这一条语句对应的汇编代码，可以使用“`disassemble [Start],[End]`”命令：\n\n```\n(gdb) disassemble 0x4004e9, 0x40050c\nDump of assembler code from 0x4004e9 to 0x40050c:\n   0x00000000004004e9 <main+37>:        mov    -0x14(%rbp),%esi\n   0x00000000004004ec <main+40>:        mov    -0x18(%rbp),%ecx\n   0x00000000004004ef <main+43>:        mov    -0x1c(%rbp),%edx\n   0x00000000004004f2 <main+46>:        mov    -0x20(%rbp),%ebx\n   0x00000000004004f5 <main+49>:        mov    $0x400618,%eax\n   0x00000000004004fa <main+54>:        mov    %esi,%r8d\n   0x00000000004004fd <main+57>:        mov    %ebx,%esi\n   0x00000000004004ff <main+59>:        mov    %rax,%rdi\n   0x0000000000400502 <main+62>:        mov    $0x0,%eax\n   0x0000000000400507 <main+67>:        callq  0x4003b8 <printf@plt>\nEnd of assembler dump.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html)\n\n##### 显示将要执行的汇编指令\n\n```c++\n#include <stdio.h>\nint global_var;\n\nvoid change_var(){\n    global_var=100;\n}\n\nint main(void){\n    change_var();\n    return 0;\n}\n```\n\n使用gdb调试汇编程序时，可以用“`display /i $pc`”命令显示当程序停止时，将要执行的汇编指令。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400488: file a.c, line 9.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:9\n9           change_var();\n(gdb) display /i $pc\n1: x/i $pc\n=> 0x400488 <main+4>:   mov    $0x0,%eax\n(gdb) si\n0x000000000040048d      9           change_var();\n1: x/i $pc\n=> 0x40048d <main+9>:   callq  0x400474 <change_var>\n(gdb)\nchange_var () at a.c:4\n4       void change_var(){\n1: x/i $pc\n=> 0x400474 <change_var>:       push   %rbp\n```\n\n可以看到打印出了将要执行的汇编指令。此外也可以一次显示多条指令：\n\n```\n(gdb) display /3i $pc\n2: x/3i $pc\n=> 0x400474 <change_var>:       push   %rbp\n   0x400475 <change_var+1>:     mov    %rsp,%rbp\n   0x400478 <change_var+4>:     movl   $0x64,0x2003de(%rip)        # 0x600860 <global_var>\n```\n\n可以看到一次显示了`3`条指令。\n\n取消显示可以用`undisplay`命令。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Auto-Display.html)\n\n##### 打印寄存器的值\n\n用gdb调试程序时，如果想查看寄存器的值，可以使用“i registers”命令（i是info命令缩写），例如:\n\n```\n(gdb) i registers\nrax            0x7ffff7dd9f60   140737351884640\nrbx            0x0      0\nrcx            0x0      0\nrdx            0x7fffffffe608   140737488348680\nrsi            0x7fffffffe5f8   140737488348664\nrdi            0x1      1\nrbp            0x7fffffffe510   0x7fffffffe510\nrsp            0x7fffffffe4c0   0x7fffffffe4c0\nr8             0x7ffff7dd8300   140737351877376\nr9             0x7ffff7deb9e0   140737351956960\nr10            0x7fffffffe360   140737488348000\nr11            0x7ffff7a68be0   140737348275168\nr12            0x4003e0 4195296\nr13            0x7fffffffe5f0   140737488348656\nr14            0x0      0\nr15            0x0      0\nrip            0x4004cd 0x4004cd <main+9>\neflags         0x206    [ PF IF ]\ncs             0x33     51\nss             0x2b     43\nds             0x0      0\nes             0x0      0\nfs             0x0      0\ngs             0x0      0\n```\n\n以上输出不包括浮点寄存器和向量寄存器的内容。使用“i all-registers”命令，可以输出所有寄存器的内容：\n\n```\n(gdb) i all-registers\n\trax            0x7ffff7dd9f60   140737351884640\n\trbx            0x0      0\n\trcx            0x0      0\n\trdx            0x7fffffffe608   140737488348680\n\trsi            0x7fffffffe5f8   140737488348664\n\trdi            0x1      1\n\trbp            0x7fffffffe510   0x7fffffffe510\n\trsp            0x7fffffffe4c0   0x7fffffffe4c0\n\tr8             0x7ffff7dd8300   140737351877376\n\tr9             0x7ffff7deb9e0   140737351956960\n\tr10            0x7fffffffe360   140737488348000\n\tr11            0x7ffff7a68be0   140737348275168\n\tr12            0x4003e0 4195296\n\tr13            0x7fffffffe5f0   140737488348656\n\tr14            0x0      0\n\tr15            0x0      0\n\trip            0x4004cd 0x4004cd <main+9>\n\teflags         0x206    [ PF IF ]\n\tcs             0x33     51\n\tss             0x2b     43\n\tds             0x0      0\n\tes             0x0      0\n\tfs             0x0      0\n\tgs             0x0      0\n\tst0            0        (raw 0x00000000000000000000)\n\tst1            0        (raw 0x00000000000000000000)\n\tst2            0        (raw 0x00000000000000000000)\n\tst3            0        (raw 0x00000000000000000000)\n\tst4            0        (raw 0x00000000000000000000)\n\tst5            0        (raw 0x00000000000000000000)\n\tst6            0        (raw 0x00000000000000000000)\n\tst7            0        (raw 0x00000000000000000000)\n\t......\n```\n\n要打印单个寄存器的值，可以使用“i registers regname”或者“p $regname”，例如：\n\n```\n(gdb) i registers eax\neax            0xf7dd9f60       -136470688\n(gdb) p $eax\n$1 = -136470688\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Registers.html).\n\n##### 显示程序原始机器码\n\n```c++\n#include <stdio.h>\n\nint main(void)\n{\n        printf(\"Hello, world\\n\");\n        return 0;\n}\n```\n\n使用“disassemble /r”命令可以用16进制形式显示程序的原始机器码。以上面程序为例：\n\n```\n(gdb) disassemble /r main\nDump of assembler code for function main:\n   0x0000000000400530 <+0>:     55      push   %rbp\n   0x0000000000400531 <+1>:     48 89 e5        mov    %rsp,%rbp\n   0x0000000000400534 <+4>:     bf e0 05 40 00  mov    $0x4005e0,%edi\n   0x0000000000400539 <+9>:     e8 d2 fe ff ff  callq  0x400410 <puts@plt>\n   0x000000000040053e <+14>:    b8 00 00 00 00  mov    $0x0,%eax\n   0x0000000000400543 <+19>:    5d      pop    %rbp\n   0x0000000000400544 <+20>:    c3      retq\nEnd of assembler dump.\n(gdb) disassemble /r 0x0000000000400534,+4\nDump of assembler code from 0x400534 to 0x400538:\n   0x0000000000400534 <main+4>: bf e0 05 40 00  mov    $0x4005e0,%edi\nEnd of assembler dump.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html)\n\n\n\n#### 12、改变进程的执行\n\n##### 改变字符串的值\n\n```c\n#include <stdio.h>\n\nint main(void)\n{\n\tchar p1[] = \"Sam\";\n\tchar *p2 = \"Bob\";\n\t\n\tprintf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n\treturn 0;\n}\n```\n\n 使用gdb调试程序时，可以用“`set`”命令改变字符串的值，以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x8050af0: file a.c, line 5.\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:5\n5               char p1[] = \"Sam\";\n(gdb) n\n6               char *p2 = \"Bob\";\n(gdb) \n8               printf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n(gdb) set main::p1=\"Jil\"\n(gdb) set main::p2=\"Bill\"\n(gdb) n\np1 is Jil, p2 is Bill\n9               return 0;\n```\n\n可以看到执行`p1`和`p2`的字符串都发生了变化。也可以通过访问内存地址的方法改变字符串的值：\n\n```\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 2, main () at a.c:5\n5               char p1[] = \"Sam\";\n(gdb) n\n6               char *p2 = \"Bob\";\n(gdb) p p1\n$1 = \"Sam\"\n(gdb) p &p1\n$2 = (char (*)[4]) 0x80477a4\n(gdb) set {char [4]} 0x80477a4 = \"Ace\"\n(gdb) n\n8               printf(\"p1 is %s, p2 is %s\\n\", p1, p2);\n(gdb) \np1 is Ace, p2 is Bob\n9               return 0;\n```\n\n在改变字符串的值时候，一定要注意内存越界的问题。\n参见[stackoverflow](http://stackoverflow.com/questions/19503057/in-gdb-how-can-i-write-a-string-to-memory).\n\n\n\n##### 设置变量的值\n\n```c\n#include <stdio.h>\n\nint func(void)\n{\n    int i = 2;\n\n    return i;\n}\n\nint main(void)\n{\n    int a = 0;\n\n    a = func();\n    printf(\"%d\\n\", a);\n    return 0;\n}\n```\n\n在gdb中，可以用“`set var variable=expr`”命令设置变量的值，以上面代码为例：\n\n```\nBreakpoint 2, func () at a.c:5\n5                   int i = 2;\n(gdb) n\n7                   return i;\n(gdb) set var i = 8\n(gdb) p i\n$4 = 8\n```\n\n可以看到在`func`函数里用`set`命令把`i`的值修改成为`8`。\n\n也可以用“`set {type}address=expr`”的方式，含义是给存储地址在`address`，变量类型为`type`的变量赋值，仍以上面代码为例：\n\n```\nBreakpoint 2, func () at a.c:5\n5                   int i = 2;\n(gdb) n\n7                   return i;\n(gdb) p &i\n$5 = (int *) 0x8047a54\n(gdb) set {int}0x8047a54 = 8\n(gdb) p i\n$6 = 8\n```\n\n可以看到`i`的值被修改成为`8`。\n\n另外寄存器也可以作为变量，因此同样可以修改寄存器的值：\n\n```\nBreakpoint 2, func () at a.c:5\n5                   int i = 2;\n(gdb)\n(gdb) n\n7                   return i;\n(gdb)\n8               }\n(gdb) set var $eax = 8\n(gdb) n\nmain () at a.c:15\n15                  printf(\"%d\\n\", a);\n(gdb)\n8\n16                  return 0;\n```\n\n可以看到因为eax寄存器存储着函数的返回值，所以当把eax寄存器的值改为`8`后，函数的返回值也变成了`8`。\n\n详情参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Assignment.html#Assignment)\n\n\n\n##### 修改PC寄存器的值\n\n```c\n#include <stdio.h>\nint main(void)\n{       \n        int a =0;               \n\n        a++;    \n        a++;    \n        printf(\"%d\\n\", a);      \n        return 0;\n}\n```\n\nPC寄存器会存储程序下一条要执行的指令，通过修改这个寄存器的值，可以达到改变程序执行流程的目的。\n上面的程序会输出“`a=2`”，下面介绍一下如何通过修改PC寄存器的值，改变程序执行流程。\n\n```\n4               int a =0;\n(gdb) disassemble main\nDump of assembler code for function main:\n0x08050921 <main+0>:    push   %ebp\n0x08050922 <main+1>:    mov    %esp,%ebp\n0x08050924 <main+3>:    sub    $0x8,%esp\n0x08050927 <main+6>:    and    $0xfffffff0,%esp\n0x0805092a <main+9>:    mov    $0x0,%eax\n0x0805092f <main+14>:   add    $0xf,%eax\n0x08050932 <main+17>:   add    $0xf,%eax\n0x08050935 <main+20>:   shr    $0x4,%eax\n0x08050938 <main+23>:   shl    $0x4,%eax\n0x0805093b <main+26>:   sub    %eax,%esp\n0x0805093d <main+28>:   movl   $0x0,-0x4(%ebp)\n0x08050944 <main+35>:   lea    -0x4(%ebp),%eax\n0x08050947 <main+38>:   incl   (%eax)\n0x08050949 <main+40>:   lea    -0x4(%ebp),%eax\n0x0805094c <main+43>:   incl   (%eax)\n0x0805094e <main+45>:   sub    $0x8,%esp\n0x08050951 <main+48>:   pushl  -0x4(%ebp)\n0x08050954 <main+51>:   push   $0x80509b4\n0x08050959 <main+56>:   call   0x80507cc <printf@plt>\n0x0805095e <main+61>:   add    $0x10,%esp\n0x08050961 <main+64>:   mov    $0x0,%eax\n0x08050966 <main+69>:   leave\n0x08050967 <main+70>:   ret\nEnd of assembler dump.\n(gdb) info line 6\nLine 6 of \"a.c\" starts at address 0x8050944 <main+35> and ends at 0x8050949 <main+40>.\n(gdb) info line 7\nLine 7 of \"a.c\" starts at address 0x8050949 <main+40> and ends at 0x805094e <main+45>.\n```\n\n通过“`info line 6`”和“`info line 7`”命令可以知道两条“`a++;`”语句的汇编指令起始地址分别是`0x8050944`和`0x8050949`。\n\n```\n(gdb) n\n6               a++;\n(gdb) p $pc\n$3 = (void (*)()) 0x8050944 <main+35>\n(gdb) set var $pc=0x08050949\n```\n\n当程序要执行第一条“`a++;`”语句时，打印`pc`寄存器的值，看到`pc`寄存器的值为`0x8050944`，与“`info line 6`”命令得到的一致。接下来，把`pc`寄存器的值改为`0x8050949`，也就是通过“`info line 7`”命令得到的第二条“`a++;`”语句的起始地址。\n\n```\n(gdb) n\n8               printf(\"a=%d\\n\", a);\n(gdb)\na=1\n9               return 0;\n```\n\n接下来执行，可以看到程序输出“`a=1`”，也就是跳过了第一条“`a++;`”语句。\n\n\n\n##### 跳转到指定位置执行\n\n```c\n#include <stdio.h>\n\nvoid fun (int x)\n{\n  if (x < 0)\n    puts (\"error\");\n}\n\nint main (void)\n{\n  int i = 1;\n\n  fun (i--);\n  fun (i--);\n  fun (i--);\n\n  return 0;\n}\n```\n\n当调试程序时，你可能不小心走过了出错的地方：\n\n```\n(gdb) n\n13\t  fun (i--);\n(gdb) \n14\t  fun (i--);\n(gdb) \n15\t  fun (i--);\n(gdb) \nerror\n17\t  return 0;\n```\n\n看起来是在15行，调用fun的时候出错了。常见的办法是在15行设置个断点，然后从头`run`一次。\n\n如果你的环境支持反向执行，那么更好了。\n\n如果不支持，你也可以直接`jump`到15行，再执行一次：\n\n```\n(gdb) b 15\nBreakpoint 2 at 0x40056a: file jump.c, line 15.\n(gdb) j 15\nContinuing at 0x40056a.\n\nBreakpoint 2, main () at jump.c:15\n15\t  fun (i--);\n(gdb) s\nfun (x=-2) at jump.c:5\n5\t  if (x < 0)\n(gdb) n\n6\t    puts (\"error\");\n```\n\n需要注意的是：\n\n1. `jump`命令只改变pc的值，所以改变程序执行可能会出现不同的结果，比如变量i的值\n2. 通过（临时）断点的配合，可以让你的程序跳到指定的位置，并停下来\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Jumping.html#Jumping)\n\n\n\n##### 使用断点命令改变程序的执行\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid drawing (int n)\n{\n  if (n != 0)\n    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n  else\n    puts (\"You win $3000!\");\n}\n\nint main (void)\n{\n  int n;\n\n  srand (time (0));\n  n = rand () % 10;\n  printf (\"Your number is %d\\n\", n);\n  drawing (n);\n\n  return 0;\n}\n```\n\n这个例子程序可能不太好，只是可以用来演示下断点命令的用法：\n\n```\n(gdb) b drawing\nBreakpoint 1 at 0x40064d: file win.c, line 6.\n(gdb) command 1\nType commands for breakpoint(s) 1, one per line.\nEnd with a line saying just \"end\".\n>silent\n>set variable n = 0\n>continue\n>end\n(gdb) r\nStarting program: /home/xmj/tmp/a.out \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nYour number is 6\nYou win $3000!\n[Inferior 1 (process 4134) exited normally]\n```\n\n可以看到，当程序运行到断点处，会自动把变量n的值修改为0，然后继续执行。\n\n如果你在调试一个大程序，重新编译一次会花费很长时间，比如调试编译器的bug，那么你可以用这种方式在gdb中先实验性的修改下试试，而不需要修改源码，重新编译。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Break-Commands.html#Break-Commands)\n\n\n\n##### 修改被调试程序的二进制文件\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid drawing (int n)\n{\n  if (n != 0)\n    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n  else\n    puts (\"You win $3000!\");\n}\n\nint main (void)\n{\n  int n;\n\n  srand (time (0));\n  n = rand () % 10;\n  printf (\"Your number is %d\\n\", n);\n  drawing (n);\n\n  return 0;\n}\n\n\n\n```\n\ngdb不仅可以用来调试程序，还可以修改程序的二进制代码。\n\n缺省情况下，gdb是以只读方式加载程序的。可以通过命令行选项指定为可写：\n\n```\n$ gcc -write ./a.out\n(gdb) show write\nWriting into executable and core files is on.\n```\n\n也可以在gdb中，使用命令设置并重新加载程序：\n\n```\n(gdb) set write on\n(gdb) file ./a.out\n```\n\n接下来，查看反汇编：\n\n```\n(gdb) disassemble /mr drawing \nDump of assembler code for function drawing:\n5\t{\n   0x0000000000400642 <+0>:\t55\tpush   %rbp\n   0x0000000000400643 <+1>:\t48 89 e5\tmov    %rsp,%rbp\n   0x0000000000400646 <+4>:\t48 83 ec 10\tsub    $0x10,%rsp\n   0x000000000040064a <+8>:\t89 7d fc\tmov    %edi,-0x4(%rbp)\n\n6\t  if (n != 0)\n   0x000000000040064d <+11>:\t83 7d fc 00\tcmpl   $0x0,-0x4(%rbp)\n   0x0000000000400651 <+15>:\t74 0c\tje     0x40065f <drawing+29>\n\n7\t    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n   0x0000000000400653 <+17>:\tbf e0 07 40 00\tmov    $0x4007e0,%edi\n   0x0000000000400658 <+22>:\te8 b3 fe ff ff\tcallq  0x400510 <puts@plt>\n   0x000000000040065d <+27>:\teb 0a\tjmp    0x400669 <drawing+39>\n\n8\t  else\n9\t    puts (\"You win $3000!\");\n   0x000000000040065f <+29>:\tbf 12 08 40 00\tmov    $0x400812,%edi\n   0x0000000000400664 <+34>:\te8 a7 fe ff ff\tcallq  0x400510 <puts@plt>\n\n10\t}\n   0x0000000000400669 <+39>:\tc9\tleaveq \n   0x000000000040066a <+40>:\tc3\tretq   \n\nEnd of assembler dump.\n```\n\n修改二进制代码（注意大小端和指令长度）：\n\n```\n(gdb) set variable *(short*)0x400651=0x0ceb\n(gdb) disassemble /mr drawing \nDump of assembler code for function drawing:\n5\t{\n   0x0000000000400642 <+0>:\t55\tpush   %rbp\n   0x0000000000400643 <+1>:\t48 89 e5\tmov    %rsp,%rbp\n   0x0000000000400646 <+4>:\t48 83 ec 10\tsub    $0x10,%rsp\n   0x000000000040064a <+8>:\t89 7d fc\tmov    %edi,-0x4(%rbp)\n\n6\t  if (n != 0)\n   0x000000000040064d <+11>:\t83 7d fc 00\tcmpl   $0x0,-0x4(%rbp)\n   0x0000000000400651 <+15>:\teb 0c\tjmp    0x40065f <drawing+29>\n\n7\t    puts (\"Try again?\\nAll you need is a dollar, and a dream.\");\n   0x0000000000400653 <+17>:\tbf e0 07 40 00\tmov    $0x4007e0,%edi\n   0x0000000000400658 <+22>:\te8 b3 fe ff ff\tcallq  0x400510 <puts@plt>\n   0x000000000040065d <+27>:\teb 0a\tjmp    0x400669 <drawing+39>\n\n8\t  else\n9\t    puts (\"You win $3000!\");\n   0x000000000040065f <+29>:\tbf 12 08 40 00\tmov    $0x400812,%edi\n   0x0000000000400664 <+34>:\te8 a7 fe ff ff\tcallq  0x400510 <puts@plt>\n\n10\t}\n   0x0000000000400669 <+39>:\tc9\tleaveq \n   0x000000000040066a <+40>:\tc3\tretq   \n\nEnd of assembler dump.\n```\n\n可以看到，条件跳转指令“je”已经被改为无条件跳转“jmp”了。\n\n退出，运行一下：\n\n```\n$ ./a.out \nYour number is 2\nYou win $3000!\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Patching.html#Patching)\n\n\n\n#### 13、信号\n\n##### 查看信号处理信息\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGINT, handler);\n        signal(SIGALRM, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`i signals`”命令（或者“`i handle`”命令，`i`是`info`命令缩写）查看gdb如何处理进程收到的信号:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\nSIGINT        Yes       Yes     No              Interrupt\nSIGQUIT       Yes       Yes     Yes             Quit\n......\nSIGALRM       No        No      Yes             Alarm clock\n......\n```\n\n第一项（`Signal`）：标示每个信号。\n第二项（`Stop`）：表示被调试的程序有对应的信号发生时，gdb是否会暂停程序。\n第三项（`Print`）：表示被调试的程序有对应的信号发生时，gdb是否会打印相关信息。\n第四项（`Pass to program`）：gdb是否会把这个信号发给被调试的程序。\n第五项（`Description`）：信号的描述信息。\n\n从上面的输出可以看到，当`SIGINT`信号发生时，gdb会暂停被调试的程序，并打印相关信息，但不会把这个信号发给被调试的程序。而当`SIGALRM`信号发生时，gdb不会暂停被调试的程序，也不打印相关信息，但会把这个信号发给被调试的程序。\n\n启动gdb调试上面的程序，同时另起一个终端，先后发送`SIGINT`和`SIGALRM`信号给被调试的进程，输出如下：\n\n```\nProgram received signal SIGINT, Interrupt.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 14\n```\n\n可以看到收到`SIGINT`时，程序暂停了，也输出了信号信息，但并没有把`SIGINT`信号交由进程处理（程序没有输出）。而收到`SIGALRM`信号时，程序没有暂停，也没有输出信号信息，但把`SIGALRM`信号交由进程处理了（程序打印了输出）。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n##### 信号发生时是否暂停程序\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGHUP, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`handle signal stop/nostop`”命令设置当信号发生时，是否暂停程序的执行，以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行`continue`命令继续程序的执行。\n\n接下来用“`handle SIGHUP nostop`”命令设置当`SIGHUP`信号发生时，gdb不暂停程序，执行如下：\n\n```\n(gdb) handle SIGHUP nostop\nSignal        Stop      Print   Pass to program Description\nSIGHUP        No        Yes     Yes             Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\nReceive signal: 1\n```\n\n可以看到，程序收到`SIGHUP`信号发生时，没有暂停，而是继续执行。\n\n如果想恢复之前的行为，用“`handle SIGHUP stop`”命令即可。需要注意的是，设置`stop`的同时，默认也会设置`print`（关于`print`，请参见[信号发生时是否打印信号信息](https://www.kancloud.cn/wizardforcel/gdb-tips-100/146797)）。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n##### 信号发生时是否打印信号信息\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGHUP, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`handle signal print/noprint`”命令设置当信号发生时，是否打印信号信息，以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行`continue`命令继续程序的执行。\n\n接下来用“`handle SIGHUP noprint`”命令设置当`SIGHUP`信号发生时，gdb不打印信号信息，执行如下：\n\n```\n(gdb) handle SIGHUP noprint \nSignal        Stop      Print   Pass to program Description\nSIGHUP        No        No      Yes             Hangup\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\nReceive signal: 1\n```\n\n需要注意的是，设置`noprint`的同时，默认也会设置`nostop`。可以看到，程序收到`SIGHUP`信号发生时，没有暂停，也没有打印信号信息。而是继续执行。\n\n如果想恢复之前的行为，用“`handle SIGHUP print`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n##### 信号发生时是否把信号给程序处理\n\n```c\n#include <stdio.h>\n#include <signal.h>\n\nvoid handler(int sig);\n\nvoid handler(int sig)\n{\n        signal(sig, handler);\n        printf(\"Receive signal: %d\\n\", sig);\n}\n\nint main(void) {\n        signal(SIGHUP, handler);\n        \n        while (1)\n        {\n                sleep(1);\n        }\n        return 0;\n}\n```\n\n用gdb调试程序时，可以用“`handle signal pass(noignore)/nopass(ignore)`”命令设置当信号发生时，是否把信号丢给程序处理.其中`pass`和`noignore`含义相同，`nopass`和`ignore`含义相同。以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会把信号丢给程序处理。\n\n接下来用“`handle SIGHUP nopass`”命令设置当`SIGHUP`信号发生时，gdb不把信号丢给程序处理，执行如下：\n\n```\n(gdb) handle SIGHUP nopass\nSignal        Stop      Print   Pass to program Description\nSIGHUP        Yes       Yes     No              Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\n```\n\n可以看到，`SIGHUP`信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。\n\n如果想恢复之前的行为，用“`handle SIGHUP pass`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n\n\n##### 给程序发送信号\n\n用gdb调试程序时，可以用“`handle signal pass(noignore)/nopass(ignore)`”命令设置当信号发生时，是否把信号丢给程序处理.其中`pass`和`noignore`含义相同，`nopass`和`ignore`含义相同。以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会把信号丢给程序处理。\n\n接下来用“`handle SIGHUP nopass`”命令设置当`SIGHUP`信号发生时，gdb不把信号丢给程序处理，执行如下：\n\n```\n(gdb) handle SIGHUP nopass\nSignal        Stop      Print   Pass to program Description\nSIGHUP        Yes       Yes     No              Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\n```\n\n可以看到，`SIGHUP`信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。\n\n如果想恢复之前的行为，用“`handle SIGHUP pass`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n用gdb调试程序时，可以用“`handle signal pass(noignore)/nopass(ignore)`”命令设置当信号发生时，是否把信号丢给程序处理.其中`pass`和`noignore`含义相同，`nopass`和`ignore`含义相同。以上面程序为例:\n\n```\n(gdb) i signals \nSignal        Stop      Print   Pass to program Description\n\nSIGHUP        Yes       Yes     Yes             Hangup\n......\n\n(gdb) r\nStarting program: /data1/nan/test \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n\nProgram received signal SIGHUP, Hangup.\n[Switching to Thread 1 (LWP 1)]\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\nReceive signal: 1\n```\n\n可以看到，默认情况下，发生`SIGHUP`信号时，gdb会把信号丢给程序处理。\n\n接下来用“`handle SIGHUP nopass`”命令设置当`SIGHUP`信号发生时，gdb不把信号丢给程序处理，执行如下：\n\n```\n(gdb) handle SIGHUP nopass\nSignal        Stop      Print   Pass to program Description\nSIGHUP        Yes       Yes     No              Hangup\n(gdb) c\nContinuing.\n\nProgram received signal SIGHUP, Hangup.\n0xfeeeae55 in ___nanosleep () from /lib/libc.so.1\n(gdb) c\nContinuing.\n```\n\n可以看到，`SIGHUP`信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。\n\n如果想恢复之前的行为，用“`handle SIGHUP pass`”命令即可。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Signals.html).\n\n\n\n##### 使用“$_siginfo”变量\n\n\n\n\n\n#### 14、共享库\n\n##### 显示共享库链接信息\n\n```c\n#include <hiredis/hiredis.h>\n\nint main(void)\n{\n        char a[1026] = {0};\n        redisContext *c = NULL;\n        void *reply = NULL;\n\n        memset(a, 'a', (sizeof(a) - 1));\n        c = redisConnect(\"127.0.0.1\", 6379);\n        if (NULL != c)\n        {\n              reply = redisCommand(c, \"set 1 %s\", a);\n              freeReplyObject(reply);\n\n              reply = redisCommand(c, \"get 1\");\n              freeReplyObject(reply);\n\n              redisFree(c);\n        }\n        return 0;\n}\n```\n\n使用\"`info sharedlibrary regex`\"命令可以显示程序加载的共享链接库信息，其中`regex`可以是正则表达式，意为显示名字符合`regex`的共享链接库。如果没有`regex`，则列出所有的库。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x109f0: file a.c, line 5.\nStarting program: /export/home/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:5\n5                       char a[1026] = {0};\n(gdb) info sharedlibrary\nFrom        To          Syms Read   Shared Object Library\n0xff3b44a0  0xff3e3490  Yes (*)     /usr/lib/ld.so.1\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n0xff3137f0  0xff31a9f4  Yes (*)     /lib/libsocket.so.1\n0xff215fd4  0xff28545c  Yes (*)     /lib/libnsl.so.1\n0xff0a3a20  0xff14fedc  Yes (*)     /lib/libc.so.1\n0xff320400  0xff3234c8  Yes (*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1\n(*): Shared library is missing debugging information.\n```\n\n可以看到列出所有加载的共享链接库信息，带“`*`”表示库缺少调试信息。\n\n另外也可以使用正则表达式：\n\n```\n(gdb) i sharedlibrary hiredi*\nFrom        To          Syms Read   Shared Object Library\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n```\n\n可以看到只列出了一个库信息。\n参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries).\n\n#### 15、脚本\n\n##### 配置gdb init文件\n\n使用\"`info sharedlibrary regex`\"命令可以显示程序加载的共享链接库信息，其中`regex`可以是正则表达式，意为显示名字符合`regex`的共享链接库。如果没有`regex`，则列出所有的库。以上面程序为例:\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x109f0: file a.c, line 5.\nStarting program: /export/home/nan/a\n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:5\n5                       char a[1026] = {0};\n(gdb) info sharedlibrary\nFrom        To          Syms Read   Shared Object Library\n0xff3b44a0  0xff3e3490  Yes (*)     /usr/lib/ld.so.1\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n0xff3137f0  0xff31a9f4  Yes (*)     /lib/libsocket.so.1\n0xff215fd4  0xff28545c  Yes (*)     /lib/libnsl.so.1\n0xff0a3a20  0xff14fedc  Yes (*)     /lib/libc.so.1\n0xff320400  0xff3234c8  Yes (*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1\n(*): Shared library is missing debugging information.\n```\n\n可以看到列出所有加载的共享链接库信息，带“`*`”表示库缺少调试信息。\n\n另外也可以使用正则表达式：\n\n```\n(gdb) i sharedlibrary hiredi*\nFrom        To          Syms Read   Shared Object Library\n0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11\n```\n\n可以看到只列出了一个库信息。\n参见[gdb手册](https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries).\n\n\n\n##### 按何种方式解析脚本文件\n\n```c\n#include <stdio.h>\n\ntypedef struct\n{\n        int a;\n        int b;\n        int c;\n        int d;\n}ex_st;\n\nint main(void) {\n        ex_st st = {1, 2, 3, 4};\n        printf(\"%d,%d,%d,%d\\n\", st.a, st.b, st.c, st.d);\n        return 0;\n}\n```\n\ngdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。\ngdb用“`set script-extension`”命令来决定按何种格式来解析脚本文件。它可以取3个值：\na）`off`：所有的脚本文件都解析成gdb的命令脚本；\nb）`soft`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；\nc）`strict`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；\n以上面程序为例，进行调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) q\nA debugging session is active.\n\n        Inferior 1 [process 24249] will be killed.\n\nQuit anyway? (y or n) y\n```\n\n可以看到gdb退出时，默认行为会提示用户是否退出。\n\n下面写一个脚本文件（[gdb.py](http://gdb.py/)），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：\n\n```\nset confirm off\n```\n\n再次开始调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) show script-extension\nScript filename extension recognition is \"soft\".\n(gdb) source gdb.py\n  File \"gdb.py\", line 1\n    set confirm off\n              ^\nSyntaxError: invalid syntax\n```\n\n可以看到“`script-extension`”默认值是`soft`，接下来执行“`source gdb.py`”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。\n再执行一次：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) set script-extension off\n(gdb) source gdb.py\n(gdb) q\n[root@linux:~]$\n```\n\n这次把“`script-extension`”值改为`off`，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html)\n\n##### 保存历史命令\n\ngdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。\ngdb用“`set script-extension`”命令来决定按何种格式来解析脚本文件。它可以取3个值：\na）`off`：所有的脚本文件都解析成gdb的命令脚本；\nb）`soft`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；\nc）`strict`：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；\n以上面程序为例，进行调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) q\nA debugging session is active.\n\n        Inferior 1 [process 24249] will be killed.\n\nQuit anyway? (y or n) y\n```\n\n可以看到gdb退出时，默认行为会提示用户是否退出。\n\n下面写一个脚本文件（[gdb.py](http://gdb.py/)），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：\n\n```\nset confirm off\n```\n\n再次开始调试：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) show script-extension\nScript filename extension recognition is \"soft\".\n(gdb) source gdb.py\n  File \"gdb.py\", line 1\n    set confirm off\n              ^\nSyntaxError: invalid syntax\n```\n\n可以看到“`script-extension`”默认值是`soft`，接下来执行“`source gdb.py`”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。\n再执行一次：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x4004cd: file a.c, line 12.\nStarting program: /data2/home/nanxiao/a\n\nTemporary breakpoint 1, main () at a.c:12\n12              ex_st st = {1, 2, 3, 4};\n(gdb) set script-extension off\n(gdb) source gdb.py\n(gdb) q\n[root@linux:~]$\n```\n\n这次把“`script-extension`”值改为`off`，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html)\n\n\n\n#### 16、源文件\n\n##### 设置源文件查找路径\n\n```c\n#include <stdio.h>\n#include <time.h>\n\nint main(void) {\n        time_t now = time(NULL);\n        struct tm local = {0};\n        struct tm gmt = {0};\n\n        localtime_r(&now, &local);\n        gmtime_r(&now, &gmt);\n\n        return 0;\n}\n```\n\n有时gdb不能准确地定位到源文件的位置（比如文件被移走了，等等），此时可以用`directory`命令设置查找源文件的路径。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400560: file a.c, line 5.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:5\n5       a.c: No such file or directory.\n(gdb) directory ../ki/\nSource directories searched: /home/nan/../ki:$cdir:$cwd\n(gdb) n\n6               struct tm local = {0};\n(gdb)\n7               struct tm gmt = {0};\n(gdb)\n9               localtime_r(&now, &local);\n(gdb)\n10              gmtime_r(&now, &gmt);\n(gdb) q\n```\n\n可以看到，使用`directory`（或`dir`)命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。\n\n如果希望在gdb启动时，加载code的位置，避免每次在gdb中再次输入命令，可以使用gdb的`-d` 参数\n\n```shell\ngdb -q a.out -d /search/code/some \n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html).\n\n##### 替换查找源文件的目录\n\n```c\n#include <stdio.h>\n#include <time.h>\n\nint main(void) {\n        time_t now = time(NULL);\n        struct tm local = {0};\n        struct tm gmt = {0};\n\n        localtime_r(&now, &local);\n        gmtime_r(&now, &gmt);\n\n        return 0;\n}\n```\n\n有时调试程序时，源代码文件可能已经移到其它的文件夹了。此时可以用`set substitute-path from to`命令设置新的文件夹（`to`）目录替换旧的（`from`）。以上面程序为例：\n\n```\n(gdb) start\nTemporary breakpoint 1 at 0x400560: file a.c, line 5.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:5\n5       a.c: No such file or directory.\n(gdb) set substitute-path /home/nan /home/ki\n(gdb) n\n6                       struct tm local = {0};\n(gdb)\n7                       struct tm gmt = {0};\n(gdb)\n9                       localtime_r(&now, &local);\n(gdb)\n10                      gmtime_r(&now, &gmt);\n(gdb)\n12                      return 0;\n```\n\n调试时，因为源文件已经移到`/home/ki`这个文件夹下了，所以gdb找不到源文件。使用`set substitute-path /home/nan /home/ki`命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html).\n\n#### 17、图形化界面\n\n##### 进入和退出图形化调试界面\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n启动gdb时指定“`-tui`”参数（例如：`gdb -tui program`），或者运行gdb过程中使用“`Crtl+X+A`”组合键，都可以进入图形化调试界面。以调试上面程序为例：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\nB+>│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   │28                                                                                             │\n   │29                                                                                             │\n   │30                                                                                             │\n   │31                                                                                             │\n   │32                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 22141 In: main                                               Line: 24   PC: 0x40052b\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到，显示了当前的程序的进程号，将要执行的代码行号，`PC`寄存器的值。\n退出图形化调试界面也是用“`Crtl+X+A`”组合键。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI.html).\n\n##### 显示汇编代码窗口\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n使用gdb图形化调试界面时，可以使用“`layout asm`”命令显示汇编代码窗口。以调试上面程序为例：\n\n```\n\t    ┌───────────────────────────────────────────────────────────────────────────────────────────────┐\n  >│0x40052b <main+4>               callq  0x4004f3 <fun2>                                         │\n   │0x400530 <main+9>               mov    $0x0,%eax                                               │\n   │0x400535 <main+14>              leaveq                                                         │\n   │0x400536 <main+15>              retq                                                           │\n   │0x400537                        nop                                                            │\n   │0x400538                        nop                                                            │\n   │0x400539                        nop                                                            │\n   │0x40053a                        nop                                                            │\n   │0x40053b                        nop                                                            │\n   │0x40053c                        nop                                                            │\n   │0x40053d                        nop                                                            │\n   │0x40053e                        nop                                                            │\n   │0x40053f                        nop                                                            │\n   │0x400540 <__libc_csu_fini>      repz retq                                                      │\n   │0x400542                        data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)          │\n   │0x400550 <__libc_csu_init>      mov    %rbp,-0x28(%rsp)                                        │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 44658 In: main                                               Line: 24   PC: 0x40052b\n\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到，显示了当前的程序的汇编代码。\n如果既想显示源代码，又想显示汇编代码，可以使用“`layout split`”命令：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n  >│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   │28                                                                                             │\n   │29                                                                                             │\n   │30                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\n  >│0x40052b <main+4>       callq  0x4004f3 <fun2>                                                 │\n   │0x400530 <main+9>       mov    $0x0,%eax                                                       │\n   │0x400535 <main+14>      leaveq                                                                 │\n   │0x400536 <main+15>      retq                                                                   │\n   │0x400537                nop                                                                    │\n   │0x400538                nop                                                                    │\n   │0x400539                nop                                                                    │\n   │0x40053a                nop                                                                    │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 44658 In: main                                               Line: 24   PC: 0x40052b\n\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到上面显示的是源代码，下面显示的是汇编代码。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html).\n\n##### 显示寄存器窗口\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n使用gdb图形化调试界面时，可以使用“`layout regs`”命令显示寄存器窗口。以调试上面程序为例：\n\n```\n┌──Register group: general─────────────────────────────────────────────────────────────────────────┐\n│rax            0x34e4590f60     227169341280     rbx            0x0      0                        │\n│rcx            0x0      0                        rdx            0x7fffffffe4b8   140737488348344  │\n│rsi            0x7fffffffe4a8   140737488348328  rdi            0x1      1                        │\n│rbp            0x7fffffffe3c0   0x7fffffffe3c0   rsp            0x7fffffffe3c0   0x7fffffffe3c0   │\n│r8             0x34e458f300     227169334016     r9             0x34e3a0e9f0     227157273072     │\n│r10            0x7fffffffe210   140737488347664  r11            0x34e421ec20     227165727776     │\n│r12            0x4003e0 4195296                  r13            0x7fffffffe4a0   140737488348320  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n  >│24              fun2();                                                                        │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\nReading symbols from a...done.\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb)\n```\n\n可以看到，显示了通用寄存器的内容。\n如果想查看浮点寄存器，可以使用“`tui reg float`”命令：\n\n```\n┌──Register group: float───────────────────────────────────────────────────────────────────────────┐\n│st0            0        (raw 0x00000000000000000000)                                              │\n│st1            0        (raw 0x00000000000000000000)                                              │\n│st2            0        (raw 0x00000000000000000000)                                              │\n│st3            0        (raw 0x00000000000000000000)                                              │\n│st4            0        (raw 0x00000000000000000000)                                              │\n│st5            0        (raw 0x00000000000000000000)                                              │\n│st6            0        (raw 0x00000000000000000000)                                              │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │16              fun1();                                                                        │\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb) tui reg float\n```\n\n“`tui reg system`”命令显示系统寄存器：\n\n```\n┌──Register group: system──────────────────────────────────────────────────────────────────────────┐\n│orig_rax       0xffffffffffffffff       -1                                                        │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n│                                                                                                  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │16              fun1();                                                                        │\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\n\nTemporary breakpoint 1, main () at a.c:24\n(gdb) tui reg system\n(gdb)\n```\n\n想切换回显示通用寄存器内容，可以使用“`tui reg general`”命令：\n\n```\n┌──Register group: general─────────────────────────────────────────────────────────────────────────┐\n│rax            0x34e4590f60     227169341280     rbx            0x0      0                        │\n│rcx            0x0      0                        rdx            0x7fffffffe4b8   140737488348344  │\n│rsi            0x7fffffffe4a8   140737488348328  rdi            0x1      1                        │\n│rbp            0x7fffffffe3c0   0x7fffffffe3c0   rsp            0x7fffffffe3c0   0x7fffffffe3c0   │\n│r8             0x34e458f300     227169334016     r9             0x34e3a0e9f0     227157273072     │\n│r10            0x7fffffffe210   140737488347664  r11            0x34e421ec20     227165727776     │\n│r12            0x4003e0 4195296                  r13            0x7fffffffe4a0   140737488348320  │\n└──────────────────────────────────────────────────────────────────────────────────────────────────┘\n   │16              fun1();                                                                        │\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 12552 In: main                                               Line: 24   PC: 0x40052b\n(gdb) tui reg general\n(gdb)\n```\n\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html).\n\n##### 调整窗口大小\n\n```c\n#include <stdio.h>\n\nvoid fun1(void)\n{\n        int i = 0;\n\n        i++;\n        i = i * 2;\n        printf(\"%d\\n\", i);\n}\n\nvoid fun2(void)\n{\n        int j = 0;\n\n        fun1();\n        j++;\n        j = j * 2;\n        printf(\"%d\\n\", j);\n}\n\nint main(void)\n{\n        fun2();\n        return 0;\n}\n```\n\n使用gdb图形化调试界面时，可以使用“`winheight <win_name> [+ | -]count`”命令调整窗口大小（`winheight`缩写为`win`。`win_name`可以是`src`、`cmd`、`asm`和`regs`）。以调试上面程序为例，这是原始的`src`窗口大小：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21      int main(void)                                                                        22\n   │23      {                                                                                      │\n   │24              fun2();                                                                        │\nB+>│25                                                                                             │\n   │                return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                            32\n   │                                                                                               │\n   │                                                                                               │\n   │                                                                                               │\n   │                                                                                               │\n   │                                                                                               │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 9667 In: main                                                Line: 24   PC: 0x40052b\nUsage: winheight <win_name> [+ | -] <#lines>\n(gdb) start\nTemporary breakpoint 1 at 0x40052b: file a.c, line 24.\nStarting program: /home/nan/a\n\nTemporary breakpoint 1, main () at a.c:24\n```\n\n执行“`winheight src -5`”命令后：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n  >│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 9667 In: main                                               Line: 24   PC: 0x40052b\nUsage: winheight <win_name> [+ | -] <#lines>\n(gdb)\n```\n\n可以看到窗口变小了。\n接着执行“`winheight src +5`”命令：\n\n```\n   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐\n   │17              j++;                                                                           │\n   │18              j = j * 2;                                                                     │\n   │19              printf(\"%d\\n\", j);                                                             │\n   │20      }                                                                                      │\n   │21                                                                                             │\n   │22      int main(void)                                                                         │\n   │23      {                                                                                      │\n  >│24              fun2();                                                                        │\n   │25              return 0;                                                                      │\n   │26      }                                                                                      │\n   │27                                                                                             │\n   │28                                                                                             │\n   │29                                                                                             │\n   │30                                                                                             │\n   │31                                                                                             │\n   │32                                                                                             │\n   └───────────────────────────────────────────────────────────────────────────────────────────────┘\nnative process 9667 In: main                                               Line: 24   PC: 0x40052b\nUsage: winheight <win_name> [+ | -] <#lines>\n(gdb)\n```\n\n可以看到窗口恢复了原样。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html).\n\n#### 18、其他\n\n##### 命令行选项的格式\n\ngdb的帮助信息和在线文档对于长选项的形式使用了不同的风格。你可能有点迷惑，gdb的长选项究竟应该是“-”，还是“--”？\n\n是的，这两种方式都可以。例如：\n\n```\n$ gdb -help\n$ gdb --help\n\n$ gdb -args ./a.out a b c\n$ gdb --args ./a.out a b c\n```\n\n好吧，使用短的。\n\n\n\n##### 支持预处理器宏信息\n\n```c\n#include <stdio.h>\n\n#define NAME \"Joe\"\n\nint main()\n{\n  printf (\"Hello %s\\n\", NAME);\n  return 0;\n}\n```\n\n使用`gcc -g`编译生成的程序，是不包含预处理器宏信息的：\n\n```\n(gdb) p NAME\nNo symbol \"NAME\" in current context.\n```\n\n如果想在gdb中查看宏信息，可以使用`gcc -g3`进行编译：\n\n```\n(gdb) p NAME\n$1 = \"Joe\"\n```\n\n关于预处理器宏的命令，参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Macros.html#Macros)\n\n##### 使用命令的缩写形式\n\n在gdb中，你不用必须输入完整的命令，只需命令的（前）几个字母即可。规则是，只要这个缩写不会和其它命令有歧义（注，是否有歧义，这个规则从文档上看不出，看起来需要查看gdb的源代码，或者在实际使用中进行总结）。也可以使用tab键进行命令补全。\n\n其中许多常用命令只使用第一个字母就可以，比如：\n\n```\nb -> break\nc -> continue\nd -> delete\nf -> frame\ni -> info\nj -> jump\nl -> list\nn -> next\np -> print\nr -> run\ns -> step\nu -> until\n```\n\n也有使用两个或几个字母的，比如：\n\n```\naw -> awatch\nbt -> backtrace\ndir -> directory\ndisas -> disassemble\nfin -> finish\nig -> ignore\nni -> nexti\nrw -> rwatch\nsi -> stepi\ntb -> tbreak\nwa -> watch\nwin -> winheight\n```\n\n另外，如果直接按回车键，会重复执行上一次的命令。\n\n\n\n##### 在GDB中执行shell命令和make\n\n你可以不离开gdb，直接执行shell命令，比如：\n\n```\n(gdb) shell ls\n```\n\n或\n\n```\n(gdb) !ls\n```\n\n这里，\"!\"和命令之间不需要有空格（即，有也成）。\n\n特别是当你在构建环境(build目录)下调试程序的时候，可以直接运行make：\n\n```\n(gdb) make CFLAGS=\"-g -O0\"\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Shell-Commands.html#Shell-Commands)\n\n\n\n##### 在GDB中执行cd和pwd命令\n\n是的，gdb确实支持这两个命令，虽然我没有想到它们有什么特别的用处。\n\n也许，当你启动gdb之后，发现需要切换工作目录，但又不想退出gdb的时候：\n\n```\n(gdb) pwd\nWorking directory /home/xmj.\n(gdb) cd tmp\nWorking directory /home/xmj/tmp.\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Working-Directory.html#Working-Directory)\n\n\n\n##### 设置命令提示符\n\n\n\n```shell\n$ gdb -q `which gdb`\nReading symbols from /home/xmj/install/binutils-gdb-git/bin/gdb...done.\n(gdb) r -q\nStarting program: /home/xmj/install/binutils-gdb-git/bin/gdb -q\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n(gdb)\n\n\n```\n\n 当你用gdb来调试gdb的时候，通过设置命令提示符，可以帮助你区分这两个gdb：\n\n```\n$ gdb -q `which gdb`\nReading symbols from /home/xmj/install/binutils-gdb-git/bin/gdb...done.\n(gdb) set prompt (main gdb) \n(main gdb) r -q\nStarting program: /home/xmj/install/binutils-gdb-git/bin/gdb -q\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n(gdb) \n```\n\n注意，这里`set prompt (main gdb)`结尾处是有一个空格的。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Prompt.html#Prompt)\n\n\n\n##### 设置被调试程序的参数\n\n\n\n可以在gdb启动时，通过选项指定被调试程序的参数，例如：\n\n```\n$ gdb -args ./a.out a b c\n```\n\n也可以在gdb中，通过命令来设置，例如：\n\n```\n(gdb) set args a b c\n(gdb) show args\nArgument list to give program being debugged when it is started is \"a b c\".\n```\n\n也可以在运行程序时，直接指定：\n\n```\n(gdb) r a b\nStarting program: /home/xmj/tmp/a.out a b\n(gdb) show args\nArgument list to give program being debugged when it is started is \"a b\".\n(gdb) r\nStarting program: /home/xmj/tmp/a.out a b \n```\n\n可以看出，参数已经被保存了，下次运行时直接运行`run`命令，即可。\n\n有意的是，如果我接下来，想让参数为空，该怎么办？是的，直接：\n\n```\n(gdb) set args\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Arguments.html#Arguments)\n\n\n\n##### 设置被调试程序的环境变量\n\n```\n(gdb) u 309\nWarning: couldn't activate thread debugging using libthread_db: Cannot find new threads: generic error\nWarning: couldn't activate thread debugging using libthread_db: Cannot find new threads: generic error\nwarning: Unable to find libthread_db matching inferior's thread library, thread debugging will not be available.\n```\n\n\n\n在gdb中，可以通过命令`set env varname=value`来设置被调试程序的环境变量。对于上面的例子，网上可以搜到一些解决方法，其中一种方法就是设置LD_PRELOAD环境变量：\n\n```\nset env LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0\n```\n\n注意，这个实际路径在不同的机器环境下可能不一样。把这个命令加到~/.gdbinit文件中，就可以了。\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Environment.html#Environment)\n\n\n\n##### 得到命令的帮助信息\n\n使用`help`命令可以得到gdb的命令帮助信息：\n\n（1）`help`命令不加任何参数会得到命令的分类：\n\n```\n(gdb) help\nList of classes of commands:\n\naliases -- Aliases of other commands\nbreakpoints -- Making program stop at certain points\ndata -- Examining data\nfiles -- Specifying and examining files\ninternals -- Maintenance commands\nobscure -- Obscure features\nrunning -- Running the program\nstack -- Examining the stack\nstatus -- Status inquiries\nsupport -- Support facilities\ntracepoints -- Tracing of program execution without stopping the program\nuser-defined -- User-defined commands\n\nType \"help\" followed by a class name for a list of commands in that class.\nType \"help all\" for the list of all commands.\nType \"help\" followed by command name for full documentation.\nType \"apropos word\" to search for commands related to \"word\".\nCommand name abbreviations are allowed if unambiguous.\n```\n\n（2）当输入`help class`命令时，可以得到这个类别下所有命令的列表和命令功能：\n\n```\n(gdb) help data\nExamining data.\n\nList of commands:\n\nappend -- Append target code/data to a local file\nappend binary -- Append target code/data to a raw binary file\nappend binary memory -- Append contents of memory to a raw binary file\nappend binary value -- Append the value of an expression to a raw binary file\nappend memory -- Append contents of memory to a raw binary file\nappend value -- Append the value of an expression to a raw binary file\ncall -- Call a function in the program\ndisassemble -- Disassemble a specified section of memory\ndisplay -- Print value of expression EXP each time the program stops\ndump -- Dump target code/data to a local file\ndump binary -- Write target code/data to a raw binary file\ndump binary memory -- Write contents of memory to a raw binary file\ndump binary value -- Write the value of an expression to a raw binary file\n......\n```\n\n（3）也可以用`help command`命令得到某一个具体命令的用法：\n\n```\n(gdb) help mem\nDefine attributes for memory region or reset memory region handling totarget-based.\nUsage: mem auto\n   mem <lo addr> <hi addr> [<mode> <width> <cache>],\nwhere <mode>  may be rw (read/write), ro (read-only) or wo (write-only),\n  <width> may be 8, 16, 32, or 64, and\n  <cache> may be cache or nocache\n```\n\n（4）用`apropos regexp`命令查找所有符合`regexp`正则表达式的命令信息：\n\n```\n(gdb) apropos set\nawatch -- Set a watchpoint for an expression\nb -- Set breakpoint at specified line or function\nbr -- Set breakpoint at specified line or function\nbre -- Set breakpoint at specified line or function\nbrea -- Set breakpoint at specified line or function\n......\n```\n\n详情参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Help.html)\n\n\n\n##### 记录执行DGB的过程\n\n```c\n#include <stdio.h>\n#include <wchar.h>\n\nint main(void)\n{\n        char str1[] = \"abcd\";\n        wchar_t str2[] = L\"abcd\";\n        \n        return 0;\n}\n```\n\n用gdb调试程序时，可以使用“`set logging on`”命令把执行gdb的过程记录下来，方便以后自己参考或是别人帮忙分析。默认的日志文件是“`gdb.txt`”，也可以用“`set logging file file`”改成别的名字。以上面程序为例：\n\n```\n(gdb) set logging file log.txt\n(gdb) set logging on\nCopying output to log.txt.\n(gdb) start\nTemporary breakpoint 1 at 0x8050abe: file a.c, line 6.\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n(gdb) n\n7               wchar_t str2[] = L\"abcd\";\n(gdb) x/s str1\n0x804779f:      \"abcd\"\n(gdb) n       \n9               return 0;\n(gdb) x/ws str2\n0x8047788:      U\"abcd\"\n(gdb) q\nA debugging session is active.\n\n        Inferior 1 [process 9931    ] will be killed.\n\nQuit anyway? (y or n) y\n```\n\n执行完后，查看log.txt文件：\n\n```\nbash-3.2# cat log.txt \nTemporary breakpoint 1 at 0x8050abe: file a.c, line 6.\nStarting program: /data1/nan/a \n[Thread debugging using libthread_db enabled]\n[New Thread 1 (LWP 1)]\n[Switching to Thread 1 (LWP 1)]\n\nTemporary breakpoint 1, main () at a.c:6\n6               char str1[] = \"abcd\";\n7               wchar_t str2[] = L\"abcd\";\n0x804779f:      \"abcd\"\n9               return 0;\n0x8047788:      U\"abcd\"\nA debugging session is active.\n\n        Inferior 1 [process 9931    ] will be killed.\n\nQuit anyway? (y or n)\n```\n\n可以看到log.txt详细地记录了gdb的执行过程。\n\n此外“`set logging overwrite on`”命令可以让输出覆盖之前的日志文件；而 “`set logging redirect on`”命令会让gdb的日志不会打印在终端。\n参见[gdb手册](https://sourceware.org/gdb/onlinedocs/gdb/Logging-Output.html).\n\n\n\n\n\n\n\n\n\n#### 参考\n\n[^1]: <100个GDB小技巧>\n\n[直接执行函数 · 100个gdb小技巧 · 看云 (kancloud.cn)](https://www.kancloud.cn/wizardforcel/gdb-tips-100/146720)\n\n<!--[^2] : <100个GDB小技巧>-->\n\n开源开发工具博客：[Welcome to OSDT Blog | 开源开发工具技术博客（OSDT Blog） (hellogcc.github.io)](https://hellogcc.github.io/)","slug":"编程笔记/GDB使用笔记","published":1,"_id":"clw7v6797001ke8lbcs0v5brm","layout":"post","photos":[],"link":"","content":"<p>GDB笔记</p>\n<p>本篇博客作为GDB的使用方法记录，方便使用时查找，不不定期更新。文中使用方法均时基于WSL:Ubuntu-20.4.如果想了解更多GDB至少，可以查看GDB官方手册：<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/\">Top (Debugging with GDB) (sourceware.org)</a></p>\n<p><a href=\"https://sourceware.org/gdb/onlinedocs/\">Documentation for GDB version 13.2.90.20230625-git (sourceware.org)</a></p>\n<h4 id=\"1、GDB介绍：\"><a href=\"#1、GDB介绍：\" class=\"headerlink\" title=\"1、GDB介绍：\"></a>1、GDB介绍：</h4><p>​        GDB是GNU调试器，一个用于C和C++等编程语言的开源调试器。GDB支持多种操作系统和编程语言，并提供了丰富的调试功能，如断点、单步执行、变量查看等。当然如果你要开始看这个教程了，那么就必然知道他是用来干啥的。</p>\n<h4 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install gdb</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、基本操作\"><a href=\"#3、基本操作\" class=\"headerlink\" title=\"3、基本操作\"></a>3、基本操作</h4><h5 id=\"进入GDB界面：\"><a href=\"#进入GDB界面：\" class=\"headerlink\" title=\"进入GDB界面：\"></a>进入GDB界面：</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@Noodles:/usr1/code# gdb<br>GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1<br>Copyright (C) 2022 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type &quot;show copying&quot; and &quot;show warranty&quot; for details.<br>This GDB was configured as &quot;x86_64-linux-gnu&quot;.<br>Type &quot;show configuration&quot; for configuration details.<br>For bug reporting instructions, please see:<br>&lt;https://www.gnu.org/software/gdb/bugs/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For help, type &quot;help&quot;.<br>Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.<br></code></pre></td></tr></table></figure>\n\n<p>进入GDB界面不显示提示信息：</p>\n<p>如果不想显示这个信息，则可以使用<code>-q</code>选项把提示信息关掉:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">gdb -q</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>你可以在~&#x2F;.bashrc中，为gdb设置一个别名：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">alias gdb=&quot;gdb -q&quot;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"信息查询\"><a href=\"#信息查询\" class=\"headerlink\" title=\"信息查询\"></a>信息查询</h5><h6 id=\"查询版本信息\"><a href=\"#查询版本信息\" class=\"headerlink\" title=\"查询版本信息\"></a>查询版本信息</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">查询版本信息：(gdb) show version<br>(gdb) show version<br>GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1<br>Copyright (C) 2022 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type &quot;show copying&quot; and &quot;show warranty&quot; for details.<br>This GDB was configured as &quot;x86_64-linux-gnu&quot;.<br>Type &quot;show configuration&quot; for configuration details.<br>For bug reporting instructions, please see:<br>&lt;https://www.gnu.org/software/gdb/bugs/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For help, type &quot;help&quot;.<br>Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">版权相关信息：(gdb) show copying或者<br>(gdb) show copying<br>                    GNU GENERAL PUBLIC LICENSE<br>                       Version 3, 29 June 2007<br><br> Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br> Everyone is permitted to copy and distribute verbatim copies<br> of this license document, but changing it is not allowed.<br><br>                            Preamble<br><br>  The GNU General Public License is a free, copyleft license for<br>software and other kinds of works.<br><br>  The licenses for most software and other practical works are designed<br>to take away your freedom to share and change the works.  By contrast,<br>the GNU General Public License is intended to guarantee your freedom to<br>share and change all versions of a program--to make sure it remains free<br>software for all its users.  We, the Free Software Foundation, use the<br>GNU General Public License for most of our software; it applies also to<br>any other work released this way by its authors.  You can apply it to<br>your programs, too.<br><br>(gdb) show warranty<br>  15. Disclaimer of Warranty.<br><br>  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br>APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br>HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY<br>OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br>THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br>PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br>IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br>ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br><br>  16. Limitation of Liability.<br><br>  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br>WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br>THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br>GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br>USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br>DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br>PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br>EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br>SUCH DAMAGES.<br><br></code></pre></td></tr></table></figure>\n\n<h6 id=\"输出信息多的时候不暂停输出：\"><a href=\"#输出信息多的时候不暂停输出：\" class=\"headerlink\" title=\"输出信息多的时候不暂停输出：\"></a>输出信息多的时候不暂停输出：</h6><p>当GDB输出信息较多时，会暂停输出，并打印提示信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--Type &lt;RET&gt; for more, q to quit, c to continue without paging--qq<br></code></pre></td></tr></table></figure>\n\n<p>如果想要全部输出不暂停，可以使用</p>\n<p>“set pagination off<code>”或者“</code>set height 0&#96;”命令。这样gdb就会全部输出，不会暂停。</p>\n<h5 id=\"进入GDB\"><a href=\"#进入GDB\" class=\"headerlink\" title=\"进入GDB\"></a>进入GDB</h5><p>编译文件，生成a.out go</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@Noodles:/usr1/code# gdb a.out <br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、函数相关\"><a href=\"#4、函数相关\" class=\"headerlink\" title=\"4、函数相关\"></a>4、函数相关</h4><h5 id=\"列出函数名称：“info-functions”\"><a href=\"#列出函数名称：“info-functions”\" class=\"headerlink\" title=\"列出函数名称：“info functions”\"></a>列出函数名称：“<code>info functions</code>”</h5><p>使用gdb调试时，使用“<code>info functions</code>”命令可以列出可执行文件的所有函数名称</p>\n<p>以下代码为例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试时，使用“<code>info functions</code>”命令可以列出可执行文件的所有函数名称。如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) info functions<br>All defined functions:<br><br>File a.c:<br>int main(void);<br>void *thread_func(void *);<br><br>Non-debugging symbols:<br>0x0805079c  _PROCEDURE_LINKAGE_TABLE_<br>0x080507ac  _cleanup@plt<br>0x080507bc  atexit<br>0x080507bc  atexit@plt<br>0x080507cc  __fpstart<br>0x080507cc  __fpstart@plt<br>0x080507dc  exit@plt<br>0x080507ec  __deregister_frame_info_bases@plt<br>0x080507fc  __register_frame_info_bases@plt<br>0x0805080c  _Jv_RegisterClasses@plt<br>0x0805081c  sleep<br>0x0805081c  sleep@plt<br>0x0805082c  pthread_create@plt<br>0x0805083c  _start<br>0x080508b4  _mcount<br>0x080508b8  __do_global_dtors_aux<br>0x08050914  frame_dummy<br>0x080509f4  __do_global_ctors_aux<br>0x08050a24  _init<br>0x08050a31  _fini<br></code></pre></td></tr></table></figure>\n\n<p>另外这个命令也支持正则表达式：“<code>info functions regex</code>”，这样只会列出符合正则表达式的函数名称，例如：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">(gdb) info functions thre*<br>All functions matching regular expression <span class=\"hljs-string\">&quot;thre*&quot;</span>:<br><br><span class=\"hljs-built_in\">File</span> a.c:<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *)</span></span>;<br><br>Non-debugging symbols:<br><span class=\"hljs-number\">0x0805082c</span>  pthread_create@plt<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb只会列出名字里包含“<code>thre</code>”的函数。</p>\n<h6 id=\"进入或者跳过函数：step、set-step-mode-on\"><a href=\"#进入或者跳过函数：step、set-step-mode-on\" class=\"headerlink\" title=\"进入或者跳过函数：step、set step-mode on\"></a>进入或者跳过函数：step、set step-mode on</h6><p>使用GDB调试的时候，使用step命令（s）进入函数，如果不想进入某个函数可以直接使用next命令（缩写为n）不进入函数，gdb会等函数执行完，再显示下一行要执行的程序代码。</p>\n<p>默认情况下，gdb不会进入不带调试信息的函数。可以执行“set step-mode on”命令，这样gdb就不会跳过没有调试信息的函数。</p>\n<h6 id=\"退出正在调试的函数：“finish”或者“return”\"><a href=\"#退出正在调试的函数：“finish”或者“return”\" class=\"headerlink\" title=\"退出正在调试的函数：“finish”或者“return”\"></a>退出正在调试的函数：“<code>finish</code>”或者“<code>return</code>”</h6><p>当单步调试一个函数时，如果不想继续跟踪下去了，可以有两种方式退出。</p>\n<p>第一种用“<code>finish</code>”命令，这样函数会继续执行完，并且打印返回值，然后等待输入接下来的命令。</p>\n<p>第二种用“<code>return</code>”命令，这样函数不会继续执行下面的语句，而是直接返回。也可以用“<code>return expression</code>”命令指定函数的返回值</p>\n<h6 id=\"直接执行函数：call”或“print\"><a href=\"#直接执行函数：call”或“print\" class=\"headerlink\" title=\"直接执行函数：call”或“print\"></a>直接执行函数：<code>call</code>”或“<code>print</code></h6><p>使用gdb调试程序时，可以使用“<code>call</code>”或“<code>print</code>”命令直接调用函数执行</p>\n<h6 id=\"打印函数堆栈信息：i-frame\"><a href=\"#打印函数堆栈信息：i-frame\" class=\"headerlink\" title=\"打印函数堆栈信息：i frame\"></a>打印函数堆栈信息：i frame</h6><p>使用gdb调试程序时，可以使用“<code>i frame</code>”命令（<code>i</code>是<code>info</code>命令缩写）显示函数堆栈帧信息。执行该命令，会输出函数的堆栈地址，指令寄存器的值，局部变量地址等信息，可以对照汇编指令分析函数的栈信息。</p>\n<h6 id=\"打印尾调用栈帧信息：\"><a href=\"#打印尾调用栈帧信息：\" class=\"headerlink\" title=\"打印尾调用栈帧信息：\"></a>打印尾调用栈帧信息：</h6><p>当一个函数最后一条指令是调用另外一个函数时，开启优化选项的编译器常常以最后被调用的函数返回值作为调用者的返回值，这称之为“尾调用（Tail call）”。以上面程序为例，编译程序（使用‘-O’）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gcc -g -O -o test test.c<br></code></pre></td></tr></table></figure>\n\n<p>查看<code>main</code>函数汇编代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) disassemble main<br>Dump of assembler code for function main:<br>0x0000000000400565 &lt;+0&gt;:     sub    $0x8,%rsp<br>0x0000000000400569 &lt;+4&gt;:     callq  0x400536 &lt;a&gt;<br>0x000000000040056e &lt;+9&gt;:     mov    $0x0,%eax<br>0x0000000000400573 &lt;+14&gt;:    add    $0x8,%rsp<br>0x0000000000400577 &lt;+18&gt;:    retq<br></code></pre></td></tr></table></figure>\n\n<p>可以看到<code>main</code>函数直接调用了函数<code>a</code>，根本看不到函数<code>b</code>和函数<code>c</code>的影子。</p>\n<p>在函数<code>a</code>入口处打上断点，程序停止后，打印堆栈帧信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) i frame<br>Stack level 0, frame at 0x7fffffffe590:<br> rip = 0x400536 in a (test.c:4); saved rip = 0x40056e<br> called by frame at 0x7fffffffe5a0<br> source language c.<br> Arglist at 0x7fffffffe580, args:<br> Locals at 0x7fffffffe580, Previous frame&#x27;s sp is 0x7fffffffe590<br> Saved registers:<br>  rip at 0x7fffffffe588<br></code></pre></td></tr></table></figure>\n\n<p>看不到尾调用的相关信息。</p>\n<p>可以设置“<code>debug entry-values</code>”选项为非0的值，这样除了输出正常的函数堆栈帧信息以外，还可以输出尾调用的相关信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) set debug entry-values 1<br>(gdb) b test.c:4<br>Breakpoint 1 at 0x400536: file test.c, line 4.<br>(gdb) r<br>Starting program: /home/nanxiao/test<br><br>Breakpoint 1, a () at test.c:4<br>4       &#123;<br>(gdb) i frame<br>tailcall: initial:<br>Stack level 0, frame at 0x7fffffffe590:<br> rip = 0x400536 in a (test.c:4); saved rip = 0x40056e<br> called by frame at 0x7fffffffe5a0<br> source language c.<br> Arglist at 0x7fffffffe580, args:<br> Locals at 0x7fffffffe580, Previous frame&#x27;s sp is 0x7fffffffe590<br> Saved registers:<br>  rip at 0x7fffffffe588<br></code></pre></td></tr></table></figure>\n\n<p>可以看到输出了“<code>tailcall: initial:</code>”信息。</p>\n<h6 id=\"选择函数堆栈帧：“frame-n”\"><a href=\"#选择函数堆栈帧：“frame-n”\" class=\"headerlink\" title=\"选择函数堆栈帧：“frame n”\"></a>选择函数堆栈帧：“<code>frame n</code>”</h6><p>用gdb调试程序时，当程序暂停后，可以用“<code>frame n</code>”命令选择函数堆栈帧，其中<code>n</code>是层数。用gdb调试程序时，当程序暂停后，可以用“<code>frame n</code>”命令选择函数堆栈帧，其中<code>n</code>是层数。</p>\n<p>备注，此处需要加入例子说明</p>\n<p>用gdb调试程序时，当程序暂停后，可以用“<code>frame n</code>”命令选择函数堆栈帧，其中<code>n</code>是层数。</p>\n<h6 id=\"上下切换函数堆栈\"><a href=\"#上下切换函数堆栈\" class=\"headerlink\" title=\"上下切换函数堆栈\"></a>上下切换函数堆栈</h6><p>用gdb调试程序时，当程序暂停后，可以用“<code>up n</code>”或“<code>down n</code>”命令向上或向下选择函数堆栈帧，其中<code>n</code>是层数。</p>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func1</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func2</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，当程序暂停后，可以用“<code>up n</code>”或“<code>down n</code>”命令向上或向下选择函数堆栈帧，其中<code>n</code>是层数。以上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) b <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40053d</span>: file <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">5</span>.<br>(gdb) r<br>Starting program: /home/nanxiao/<span class=\"hljs-keyword\">test</span><br><br>Breakpoint <span class=\"hljs-number\">1</span>, func1 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>               return <span class=\"hljs-number\">2</span> * a<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-keyword\">bt</span><br>#<span class=\"hljs-number\">0</span>  func1 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0x0000000000400560</span> <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0x000000000040059e</span> <span class=\"hljs-keyword\">in</span> main () <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb) frame <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br><span class=\"hljs-number\">18</span>              c = <span class=\"hljs-number\">2</span> * func2(a)<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-meta\">up</span> <span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0x000000000040059e</span> <span class=\"hljs-keyword\">in</span> main () <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br><span class=\"hljs-number\">24</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, func3(<span class=\"hljs-number\">10</span>))<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-meta\">down</span> <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0x0000000000400560</span> <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>              c = <span class=\"hljs-number\">2</span> * func1(a)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序断住后，先执行“<code>frame 2</code>”命令，切换到<code>fun3</code>函数。接着执行“<code>up 1</code>”命令，此时会切换到<code>main</code>函数，也就是会往外层的堆栈帧移动一层。反之，当执行“<code>down 2</code>”命令后，又会向内层堆栈帧移动二层。如果不指定<code>n</code>，则<code>n</code>默认为<code>1</code>.</p>\n<p>还有“<code>up-silently n</code>”和“<code>down-silently n</code>”这两个命令，与“<code>up n</code>”和“<code>down n</code>”命令区别在于，切换堆栈帧后，不会打印信息，仍以上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) <span class=\"hljs-meta\">up</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br><span class=\"hljs-number\">18</span>              c = <span class=\"hljs-number\">2</span> * func2(a)<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-keyword\">bt</span><br>#<span class=\"hljs-number\">0</span>  func1 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0x0000000000400560</span> <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0x000000000040059e</span> <span class=\"hljs-keyword\">in</span> main () <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb) <span class=\"hljs-meta\">up</span>-silently<br>(gdb) i frame<br>Stack level <span class=\"hljs-number\">3</span>, frame <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe5a0</span>:<br> <span class=\"hljs-built_in\">rip</span> = <span class=\"hljs-number\">0x40059e</span> <span class=\"hljs-keyword\">in</span> main (<span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span>)<span class=\"hljs-comment\">; saved rip = 0x7ffff7a35ec5</span><br> caller of frame <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe590</span><br> source language c.<br> Arglist <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe590</span>, args:<br> Locals <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe590</span>, Previous frame<span class=\"hljs-string\">&#x27;s sp is 0x7fffffffe5a0</span><br><span class=\"hljs-string\"> Saved registers:</span><br><span class=\"hljs-string\">  rbp at 0x7fffffffe590, rip at 0x7fffffffe598</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到从<code>func3</code>切换到<code>main</code>函数堆栈帧时，并没有打印出相关信息。</p>\n<h4 id=\"5、断点：b\"><a href=\"#5、断点：b\" class=\"headerlink\" title=\"5、断点：b\"></a>5、断点：b</h4><h6 id=\"在匿名空间设置断点\"><a href=\"#在匿名空间设置断点\" class=\"headerlink\" title=\"在匿名空间设置断点\"></a>在匿名空间设置断点</h6><p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">namespace</span> Foo<br>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">  </span>&#123;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">namespace</span><br>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">  </span>&#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要对namespace Foo中的foo函数设置断点，可以使用如下命令：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">(gdb) b Foo::foo<br></code></pre></td></tr></table></figure>\n\n<p>如果要对匿名空间中的bar函数设置断点，可以使用如下命令：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">(gdb) b (anonymous <span class=\"hljs-keyword\">namespace</span>)::<span class=\"hljs-symbol\">bar</span><br></code></pre></td></tr></table></figure>\n\n<h6 id=\"在程序地址上打断点\"><a href=\"#在程序地址上打断点\" class=\"headerlink\" title=\"在程序地址上打断点\"></a>在程序地址上打断点</h6><p>例子：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">0000000000400522</span> &lt;main&gt;:<br>  <span class=\"hljs-attribute\">400522</span>:       <span class=\"hljs-number\">55</span>                      push   %rbp<br>  <span class=\"hljs-attribute\">400523</span>:       <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">89</span> e5                mov    %rsp,%rbp<br>  <span class=\"hljs-attribute\">400526</span>:       <span class=\"hljs-number\">8</span>b <span class=\"hljs-number\">05</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">1</span>b <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>       mov    <span class=\"hljs-number\">0</span>x1b00(%rip),%eax        # <span class=\"hljs-number\">40202</span>c &lt;he+<span class=\"hljs-number\">0</span>xc&gt;<br>  <span class=\"hljs-attribute\">40052c</span>:       <span class=\"hljs-number\">85</span> c0                   test   %eax,%eax<br>  <span class=\"hljs-attribute\">40052e</span>:       <span class=\"hljs-number\">75</span> <span class=\"hljs-number\">07</span>                   jne    <span class=\"hljs-number\">400537</span> &lt;main+<span class=\"hljs-number\">0</span>x15&gt;<br>  <span class=\"hljs-attribute\">400530</span>:       b8 <span class=\"hljs-number\">7</span>c <span class=\"hljs-number\">06</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">00</span>          mov    $<span class=\"hljs-number\">0</span>x40067c,%eax<br>  <span class=\"hljs-attribute\">400535</span>:       eb <span class=\"hljs-number\">05</span>                   jmp    <span class=\"hljs-number\">40053</span>c &lt;main+<span class=\"hljs-number\">0</span>x1a&gt;<br></code></pre></td></tr></table></figure>\n\n<p>当调试汇编程序，或者没有调试信息的程序时，经常需要在程序地址上打断点，方法为<code>b *address</code>。例如：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\">(gdb) <span class=\"hljs-keyword\">b</span> *<span class=\"hljs-number\">0x400522</span><br></code></pre></td></tr></table></figure>\n\n<p>该方法，需要结合frame打印函数栈信息的命令结合，先打印栈信息，在选择地址打断点</p>\n<h6 id=\"在程序入口处打断点\"><a href=\"#在程序入口处打断点\" class=\"headerlink\" title=\"在程序入口处打断点\"></a>在程序入口处打断点</h6><p>方法一</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">strip a.out</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">readelf -h a.out</span> <br>ELF Header:<br>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 <br>  Class:                             ELF64<br>  Data:                              2&#x27;s complement, little endian<br>  Version:                           1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI Version:                       0<br>  Type:                              EXEC (Executable file)<br>  Machine:                           Advanced Micro Devices X86-64<br>  Version:                           0x1<br>  Entry point address:               0x400440<br>  Start of program headers:          64 (bytes into file)<br>  Start of section headers:          4496 (bytes into file)<br>  Flags:                             0x0<br>  Size of this header:               64 (bytes)<br>  Size of program headers:           56 (bytes)<br>  Number of program headers:         9<br>  Size of section headers:           64 (bytes)<br>  Number of section headers:         29<br>  Section header string table index: 28<br></code></pre></td></tr></table></figure>\n\n<p>方法二</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">gdb a.out</span> <br><span class=\"hljs-meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; info files</span><br>Symbols from &quot;/home/me/a.out&quot;.<br>Local exec file:<br>\t`/home/me/a.out&#x27;, file type elf64-x86-64.<br>\tEntry point: 0x400440<br>\t0x0000000000400238 - 0x0000000000400254 is .interp<br>\t0x0000000000400254 - 0x0000000000400274 is .note.ABI-tag<br>\t0x0000000000400274 - 0x0000000000400298 is .note.gnu.build-id<br>\t0x0000000000400298 - 0x00000000004002b4 is .gnu.hash<br>\t0x00000000004002b8 - 0x0000000000400318 is .dynsym<br>\t0x0000000000400318 - 0x0000000000400355 is .dynstr<br>\t0x0000000000400356 - 0x000000000040035e is .gnu.version<br>\t0x0000000000400360 - 0x0000000000400380 is .gnu.version_r<br>\t0x0000000000400380 - 0x0000000000400398 is .rela.dyn<br>\t0x0000000000400398 - 0x00000000004003e0 is .rela.plt<br>\t0x00000000004003e0 - 0x00000000004003fa is .init<br>\t0x0000000000400400 - 0x0000000000400440 is .plt<br>\t0x0000000000400440 - 0x00000000004005c2 is .text<br>\t0x00000000004005c4 - 0x00000000004005cd is .fini<br>\t0x00000000004005d0 - 0x00000000004005e0 is .rodata<br>\t0x00000000004005e0 - 0x0000000000400614 is .eh_frame_hdr<br>\t0x0000000000400618 - 0x000000000040070c is .eh_frame<br>\t0x0000000000600e10 - 0x0000000000600e18 is .init_array<br>\t0x0000000000600e18 - 0x0000000000600e20 is .fini_array<br>\t0x0000000000600e20 - 0x0000000000600e28 is .jcr<br>\t0x0000000000600e28 - 0x0000000000600ff8 is .dynamic<br>\t0x0000000000600ff8 - 0x0000000000601000 is .got<br>\t0x0000000000601000 - 0x0000000000601030 is .got.plt<br>\t0x0000000000601030 - 0x0000000000601040 is .data<br>\t0x0000000000601040 - 0x0000000000601048 is .bss<br></code></pre></td></tr></table></figure>\n\n<p>当调试没有调试信息的程序时，直接运行<code>start</code>命令是没有效果的：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">(gdb) start<br><span class=\"hljs-keyword\">Function</span> <span class=\"hljs-string\">&quot;main&quot;</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">defined</span>.<br></code></pre></td></tr></table></figure>\n\n<p>如果不知道main在何处，那么可以在程序入口处打断点。先通过<code>readelf</code>或者进入gdb，执行<code>info files</code>获得入口地址，然后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) b *0x400440<br>(gdb) r<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"在文件行号打断点\"><a href=\"#在文件行号打断点\" class=\"headerlink\" title=\"在文件行号打断点\"></a>在文件行号打断点</h6><p>这个比较简单，如果要在当前文件中的某一行打断点，直接<code>b linenum</code>即可，例如：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\">(gdb) <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">7</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以显式指定文件，<code>b file:linenum</code>例如：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) b <span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6</span><br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x40053b</span>: <span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6.</span> (<span class=\"hljs-number\">2</span> locations)<br>(gdb) i breakpoints <br>Num     Type           Disp Enb Address            What<br><span class=\"hljs-number\">1</span>       <span class=\"hljs-built_in\">breakpoint</span>     keep y   &lt;MULTIPLE&gt;         <br><span class=\"hljs-number\">1.1</span>                         y     <span class=\"hljs-number\">0x000000000040053b</span> <span class=\"hljs-keyword\">in</span> print_a <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">a</span>/<span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">1.2</span>                         y     <span class=\"hljs-number\">0x000000000040054b</span> <span class=\"hljs-keyword\">in</span> print_b <span class=\"hljs-keyword\">at</span> b/<span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看出，gdb会对所有匹配的文件设置断点。你可以通过指定（部分）路径，来区分相同的文件名：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">(gdb) <span class=\"hljs-selector-tag\">b</span> <span class=\"hljs-selector-tag\">a</span>/file<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<p>注意：通过行号进行设置断点的一个弊端是，如果你更改了源程序，那么之前设置的断点就可能不是你想要的了。</p>\n<h6 id=\"保存已经设置的断点\"><a href=\"#保存已经设置的断点\" class=\"headerlink\" title=\"保存已经设置的断点\"></a>保存已经设置的断点</h6><p>在gdb中，可以使用如下命令将设置的断点保存下来：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">(gdb) <span class=\"hljs-keyword\">save</span> breakpoints <span class=\"hljs-keyword\">file</span>-<span class=\"hljs-keyword\">name</span>-to-<span class=\"hljs-keyword\">save</span><br></code></pre></td></tr></table></figure>\n\n<p>下此调试时，可以使用如下命令批量设置保存的断点：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">source</span> <span class=\"hljs-keyword\">file</span>-name-to-save<br>(gdb) info breakpoints <br>Num     Type           Disp Enb Address            What<br><span class=\"hljs-number\">1</span>       breakpoint     keep y   <span class=\"hljs-number\">0</span>x00000000005a7af0 in gdb_main at <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/project/</span>binutils-trunk<span class=\"hljs-regexp\">/gdb/m</span>ain.c:<span class=\"hljs-number\">1061</span><br><span class=\"hljs-number\">2</span>       breakpoint     keep y   <span class=\"hljs-number\">0</span>x00000000005a6bd0 in captured_main at <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/project/</span>binutils-trunk<span class=\"hljs-regexp\">/gdb/m</span>ain.c:<span class=\"hljs-number\">310</span><br><span class=\"hljs-number\">3</span>       breakpoint     keep y   <span class=\"hljs-number\">0</span>x00000000005a68b<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"设置临时断点\"><a href=\"#设置临时断点\" class=\"headerlink\" title=\"设置临时断点\"></a>设置临时断点</h6><p>在使用gdb时，如果想让断点只生效一次，可以使用“tbreak”命令（缩写为：tb）。以上面程序为例：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\">(gdb) tb a.c:15<br>Temporary breakpoint 1 at 0x400500: <span class=\"hljs-keyword\">file</span> a.c, <span class=\"hljs-keyword\">line</span> 15.<br>(gdb) i b<br>Num     <span class=\"hljs-keyword\">Type</span>           <span class=\"hljs-keyword\">Disp</span> Enb Address            What<br>1       breakpoint     del  y   0x0000000000400500 <span class=\"hljs-keyword\">in</span> main at a.c:15<br>(gdb) r<br>Starting <span class=\"hljs-keyword\">program</span>: /data2/home/nanxiao/a<br><br>Temporary breakpoint 1, main () at a.c:15<br>15              printf(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, <span class=\"hljs-keyword\">st</span>.a, <span class=\"hljs-keyword\">st</span>.b, <span class=\"hljs-keyword\">st</span>.c, <span class=\"hljs-keyword\">st</span>.<span class=\"hljs-keyword\">d</span>);<br>(gdb) i b<br><span class=\"hljs-keyword\">No</span> breakpoints or watchpoints.<br></code></pre></td></tr></table></figure>\n\n<p>首先在文件的第15行设置临时断点，当程序断住后，用“i b”（”info breakpoints”缩写）命令查看断点，发现断点没有了。也就是断点命中一次后，就被删掉了。</p>\n<h6 id=\"设置条件断点：\"><a href=\"#设置条件断点：\" class=\"headerlink\" title=\"设置条件断点：\"></a>设置条件断点：</h6><p>例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br>\t<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">200</span>; i++)<br>\t\t&#123;<br>\t\t\tsum += i;<br>\t\t&#125;<br>\t<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, sum);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以设置条件断点，也就是只有在条件满足时，断点才会被触发，命令是“<code>break … if cond</code>”。以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x4004cc: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                       <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>(gdb) b <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">if</span> i==<span class=\"hljs-number\">101</span><br>Breakpoint <span class=\"hljs-number\">2</span> at <span class=\"hljs-number\">0</span>x4004e3: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">10</span>.<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Breakpoint <span class=\"hljs-number\">2</span>, main () at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                                      sum += i;<br>(gdb) p sum<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">5050</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到设定断点只在<code>i</code>的值为<code>101</code>时触发，此时打印<code>sum</code>的值为<code>5050</code>。</p>\n<h6 id=\"忽略断点：\"><a href=\"#忽略断点：\" class=\"headerlink\" title=\"忽略断点：\"></a>忽略断点：</h6><p>例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br>\t<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">200</span>; i++)<br>\t\t&#123;<br>\t\t\tsum += i;<br>\t\t&#125;<br>\t<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, sum);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在设置断点以后，可以忽略断点，命令是“<code>ignore bnum count</code>”：意思是接下来<code>count</code>次编号为<code>bnum</code>的断点触发都不会让程序中断，只有第<code>count + 1</code>次断点触发才会让程序中断。以上面程序为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) b 10<br>Breakpoint 1 at 0x4004e3: file a.c, line 10.<br>(gdb) ignore 1 5<br>Will ignore next 5 crossings of breakpoint 1.<br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br><br>Breakpoint 1, main () at a.c:10<br>10                                      sum += i;<br>(gdb) p i<br><span class=\"hljs-meta prompt_\">$</span><span class=\"language-bash\">1 = 6</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到设定忽略断点前<code>5</code>次触发后，第一次断点断住时，打印<code>i</code>的值是<code>6</code>。如果想让断点下次就生效，可以将<code>count</code>置为<code>0</code>：“<code>ignore 1 0</code>”。</p>\n<h4 id=\"6、观察点\"><a href=\"#6、观察点\" class=\"headerlink\" title=\"6、观察点\"></a>6、观察点</h4><h5 id=\"设置观察点\"><a href=\"#设置观察点\" class=\"headerlink\" title=\"设置观察点\"></a>设置观察点</h5><p>例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">thread1_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span><br>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                a++;<br>                sleep(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span>* argv[])</span><br>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1;<br><br>        pthread_create(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread1_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>\t\t<br>        sleep(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>watch</code>”命令设置观察点，也就是当一个变量值发生变化时，程序会停下来。以上面程序为例:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4005a8</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">19.</span><br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">19</span><br><span class=\"hljs-number\">19</span>              pthread_create(&amp;t1, <span class=\"hljs-keyword\">NULL</span>, thread1_func, &quot;Thread 1&quot;);<br>(gdb) watch a<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">8813</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">8813</span>)]<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">2</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>watch a</code>”命令以后，当<code>a</code>的值变化：由<code>0</code>变成<code>1</code>，由<code>1</code>变成<code>2</code>，程序都会停下来。<br>此外也可以使用“<code>watch *(data type*)address</code>”这样的命令，仍以上面程序为例:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) p &amp;a<br><span class=\"hljs-number\">$1</span> = (<span class=\"hljs-keyword\">int</span> *) <span class=\"hljs-number\">0x6009c8</span> &lt;a&gt;<br>(gdb) watch *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br>Hardware watchpoint <span class=\"hljs-number\">2</span>: *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class=\"hljs-string\">&quot;/lib64/libthread_db.so.1&quot;</span>.<br>[New Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">15431</span>)]<br>[Switching to Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">15431</span>)]<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br><br>Old value = <span class=\"hljs-number\">0</span><br>New value = <span class=\"hljs-number\">1</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>)<span class=\"hljs-comment\">;</span><br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br><br>Old value = <span class=\"hljs-number\">1</span><br>New value = <span class=\"hljs-number\">2</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>先得到<code>a</code>的地址：<code>0x6009c8</code>，接着用“<code>watch *(int*)0x6009c8</code>”设置观察点，可以看到同“<code>watch a</code>”命令效果一样。<br>观察点可以通过软件或硬件的方式实现，取决于具体的系统。但是软件实现的观察点会导致程序运行很慢，使用时需注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<p>如果系统支持硬件观测的话，当设置观测点是会打印如下信息：<br>Hardware watchpoint num: expr</p>\n<p>如果不想用硬件观测点的话可如下设置：<br>set can-use-hw-watchpoints</p>\n<h5 id=\"设置观察点之对特定线程生效\"><a href=\"#设置观察点之对特定线程生效\" class=\"headerlink\" title=\"设置观察点之对特定线程生效\"></a>设置观察点之对特定线程生效</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;pthread.h&gt;</span><br><br>int a = 0;<br><br>void *thread1_func(void *p_arg)<br>&#123;<br>        while (1)<br>        &#123;<br>                a++;<br>                sleep(10);<br>        &#125;<br>&#125;<br><br>void *thread2_func(void *p_arg)<br>&#123;<br>        while (1)<br>        &#123;<br>                a++;<br>                sleep(10);<br>        &#125;<br>&#125;<br><br>int main(void)<br>&#123;<br>        pthread_t t1, t2;<br><br>        pthread_create(&amp;t1, NULL, thread1_func, &quot;Thread 1&quot;);<br>\t\tpthread_create(&amp;t2, NULL, thread2_func, &quot;Thread 2&quot;);<br><br>        sleep(1000);<br>        return;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>watch expr thread threadnum</code>”命令设置观察点只针对特定线程生效，也就是只有编号为<code>threadnum</code>的线程改变了变量的值，程序才会停下来，其它编号线程改变变量的值不会让程序停住。以上面程序为例:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4005d4</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">28.</span><br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">28</span><br><span class=\"hljs-number\">28</span>              pthread_create(&amp;t1, <span class=\"hljs-keyword\">NULL</span>, thread1_func, &quot;Thread 1&quot;);<br>(gdb) n<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">25443</span>)]<br><span class=\"hljs-number\">29</span>              pthread_create(&amp;t2, <span class=\"hljs-keyword\">NULL</span>, thread2_func, &quot;Thread 2&quot;);<br>(gdb)<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">25444</span>)]<br><span class=\"hljs-number\">31</span>              sleep(<span class=\"hljs-number\">1000</span>);<br>(gdb) i threads<br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">3</span>    Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">25444</span>) <span class=\"hljs-number\">0x00007ffff7915911</span> <span class=\"hljs-keyword\">in</span> clone () <span class=\"hljs-keyword\">from</span> /lib64/libc.so<span class=\"hljs-number\">.6</span><br>  <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">25443</span>) <span class=\"hljs-number\">0x00007ffff78d9bcd</span> <span class=\"hljs-keyword\">in</span> nanosleep () <span class=\"hljs-keyword\">from</span> /lib64/libc.so<span class=\"hljs-number\">.6</span><br>* <span class=\"hljs-number\">1</span>    Thread <span class=\"hljs-number\">0x7ffff7fe9700</span> (LWP <span class=\"hljs-number\">25413</span>) main () at a.c:<span class=\"hljs-number\">31</span><br>(gdb) wa a thread <span class=\"hljs-number\">2</span><br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br>(gdb) c<br>Continuing.<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">25443</span>)]<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">3</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x400718</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">3</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x400718</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">7</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x400718</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>wa a thread 2</code>”命令（<code>wa</code>是<code>watch</code>命令的缩写）以后，只有<code>thread1_func</code>改变<code>a</code>的值才会让程序停下来。<br>需要注意的是这种针对特定线程设置观察点方式只对硬件观察点才生效，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"设置读观察点\"><a href=\"#设置读观察点\" class=\"headerlink\" title=\"设置读观察点\"></a>设置读观察点</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;pthread.h&gt;</span><br><br>int a = 0;<br><br>void *thread1_func(void *p_arg)<br>&#123;<br>        while (1)<br>        &#123;<br>                printf(&quot;%d\\n&quot;, a);<br>                sleep(10);<br>        &#125;<br>&#125;<br><br>int main(void)<br>&#123;<br>        pthread_t t1;<br><br>        pthread_create(&amp;t1, NULL, thread1_func, &quot;Thread 1&quot;);<br><br>        sleep(1000);<br>        return;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>rwatch</code>”命令设置读观察点，也就是当发生读取变量行为时，程序就会暂停住。以上面程序为例:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x4005f3</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">19</span>.<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class=\"hljs-string\">&quot;/lib64/libthread_db.so.1&quot;</span>.<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">19</span><br><span class=\"hljs-number\">19</span>              pthread_create(&amp;t1, NULL, thread1_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>)<span class=\"hljs-comment\">;</span><br>(gdb) rw a<br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br>(gdb) c<br>Continuing.<br>[New Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">5540</span>)]<br>[Switching to Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">5540</span>)]<br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br><br>Value = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40071c</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br>(gdb) c<br>Continuing.<br><span class=\"hljs-number\">0</span><br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br><br>Value = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40071c</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br>(gdb) c<br>Continuing.<br><span class=\"hljs-number\">0</span><br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br><br>Value = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40071c</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>rw a</code>”命令（<code>rw</code>是<code>rwatch</code>命令的缩写）以后，每次访问<code>a</code>的值都会让程序停下来。<br>需要注意的是<code>rwatch</code>命令只对硬件观察点才生效，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"设置写观察点\"><a href=\"#设置写观察点\" class=\"headerlink\" title=\"设置写观察点\"></a>设置写观察点</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread1_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                a++;<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread2_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);;<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread1_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread2_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>awatch</code>”命令设置读写观察点，也就是当发生读取变量或改变变量值的行为时，程序就会暂停住。以上面程序为例:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) aw a<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">16938</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">16938</span>)]<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-keyword\">Value</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40076c</span>) at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      a++;<br>(gdb) c<br>Continuing.<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x40076c</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">16939</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">16939</span>)]<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-keyword\">Value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0x00000000004005f2</span> <span class=\"hljs-keyword\">in</span> thread2_func (p_arg=<span class=\"hljs-number\">0x400775</span>) at a.c:<span class=\"hljs-number\">19</span><br><span class=\"hljs-number\">19</span>                      printf(&quot;%d\\n&quot;, a);;<br>(gdb) c<br>Continuing.<br><span class=\"hljs-number\">1</span><br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">16938</span>)]<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-keyword\">Value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40076c</span>) at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      a++;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>aw a</code>”命令（<code>aw</code>是<code>awatch</code>命令的缩写）以后，每次读取或改变<code>a</code>的值都会让程序停下来。<br>需要注意的是<code>awatch</code>命令只对硬件观察点才生效，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<h4 id=\"7、Catchpoint\"><a href=\"#7、Catchpoint\" class=\"headerlink\" title=\"7、Catchpoint\"></a>7、Catchpoint</h4><h5 id=\"让Catchpoint只触发一次\"><a href=\"#让Catchpoint只触发一次\" class=\"headerlink\" title=\"让Catchpoint只触发一次\"></a>让Catchpoint只触发一次</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdlib.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;sys/types.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;unistd.h&gt;</span><br><br>int main(void) &#123;<br>    pid_t pid;<br>    int i = 0;<br><br>    for (i = 0; i &lt; 2; i++)<br>    &#123;<br>\t    pid = fork();<br>\t    if (pid &lt; 0)<br>\t    &#123;<br>\t        exit(1);<br>\t    &#125;<br>\t    else if (pid == 0)<br>\t    &#123;<br>\t        exit(0);<br>\t    &#125;<br>    &#125;<br>    printf(&quot;hello world\\n&quot;);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>tcatch</code>”命令设置<code>catchpoint</code>只触发一次，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) tcatch fork<br>Catchpoint <span class=\"hljs-number\">1</span> (fork)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Temporary catchpoint <span class=\"hljs-number\">1</span> (forked process <span class=\"hljs-number\">27377</span>), <span class=\"hljs-number\">0</span>x00000034e42acdbd in fork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) c<br>Continuing.<br>hello world<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">27373</span>) exited normally]<br>(gdb) q<br></code></pre></td></tr></table></figure>\n\n<p>可以看到当程序只在第一次调用<code>fork</code>时暂停。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"为fork调用设置catchpoint\"><a href=\"#为fork调用设置catchpoint\" class=\"headerlink\" title=\"为fork调用设置catchpoint\"></a>为fork调用设置catchpoint</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>    <span class=\"hljs-type\">pid_t</span> pid;<br><br>    pid = fork();<br>    <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>catch fork</code>”命令为<code>fork</code>调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> fork<br>Catchpoint <span class=\"hljs-number\">1</span> (fork)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a <br><br>Catchpoint <span class=\"hljs-number\">1</span> (forked process <span class=\"hljs-number\">33499</span>), <span class=\"hljs-number\">0</span>x00000034e42acdbd in fork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>x00000034e42acdbd in fork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x0000000000400561 in main () at a.c:<span class=\"hljs-number\">9</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>fork</code>调用发生后，gdb会暂停程序的运行。<br>注意：目前只有HP-UX和GNU&#x2F;Linux支持这个功能。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"为vfork调用设置catchpoint\"><a href=\"#为vfork调用设置catchpoint\" class=\"headerlink\" title=\"为vfork调用设置catchpoint\"></a>为vfork调用设置catchpoint</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#include &lt;stdio.h&gt;</span><br><span class=\"hljs-comment\">#include &lt;stdlib.h&gt;</span><br><span class=\"hljs-comment\">#include &lt;sys/types.h&gt;</span><br><span class=\"hljs-comment\">#include &lt;unistd.h&gt;</span><br><br>int main(void) &#123;<br>    pid_t pid;<br><br>    pid = vfork();<br>    <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>    return <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>catch vfork</code>”命令为<code>vfork</code>调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> vfork<br>Catchpoint <span class=\"hljs-number\">1</span> (vfork)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (vforked process <span class=\"hljs-number\">27312</span>), <span class=\"hljs-number\">0</span>x00000034e42acfc4 in vfork ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>x00000034e42acfc4 in vfork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x0000000000400561 in main () at a.c:<span class=\"hljs-number\">9</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>vfork</code>调用发生后，gdb会暂停程序的运行。<br>注意：目前只有HP-UX和GNU&#x2F;Linux支持这个功能。</p>\n<h5 id=\"为exec调用设置catchpoint\"><a href=\"#为exec调用设置catchpoint\" class=\"headerlink\" title=\"为exec调用设置catchpoint\"></a>为exec调用设置catchpoint</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;unistd.h&gt;</span><br><br>int main(void) &#123;<br>    execl(&quot;/bin/ls&quot;, &quot;ls&quot;, NULL);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>catch exec</code>”命令为<code>exec</code>系列系统调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">(gdb) catch <span class=\"hljs-built_in\">exec</span><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-built_in\">exec</span>)<br>(gdb) r<br>Starting program: /home/nan/a<br>process <span class=\"hljs-number\">32927</span> is executing <span class=\"hljs-keyword\">new</span> program: /bin/ls<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-built_in\">exec</span>&#x27;d /bin/ls), <span class=\"hljs-number\">0x00000034e3a00b00</span> in <span class=\"hljs-built_in\">_start</span> () from /lib64/ld-linux-x86<span class=\"hljs-number\">-64.</span>so<span class=\"hljs-number\">.2</span><br>(gdb) bt<br><span class=\"hljs-meta\">#0  0x00000034e3a00b00 in _start () from /lib64/ld-linux-x86-64.so.2</span><br><span class=\"hljs-meta\">#1  0x0000000000000001 in ?? ()</span><br><span class=\"hljs-meta\">#2  0x00007fffffffe73d in ?? ()</span><br><span class=\"hljs-meta\">#3  0x0000000000000000 in ?? ()</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>execl</code>调用发生后，gdb会暂停程序的运行。<br>注意：目前只有HP-UX和GNU&#x2F;Linux支持这个功能。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"为系统调用调用设置catchpoint\"><a href=\"#为系统调用调用设置catchpoint\" class=\"headerlink\" title=\"为系统调用调用设置catchpoint\"></a>为系统调用调用设置catchpoint</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">char</span> p1[] = <span class=\"hljs-string\">&quot;Sam&quot;</span>;<br>    <span class=\"hljs-type\">char</span> *p2 = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;p1 is %s, p2 is %s\\n&quot;</span>, p1, p2);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以使用<code>catch syscall [name | number]</code>为关注的系统调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall mmap<br>Catchpoint <span class=\"hljs-number\">1</span> (syscall <span class=\"hljs-string\">&#x27;mmap&#x27;</span> [<span class=\"hljs-number\">9</span>])<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (returned <span class=\"hljs-keyword\">from</span> syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>mmap</code>调用发生后，gdb会暂停程序的运行。<br>也可以使用系统调用的编号设置<code>catchpoint</code>，仍以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall <span class=\"hljs-number\">9</span><br>Catchpoint <span class=\"hljs-number\">1</span> (syscall <span class=\"hljs-string\">&#x27;mmap&#x27;</span> [<span class=\"hljs-number\">9</span>])<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (returned <span class=\"hljs-keyword\">from</span> syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到和使用<code>catch syscall mmap</code>效果是一样的。（系统调用和编号的映射参考具体的<code>xml</code>文件，以我的系统为例，就是在<code>/usr/local/share/gdb/syscalls</code>文件夹下的<code>amd64-linux.xml</code>。）</p>\n<p>如果不指定具体的系统调用，则会为所有的系统调用设置<code>catchpoint</code>，仍以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall<br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">any</span> syscall)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall brk), <span class=\"hljs-number\">0</span>x00000034e3a1618a in brk ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (returned <span class=\"hljs-keyword\">from</span> syscall brk), <span class=\"hljs-number\">0</span>x00000034e3a1618a in brk ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb)<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"通过为ptrace调用设置catchpoint破解anti-debugging的程序\"><a href=\"#通过为ptrace调用设置catchpoint破解anti-debugging的程序\" class=\"headerlink\" title=\"通过为ptrace调用设置catchpoint破解anti-debugging的程序\"></a>通过为ptrace调用设置catchpoint破解anti-debugging的程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/ptrace.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br> <br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>                                                                      <br>&#123;<br>        <span class=\"hljs-keyword\">if</span> (ptrace(PTRACE_TRACEME, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Gdb is debugging me, exit.\\n&quot;</span>);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No debugger, continuing\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>有些程序不想被gdb调试，它们就会在程序中调用“<code>ptrace</code>”函数，一旦返回失败，就证明程序正在被gdb等类似的程序追踪，所以就直接退出。以上面程序为例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x400508: file a.c, line <span class=\"hljs-number\">6</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>                       <span class=\"hljs-keyword\">if</span> (ptrace(PTRACE_TRACEME, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>(gdb) n<br><span class=\"hljs-number\">7</span>                               printf(<span class=\"hljs-string\">&quot;Gdb is debugging me, exit.\\n&quot;</span>);<br>(gdb)<br>Gdb is debugging me, <span class=\"hljs-keyword\">exit</span>.<br><span class=\"hljs-number\">8</span>                               return <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n\n<p>破解这类程序的办法就是为<code>ptrace</code>调用设置<code>catchpoint</code>，通过修改<code>ptrace</code>的返回值，达到目的。仍以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall ptrace<br>Catchpoint <span class=\"hljs-number\">2</span> (syscall <span class=\"hljs-string\">&#x27;ptrace&#x27;</span> [<span class=\"hljs-number\">101</span>])<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Catchpoint <span class=\"hljs-number\">2</span> (<span class=\"hljs-keyword\">call</span> to syscall ptrace), <span class=\"hljs-number\">0</span>x00007ffff7b2be9c in ptrace () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">2</span> (returned <span class=\"hljs-keyword\">from</span> syscall ptrace), <span class=\"hljs-number\">0</span>x00007ffff7b2be9c in ptrace () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) set $rax = <span class=\"hljs-number\">0</span><br>(gdb) c<br>Continuing.<br>No debugger, continuing<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">11491</span>) exited normally]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，通过修改<code>rax</code>寄存器的值，达到修改返回值的目的，从而让gdb可以继续调试程序（打印“<code>No debugger, continuing</code>”）。<br>详细过程，可以参见这篇文章<a href=\"http://blog.linux.org.tw/~jserv/archives/2011_08.html\">避開 PTRACE_TRACME 反追蹤技巧</a>.</p>\n<h4 id=\"8、打印\"><a href=\"#8、打印\" class=\"headerlink\" title=\"8、打印\"></a>8、打印</h4><h5 id=\"打印ASCII和宽字符字符串\"><a href=\"#打印ASCII和宽字符字符串\" class=\"headerlink\" title=\"打印ASCII和宽字符字符串\"></a>打印ASCII和宽字符字符串</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;wchar.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">char</span> str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>        <span class=\"hljs-type\">wchar_t</span> str2[] = <span class=\"hljs-string\">L&quot;abcd&quot;</span>;<br>        <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以使用“<code>x/s</code>”命令打印ASCII字符串。以上面程序为例：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">Temporary breakpoint <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">main</span> () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               <span class=\"hljs-type\">char</span> str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>(gdb) n<br><span class=\"hljs-number\">7</span>               <span class=\"hljs-type\">wchar_t</span> str2[] = <span class=\"hljs-string\">L&quot;abcd&quot;</span>;<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>(gdb) x/s str1<br><span class=\"hljs-number\">0x804779f</span>:      <span class=\"hljs-string\">&quot;abcd&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印出了<code>str1</code>字符串的值。</p>\n<p>打印宽字符字符串时，要根据宽字符的长度决定如何打印。仍以上面程序为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               char str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>(gdb) n<br><span class=\"hljs-number\">7</span>               wchar_t str2[] = L<span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>(gdb) p sizeof(wchar_t)<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">4</span><br>(gdb) x/ws str2<br><span class=\"hljs-number\">0x8047788</span>:      <span class=\"hljs-string\">U&quot;abcd&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>由于当前平台宽字符的长度为4个字节，则用“<code>x/ws</code>”命令。如果是2个字节，则用“<code>x/hs</code>”命令。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Memory.html\">gdb手册</a>.</p>\n<h5 id=\"打印STL容器中的内容\"><a href=\"#打印STL容器中的内容\" class=\"headerlink\" title=\"打印STL容器中的内容\"></a>打印STL容器中的内容</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><br>using namespace <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">vec</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>)</span>; <span class=\"hljs-comment\">// 10 zero-initialized elements</span><br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; vec.size(); i++)<br>    vec[i] = i;<br><br>  <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;vec contains:&quot;</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; vec.size(); i++)<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span> &lt;&lt; vec[i];<br>  <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要打印C++ STL容器的内容，缺省的显示结果可读性很差：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">(gdb) p vec<br><span class=\"hljs-variable\">$1</span> = &#123;&lt;std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;&gt; = &#123;<br>    _M_impl = &#123;&lt;std::allocator&lt;int&gt;&gt; = &#123;&lt;<span class=\"hljs-symbol\">__gnu_cxx:</span><span class=\"hljs-symbol\">:new_allocator&lt;int&gt;&gt;</span> = &#123;&lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, _M_start = <span class=\"hljs-number\">0x404010</span>, _M_finish = <span class=\"hljs-number\">0x404038</span>, <br>          _M_end_of_storage = <span class=\"hljs-number\">0x404038</span>&#125;&#125;, &lt;No data fields&gt;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb 7.0之后，可以使用gcc提供的python脚本，来改善显示结果：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">(gdb) p vec<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span> of <span class=\"hljs-built_in\">length</span> <span class=\"hljs-number\">10</span>, capacity <span class=\"hljs-number\">10</span> = &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>某些发行版(Fedora 11+)，不需要额外的设置工作。可在gdb命令行下验证（若没有显示，可按下文的方法进行设置）。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">info</span> pretty-printer<br></code></pre></td></tr></table></figure>\n\n<p>方法如下:</p>\n<ol>\n<li><p>获得python脚本，建议使用gcc默认安装的</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">sudo <span class=\"hljs-built_in\">find</span> / -name <span class=\"hljs-string\">&quot;*libstdcxx*&quot;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>若本机查找不到python脚本，建议下载gcc对应版本源码包，相对目录如下</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">gcc</span>-<span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">1</span>/libstdc++-v3/python<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>也可直接下载最新版本</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">svn co svn:<span class=\"hljs-regexp\">//g</span>cc.gnu.org<span class=\"hljs-regexp\">/svn/g</span>cc<span class=\"hljs-regexp\">/trunk/</span>libstdc++-v3/python<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>将如下代码添加到.gdbinit文件中（假设python脚本位于 &#x2F;home&#x2F;maude&#x2F;gdb_printers&#x2F; 下）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">python<br><span class=\"hljs-keyword\">import</span> sys<br>sys.path.<span class=\"hljs-keyword\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;/home/maude/gdb_printers/python&#x27;</span>)<br><span class=\"hljs-keyword\">from</span> libstdcxx.v6.printers <span class=\"hljs-keyword\">import</span> register_libstdcxx_printers<br>register_libstdcxx_printers (<span class=\"hljs-keyword\">None</span>)<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>（源自<a href=\"https://sourceware.org/gdb/wiki/STLSupport%EF%BC%89\">https://sourceware.org/gdb/wiki/STLSupport）</a></p>\n<p><code>p vec</code>的输出无法阅读，但能给我们提示，从而得到无需脚本支持的技巧：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">(gdb) <span class=\"hljs-selector-tag\">p</span> *(vec._M_impl._M_start)<span class=\"hljs-keyword\">@vec</span>.size()<br>$<span class=\"hljs-number\">2</span> = &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>将 <a href=\"http://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt\">dbinit_stl_views</a> 下载下来,，执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat dbinit_stl_views-1.03.txt &gt;&gt; ~/.gdbinit<br></code></pre></td></tr></table></figure>\n\n<p>即可<br>一些常用的容器及其对应的命令关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">std::vector&lt;T&gt;  pvector stl_variable <br>std::list&lt;T&gt;  plist stl_variable T <br>std::map&lt;T,T&gt;  pmap stl_variable <br>std::multimap&lt;T,T&gt;  pmap stl_variable <br>std::set&lt;T&gt;  pset stl_variable T <br>std::multiset&lt;T&gt;  pset stl_variable <br>std::deque&lt;T&gt;  pdequeue stl_variable <br>std::stack&lt;T&gt;  pstack stl_variable <br>std::queue&lt;T&gt;  pqueue stl_variable <br>std::priority_queue&lt;T&gt;  ppqueue stl_variable <br>std::bitset&lt;n&gt;&lt;td&gt;  pbitset stl_variable <br>std::string  pstring stl_variable <br>std::widestring  pwstring stl_variable  <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"打印大数组中的内容\"><a href=\"#打印大数组中的内容\" class=\"headerlink\" title=\"打印大数组中的内容\"></a>打印大数组中的内容</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">201</span>];<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">201</span>; i++)<br>    <span class=\"hljs-built_in\">array</span>[i] = i;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要打印大数组的内容，缺省最多会显示200个元素：</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">(gdb) p<span class=\"hljs-built_in\"> array</span><br><span class=\"hljs-built_in\"></span>$1 = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, <br>  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, <br>  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, <br>  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, <br>  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199...&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以使用如下命令，设置这个最大限制数：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">print</span> elements number-of-elements<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用如下命令，设置为没有限制：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">print</span> elements 0<br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">(gdb) set print elements unlimited<br>(gdb) p<span class=\"hljs-built_in\"> array</span><br><span class=\"hljs-built_in\"></span>$2 = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, <br>  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, <br>  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, <br>  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, <br>  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/download/onlinedocs/gdb/Print-Settings.html#Print-Settings\">gdb手册</a></p>\n<h5 id=\"打印数组中任意连续元素值\"><a href=\"#打印数组中任意连续元素值\" class=\"headerlink\" title=\"打印数组中任意连续元素值\"></a>打印数组中任意连续元素值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">201</span>];<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">201</span>; i++)<br>    <span class=\"hljs-built_in\">array</span>[i] = i;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要打印数组中任意连续元素的值，可以使用“<code>p array[index]@num</code>”命令（<code>p</code>是<code>print</code>命令的缩写）。其中<code>index</code>是数组索引（从0开始计数），<code>num</code>是连续多少个元素。以上面代码为例：</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">(gdb) p<span class=\"hljs-built_in\"> array</span><br><span class=\"hljs-built_in\"></span>$8 = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,<br>  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,<br>  63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,<br>  94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,<br>  120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,<br>  145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,<br>  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,<br>  195, 196, 197, 198, 199...&#125;<br>(gdb) p array[60]@10<br>$9 = &#123;60, 61, 62, 63, 64, 65, 66, 67, 68, 69&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印了<code>array</code>数组第60~69个元素的值。<br>如果要打印从数组开头连续元素的值，也可使用这个命令：“<code>p *array@num</code>”：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">(gdb) p *array<span class=\"hljs-symbol\">@10</span><br>$2 = &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Arrays.html#Arrays\">gdb手册</a></p>\n<h5 id=\"打印数组的索引下标\"><a href=\"#打印数组的索引下标\" class=\"headerlink\" title=\"打印数组的索引下标\"></a>打印数组的索引下标</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> num[<span class=\"hljs-number\">10</span>] = &#123; <br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">0</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">1</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">2</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">3</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">4</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">5</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">6</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">7</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">8</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">9</span><br>&#125;;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)<br>    <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;num[%d] = %d\\n&quot;</span>, i, num[i]);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，当打印一个数组时，缺省是不打印索引下标的：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) p num<br><span class=\"hljs-meta\"><span class=\"hljs-keyword\">$1</span> = &#123;1, 2, 4, 8, 16, 32, 64, 128, 256, 512&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果要打印索引下标，则可以通过如下命令进行设置：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) set print array-indexes on<br><br>(gdb) <span class=\"hljs-selector-tag\">p</span> num<br>$<span class=\"hljs-number\">2</span> = &#123;<span class=\"hljs-selector-attr\">[0]</span> = <span class=\"hljs-number\">1</span>, <span class=\"hljs-selector-attr\">[1]</span> = <span class=\"hljs-number\">2</span>, <span class=\"hljs-selector-attr\">[2]</span> = <span class=\"hljs-number\">4</span>, <span class=\"hljs-selector-attr\">[3]</span> = <span class=\"hljs-number\">8</span>, <span class=\"hljs-selector-attr\">[4]</span> = <span class=\"hljs-number\">16</span>, <span class=\"hljs-selector-attr\">[5]</span> = <span class=\"hljs-number\">32</span>, <span class=\"hljs-selector-attr\">[6]</span> = <span class=\"hljs-number\">64</span>, <span class=\"hljs-selector-attr\">[7]</span> = <span class=\"hljs-number\">128</span>, <span class=\"hljs-selector-attr\">[8]</span> = <span class=\"hljs-number\">256</span>, <span class=\"hljs-selector-attr\">[9]</span> = <span class=\"hljs-number\">512</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print\">gdb手册</a></p>\n<h5 id=\"打印函数局部变量的值\"><a href=\"#打印函数局部变量的值\" class=\"headerlink\" title=\"打印函数局部变量的值\"></a>打印函数局部变量的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_a</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_b</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">1</span>;<br>\tfun_a();<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, b);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_c</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">2</span>;<br>\tfun_b();<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, c);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_d</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> d = <span class=\"hljs-number\">3</span>;<br>\tfun_c();<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, d);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> var = <span class=\"hljs-number\">-1</span>;<br>\tfun_d();<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果要打印函数局部变量的值，可以使用“bt full”命令（bt是backtrace的缩写）。首先我们在函数fun_a里打上断点，当程序断住时，显示调用栈信息：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt<br>#<span class=\"hljs-number\">0</span>  fun_a () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x000109b0 <span class=\"hljs-keyword\">in</span> fun_b () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x000109e4 <span class=\"hljs-keyword\">in</span> fun_c () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">19</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x00010a18 <span class=\"hljs-keyword\">in</span> fun_d () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">26</span><br>#<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>x00010a4c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">33</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来，用“bt full”命令显示各个函数的局部变量值：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt full<br>#<span class=\"hljs-number\">0</span>  fun_a () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br>        <span class=\"hljs-selector-tag\">a</span> = <span class=\"hljs-number\">0</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x000109b0 <span class=\"hljs-keyword\">in</span> fun_b () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>        <span class=\"hljs-selector-tag\">b</span> = <span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x000109e4 <span class=\"hljs-keyword\">in</span> fun_c () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">19</span><br>        c = <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x00010a18 <span class=\"hljs-keyword\">in</span> fun_d () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">26</span><br>        d = <span class=\"hljs-number\">3</span><br>#<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>x00010a4c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">33</span><br>        <span class=\"hljs-selector-tag\">var</span> = -<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以使用如下“bt full n”，意思是从内向外显示n个栈桢，及其局部变量，例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt full <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">0</span>  fun_a () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br>        <span class=\"hljs-selector-tag\">a</span> = <span class=\"hljs-number\">0</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x000109b0 <span class=\"hljs-keyword\">in</span> fun_b () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>        <span class=\"hljs-selector-tag\">b</span> = <span class=\"hljs-number\">1</span><br>(More stack frames follow...)<br></code></pre></td></tr></table></figure>\n\n<p>而“bt full -n”，意思是从外向内显示n个栈桢，及其局部变量，例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt full -<span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x00010a18 <span class=\"hljs-keyword\">in</span> fun_d () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">26</span><br>        d = <span class=\"hljs-number\">3</span><br>#<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>x00010a4c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">33</span><br>        <span class=\"hljs-selector-tag\">var</span> = -<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Backtrace.html\">gdb手册</a></p>\n<p>如果只是想打印当前函数局部变量的值，可以使用如下命令：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">(gdb) info locals<br><span class=\"hljs-attribute\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Frame-Info.html#index-info-locals\">gdb手册</a></p>\n<h5 id=\"打印进程内存信息\"><a href=\"#打印进程内存信息\" class=\"headerlink\" title=\"打印进程内存信息\"></a>打印进程内存信息</h5><p>用gdb调试程序时，如果想查看进程的内存映射信息，可以使用“i proc mappings”命令（i是info命令缩写），例如:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i proc mappings<br>process <span class=\"hljs-number\">27676</span> flags:<br>PR_STOPPED Process (LWP) is stopped<br>PR_ISTOP Stopped on an event of interest<br>PR_RLC Run-on-last-close is <span class=\"hljs-keyword\">in</span> effect<br>PR_MSACCT Microstate accounting enabled<br>PR_PCOMPAT Micro-state accounting inherited on fork<br>PR_FAULTED : Incurred a traced hardware fault FLTBPT: Breakpoint trap<br><br>Mapped address spaces:<br><br>    Start Addr   End Addr       Size     Offset   Flags<br>     <span class=\"hljs-number\">0x8046000</span>  <span class=\"hljs-number\">0x8047fff</span>     <span class=\"hljs-number\">0x2000</span> <span class=\"hljs-number\">0xfffff000</span> -s--rwx<br>     <span class=\"hljs-number\">0x8050000</span>  <span class=\"hljs-number\">0x8050fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----r-x<br>     <span class=\"hljs-number\">0x8060000</span>  <span class=\"hljs-number\">0x8060fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfee40000</span> <span class=\"hljs-number\">0xfef4efff</span>   <span class=\"hljs-number\">0x10f000</span>          <span class=\"hljs-number\">0</span> ----r-x<br>    <span class=\"hljs-number\">0xfef50000</span> <span class=\"hljs-number\">0xfef55fff</span>     <span class=\"hljs-number\">0x6000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfef5f000</span> <span class=\"hljs-number\">0xfef66fff</span>     <span class=\"hljs-number\">0x8000</span>   <span class=\"hljs-number\">0x10f000</span> ----rwx<br>    <span class=\"hljs-number\">0xfef67000</span> <span class=\"hljs-number\">0xfef68fff</span>     <span class=\"hljs-number\">0x2000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfef70000</span> <span class=\"hljs-number\">0xfef70fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfef80000</span> <span class=\"hljs-number\">0xfef80fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ---sr--<br>    <span class=\"hljs-number\">0xfef90000</span> <span class=\"hljs-number\">0xfef90fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rw-<br>    <span class=\"hljs-number\">0xfefa0000</span> <span class=\"hljs-number\">0xfefa0fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rw-<br>    <span class=\"hljs-number\">0xfefb0000</span> <span class=\"hljs-number\">0xfefb0fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfefc0000</span> <span class=\"hljs-number\">0xfefeafff</span>    <span class=\"hljs-number\">0x2b000</span>          <span class=\"hljs-number\">0</span> ----r-x<br>    <span class=\"hljs-number\">0xfeff0000</span> <span class=\"hljs-number\">0xfeff0fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfeffb000</span> <span class=\"hljs-number\">0xfeffcfff</span>     <span class=\"hljs-number\">0x2000</span>    <span class=\"hljs-number\">0x2b000</span> ----rwx<br>    <span class=\"hljs-number\">0xfeffd000</span> <span class=\"hljs-number\">0xfeffdfff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br></code></pre></td></tr></table></figure>\n\n<p>首先输出了进程的flags，接着是进程的内存映射信息。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/SVR4-Process-Information.html#index-info-proc-exe\">gdb手册</a>.</p>\n<p>此外，也可以用”i files”（还有一个同样作用的命令：“i target”）命令，它可以更详细地输出进程的内存信息，包括引用的动态链接库等等，例如：</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tcl\">(gdb) i files<br>Symbols from <span class=\"hljs-string\">&quot;/data1/nan/a&quot;</span>.<br>Unix /<span class=\"hljs-keyword\">proc</span><span class=\"hljs-title\"> child</span> process:<span class=\"hljs-title\"></span><br><span class=\"hljs-title\">    Using</span> the<span class=\"hljs-title\"> running</span> image<span class=\"hljs-title\"> of</span> child<span class=\"hljs-title\"> Thread</span> 1 (LWP 1)<span class=\"hljs-title\"> via</span> /<span class=\"hljs-keyword\">proc</span>.<span class=\"hljs-title\"></span><br><span class=\"hljs-title\">    While</span> running<span class=\"hljs-title\"> this,</span> GDB<span class=\"hljs-title\"> does</span> not<span class=\"hljs-title\"> access</span> memory<span class=\"hljs-title\"> from...</span><br>Local<span class=\"hljs-title\"> exec</span> file:<br>    `/data1/nan/a&#x27;,<span class=\"hljs-title\"> file</span> type<span class=\"hljs-title\"> elf32-i386-sol2.</span><br><span class=\"hljs-title\">    Entry</span> point: 0x8050950<br>    0x080500f4 - 0x08050105<span class=\"hljs-title\"> is</span> .interp<br>    0x08050108 - 0x08050114<span class=\"hljs-title\"> is</span> .eh_frame_hdr<br>    0x08050114 - 0x08050218<span class=\"hljs-title\"> is</span> .hash<br>    0x08050218 - 0x08050418<span class=\"hljs-title\"> is</span> .dynsym<br>    0x08050418 - 0x080507e6<span class=\"hljs-title\"> is</span> .dynstr<br>    0x080507e8 - 0x08050818<span class=\"hljs-title\"> is</span> .SUNW_version<br>    0x08050818 - 0x08050858<span class=\"hljs-title\"> is</span> .SUNW_versym<br>    0x08050858 - 0x08050890<span class=\"hljs-title\"> is</span> .SUNW_reloc<br>    0x08050890 - 0x080508c8<span class=\"hljs-title\"> is</span> .rel.plt<br>    0x080508c8 - 0x08050948<span class=\"hljs-title\"> is</span> .plt<br>    ......<br>\t0xfef5fb58 - 0xfef5fc48<span class=\"hljs-title\"> is</span> .dynamic<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef5fc80 - 0xfef650e2<span class=\"hljs-title\"> is</span> .data<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef650e2 - 0xfef650e2<span class=\"hljs-title\"> is</span> .bssf<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef650e8 - 0xfef65be0<span class=\"hljs-title\"> is</span> .picdata<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef65be0 - 0xfef666a7<span class=\"hljs-title\"> is</span> .data1<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef666a8 - 0xfef680dc<span class=\"hljs-title\"> is</span> .bss<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Files.html\">gdb手册</a></p>\n<h5 id=\"打印静态变量的值\"><a href=\"#打印静态变量的值\" class=\"headerlink\" title=\"打印静态变量的值\"></a>打印静态变量的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/* main.c */</span><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>;<br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  print_var_1();<br>  print_var_2();<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">/* static-1.c */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> var = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123; <br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;var = %d\\n&quot;</span>, var);<br>&#125; <br><br><span class=\"hljs-comment\">/* static-2.c */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> var = <span class=\"hljs-number\">2</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123; <br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;var = %d\\n&quot;</span>, var);<br>&#125; <br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果直接打印静态变量，则结果并不一定是你想要的：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">$ gcc -g <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">1</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.c</span><br>$ gdb -<span class=\"hljs-selector-tag\">q</span> ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span><br>(gdb) start<br>(gdb) <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">var</span><br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">2</span><br><br>$ gcc -g <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">1</span><span class=\"hljs-selector-class\">.c</span><br>$ gdb -<span class=\"hljs-selector-tag\">q</span> ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span><br>(gdb) start<br>(gdb) <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">var</span><br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>你可以显式地指定文件名（上下文）：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">(gdb) p <span class=\"hljs-string\">&#x27;static-1.c&#x27;</span>::var<br><span class=\"hljs-variable\">$1</span> = <span class=\"hljs-number\">1</span><br>(gdb) p <span class=\"hljs-string\">&#x27;static-2.c&#x27;</span>::var<br><span class=\"hljs-variable\">$2</span> = <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables\">gdb手册</a></p>\n<h5 id=\"打印变量的类型和所在文件\"><a href=\"#打印变量的类型和所在文件\" class=\"headerlink\" title=\"打印变量的类型和所在文件\"></a>打印变量的类型和所在文件</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">child</span> &#123;</span><br>  <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">10</span>];<br>  <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> &#123;</span> boy, girl &#125; gender;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">child</span> <span class=\"hljs-title\">he</span> =</span> &#123; <span class=\"hljs-string\">&quot;Tom&quot;</span>, boy &#125;;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">child</span> <span class=\"hljs-title\">she</span> =</span> &#123; <span class=\"hljs-string\">&quot;Jerry&quot;</span>, girl &#125;;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Hello %s %s.\\n&quot;</span>, he.gender == boy ? <span class=\"hljs-string\">&quot;boy&quot;</span> : <span class=\"hljs-string\">&quot;girl&quot;</span>, he.name);<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Hello %s %s.\\n&quot;</span>, she.gender == boy ? <span class=\"hljs-string\">&quot;boy&quot;</span> : <span class=\"hljs-string\">&quot;girl&quot;</span>, she.name);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，可以使用如下命令查看变量的类型：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">(gdb) whatis he<br><span class=\"hljs-attribute\">type</span> <span class=\"hljs-operator\">=</span> struct child<br></code></pre></td></tr></table></figure>\n\n<p>如果想查看详细的类型信息：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\">(gdb) p<span class=\"hljs-keyword\">type</span> he<br><span class=\"hljs-keyword\">type</span> = struct child &#123;<br>    char name[10];<br>    enum &#123;boy, girl&#125; gender;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果想查看定义该变量的文件：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) i <span class=\"hljs-keyword\">variables</span> he<br>All <span class=\"hljs-comment\">variables matching regular expression</span> <span class=\"hljs-comment\">&quot;he&quot;</span><span class=\"hljs-comment\">:</span><br><br>File <span class=\"hljs-comment\">variable.c:</span><br>struct <span class=\"hljs-comment\">child he</span>;<br><br>Non-debugging symbols:<br><span class=\"hljs-number\">0x0000000000402030</span>  she<br><span class=\"hljs-number\">0x00007ffff7dd3380</span>  __check_rhosts_file<br></code></pre></td></tr></table></figure>\n\n<p>哦，gdb会显示所有包含（匹配）该表达式的变量。如果只想查看完全匹配给定名字的变量：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) i <span class=\"hljs-keyword\">variables</span> ^he$<br>All <span class=\"hljs-comment\">variables matching regular expression</span> <span class=\"hljs-comment\">&quot;^he$&quot;</span><span class=\"hljs-comment\">:</span><br><br>File <span class=\"hljs-comment\">variable.c:</span><br>struct <span class=\"hljs-comment\">child he</span>;<br></code></pre></td></tr></table></figure>\n\n<p>注：<code>info variables</code>不会显示局部变量，即使是static的也没有太多的信息。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Symbols.html\">gdb手册</a></p>\n<h5 id=\"打印内存的值\"><a href=\"#打印内存的值\" class=\"headerlink\" title=\"打印内存的值\"></a>打印内存的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">100</span>];<br><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">sizeof</span>(a); i++)<br>        &#123;<br>                a[i] = i;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb中使用“<code>x</code>”命令来打印内存的值，格式为“<code>x/nfu addr</code>”。含义为以<code>f</code>格式打印从<code>addr</code>开始的<code>n</code>个长度单元为<code>u</code>的内存值。参数具体含义如下：<br>a）n：输出单元的个数。<br>b）f：是输出格式。比如<code>x</code>是以16进制形式输出，<code>o</code>是以8进制形式输出,等等。<br>c）u：标明一个单元的长度。<code>b</code>是一个<code>byte</code>，<code>h</code>是两个<code>byte</code>（halfword），<code>w</code>是四个<code>byte</code>（word），<code>g</code>是八个<code>byte</code>（giant word）。</p>\n<p>以上面程序为例：<br>（1） 以16进制格式打印数组前<code>a</code>16个byte的值：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) x/16xb a<br><span class=\"hljs-number\">0x7fffffffe4a0</span>: <span class=\"hljs-number\">0x00</span>    <span class=\"hljs-number\">0x01</span>    <span class=\"hljs-number\">0x02</span>    <span class=\"hljs-number\">0x03</span>    <span class=\"hljs-number\">0x04</span>    <span class=\"hljs-number\">0x05</span>    <span class=\"hljs-number\">0x06</span>    <span class=\"hljs-number\">0x07</span><br><span class=\"hljs-number\">0x7fffffffe4a8</span>: <span class=\"hljs-number\">0x08</span>    <span class=\"hljs-number\">0x09</span>    <span class=\"hljs-number\">0x0a</span>    <span class=\"hljs-number\">0x0b</span>    <span class=\"hljs-number\">0x0c</span>    <span class=\"hljs-number\">0x0d</span>    <span class=\"hljs-number\">0x0e</span>    <span class=\"hljs-number\">0x0f</span><br></code></pre></td></tr></table></figure>\n\n<p>（2） 以无符号10进制格式打印数组<code>a</code>前16个byte的值：</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">(gdb) x/16ub a<br>0x7fffffffe4a0:<span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 1 </span>     <span class=\"hljs-number\"> 2 </span>     <span class=\"hljs-number\"> 3 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 5 </span>     <span class=\"hljs-number\"> 6 </span>      7<br>0x7fffffffe4a8:<span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 9 </span>     <span class=\"hljs-number\"> 10 </span>    <span class=\"hljs-number\"> 11 </span>    <span class=\"hljs-number\"> 12 </span>    <span class=\"hljs-number\"> 13 </span>    <span class=\"hljs-number\"> 14 </span>     15<br></code></pre></td></tr></table></figure>\n\n<p>（3） 以2进制格式打印数组前16个<code>a</code>byte的值：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">(gdb) x/<span class=\"hljs-number\">16</span>tb a<br><span class=\"hljs-number\">0</span>x7fffffffe4a0: <span class=\"hljs-number\">00000000</span>        <span class=\"hljs-number\">00000001</span>        <span class=\"hljs-number\">00000010</span>        <span class=\"hljs-number\">00000011</span>        <span class=\"hljs-number\">00000100</span>        <span class=\"hljs-number\">00000101</span>        <span class=\"hljs-number\">00000110</span>        <span class=\"hljs-number\">00000111</span><br><span class=\"hljs-number\">0</span>x7fffffffe4a8: <span class=\"hljs-number\">00001000</span>        <span class=\"hljs-number\">00001001</span>        <span class=\"hljs-number\">00001010</span>        <span class=\"hljs-number\">00001011</span>        <span class=\"hljs-number\">00001100</span>        <span class=\"hljs-number\">00001101</span>        <span class=\"hljs-number\">00001110</span>        <span class=\"hljs-number\">00001111</span><br></code></pre></td></tr></table></figure>\n\n<p>（4） 以16进制格式打印数组<code>a</code>前16个word（4个byte）的值：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">(gdb) x/<span class=\"hljs-number\">16</span>xw a<br><span class=\"hljs-number\">0</span>x7fffffffe4a0: <span class=\"hljs-number\">0x03020100</span>      <span class=\"hljs-number\">0x07060504</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0b0a0908</span>      <span class=\"hljs-number\">0</span>x0f0e0d0c<br><span class=\"hljs-number\">0</span>x7fffffffe4b0: <span class=\"hljs-number\">0x13121110</span>      <span class=\"hljs-number\">0x17161514</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">1b1a1918</span>      <span class=\"hljs-number\">0</span>x1f1e1d1c<br><span class=\"hljs-number\">0</span>x7fffffffe4c0: <span class=\"hljs-number\">0x23222120</span>      <span class=\"hljs-number\">0x27262524</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">2b2a2928</span>      <span class=\"hljs-number\">0</span>x2f2e2d2c<br><span class=\"hljs-number\">0</span>x7fffffffe4d0: <span class=\"hljs-number\">0x33323130</span>      <span class=\"hljs-number\">0x37363534</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">3b3a3938</span>      <span class=\"hljs-number\">0</span>x3f3e3d3c<br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Memory.html\">gdb手册</a>.</p>\n<h5 id=\"打印源代码行\"><a href=\"#打印源代码行\" class=\"headerlink\" title=\"打印源代码行\"></a>打印源代码行</h5><p>如上所示，在gdb中可以使用<code>list</code>（简写为l）命令来显示源代码以及行号。<code>list</code>命令可以指定行号，函数：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> l <span class=\"hljs-number\">24</span><br><span class=\"hljs-comment\">(gdb)</span> l mai<span class=\"hljs-symbol\">n</span><br></code></pre></td></tr></table></figure>\n\n<p>还可以指定向前或向后打印：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> l -<br><span class=\"hljs-comment\">(gdb)</span> l +<br></code></pre></td></tr></table></figure>\n\n<p>还可以指定范围：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> l <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/List.html#List\">gdb手册</a></p>\n<h5 id=\"每行打印一个结构体成员\"><a href=\"#每行打印一个结构体成员\" class=\"headerlink\" title=\"每行打印一个结构体成员\"></a>每行打印一个结构体成员</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>        <span class=\"hljs-type\">int</span> a;<br>        <span class=\"hljs-type\">int</span> b;<br>        <span class=\"hljs-type\">int</span> c;<br>        <span class=\"hljs-type\">int</span> d;<br>        <span class=\"hljs-type\">pthread_mutex_t</span> mutex;<br>&#125;ex_st;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, PTHREAD_MUTEX_INITIALIZER&#125;;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>默认情况下，gdb以一种“紧凑”的方式打印结构体。以上面代码为例：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqf\">(gdb) n<br><span class=\"hljs-number\">15</span>              printf(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>(gdb) p st<br>$<span class=\"hljs-number\">1</span> = &#123;a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>, c = <span class=\"hljs-number\">3</span>, d = <span class=\"hljs-number\">4</span>, mutex = &#123;<span class=\"hljs-variable\">__data</span> = &#123;<span class=\"hljs-variable\">__lock</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__count</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__owner</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__nusers</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__kind</span> = <span class=\"hljs-number\">0</span>,<br>      <span class=\"hljs-variable\">__spins</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__list</span> = &#123;<span class=\"hljs-variable\">__prev</span> = <span class=\"hljs-number\">0</span>x0, <span class=\"hljs-variable\">__next</span> = <span class=\"hljs-number\">0</span>x0&#125;&#125;, <span class=\"hljs-variable\">__size</span> = <span class=\"hljs-string\">&#x27;\\000&#x27;</span> &lt;repeats <span class=\"hljs-number\">39</span> times&gt;, <span class=\"hljs-variable\">__align</span> = <span class=\"hljs-number\">0</span>&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到结构体的显示很混乱，尤其是结构体里还嵌套着其它结构体时。</p>\n<p>可以执行“set print pretty on”命令，这样每行只会显示结构体的一名成员，而且还会根据成员的定义层次进行缩进：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) <span class=\"hljs-keyword\">set</span> print <span class=\"hljs-comment\">pretty on</span><br>(gdb) p <span class=\"hljs-comment\">st</span><br>$2 = &#123;<br>  a <span class=\"hljs-comment\">= 1,</span><br>  b <span class=\"hljs-comment\">= 2,</span><br>  c <span class=\"hljs-comment\">= 3,</span><br>  d <span class=\"hljs-comment\">= 4,</span><br>  mutex <span class=\"hljs-comment\">= &#123;</span><br>    __data <span class=\"hljs-comment\">= &#123;</span><br>      __lock <span class=\"hljs-comment\">= 0,</span><br>      __count <span class=\"hljs-comment\">= 0,</span><br>      __owner <span class=\"hljs-comment\">= 0,</span><br>      __nusers <span class=\"hljs-comment\">= 0,</span><br>      __kind <span class=\"hljs-comment\">= 0,</span><br>      __spins <span class=\"hljs-comment\">= 0,</span><br>      __list <span class=\"hljs-comment\">= &#123;</span><br>        __prev <span class=\"hljs-comment\">= 0x0,</span><br>        __next <span class=\"hljs-comment\">= 0x0</span><br>      &#125;<br>    &#125;,<br>    __size <span class=\"hljs-comment\">=</span> <span class=\"hljs-comment\">&#x27;\\000&#x27;</span> <span class=\"hljs-comment\">&lt;repeats 39 times&gt;,</span><br>    __align <span class=\"hljs-comment\">= 0</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-print-settings\">gdb手册</a></p>\n<h5 id=\"按照派生类型打印对象\"><a href=\"#按照派生类型打印对象\" class=\"headerlink\" title=\"按照派生类型打印对象\"></a>按照派生类型打印对象</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br> <span class=\"hljs-keyword\">public</span>:<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">draw</span> <span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> : <span class=\"hljs-keyword\">public</span> Shape &#123;<br> <span class=\"hljs-type\">int</span> radius;<br> <span class=\"hljs-keyword\">public</span>:<br>  <span class=\"hljs-built_in\">Circle</span> () &#123; radius = <span class=\"hljs-number\">1</span>; &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">draw</span> <span class=\"hljs-params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"hljs-string\">&quot;drawing a circle...\\n&quot;</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span> : <span class=\"hljs-keyword\">public</span> Shape &#123;<br> <span class=\"hljs-type\">int</span> height;<br> <span class=\"hljs-keyword\">public</span>:<br>  <span class=\"hljs-built_in\">Square</span> () &#123; height = <span class=\"hljs-number\">2</span>; &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">draw</span> <span class=\"hljs-params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"hljs-string\">&quot;drawing a square...\\n&quot;</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">drawShape</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">class</span> Shape &amp;p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  p.<span class=\"hljs-built_in\">draw</span> ();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  Circle a;<br>  Square b;<br>  <span class=\"hljs-built_in\">drawShape</span> (a);<br>  <span class=\"hljs-built_in\">drawShape</span> (b);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，当打印一个对象时，缺省是按照声明的类型进行打印：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> frame<br><span class=\"hljs-attr\">#0</span>  drawShape <span class=\"hljs-comment\">(p=...)</span> at object.cxx:<span class=\"hljs-number\">25</span><br><span class=\"hljs-number\">25</span>\t  p.draw <span class=\"hljs-comment\">()</span>;<br><span class=\"hljs-comment\">(gdb)</span> p p<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-comment\">(Shape &amp;)</span> @<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">7</span>fffffffde<span class=\"hljs-number\">90</span>: &#123;_vptr.Shape = <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>a<span class=\"hljs-number\">80</span> &lt;vtable for Circle<span class=\"hljs-number\">+16</span>&gt;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在这个例子中，p虽然声明为class Shape，但它实际的派生类型可能为class Circle和Square。如果要缺省按照派生类型进行打印，则可以通过如下命令进行设置：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">set</span> print <span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">on</span><br><br>(gdb) p p<br><span class=\"hljs-meta\">$2</span> = (<span class=\"hljs-type\">Circle</span> &amp;) @<span class=\"hljs-number\">0x7fffffffde90</span>: &#123;&lt;Shape&gt; = &#123;_vptr.Shape = <span class=\"hljs-number\">0x400a80</span> &lt;vtable <span class=\"hljs-keyword\">for</span> <span class=\"hljs-type\">Circle</span>+<span class=\"hljs-number\">16</span>&gt;&#125;, radius = <span class=\"hljs-number\">1</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当打印对象类型信息时，该设置也会起作用：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">(gdb) whatis p<br>type = Shape &amp;<br>(gdb) ptype p<br>type = <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> &#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">void</span></span>)</span>;<br>&#125; &amp;<br><br>(gdb) <span class=\"hljs-function\"><span class=\"hljs-keyword\">set</span> print <span class=\"hljs-built_in\">object</span> <span class=\"hljs-title\">on</span></span><br><span class=\"hljs-function\">(<span class=\"hljs-params\">gdb</span>) whatis p</span><br><span class=\"hljs-function\">type</span> = <span class=\"hljs-comment\">/* real type = Circle &amp; */</span><br>Shape &amp;<br>(gdb) ptype p<br>type = <span class=\"hljs-comment\">/* real type = Circle &amp; */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> &#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">void</span></span>)</span>;<br>&#125; &amp;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print\">gdb手册</a></p>\n<h5 id=\"指定程序的输入输出设备\"><a href=\"#指定程序的输入输出设备\" class=\"headerlink\" title=\"指定程序的输入输出设备\"></a>指定程序的输入输出设备</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++)<br>    &#123;<br>      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;i = %d\\n&quot;</span>, i);<br>    &#125;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，缺省情况下程序的输入输出是和gdb使用同一个终端。你也可以为程序指定一个单独的输入输出终端。</p>\n<p>首先，打开一个新终端，使用如下命令获得设备文件名：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">$ tty<br><span class=\"hljs-regexp\">/dev/</span>pts/<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>然后，通过命令行选项指定程序的输入输出设备：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">$ gdb -tty <span class=\"hljs-regexp\">/dev/</span>pts<span class=\"hljs-regexp\">/2 ./</span>a.out<br>(gdb) r<br></code></pre></td></tr></table></figure>\n\n<p>或者，在gdb中，使用命令进行设置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) tty <span class=\"hljs-regexp\">/dev/</span>pts/<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Input_002fOutput.html#index-tty\">gdb手册</a></p>\n<h5 id=\"使用“-”和“-”变量\"><a href=\"#使用“-”和“-”变量\" class=\"headerlink\" title=\"使用“$\\”和“$_”变量\"></a>使用“$\\”和“$_”变量</h5><h5 id=\"打印程序动态分配内存的信息\"><a href=\"#打印程序动态分配内存的信息\" class=\"headerlink\" title=\"打印程序动态分配内存的信息\"></a>打印程序动态分配内存的信息</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;malloc.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">char</span> *p[<span class=\"hljs-number\">10</span>];<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">sizeof</span>(p)/<span class=\"hljs-built_in\">sizeof</span>(p[<span class=\"hljs-number\">0</span>]); i++)<br>        &#123;<br>                p[i] = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">100000</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用下面的自定义命令，打印程序动态分配内存的信息：</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">define mallocinfo<br>  <span class=\"hljs-keyword\">set</span> $__f = <span class=\"hljs-meta\">fopen</span>(<span class=\"hljs-string\">&quot;/dev/tty&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>)<br>  <span class=\"hljs-keyword\">call</span> malloc_info(0, $__f)<br>  <span class=\"hljs-keyword\">call</span> <span class=\"hljs-meta\">fclose</span>($__f)<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure>\n\n<p>以上面程序为例：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">Temporary breakpoint <span class=\"hljs-number\">5</span>, main () <span class=\"hljs-keyword\">at</span> a.c:<span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">7</span>               int i = <span class=\"hljs-number\">0</span>;<br>(gdb) mallocinfo <br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">malloc</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heap</span> <span class=\"hljs-attr\">nr</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sizes</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">sizes</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heap</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">malloc</span>&gt;</span></span><br><span class=\"hljs-variable\">$20</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-variable\">$21</span> = <span class=\"hljs-number\">0</span><br>(gdb) n<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) mallocinfo <br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">malloc</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heap</span> <span class=\"hljs-attr\">nr</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sizes</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">sizes</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heap</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">malloc</span>&gt;</span></span><br><span class=\"hljs-variable\">$22</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-variable\">$23</span> = <span class=\"hljs-number\">0</span><br>(gdb) n<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) mallocinfo <br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">malloc</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heap</span> <span class=\"hljs-attr\">nr</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sizes</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">sizes</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heap</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">malloc</span>&gt;</span></span><br><span class=\"hljs-variable\">$24</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-variable\">$25</span> = <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb输出了动态分配内存的变化信息。<br>参见<a href=\"http://stackoverflow.com/questions/1471226/most-tricky-useful-commands-for-gdb-debugger\">stackoverflow</a>.</p>\n<h5 id=\"打印调用栈帧中变量的值\"><a href=\"#打印调用栈帧中变量的值\" class=\"headerlink\" title=\"打印调用栈帧中变量的值\"></a>打印调用栈帧中变量的值</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">return</span> b * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">return</span> b * <span class=\"hljs-built_in\">func1</span>(a);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">3</span>;<br>  <span class=\"hljs-keyword\">return</span> b * <span class=\"hljs-built_in\">func2</span>(a);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果想查看调用栈帧中的变量，可以先切换到该栈帧中，然后打印：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) <span class=\"hljs-selector-tag\">b</span> func1<br>(gdb) r<br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  func1 (a=<span class=\"hljs-number\">10</span>) at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">5</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x0000000000400560 <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x0000000000400582 <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">18</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x0000000000400596 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">23</span><br>(gdb) f <span class=\"hljs-number\">1</span><br>(gdb) <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">b</span><br>(gdb) f <span class=\"hljs-number\">2</span><br>(gdb) <span class=\"hljs-selector-tag\">p</span> b<br></code></pre></td></tr></table></figure>\n\n<p>也可以不进行切换，直接打印：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">(gdb) p func2::b<br><span class=\"hljs-variable\">$1</span> = <span class=\"hljs-number\">2</span><br>(gdb) p func3::b<br><span class=\"hljs-variable\">$2</span> = <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<p>同样，对于C++的函数名，需要使用单引号括起来，比如：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">(gdb) p <span class=\"hljs-string\">&#x27;(anonymous namespace)::SSAA::handleStore&#x27;</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:n-&gt;pi-&gt;inst-&gt;dump</span>()<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables\">gdb手册</a></p>\n<h4 id=\"9、多进程-x2F-线程\"><a href=\"#9、多进程-x2F-线程\" class=\"headerlink\" title=\"9、多进程&#x2F;线程\"></a>9、多进程&#x2F;线程</h4><h5 id=\"调试已经运行的进程\"><a href=\"#调试已经运行的进程\" class=\"headerlink\" title=\"调试已经运行的进程\"></a>调试已经运行的进程</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, (<span class=\"hljs-type\">char</span>*)p_arg);<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>调试已经运行的进程有两种方法：一种是gdb启动时，指定进程的ID：gdb program processID（也可以用-p或者–pid指定进程ID，例如：gdb program -p&#x3D;10210）。以上面代码为例，用“ps”命令已经获得进程ID为10210：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\">bash-<span class=\"hljs-number\">3.2#</span> gdb -q a <span class=\"hljs-number\">10210</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> /data/nan/a...done.<br>Attaching <span class=\"hljs-keyword\">to</span> program `/data/nan/a<span class=\"hljs-comment\">&#x27;, process 10210</span><br>[<span class=\"hljs-built_in\">New</span> process <span class=\"hljs-number\">10210</span>]<br>Retry #<span class=\"hljs-number\">1</span>:<br>Retry #<span class=\"hljs-number\">2</span>:<br>Retry #<span class=\"hljs-number\">3</span>:<br>Retry #<span class=\"hljs-number\">4</span>:<br>Reading symbols <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">3</span>        ]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">2</span>        ]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)]<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span><br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>xfeedcae4 <span class=\"hljs-keyword\">in</span> sleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x080509ef <span class=\"hljs-keyword\">in</span> main () at a.c:<span class=\"hljs-number\">17</span><br></code></pre></td></tr></table></figure>\n\n<p>如果嫌每次ps查看进程号比较麻烦，请尝试如下脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">保存为xgdb.sh（添加可执行权限）</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">用法 xgdb.sh a</span> <br>prog_bin=$1<br>running_name=$(basename $prog_bin)<br>pid=$(/sbin/pidof $running_name)<br>gdb attach $pid<br></code></pre></td></tr></table></figure>\n\n<p>另一种是先启动gdb，然后用“attach”命令“附着”在进程上：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\">bash-<span class=\"hljs-number\">3.2#</span> gdb -q a<br>Reading symbols <span class=\"hljs-keyword\">from</span> /data/nan/a...done.<br>(gdb) attach <span class=\"hljs-number\">10210</span><br>Attaching <span class=\"hljs-keyword\">to</span> program `/data/nan/a<span class=\"hljs-comment\">&#x27;, process 10210</span><br>[<span class=\"hljs-built_in\">New</span> process <span class=\"hljs-number\">10210</span>]<br>Retry #<span class=\"hljs-number\">1</span>:<br>Retry #<span class=\"hljs-number\">2</span>:<br>Retry #<span class=\"hljs-number\">3</span>:<br>Retry #<span class=\"hljs-number\">4</span>:<br>Reading symbols <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">3</span>        ]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">2</span>        ]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)]<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span><br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>xfeedcae4 <span class=\"hljs-keyword\">in</span> sleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x080509ef <span class=\"hljs-keyword\">in</span> main () at a.c:<span class=\"hljs-number\">17</span><br></code></pre></td></tr></table></figure>\n\n<p>如果不想继续调试了，可以用“detach”命令“脱离”进程：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">(gdb) detach<br>Detaching from program: <span class=\"hljs-regexp\">/data/</span><span class=\"hljs-literal\">nan</span>/a, process <span class=\"hljs-number\">10210</span><br>(gdb) bt<br>No stack.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Attach.html#index-attach\">gdb手册</a></p>\n<h5 id=\"调试子进程\"><a href=\"#调试子进程\" class=\"headerlink\" title=\"调试子进程\"></a>调试子进程</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>\t<span class=\"hljs-type\">pid_t</span> pid;<br><br>\tpid = fork();<br>\t<span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在调试多进程程序时，gdb默认会追踪父进程。例如：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">8</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>               pid = fork();<br>(gdb) n<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb) hello world<br><br><span class=\"hljs-number\">13</span>              <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">15</span>                      <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br>(gdb)<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">12786</span>) exited normally]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序执行到第15行：父进程退出。</p>\n<p>如果要调试子进程，要使用如下命令：“set follow-fork-mode child”，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">(gdb) set follow-fork-mode child<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">8</span>.<br>Starting program: /data2/home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>               pid = <span class=\"hljs-built_in\">fork</span>();<br>(gdb) n<br><span class=\"hljs-selector-attr\">[New process 12241]</span><br><span class=\"hljs-selector-attr\">[Switching to process 12241]</span><br><span class=\"hljs-number\">9</span>               if (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">13</span>              else if (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">17</span>              <span class=\"hljs-built_in\">printf</span>(&quot;hello world\\n&quot;);<br>(gdb)<br>hello world<br><span class=\"hljs-number\">18</span>              return <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序执行到第17行：子进程打印“hello world”。</p>\n<p>这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\">gdb手册</a></p>\n<h5 id=\"同时调试父进程和子进程\"><a href=\"#同时调试父进程和子进程\" class=\"headerlink\" title=\"同时调试父进程和子进程\"></a>同时调试父进程和子进程</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>    <span class=\"hljs-type\">pid_t</span> pid;<br><br>    pid = fork();<br>    <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Parent\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Child\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在调试多进程程序时，gdb默认只会追踪父进程的运行，而子进程会独立运行，gdb不会控制。以上面程序为例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">7</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">7</span>           pid = fork();<br>(gdb) n<br><span class=\"hljs-number\">8</span>           <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb) Child<br><br><span class=\"hljs-number\">12</span>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">14</span>              printf(<span class=\"hljs-string\">&quot;Parent\\n&quot;</span>);<br>(gdb)<br>Parent<br><span class=\"hljs-number\">15</span>              <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n<p>可以看到当单步执行到第8行时，程序打印出“Child” ，证明子进程已经开始独立运行。</p>\n<p>如果要同时调试父进程和子进程，可以使用“<code>set detach-on-fork off</code>”（默认<code>detach-on-fork</code>是<code>on</code>）命令，这样gdb就能同时调试父子进程，并且在调试一个进程时，另外一个进程处于挂起状态。仍以上面程序为例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) set detach-on-fork off<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">7</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">7</span>           pid = fork();<br>(gdb) n<br>[New process <span class=\"hljs-number\">1050</span>]<br><span class=\"hljs-number\">8</span>           <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">12</span>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb) i inferior<br>  Num  Description       Executable<br>  <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1050</span>      <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>* <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1046</span>      <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>(gdb) n<br><span class=\"hljs-number\">14</span>              printf(<span class=\"hljs-string\">&quot;Parent\\n&quot;</span>);<br>(gdb) n<br>Parent<br><span class=\"hljs-number\">15</span>              <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br>(gdb)<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">1046</span>) exited normally]<br>(gdb)<br>The program is not being run.<br>(gdb) i inferiors<br>  Num  Description       Executable<br>  <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1050</span>      <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>* <span class=\"hljs-number\">1</span>    &lt;null&gt;            <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>(gdb) inferior <span class=\"hljs-number\">2</span><br>[Switching to inferior <span class=\"hljs-number\">2</span> [process <span class=\"hljs-number\">1050</span>] (<span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a)]<br>[Switching to thread <span class=\"hljs-number\">2</span> (process <span class=\"hljs-number\">1050</span>)]<br><span class=\"hljs-comment\">#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6</span><br>(gdb) bt<br><span class=\"hljs-comment\">#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6</span><br><span class=\"hljs-comment\">#1  0x0000000000400561 in main () at a.c:7</span><br>(gdb) n<br>Single stepping until <span class=\"hljs-keyword\">exit</span> from <span class=\"hljs-keyword\">function</span> fork,<br>which has no line number information.<br>main () at a.c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>           <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">12</span>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">17</span>          printf(<span class=\"hljs-string\">&quot;Child\\n&quot;</span>);<br>(gdb)<br>Child<br><span class=\"hljs-number\">18</span>          return <span class=\"hljs-number\">0</span>;<br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>在使用“<code>set detach-on-fork off</code>”命令后，用“<code>i inferiors</code>”（<code>i</code>是<code>info</code>命令缩写）查看进程状态，可以看到父子进程都在被gdb调试的状态，前面显示“*”是正在调试的进程。当父进程退出后，用“<code>inferior infno</code>”切换到子进程去调试。</p>\n<p>这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\">gdb手册</a></p>\n<p>此外，如果想让父子进程都同时运行，可以使用“<code>set schedule-multiple on</code>”（默认<code>schedule-multiple</code>是<code>off</code>）命令，仍以上述代码为例：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) <span class=\"hljs-keyword\">set</span> detach-on-fork <span class=\"hljs-comment\">off</span><br>(gdb) <span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">schedule-multiple on</span><br>(gdb) start<br>Temporary <span class=\"hljs-comment\">breakpoint 1 at 0x40059c: file a.c, line 7.</span><br>Starting <span class=\"hljs-comment\">program:</span> /data2/<span class=\"hljs-comment\">home</span>/nanxiao/<span class=\"hljs-comment\">a</span><br><br>Temporary <span class=\"hljs-comment\">breakpoint 1, main () at a.c:7</span><br>7           pid <span class=\"hljs-comment\">= fork()</span>;<br>(gdb) n<br>[New process <span class=\"hljs-number\">26597</span>]<br>Child<br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印出了“Child”，证明子进程也在运行了。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/All_002dStop-Mode.html#All_002dStop-Mode\">gdb手册</a></p>\n<h5 id=\"查看线程信息\"><a href=\"#查看线程信息\" class=\"headerlink\" title=\"查看线程信息\"></a>查看线程信息</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, (<span class=\"hljs-type\">char</span>*)p_arg);<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试多线程程序，可以用“i threads”命令（i是info命令缩写）查看所有线程的信息，以上面程序为例（运行平台为Linux，CPU为X86_64）:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">  (gdb) i threads<br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">3</span>    Thread <span class=\"hljs-number\">0</span>x7ffff6e2b700 (LWP <span class=\"hljs-number\">31773</span>) <span class=\"hljs-number\">0</span>x00007ffff7915911 in clone () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>  <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">0</span>x7ffff782c700 (LWP <span class=\"hljs-number\">31744</span>) <span class=\"hljs-number\">0</span>x00007ffff78d9bcd in nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>* <span class=\"hljs-number\">1</span>    Thread <span class=\"hljs-number\">0</span>x7ffff7fe9700 (LWP <span class=\"hljs-number\">31738</span>) main () at a.c:<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n\n<p>第一项（Id）：是gdb标示每个线程的唯一ID：1，2等等。<br>第二项（Target Id）：是具体系统平台用来标示每个线程的ID，不同平台信息可能会不同。 像当前Linux平台显示的就是： Thread 0x7ffff6e2b700 (LWP 31773)。<br>第三项（Frame）：显示的是线程执行到哪个函数。<br>前面带“*”表示的是“current thread”，可以理解为gdb调试多线程程序时，选择的一个“默认线程”。</p>\n<p>再以Solaris平台（CPU为X86_64）为例，可以看到显示信息会略有不同：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i threads<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)]<br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">6</span>    Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)  <span class=\"hljs-number\">0</span>xfeec870d in _thr_setup () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/libc.so.<span class=\"hljs-number\">1</span><br>  <span class=\"hljs-number\">5</span>    Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)  <span class=\"hljs-number\">0</span>xfefc9661 in elf_find_sym () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/ld.so.<span class=\"hljs-number\">1</span><br>  <span class=\"hljs-number\">4</span>    LWP    <span class=\"hljs-number\">3</span>          <span class=\"hljs-number\">0</span>xfeec870d in _thr_setup () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/libc.so.<span class=\"hljs-number\">1</span><br>  <span class=\"hljs-number\">3</span>    LWP    <span class=\"hljs-number\">2</span>          <span class=\"hljs-number\">0</span>xfefc9661 in elf_find_sym () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/ld.so.<span class=\"hljs-number\">1</span><br>* <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)  main () at a.c:<span class=\"hljs-number\">18</span><br>  <span class=\"hljs-number\">1</span>    LWP    <span class=\"hljs-number\">1</span>          main () at a.c:<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以用“i threads [Id…]”指定打印某些线程的信息，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">  (gdb) <span class=\"hljs-selector-tag\">i</span> threads <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span><br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">0</span>x7ffff782c700 (LWP <span class=\"hljs-number\">12248</span>) <span class=\"hljs-number\">0</span>x00007ffff78d9bcd in nanosleep () <span class=\"hljs-selector-tag\">from</span> /lib64/libc<span class=\"hljs-selector-class\">.so</span>.<span class=\"hljs-number\">6</span><br>* <span class=\"hljs-number\">1</span>    Thread <span class=\"hljs-number\">0</span>x7ffff7fe9700 (LWP <span class=\"hljs-number\">12244</span>) <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Threads.html\">gdb手册</a>.</p>\n<h5 id=\"在Solaris上使用maintenance命令查看线程信息\"><a href=\"#在Solaris上使用maintenance命令查看线程信息\" class=\"headerlink\" title=\"在Solaris上使用maintenance命令查看线程信息\"></a>在Solaris上使用maintenance命令查看线程信息</h5><p>用gdb调试多线程程序时，如果想查看线程信息，可以使用“i threads”命令（i是info命令缩写），例如:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i threads<br><span class=\"hljs-number\">106</span> process <span class=\"hljs-number\">2689429</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">105</span> process <span class=\"hljs-number\">2623893</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">104</span> process <span class=\"hljs-number\">2558357</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">103</span> process <span class=\"hljs-number\">2492821</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>在Solaris操作系统上，gdb为Solaris量身定做了一个查看线程信息的命令：“maint info sol-threads”（maint是maintenance命令缩写），例如:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">(gdb) maint <span class=\"hljs-literal\">inf</span>o sol-threads<br><span class=\"hljs-keyword\">user</span>   <span class=\"hljs-title\">thread</span> <span class=\"hljs-comment\">#1, lwp 1, (active)</span><br><span class=\"hljs-keyword\">user</span>   <span class=\"hljs-title\">thread</span> <span class=\"hljs-comment\">#2, lwp 2, (active)    startfunc: monitor_thread</span><br><span class=\"hljs-keyword\">user</span>   <span class=\"hljs-title\">thread</span> <span class=\"hljs-comment\">#3, lwp 3, (asleep)    startfunc: mem_db_thread</span><br>- Sleep func: <span class=\"hljs-number\">0</span>x000aa32c<br></code></pre></td></tr></table></figure>\n\n<p>可以看到相比于info命令，maintenance命令显示了更多信息。例如线程当前状态（active，asleep），入口函数（startfunc）等。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Threads.html\">gdb手册</a></p>\n<h5 id=\"不显示线程启动和退出信息\"><a href=\"#不显示线程启动和退出信息\" class=\"headerlink\" title=\"不显示线程启动和退出信息\"></a>不显示线程启动和退出信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span><br>&#123;<br>       sleep(<span class=\"hljs-number\">10</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        pthread_create(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        pthread_create(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        sleep(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>默认情况下，gdb检测到有线程产生和退出时，会打印提示信息，以上面程序为例:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">(gdb) r<br>Starting program: /<span class=\"hljs-built_in\">data</span>/<span class=\"hljs-number\">nan</span>/a<br><span class=\"hljs-meta\">[</span><span class=\"hljs-keyword\">Thread</span> debugging using libthread_db enabled<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> <span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> LWP    <span class=\"hljs-number\">2</span>        <span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> LWP    <span class=\"hljs-number\">3</span>        <span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span>LWP    <span class=\"hljs-number\">2</span>         exited<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> <span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">2</span>        <span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span>LWP    <span class=\"hljs-number\">3</span>         exited<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> <span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">3</span>        <span class=\"hljs-meta\">]</span><br></code></pre></td></tr></table></figure>\n\n<p>如果不想显示这些信息，可以使用“<code>set print thread-events off</code>”命令，这样当有线程产生和退出时，就不会打印提示信息：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) <span class=\"hljs-keyword\">set</span> print <span class=\"hljs-comment\">thread-events off</span><br>(gdb) r<br>Starting <span class=\"hljs-comment\">program:</span> /data/<span class=\"hljs-comment\">nan</span>/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到不再打印相关信息。</p>\n<p>这个命令有些平台不支持，使用时需注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Threads.html\">gdb手册</a>.</p>\n<h5 id=\"使用“-thread”变量\"><a href=\"#使用“-thread”变量\" class=\"headerlink\" title=\"使用“$_thread”变量\"></a>使用“$_thread”变量</h5><h5 id=\"一个gdb会话中同时调试多个程序\"><a href=\"#一个gdb会话中同时调试多个程序\" class=\"headerlink\" title=\"一个gdb会话中同时调试多个程序\"></a>一个gdb会话中同时调试多个程序</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">a.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = a * b;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;c is %d\\n&quot;</span>, c);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br>b.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func1</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func2</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb支持在一个会话中同时调试多个程序。以上面程序为例，首先调试<code>a</code>程序：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">root@bash:~$ gdb <span class=\"hljs-keyword\">a</span><br>GNU gdb (Ubuntu <span class=\"hljs-number\">7.7</span><span class=\"hljs-number\">-0</span>ubuntu3) <span class=\"hljs-number\">7.7</span><br>Copyright (C) <span class=\"hljs-number\">2014</span> Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL <span class=\"hljs-built_in\">version</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">or</span> later &lt;<span class=\"hljs-keyword\">http</span>://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free <span class=\"hljs-built_in\">to</span> change <span class=\"hljs-keyword\">and</span> redistribute <span class=\"hljs-keyword\">it</span>.<br>There is NO WARRANTY, <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">the</span> extent permitted <span class=\"hljs-keyword\">by</span> law.  Type <span class=\"hljs-string\">&quot;show copying&quot;</span><br><span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">&quot;show warranty&quot;</span> <span class=\"hljs-keyword\">for</span> details.<br>This GDB was configured <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&quot;x86_64-linux-gnu&quot;</span>.<br>Type <span class=\"hljs-string\">&quot;show configuration&quot;</span> <span class=\"hljs-keyword\">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;<span class=\"hljs-keyword\">http</span>://www.gnu.org/software/gdb/bugs/&gt;.<br>Find <span class=\"hljs-keyword\">the</span> GDB manual <span class=\"hljs-keyword\">and</span> other documentation resources online <span class=\"hljs-keyword\">at</span>:<br>&lt;<span class=\"hljs-keyword\">http</span>://www.gnu.org/software/gdb/documentation/&gt;.<br>For help, type <span class=\"hljs-string\">&quot;help&quot;</span>.<br>Type <span class=\"hljs-string\">&quot;apropos word&quot;</span> <span class=\"hljs-built_in\">to</span> search <span class=\"hljs-keyword\">for</span> commands related <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&quot;word&quot;</span>...<br>Reading symbols <span class=\"hljs-built_in\">from</span> <span class=\"hljs-keyword\">a</span>...done.<br>(gdb) <span class=\"hljs-built_in\">start</span><br>Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x400568</span>: <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">a</span>.c, <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">10.</span><br>Starting program: /home/nanxiao/<span class=\"hljs-keyword\">a</span><br></code></pre></td></tr></table></figure>\n\n<p>接着使用“<code>add-inferior [ -copies n ] [ -exec executable ]</code>”命令加载可执行文件<code>b</code>。其中<code>n</code>默认为1：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) add-inferior -copies <span class=\"hljs-number\">2</span> -exec b<br>Added inferior <span class=\"hljs-number\">2</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> b...done.<br>Added inferior <span class=\"hljs-number\">3</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> b...done.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">2</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br>(gdb) inferior <span class=\"hljs-number\">2</span><br>[Switching to inferior <span class=\"hljs-number\">2</span> [&lt;<span class=\"hljs-keyword\">null</span>&gt;] (<span class=\"hljs-regexp\">/home/</span>nanxiao/b)]<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">2</span> at <span class=\"hljs-number\">0</span>x400568: main. (<span class=\"hljs-number\">3</span> locations)<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br><br>Temporary breakpoint <span class=\"hljs-number\">2</span>, main () at b.c:<span class=\"hljs-number\">24</span><br><span class=\"hljs-number\">24</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, func3(<span class=\"hljs-number\">10</span>));<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1590</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br></code></pre></td></tr></table></figure>\n\n<p>可以看到可以调试<code>b</code>程序了。</p>\n<p>另外也可用“<code>clone-inferior [ -copies n ] [ infno ]</code>”克隆现有的<code>inferior</code>，其中<code>n</code>默认为1，<code>infno</code>默认为当前的<code>inferior</code>：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1590</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br>(gdb) clone-inferior -copies <span class=\"hljs-number\">1</span><br>Added inferior <span class=\"hljs-number\">4</span>.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">4</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1590</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br></code></pre></td></tr></table></figure>\n\n<p>可以看到又多了一个<code>b</code>程序。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html\">gdb手册</a>.</p>\n<h5 id=\"打印程序进程空间信息\"><a href=\"#打印程序进程空间信息\" class=\"headerlink\" title=\"打印程序进程空间信息\"></a>打印程序进程空间信息</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">a.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = a * b;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;c is %d\\n&quot;</span>, c);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br>b.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func1</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func2</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试多个进程时，可以使用“<code>maint info program-spaces</code>”打印当前所有被调试的进程信息。以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">[root@localhost nan]# gdb a<br>GNU gdb (GDB) <span class=\"hljs-number\">7.8</span>.<span class=\"hljs-number\">1</span><br>......<br>Reading symbols <span class=\"hljs-keyword\">from</span> a...done.<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x4004f9: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">10</span>.<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a <br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>              func(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>(gdb) add-inferior -exec b<br>Added inferior <span class=\"hljs-number\">2</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> b...done.<br>(gdb) i inferiors b<br>Args must be numbers or <span class=\"hljs-string\">&#x27;$&#x27;</span> variables.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable        <br>  <span class=\"hljs-number\">2</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nan/b       <br>* <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">15753</span>     <span class=\"hljs-regexp\">/home/</span>nan/a       <br>(gdb) inferior <span class=\"hljs-number\">2</span><br>[Switching to inferior <span class=\"hljs-number\">2</span> [&lt;<span class=\"hljs-keyword\">null</span>&gt;] (<span class=\"hljs-regexp\">/home/</span>nan/b)]<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">2</span> at <span class=\"hljs-number\">0</span>x4004f9: main. (<span class=\"hljs-number\">2</span> locations)<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/b <br><br>Temporary breakpoint <span class=\"hljs-number\">2</span>, main () at b.c:<span class=\"hljs-number\">24</span><br><span class=\"hljs-number\">24</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, func3(<span class=\"hljs-number\">10</span>));<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable        <br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">15902</span>     <span class=\"hljs-regexp\">/home/</span>nan/b       <br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">15753</span>     <span class=\"hljs-regexp\">/home/</span>nan/a       <br>(gdb) clone-inferior -copies <span class=\"hljs-number\">2</span><br>Added inferior <span class=\"hljs-number\">3</span>.<br>Added inferior <span class=\"hljs-number\">4</span>.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable        <br>  <span class=\"hljs-number\">4</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nan/b       <br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nan/b       <br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">15902</span>     <span class=\"hljs-regexp\">/home/</span>nan/b       <br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">15753</span>     <span class=\"hljs-regexp\">/home/</span>nan/a       <br>(gdb) maint info program-spaces<br>  Id   Executable        <br>  <span class=\"hljs-number\">4</span>    <span class=\"hljs-regexp\">/home/</span>nan/b       <br>        Bound inferiors: ID <span class=\"hljs-number\">4</span> (process <span class=\"hljs-number\">0</span>)<br>  <span class=\"hljs-number\">3</span>    <span class=\"hljs-regexp\">/home/</span>nan/b       <br>        Bound inferiors: ID <span class=\"hljs-number\">3</span> (process <span class=\"hljs-number\">0</span>)<br>* <span class=\"hljs-number\">2</span>    <span class=\"hljs-regexp\">/home/</span>nan/b       <br>        Bound inferiors: ID <span class=\"hljs-number\">2</span> (process <span class=\"hljs-number\">15902</span>)<br>  <span class=\"hljs-number\">1</span>    <span class=\"hljs-regexp\">/home/</span>nan/a       <br>        Bound inferiors: ID <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">15753</span>)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到执行“<code>maint info program-spaces</code>”命令后，打印出当前有4个<code>program-spaces</code>（编号从1到4）。另外还有每个<code>program-spaces</code>对应的程序，<code>inferior</code>编号及进程号。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html\">gdb手册</a>.</p>\n<h5 id=\"使用“-exitcode”变量\"><a href=\"#使用“-exitcode”变量\" class=\"headerlink\" title=\"使用“$_exitcode”变量\"></a>使用“$_exitcode”变量</h5><h4 id=\"10、core-dump文件\"><a href=\"#10、core-dump文件\" class=\"headerlink\" title=\"10、core dump文件\"></a>10、core dump文件</h4><h5 id=\"为调试进程产生core-dump文件\"><a href=\"#为调试进程产生core-dump文件\" class=\"headerlink\" title=\"为调试进程产生core dump文件\"></a>为调试进程产生core dump文件</h5><p>在用gdb调试程序时，我们有时想让被调试的进程产生core dump文件，记录现在进程的状态，以供以后分析。可以用“generate-core-file”命令来产生core dump文件：</p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vhdl\">(gdb) help <span class=\"hljs-keyword\">generate</span>-core-<span class=\"hljs-keyword\">file</span><br>Save a core <span class=\"hljs-keyword\">file</span> <span class=\"hljs-keyword\">with</span> the current state <span class=\"hljs-keyword\">of</span> the debugged <span class=\"hljs-keyword\">process</span>.<br>Argument <span class=\"hljs-keyword\">is</span> optional filename.  <span class=\"hljs-keyword\">Default</span> filename <span class=\"hljs-keyword\">is</span> <span class=\"hljs-symbol\">&#x27;core</span>.&lt;process_id&gt;&#x27;.<br><br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x8050c12: <span class=\"hljs-keyword\">file</span> a.c, <span class=\"hljs-literal\">line</span> <span class=\"hljs-number\">9</span>.<br>Starting program: /data1/nan/a<br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">9</span>           change_var();<br>(gdb) <span class=\"hljs-keyword\">generate</span>-core-<span class=\"hljs-keyword\">file</span><br>Saved corefile core.<span class=\"hljs-number\">12955</span><br></code></pre></td></tr></table></figure>\n\n<p>也可使用“gcore”命令：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) help gcore<br>Save <span class=\"hljs-keyword\">a</span> core <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">the</span> current state <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">the</span> debugged <span class=\"hljs-built_in\">process</span>.<br>Argument is optional filename.  Default filename is <span class=\"hljs-string\">&#x27;core.&lt;process_id&gt;&#x27;</span>.<br>(gdb) gcore<br>Saved corefile core<span class=\"hljs-number\">.13256</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html\">gdb手册</a></p>\n<h5 id=\"加载可执行程序和core-dump文件\"><a href=\"#加载可执行程序和core-dump文件\" class=\"headerlink\" title=\"加载可执行程序和core dump文件\"></a>加载可执行程序和core dump文件</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> *p = <span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>        *p = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>例子程序访问了一个空指针，所以程序会crash并产生core dump文件。用gdb调试core dump文件，通常用这个命令形式：“gdb path&#x2F;to&#x2F;the&#x2F;executable path&#x2F;to&#x2F;the&#x2F;coredump”，然后gdb会显示程序crash的位置：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">bash</span>-<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">2</span># gdb -q /data/nan/a /var/core/core.a.<span class=\"hljs-number\">22268</span>.<span class=\"hljs-number\">1402638140</span><br><span class=\"hljs-attribute\">Reading</span> symbols from /data/nan/a...done.<span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[New LWP 1]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[Thread debugging using libthread_db enabled]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[New Thread 1 (LWP 1)]</span><br><span class=\"hljs-attribute\">Core</span> was generated by `./a&#x27;.<br><span class=\"hljs-attribute\">Program</span> terminated with signal <span class=\"hljs-number\">11</span>, Segmentation fault.<br><span class=\"hljs-comment\">#0  0x0000000000400cdb in main () at a.c:6</span><br><span class=\"hljs-attribute\">6</span>               *p = <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>有时我们想在gdb启动后，动态加载可执行程序和core dump文件，这时可以用“file”和“core”（core-file命令缩写）命令。“file”命令用来读取可执行文件的符号表信息，而“core”命令则是指定core dump文件的位置：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\">bash-<span class=\"hljs-number\">3.2#</span> gdb -q<br>(gdb) file /data/nan/a<br>Reading symbols <span class=\"hljs-keyword\">from</span> /data/nan/a...done.<br>(gdb) core /var/core/core.a.<span class=\"hljs-number\">22268.1402638140</span><br>[<span class=\"hljs-built_in\">New</span> LWP <span class=\"hljs-number\">1</span>]<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>Core was generated <span class=\"hljs-keyword\">by</span> `./a<span class=\"hljs-comment\">&#x27;.</span><br>Program terminated <span class=\"hljs-keyword\">with</span> signal <span class=\"hljs-number\">11</span>, Segmentation fault.<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>x0000000000400cdb <span class=\"hljs-keyword\">in</span> main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               *p = <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb同样显示程序crash的位置。</p>\n<p>这两个命令可参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Files.html#index-core-dump-file\">gdb手册</a></p>\n<h4 id=\"11、汇编\"><a href=\"#11、汇编\" class=\"headerlink\" title=\"11、汇编\"></a>11、汇编</h4><h5 id=\"设置汇编指令格式\"><a href=\"#设置汇编指令格式\" class=\"headerlink\" title=\"设置汇编指令格式\"></a>设置汇编指令格式</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> global_var;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change_var</span><span class=\"hljs-params\">()</span></span>&#123;<br>    global_var=<span class=\"hljs-number\">100</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">change_var</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在Intel x86处理器上，gdb默认显示汇编指令格式是AT&amp;T格式。例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) disassemble main<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %ebp<br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    %esp,%ebp<br>   <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax<br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %ebp<br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以用“set disassembly-flavor”命令将格式改为intel格式：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) set disassembly-flavor intel<br>(gdb) disassemble main<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   <span class=\"hljs-built_in\">ebp</span><br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-built_in\">ebp</span>,<span class=\"hljs-built_in\">esp</span><br>   <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-built_in\">eax</span>,<span class=\"hljs-number\">0x0</span><br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    <span class=\"hljs-built_in\">ebp</span><br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>目前“set disassembly-flavor”命令只能用在Intel x86处理器上，并且取值只有“intel”和“att”。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html\">gdb手册</a></p>\n<h5 id=\"在函数的第一条汇编指令打断点\"><a href=\"#在函数的第一条汇编指令打断点\" class=\"headerlink\" title=\"在函数的第一条汇编指令打断点\"></a>在函数的第一条汇编指令打断点</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> global_var;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change_var</span><span class=\"hljs-params\">()</span></span>&#123;<br>    global_var=<span class=\"hljs-number\">100</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">change_var</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通常给函数打断点的命令：“b func”（b是break命令的缩写），不会把断点设置在汇编指令层次函数的开头，例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) b main<br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x8050c12</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">9</span>.<br>(gdb) r<br>Starting program: /data1/<span class=\"hljs-meta\">nan</span>/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">9</span>           change_var()<span class=\"hljs-comment\">;</span><br>(gdb) disassemble<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %ebp<br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    %esp,%ebp<br>=&gt; <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax<br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %ebp<br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序停在了第三条汇编指令（箭头所指位置）。如果要把断点设置在汇编指令层次函数的开头，要使用如下命令：“b *func”，例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) b *main<br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x8050c0f</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">8</span>.<br>(gdb) r<br>Starting program: /data1/<span class=\"hljs-meta\">nan</span>/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>       <span class=\"hljs-keyword\">int</span> main(void)&#123;<br>(gdb) disassemble<br>Dump of assembler code for function main:<br>=&gt; <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %ebp<br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    %esp,%ebp<br>   <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax<br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %ebp<br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序停在了第一条汇编指令（箭头所指位置）。</p>\n<h5 id=\"自动反汇编后面要执行的代码\"><a href=\"#自动反汇编后面要执行的代码\" class=\"headerlink\" title=\"自动反汇编后面要执行的代码\"></a>自动反汇编后面要执行的代码</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) set disassemble-next-line on<br>(gdb) start <br>The program being debugged has been started already.<br>Start it from the beginning? (y or n) y<br>Temporary breakpoint 3 at 0x400543: file 1.c, line 14.<br>Starting program: /home/teawater/tmp/a.out <br><br>Temporary breakpoint 3, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14<br>14      printf(&quot;1\\n&quot;);<br>=&gt; 0x0000000000400543 &lt;main+19&gt;:    bf f0 05 40 00  mov    $0x4005f0,%edi<br>   0x0000000000400548 &lt;main+24&gt;:    e8 c3 fe ff ff  callq  0x400410 &lt;puts@plt&gt;<br>(gdb) si<br>0x0000000000400548  14      printf(&quot;1\\n&quot;);<br>0x0000000000400543 &lt;main+19&gt;:    bf f0 05 40 00  mov    $0x4005f0,%edi<br>=&gt; 0x0000000000400548 &lt;main+24&gt;:    e8 c3 fe ff ff  callq  0x400410 &lt;puts@plt&gt;<br>(gdb) <br>0x0000000000400410 in puts@plt ()<br>=&gt; 0x0000000000400410 &lt;puts@plt+0&gt;: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 &lt;puts@got.plt&gt;<br><br>(gdb) set disassemble-next-line auto <br>(gdb) start <br>Temporary breakpoint 1 at 0x400543: file 1.c, line 14.<br>Starting program: /home/teawater/tmp/a.out <br><br>Temporary breakpoint 1, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14<br>14      printf(&quot;1\\n&quot;);<br>(gdb) si<br>0x0000000000400548  14      printf(&quot;1\\n&quot;);<br>(gdb) <br>0x0000000000400410 in puts@plt ()<br>=&gt; 0x0000000000400410 &lt;puts@plt+0&gt;: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 &lt;puts@got.plt&gt;<br>(gdb) <br>0x0000000000400416 in puts@plt ()<br>=&gt; 0x0000000000400416 &lt;puts@plt+6&gt;: 68 00 00 00 00  pushq  $0x0<br></code></pre></td></tr></table></figure>\n\n<p>如果要在任意情况下反汇编后面要执行的代码：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">(gdb) <span class=\"hljs-keyword\">set</span> disassemble-<span class=\"hljs-keyword\">next</span>-<span class=\"hljs-built_in\">line</span> <span class=\"hljs-keyword\">on</span><br></code></pre></td></tr></table></figure>\n\n<p>如果要在后面的代码没有源码的情况下才反汇编后面要执行的代码：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">(gdb) set disassemble-next-line <span class=\"hljs-keyword\">auto</span><br></code></pre></td></tr></table></figure>\n\n<p>关闭这个功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) set disassemble-next-line off<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"将源程序和汇编指令映射起来\"><a href=\"#将源程序和汇编指令映射起来\" class=\"headerlink\" title=\"将源程序和汇编指令映射起来\"></a>将源程序和汇编指令映射起来</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> a;<br>        <span class=\"hljs-type\">int</span> b;<br>        <span class=\"hljs-type\">int</span> c;<br>        <span class=\"hljs-type\">int</span> d;<br>&#125;ex_st;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>        ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以用“disas &#x2F;m fun”（disas是disassemble命令缩写）命令将函数代码和汇编指令映射起来，以上面代码为例：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">(gdb) disas /m main<br>Dump of assembler code <span class=\"hljs-keyword\">for</span> function main:<br><span class=\"hljs-number\">11</span>      <span class=\"hljs-keyword\">int</span> main(void) &#123;<br>   <span class=\"hljs-number\">0x00000000004004c4</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %rbp<br>   <span class=\"hljs-number\">0x00000000004004c5</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     mov    %rsp,%rbp<br>   <span class=\"hljs-number\">0x00000000004004c8</span> &lt;+<span class=\"hljs-number\">4</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %rbx<br>   <span class=\"hljs-number\">0x00000000004004c9</span> &lt;+<span class=\"hljs-number\">5</span>&gt;:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span>    $0<span class=\"hljs-title\">x18</span>,%<span class=\"hljs-title\">rsp</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\">12              <span class=\"hljs-title\">ex_st</span> <span class=\"hljs-title\">st</span> = </span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>   <span class=\"hljs-number\">0x00000000004004cd</span> &lt;+<span class=\"hljs-number\">9</span>&gt;:     movl   $0x1,-<span class=\"hljs-number\">0x20</span>(%rbp)<br>   <span class=\"hljs-number\">0x00000000004004d4</span> &lt;+<span class=\"hljs-number\">16</span>&gt;:    movl   $0x2,-<span class=\"hljs-number\">0x1c</span>(%rbp)<br>   <span class=\"hljs-number\">0x00000000004004db</span> &lt;+<span class=\"hljs-number\">23</span>&gt;:    movl   $0x3,-<span class=\"hljs-number\">0x18</span>(%rbp)<br>   <span class=\"hljs-number\">0x00000000004004e2</span> &lt;+<span class=\"hljs-number\">30</span>&gt;:    movl   $0x4,-<span class=\"hljs-number\">0x14</span>(%rbp)<br><br><span class=\"hljs-number\">13</span>              <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>   <span class=\"hljs-number\">0x00000000004004e9</span> &lt;+<span class=\"hljs-number\">37</span>&gt;:    mov    -<span class=\"hljs-number\">0x14</span>(%rbp),%esi<br>   <span class=\"hljs-number\">0x00000000004004ec</span> &lt;+<span class=\"hljs-number\">40</span>&gt;:    mov    -<span class=\"hljs-number\">0x18</span>(%rbp),%ecx<br>   <span class=\"hljs-number\">0x00000000004004ef</span> &lt;+<span class=\"hljs-number\">43</span>&gt;:    mov    -<span class=\"hljs-number\">0x1c</span>(%rbp),%edx<br>   <span class=\"hljs-number\">0x00000000004004f2</span> &lt;+<span class=\"hljs-number\">46</span>&gt;:    mov    -<span class=\"hljs-number\">0x20</span>(%rbp),%ebx<br>   <span class=\"hljs-number\">0x00000000004004f5</span> &lt;+<span class=\"hljs-number\">49</span>&gt;:    mov    $0x400618,%eax<br>   <span class=\"hljs-number\">0x00000000004004fa</span> &lt;+<span class=\"hljs-number\">54</span>&gt;:    mov    %esi,%r8d<br>   <span class=\"hljs-number\">0x00000000004004fd</span> &lt;+<span class=\"hljs-number\">57</span>&gt;:    mov    %ebx,%esi<br>   <span class=\"hljs-number\">0x00000000004004ff</span> &lt;+<span class=\"hljs-number\">59</span>&gt;:    mov    %rax,%rdi<br>   <span class=\"hljs-number\">0x0000000000400502</span> &lt;+<span class=\"hljs-number\">62</span>&gt;:    mov    $0<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">0</span>,%eax<br>   <span class=\"hljs-number\">0x0000000000400507</span> &lt;+<span class=\"hljs-number\">67</span>&gt;:    callq  <span class=\"hljs-number\">0x4003b8</span> &lt;<span class=\"hljs-keyword\">printf</span>@plt&gt;<br><br><span class=\"hljs-number\">14</span>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>   <span class=\"hljs-number\">0x000000000040050c</span> &lt;+<span class=\"hljs-number\">72</span>&gt;:    mov    $0<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">0</span>,%eax<br><br><span class=\"hljs-number\">15</span>      &#125;<br>   <span class=\"hljs-number\">0x0000000000400511</span> &lt;+<span class=\"hljs-number\">77</span>&gt;:    add    $0x18,%rsp<br>   <span class=\"hljs-number\">0x0000000000400515</span> &lt;+<span class=\"hljs-number\">81</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %rbx<br>   <span class=\"hljs-number\">0x0000000000400516</span> &lt;+<span class=\"hljs-number\">82</span>&gt;:    leaveq<br>   <span class=\"hljs-number\">0x0000000000400517</span> &lt;+<span class=\"hljs-number\">83</span>&gt;:    retq<br><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到每一条C语句下面是对应的汇编代码。</p>\n<p>如果只想查看某一行所对应的地址范围，可以：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) i <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">13</span><br>Line <span class=\"hljs-number\">13</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">&quot;foo.c&quot;</span> starts <span class=\"hljs-keyword\">at</span> address <span class=\"hljs-number\">0x4004e9</span> &lt;main+<span class=\"hljs-number\">37</span>&gt; <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">ends</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x40050c</span> &lt;main+<span class=\"hljs-number\">72</span>&gt;.\t<br></code></pre></td></tr></table></figure>\n\n<p>如果只想查看这一条语句对应的汇编代码，可以使用“<code>disassemble [Start],[End]</code>”命令：</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\">(gdb) disassemble <span class=\"hljs-number\">0x4004e9</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">0x40050c</span><br>Dump of assembler code from <span class=\"hljs-number\">0x4004e9</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">0x40050c</span>:<br>   <span class=\"hljs-number\">0x00000000004004e9</span> &lt;main<span class=\"hljs-number\">+37</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">14</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%esi</span><br>   <span class=\"hljs-number\">0x00000000004004ec</span> &lt;main<span class=\"hljs-number\">+40</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">18</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%ecx</span><br>   <span class=\"hljs-number\">0x00000000004004ef</span> &lt;main<span class=\"hljs-number\">+43</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">c</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%edx</span><br>   <span class=\"hljs-number\">0x00000000004004f2</span> &lt;main<span class=\"hljs-number\">+46</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">20</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%ebx</span><br>   <span class=\"hljs-number\">0x00000000004004f5</span> &lt;main<span class=\"hljs-number\">+49</span>&gt;:        mov    $<span class=\"hljs-number\">0x400618</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%eax</span><br>   <span class=\"hljs-number\">0x00000000004004fa</span> &lt;main<span class=\"hljs-number\">+54</span>&gt;:        mov    <span class=\"hljs-variable\">%esi</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%r8d</span><br>   <span class=\"hljs-number\">0x00000000004004fd</span> &lt;main<span class=\"hljs-number\">+57</span>&gt;:        mov    <span class=\"hljs-variable\">%ebx</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%esi</span><br>   <span class=\"hljs-number\">0x00000000004004ff</span> &lt;main<span class=\"hljs-number\">+59</span>&gt;:        mov    <span class=\"hljs-variable\">%rax</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%rdi</span><br>   <span class=\"hljs-number\">0x0000000000400502</span> &lt;main<span class=\"hljs-number\">+62</span>&gt;:        mov    $<span class=\"hljs-number\">0x0</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%eax</span><br>   <span class=\"hljs-number\">0x0000000000400507</span> &lt;main<span class=\"hljs-number\">+67</span>&gt;:        callq  <span class=\"hljs-number\">0x4003b8</span> &lt;printf<span class=\"hljs-title\">@plt</span>&gt;<br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html\">gdb手册</a></p>\n<h5 id=\"显示将要执行的汇编指令\"><a href=\"#显示将要执行的汇编指令\" class=\"headerlink\" title=\"显示将要执行的汇编指令\"></a>显示将要执行的汇编指令</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> global_var;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change_var</span><span class=\"hljs-params\">()</span></span>&#123;<br>    global_var=<span class=\"hljs-number\">100</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">change_var</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试汇编程序时，可以用“<code>display /i $pc</code>”命令显示当程序停止时，将要执行的汇编指令。以上面程序为例：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">x400488:</span> file a.c, line <span class=\"hljs-number\">9</span>.<br>Starting progr<span class=\"hljs-symbol\">am:</span> /data2/home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.<span class=\"hljs-symbol\">c:9</span><br><span class=\"hljs-number\">9</span>           change_var();<br>(gdb) display /i $pc<br><span class=\"hljs-symbol\">1:</span> x/i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x400488 &lt;main+<span class=\"hljs-number\">4</span>&gt;<span class=\"hljs-symbol\">:</span>   mov    $<span class=\"hljs-number\">0</span>x0,%eax<br>(gdb) si<br><span class=\"hljs-number\">0</span>x000000000040048d      <span class=\"hljs-number\">9</span>           change_var();<br><span class=\"hljs-symbol\">1:</span> x/i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x40048d &lt;main+<span class=\"hljs-number\">9</span>&gt;<span class=\"hljs-symbol\">:</span>   callq  <span class=\"hljs-number\">0</span>x400474 &lt;change_var&gt;<br>(gdb)<br>change_var () at a.<span class=\"hljs-symbol\">c:4</span><br><span class=\"hljs-number\">4</span>       void change_var()&#123;<br><span class=\"hljs-symbol\">1:</span> x/i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x400474 &lt;change_var&gt;<span class=\"hljs-symbol\">:</span>       push   %rbp<br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印出了将要执行的汇编指令。此外也可以一次显示多条指令：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">(gdb) display /<span class=\"hljs-number\">3</span>i $pc<br><span class=\"hljs-symbol\">2:</span> x/<span class=\"hljs-number\">3</span>i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x400474 &lt;change_var&gt;<span class=\"hljs-symbol\">:</span>       push   %rbp<br>   <span class=\"hljs-number\">0</span>x400475 &lt;change_var+<span class=\"hljs-number\">1</span>&gt;<span class=\"hljs-symbol\">:</span>     mov    %rsp,%rbp<br>   <span class=\"hljs-number\">0</span>x400478 &lt;change_var+<span class=\"hljs-number\">4</span>&gt;<span class=\"hljs-symbol\">:</span>     movl   $<span class=\"hljs-number\">0</span>x64,<span class=\"hljs-number\">0</span>x2003de(%rip)        # <span class=\"hljs-number\">0</span>x600860 &lt;global_var&gt;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到一次显示了<code>3</code>条指令。</p>\n<p>取消显示可以用<code>undisplay</code>命令。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Auto-Display.html\">gdb手册</a></p>\n<h5 id=\"打印寄存器的值\"><a href=\"#打印寄存器的值\" class=\"headerlink\" title=\"打印寄存器的值\"></a>打印寄存器的值</h5><p>用gdb调试程序时，如果想查看寄存器的值，可以使用“i registers”命令（i是info命令缩写），例如:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i registers<br><span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x7ffff7dd9f60</span>   <span class=\"hljs-number\">140737351884640</span><br><span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe608</span>   <span class=\"hljs-number\">140737488348680</span><br><span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe5f8</span>   <span class=\"hljs-number\">140737488348664</span><br><span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe510</span>   <span class=\"hljs-number\">0x7fffffffe510</span><br><span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe4c0</span>   <span class=\"hljs-number\">0x7fffffffe4c0</span><br><span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x7ffff7dd8300</span>   <span class=\"hljs-number\">140737351877376</span><br><span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x7ffff7deb9e0</span>   <span class=\"hljs-number\">140737351956960</span><br><span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe360</span>   <span class=\"hljs-number\">140737488348000</span><br><span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x7ffff7a68be0</span>   <span class=\"hljs-number\">140737348275168</span><br><span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span><br><span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe5f0</span>   <span class=\"hljs-number\">140737488348656</span><br><span class=\"hljs-built_in\">r14</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">r15</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">rip</span>            <span class=\"hljs-number\">0x4004cd</span> <span class=\"hljs-number\">0x4004cd</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;<br>eflags         <span class=\"hljs-number\">0x206</span>    [ PF IF ]<br><span class=\"hljs-built_in\">cs</span>             <span class=\"hljs-number\">0x33</span>     <span class=\"hljs-number\">51</span><br><span class=\"hljs-built_in\">ss</span>             <span class=\"hljs-number\">0x2b</span>     <span class=\"hljs-number\">43</span><br><span class=\"hljs-built_in\">ds</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">es</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">fs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">gs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>以上输出不包括浮点寄存器和向量寄存器的内容。使用“i all-registers”命令，可以输出所有寄存器的内容：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i all-registers<br>\t<span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x7ffff7dd9f60</span>   <span class=\"hljs-number\">140737351884640</span><br>\t<span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe608</span>   <span class=\"hljs-number\">140737488348680</span><br>\t<span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe5f8</span>   <span class=\"hljs-number\">140737488348664</span><br>\t<span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe510</span>   <span class=\"hljs-number\">0x7fffffffe510</span><br>\t<span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe4c0</span>   <span class=\"hljs-number\">0x7fffffffe4c0</span><br>\t<span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x7ffff7dd8300</span>   <span class=\"hljs-number\">140737351877376</span><br>\t<span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x7ffff7deb9e0</span>   <span class=\"hljs-number\">140737351956960</span><br>\t<span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe360</span>   <span class=\"hljs-number\">140737488348000</span><br>\t<span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x7ffff7a68be0</span>   <span class=\"hljs-number\">140737348275168</span><br>\t<span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span><br>\t<span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe5f0</span>   <span class=\"hljs-number\">140737488348656</span><br>\t<span class=\"hljs-built_in\">r14</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">r15</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">rip</span>            <span class=\"hljs-number\">0x4004cd</span> <span class=\"hljs-number\">0x4004cd</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;<br>\teflags         <span class=\"hljs-number\">0x206</span>    [ PF IF ]<br>\t<span class=\"hljs-built_in\">cs</span>             <span class=\"hljs-number\">0x33</span>     <span class=\"hljs-number\">51</span><br>\t<span class=\"hljs-built_in\">ss</span>             <span class=\"hljs-number\">0x2b</span>     <span class=\"hljs-number\">43</span><br>\t<span class=\"hljs-built_in\">ds</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">es</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">fs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">gs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">st0</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st1</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st2</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st3</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st4</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st5</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st6</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st7</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t......<br></code></pre></td></tr></table></figure>\n\n<p>要打印单个寄存器的值，可以使用“i registers regname”或者“p $regname”，例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i registers <span class=\"hljs-built_in\">eax</span><br><span class=\"hljs-built_in\">eax</span>            <span class=\"hljs-number\">0xf7dd9f60</span>       -<span class=\"hljs-number\">136470688</span><br>(gdb) p $<span class=\"hljs-built_in\">eax</span><br><span class=\"hljs-number\">$1</span> = -<span class=\"hljs-number\">136470688</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Registers.html\">gdb手册</a>.</p>\n<h5 id=\"显示程序原始机器码\"><a href=\"#显示程序原始机器码\" class=\"headerlink\" title=\"显示程序原始机器码\"></a>显示程序原始机器码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello, world\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用“disassemble &#x2F;r”命令可以用16进制形式显示程序的原始机器码。以上面程序为例：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">(gdb) disassemble /r main<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400530</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-number\">55</span>      push   %rbp<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400531</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">89</span> e5        mov    %rsp,%rbp<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400534</span> &lt;+<span class=\"hljs-number\">4</span>&gt;:     bf e<span class=\"hljs-number\">0 05 40 00</span>  mov    $<span class=\"hljs-number\">0x4005e0</span>,%edi<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400539</span> &lt;+<span class=\"hljs-number\">9</span>&gt;:     e8 d2 fe ff ff  callq  <span class=\"hljs-number\">0x400410</span> &lt;puts@plt&gt;<br>   <span class=\"hljs-number\">0</span>x000000000040053e &lt;+<span class=\"hljs-number\">14</span>&gt;:    b<span class=\"hljs-number\">8 00 00 00</span> <span class=\"hljs-number\">00</span>  mov    $<span class=\"hljs-number\">0</span>x0,%eax<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400543</span> &lt;+<span class=\"hljs-number\">19</span>&gt;:    <span class=\"hljs-number\">5d</span>      pop    %rbp<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400544</span> &lt;+<span class=\"hljs-number\">20</span>&gt;:    c3      retq<br>End of assembler dump.<br>(gdb) disassemble /r <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400534</span>,+<span class=\"hljs-number\">4</span><br>Dump of assembler code from <span class=\"hljs-number\">0x400534</span> to <span class=\"hljs-number\">0x400538</span>:<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400534</span> &lt;main+<span class=\"hljs-number\">4</span>&gt;: bf e<span class=\"hljs-number\">0 05 40 00</span>  mov    $<span class=\"hljs-number\">0x4005e0</span>,%edi<br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html\">gdb手册</a></p>\n<h4 id=\"12、改变进程的执行\"><a href=\"#12、改变进程的执行\" class=\"headerlink\" title=\"12、改变进程的执行\"></a>12、改变进程的执行</h4><h5 id=\"改变字符串的值\"><a href=\"#改变字符串的值\" class=\"headerlink\" title=\"改变字符串的值\"></a>改变字符串的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">char</span> p1[] = <span class=\"hljs-string\">&quot;Sam&quot;</span>;<br>\t<span class=\"hljs-type\">char</span> *p2 = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br>\t<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;p1 is %s, p2 is %s\\n&quot;</span>, p1, p2);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p> 使用gdb调试程序时，可以用“<code>set</code>”命令改变字符串的值，以上面程序为例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x8050af0</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">5.</span><br>Starting program: /data1/<span class=\"hljs-keyword\">nan</span>/a <br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>               <span class=\"hljs-type\">char</span> p1[] = &quot;Sam&quot;;<br>(gdb) n<br><span class=\"hljs-number\">6</span>               <span class=\"hljs-type\">char</span> *p2 = &quot;Bob&quot;;<br>(gdb) <br><span class=\"hljs-number\">8</span>               printf(&quot;p1 is %s, p2 is %s\\n&quot;, p1, p2);<br>(gdb) <span class=\"hljs-keyword\">set</span> main::p1=&quot;Jil&quot;<br>(gdb) <span class=\"hljs-keyword\">set</span> main::p2=&quot;Bill&quot;<br>(gdb) n<br>p1 <span class=\"hljs-keyword\">is</span> Jil, p2 <span class=\"hljs-keyword\">is</span> Bill<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到执行<code>p1</code>和<code>p2</code>的字符串都发生了变化。也可以通过访问内存地址的方法改变字符串的值：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">Starting program: /data1/nan/a <br>[<span class=\"hljs-meta\">Thread debugging using libthread_db enabled</span>]<br>[<span class=\"hljs-meta\">New Thread 1 (LWP 1)</span>]<br>[<span class=\"hljs-meta\">Switching to Thread 1 (LWP 1)</span>]<br><br>Temporary breakpoint <span class=\"hljs-number\">2</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>               <span class=\"hljs-built_in\">char</span> p1[] = <span class=\"hljs-string\">&quot;Sam&quot;</span>;<br>(gdb) n<br><span class=\"hljs-number\">6</span>               <span class=\"hljs-built_in\">char</span> *p2 = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br>(gdb) p p1<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-string\">&quot;Sam&quot;</span><br>(gdb) p &amp;p1<br>$<span class=\"hljs-number\">2</span> = (<span class=\"hljs-built_in\">char</span> (*)[<span class=\"hljs-number\">4</span>]) <span class=\"hljs-number\">0x80477a4</span><br>(gdb) <span class=\"hljs-keyword\">set</span> &#123;<span class=\"hljs-built_in\">char</span> [<span class=\"hljs-number\">4</span>]&#125; <span class=\"hljs-number\">0x80477a4</span> = <span class=\"hljs-string\">&quot;Ace&quot;</span><br>(gdb) n<br><span class=\"hljs-number\">8</span>               printf(<span class=\"hljs-string\">&quot;p1 is %s, p2 is %s\\n&quot;</span>, p1, p2);<br>(gdb) <br>p1 <span class=\"hljs-keyword\">is</span> Ace, p2 <span class=\"hljs-keyword\">is</span> Bob<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>在改变字符串的值时候，一定要注意内存越界的问题。<br>参见<a href=\"http://stackoverflow.com/questions/19503057/in-gdb-how-can-i-write-a-string-to-memory\">stackoverflow</a>.</p>\n<h5 id=\"设置变量的值\"><a href=\"#设置变量的值\" class=\"headerlink\" title=\"设置变量的值\"></a>设置变量的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>;<br><br>    <span class=\"hljs-keyword\">return</span> i;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br><br>    a = func();<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，可以用“<code>set var variable=expr</code>”命令设置变量的值，以上面代码为例：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">Breakpoint <span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-title function_\">at</span> <span class=\"hljs-title function_\">a</span>.<span class=\"hljs-title function_\">c</span>:5<br><span class=\"hljs-number\">5</span>                   <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;</span><br>(gdb) n<br><span class=\"hljs-number\">7</span>                   <span class=\"hljs-keyword\">return</span> i<span class=\"hljs-comment\">;</span><br>(gdb) set var i = <span class=\"hljs-number\">8</span><br>(gdb) p i<br>$4 = <span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到在<code>func</code>函数里用<code>set</code>命令把<code>i</code>的值修改成为<code>8</code>。</p>\n<p>也可以用“<code>set &#123;type&#125;address=expr</code>”的方式，含义是给存储地址在<code>address</code>，变量类型为<code>type</code>的变量赋值，仍以上面代码为例：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">Breakpoint <span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-title function_\">at</span> <span class=\"hljs-title function_\">a</span>.<span class=\"hljs-title function_\">c</span>:5<br><span class=\"hljs-number\">5</span>                   <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;</span><br>(gdb) n<br><span class=\"hljs-number\">7</span>                   <span class=\"hljs-keyword\">return</span> i<span class=\"hljs-comment\">;</span><br>(gdb) p &amp;i<br>$5 = (<span class=\"hljs-built_in\">int</span> *) <span class=\"hljs-number\">0x8047a54</span><br>(gdb) set &#123;<span class=\"hljs-built_in\">int</span>&#125;<span class=\"hljs-number\">0x8047a54</span> = <span class=\"hljs-number\">8</span><br>(gdb) p i<br>$6 = <span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到<code>i</code>的值被修改成为<code>8</code>。</p>\n<p>另外寄存器也可以作为变量，因此同样可以修改寄存器的值：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">Breakpoint <span class=\"hljs-number\">2</span>, func () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                   <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span>;<br>(gdb)<br>(gdb) n<br><span class=\"hljs-number\">7</span>                   <span class=\"hljs-keyword\">return</span> i;<br>(gdb)<br><span class=\"hljs-number\">8</span>               &#125;<br>(gdb) <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">var</span> $eax = <span class=\"hljs-number\">8</span><br>(gdb) <span class=\"hljs-function\">n</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">main</span> () at a.c:15</span><br><span class=\"hljs-function\">15                  <span class=\"hljs-title\">printf</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a</span>)</span>;<br>(gdb)<br><span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">16</span>                  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到因为eax寄存器存储着函数的返回值，所以当把eax寄存器的值改为<code>8</code>后，函数的返回值也变成了<code>8</code>。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Assignment.html#Assignment\">gdb手册</a></p>\n<h5 id=\"修改PC寄存器的值\"><a href=\"#修改PC寄存器的值\" class=\"headerlink\" title=\"修改PC寄存器的值\"></a>修改PC寄存器的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;       <br>        <span class=\"hljs-type\">int</span> a =<span class=\"hljs-number\">0</span>;               <br><br>        a++;    <br>        a++;    <br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);      <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>PC寄存器会存储程序下一条要执行的指令，通过修改这个寄存器的值，可以达到改变程序执行流程的目的。<br>上面的程序会输出“<code>a=2</code>”，下面介绍一下如何通过修改PC寄存器的值，改变程序执行流程。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"hljs-number\">4</span>               int a =<span class=\"hljs-number\">0</span>;<br>(gdb) disassemble main<br>Dump <span class=\"hljs-keyword\">of</span> assembler code <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">function</span> main:<br><span class=\"hljs-number\">0x08050921</span> &lt;main+<span class=\"hljs-number\">0</span>&gt;:    push   <span class=\"hljs-meta\">%ebp</span><br><span class=\"hljs-number\">0x08050922</span> &lt;main+<span class=\"hljs-number\">1</span>&gt;:    mov    <span class=\"hljs-meta\">%esp</span>,<span class=\"hljs-meta\">%ebp</span><br><span class=\"hljs-number\">0x08050924</span> &lt;main+<span class=\"hljs-number\">3</span>&gt;:    sub    <span class=\"hljs-variable\">$0x8</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x08050927</span> &lt;main+<span class=\"hljs-number\">6</span>&gt;:    <span class=\"hljs-keyword\">and</span>    <span class=\"hljs-variable\">$0xfffffff0</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x0805092a</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;:    mov    <span class=\"hljs-variable\">$0x0</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x0805092f</span> &lt;main+<span class=\"hljs-number\">14</span>&gt;:   add    <span class=\"hljs-variable\">$0xf</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050932</span> &lt;main+<span class=\"hljs-number\">17</span>&gt;:   add    <span class=\"hljs-variable\">$0xf</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050935</span> &lt;main+<span class=\"hljs-number\">20</span>&gt;:   shr    <span class=\"hljs-variable\">$0x4</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050938</span> &lt;main+<span class=\"hljs-number\">23</span>&gt;:   shl    <span class=\"hljs-variable\">$0x4</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x0805093b</span> &lt;main+<span class=\"hljs-number\">26</span>&gt;:   sub    <span class=\"hljs-meta\">%eax</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x0805093d</span> &lt;main+<span class=\"hljs-number\">28</span>&gt;:   movl   <span class=\"hljs-variable\">$0x0</span>,-<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>)<br><span class=\"hljs-number\">0x08050944</span> &lt;main+<span class=\"hljs-number\">35</span>&gt;:   lea    -<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>),<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050947</span> &lt;main+<span class=\"hljs-number\">38</span>&gt;:   incl   (<span class=\"hljs-meta\">%eax</span>)<br><span class=\"hljs-number\">0x08050949</span> &lt;main+<span class=\"hljs-number\">40</span>&gt;:   lea    -<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>),<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x0805094c</span> &lt;main+<span class=\"hljs-number\">43</span>&gt;:   incl   (<span class=\"hljs-meta\">%eax</span>)<br><span class=\"hljs-number\">0x0805094e</span> &lt;main+<span class=\"hljs-number\">45</span>&gt;:   sub    <span class=\"hljs-variable\">$0x8</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x08050951</span> &lt;main+<span class=\"hljs-number\">48</span>&gt;:   pushl  -<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>)<br><span class=\"hljs-number\">0x08050954</span> &lt;main+<span class=\"hljs-number\">51</span>&gt;:   push   <span class=\"hljs-variable\">$0x80509b4</span><br><span class=\"hljs-number\">0x08050959</span> &lt;main+<span class=\"hljs-number\">56</span>&gt;:   call   <span class=\"hljs-number\">0x80507cc</span> &lt;printf@plt&gt;<br><span class=\"hljs-number\">0x0805095e</span> &lt;main+<span class=\"hljs-number\">61</span>&gt;:   add    <span class=\"hljs-variable\">$0x10</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x08050961</span> &lt;main+<span class=\"hljs-number\">64</span>&gt;:   mov    <span class=\"hljs-variable\">$0x0</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050966</span> &lt;main+<span class=\"hljs-number\">69</span>&gt;:   leave<br><span class=\"hljs-number\">0x08050967</span> &lt;main+<span class=\"hljs-number\">70</span>&gt;:   ret<br>End <span class=\"hljs-keyword\">of</span> assembler dump.<br>(gdb) info line <span class=\"hljs-number\">6</span><br>Line <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">&quot;a.c&quot;</span> starts <span class=\"hljs-keyword\">at</span> address <span class=\"hljs-number\">0x8050944</span> &lt;main+<span class=\"hljs-number\">35</span>&gt; <span class=\"hljs-keyword\">and</span> ends <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x8050949</span> &lt;main+<span class=\"hljs-number\">40</span>&gt;.<br>(gdb) info line <span class=\"hljs-number\">7</span><br>Line <span class=\"hljs-number\">7</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">&quot;a.c&quot;</span> starts <span class=\"hljs-keyword\">at</span> address <span class=\"hljs-number\">0x8050949</span> &lt;main+<span class=\"hljs-number\">40</span>&gt; <span class=\"hljs-keyword\">and</span> ends <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x805094e</span> &lt;main+<span class=\"hljs-number\">45</span>&gt;.<br></code></pre></td></tr></table></figure>\n\n<p>通过“<code>info line 6</code>”和“<code>info line 7</code>”命令可以知道两条“<code>a++;</code>”语句的汇编指令起始地址分别是<code>0x8050944</code>和<code>0x8050949</code>。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) n<br><span class=\"hljs-number\">6</span>               a++;<br>(gdb) p <span class=\"hljs-symbol\">$</span>pc<br><span class=\"hljs-meta\"><span class=\"hljs-keyword\">$3</span> = (void (*)()) 0x8050944 &lt;main+35&gt;</span><br>(gdb) <span class=\"hljs-keyword\">set</span> var <span class=\"hljs-comment\">$pc=0x08050949</span><br></code></pre></td></tr></table></figure>\n\n<p>当程序要执行第一条“<code>a++;</code>”语句时，打印<code>pc</code>寄存器的值，看到<code>pc</code>寄存器的值为<code>0x8050944</code>，与“<code>info line 6</code>”命令得到的一致。接下来，把<code>pc</code>寄存器的值改为<code>0x8050949</code>，也就是通过“<code>info line 7</code>”命令得到的第二条“<code>a++;</code>”语句的起始地址。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">gdb</span>) n<br><span class=\"hljs-number\">8</span>               printf(<span class=\"hljs-string\">&quot;a=%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br>(<span class=\"hljs-name\">gdb</span>)<br>a=1<br><span class=\"hljs-number\">9</span>               return <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来执行，可以看到程序输出“<code>a=1</code>”，也就是跳过了第一条“<code>a++;</code>”语句。</p>\n<h5 id=\"跳转到指定位置执行\"><a href=\"#跳转到指定位置执行\" class=\"headerlink\" title=\"跳转到指定位置执行\"></a>跳转到指定位置执行</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span><br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;error&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>;<br><br>  fun (i--);<br>  fun (i--);<br>  fun (i--);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当调试程序时，你可能不小心走过了出错的地方：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">(gdb) n<br><span class=\"hljs-number\">13</span>\t  <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">(i--)</span></span>;<br>(gdb) <br><span class=\"hljs-number\">14</span>\t  <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">(i--)</span></span>;<br>(gdb) <br><span class=\"hljs-number\">15</span>\t  <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">(i--)</span></span>;<br>(gdb) <br>error<br><span class=\"hljs-number\">17</span>\t  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>看起来是在15行，调用fun的时候出错了。常见的办法是在15行设置个断点，然后从头<code>run</code>一次。</p>\n<p>如果你的环境支持反向执行，那么更好了。</p>\n<p>如果不支持，你也可以直接<code>jump</code>到15行，再执行一次：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">(gdb) <span class=\"hljs-keyword\">b </span><span class=\"hljs-number\">15</span><br><span class=\"hljs-keyword\">Breakpoint </span><span class=\"hljs-number\">2</span> <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">0x40056a</span>: file <span class=\"hljs-keyword\">jump.c, </span>line <span class=\"hljs-number\">15</span>.<br>(gdb) <span class=\"hljs-keyword\">j </span><span class=\"hljs-number\">15</span><br>Continuing <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">0x40056a</span>.<br><br><span class=\"hljs-keyword\">Breakpoint </span><span class=\"hljs-number\">2</span>, main () <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">jump.c:15</span><br><span class=\"hljs-keyword\"></span><span class=\"hljs-number\">15</span>\t  fun (i--);<br>(gdb) s<br>fun (x=-<span class=\"hljs-number\">2</span>) <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">jump.c:5</span><br><span class=\"hljs-keyword\"></span><span class=\"hljs-number\">5</span>\t  if (x &lt; <span class=\"hljs-number\">0</span>)<br>(gdb) n<br><span class=\"hljs-number\">6</span>\t    puts (<span class=\"hljs-string\">&quot;error&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<ol>\n<li><code>jump</code>命令只改变pc的值，所以改变程序执行可能会出现不同的结果，比如变量i的值</li>\n<li>通过（临时）断点的配合，可以让你的程序跳到指定的位置，并停下来</li>\n</ol>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Jumping.html#Jumping\">gdb手册</a></p>\n<h5 id=\"使用断点命令改变程序的执行\"><a href=\"#使用断点命令改变程序的执行\" class=\"headerlink\" title=\"使用断点命令改变程序的执行\"></a>使用断点命令改变程序的执行</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">drawing</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span><br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>  <span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> n;<br><br>  srand (time (<span class=\"hljs-number\">0</span>));<br>  n = rand () % <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Your number is %d\\n&quot;</span>, n);<br>  drawing (n);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个例子程序可能不太好，只是可以用来演示下断点命令的用法：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) b drawing<br>Breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x40064d</span>: file win.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">6.</span><br>(gdb) command <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">Type</span> commands <span class=\"hljs-keyword\">for</span> breakpoint(s) <span class=\"hljs-number\">1</span>, one per <span class=\"hljs-type\">line</span>.<br><span class=\"hljs-keyword\">End</span> <span class=\"hljs-keyword\">with</span> a <span class=\"hljs-type\">line</span> saying just &quot;end&quot;.<br>&gt;silent<br>&gt;<span class=\"hljs-keyword\">set</span> variable n = <span class=\"hljs-number\">0</span><br>&gt;<span class=\"hljs-keyword\">continue</span><br>&gt;<span class=\"hljs-keyword\">end</span><br>(gdb) r<br>Starting program: /home/xmj/tmp/a.<span class=\"hljs-keyword\">out</span> <br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.<br>Your number <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">6</span><br>You win <span class=\"hljs-meta\">$3000</span>!<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">4134</span>) exited normally]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，当程序运行到断点处，会自动把变量n的值修改为0，然后继续执行。</p>\n<p>如果你在调试一个大程序，重新编译一次会花费很长时间，比如调试编译器的bug，那么你可以用这种方式在gdb中先实验性的修改下试试，而不需要修改源码，重新编译。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Break-Commands.html#Break-Commands\">gdb手册</a></p>\n<h5 id=\"修改被调试程序的二进制文件\"><a href=\"#修改被调试程序的二进制文件\" class=\"headerlink\" title=\"修改被调试程序的二进制文件\"></a>修改被调试程序的二进制文件</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">drawing</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span><br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>  <span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> n;<br><br>  srand (time (<span class=\"hljs-number\">0</span>));<br>  n = rand () % <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Your number is %d\\n&quot;</span>, n);<br>  drawing (n);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>\n\n<p>gdb不仅可以用来调试程序，还可以修改程序的二进制代码。</p>\n<p>缺省情况下，gdb是以只读方式加载程序的。可以通过命令行选项指定为可写：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">$ gcc -<span class=\"hljs-keyword\">write</span> ./a.<span class=\"hljs-keyword\">out</span><br>(gdb) <span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">write</span><br>Writing <span class=\"hljs-keyword\">into</span> executable <span class=\"hljs-keyword\">and</span> core files <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">on</span>.<br></code></pre></td></tr></table></figure>\n\n<p>也可以在gdb中，使用命令设置并重新加载程序：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">(gdb) <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">write</span> <span class=\"hljs-keyword\">on</span><br>(gdb) <span class=\"hljs-keyword\">file</span> ./a.<span class=\"hljs-keyword\">out</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来，查看反汇编：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">(gdb) disassemble /mr drawing <br>Dump of assembler code for function drawing:<br>5\t&#123;<br>   0x0000000000400642 <span class=\"hljs-variable\">&lt;+0&gt;</span>:\t55\tpush   %rbp<br>   0x0000000000400643 <span class=\"hljs-variable\">&lt;+1&gt;</span>:\t48 89 e5\tmov    %rsp,%rbp<br>   0x0000000000400646 <span class=\"hljs-variable\">&lt;+4&gt;</span>:\t48 83 ec 10\tsub    $0x10,%rsp<br>   0x000000000040064a <span class=\"hljs-variable\">&lt;+8&gt;</span>:\t89 7d fc\tmov    %edi,-0x4(%rbp)<br><br>6\t  if (n != 0)<br>   0x000000000040064d <span class=\"hljs-variable\">&lt;+11&gt;</span>:\t83 7d fc 00\tcmpl   $0x0,-0x4(%rbp)<br>   0x0000000000400651 <span class=\"hljs-variable\">&lt;+15&gt;</span>:\t74 0c\tje     0x40065f <span class=\"hljs-variable\">&lt;drawing+29&gt;</span><br><br>7\t    puts (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>   0x0000000000400653 <span class=\"hljs-variable\">&lt;+17&gt;</span>:\tbf e0 07 40 00\tmov    $0x4007e0,%edi<br>   0x0000000000400658 <span class=\"hljs-variable\">&lt;+22&gt;</span>:\te8 b3 fe ff ff\tcallq  0x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br>   0x000000000040065d <span class=\"hljs-variable\">&lt;+27&gt;</span>:\teb 0a\tjmp    0x400669 <span class=\"hljs-variable\">&lt;drawing+39&gt;</span><br><br>8\t  else<br>9\t    puts (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>   0x000000000040065f <span class=\"hljs-variable\">&lt;+29&gt;</span>:\tbf 12 08 40 00\tmov    $0x400812,%edi<br>   0x0000000000400664 <span class=\"hljs-variable\">&lt;+34&gt;</span>:\te8 a7 fe ff ff\tcallq  0x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br><br>10\t&#125;<br>   0x0000000000400669 <span class=\"hljs-variable\">&lt;+39&gt;</span>:\tc9\tleaveq <br>   0x000000000040066a <span class=\"hljs-variable\">&lt;+40&gt;</span>:\tc3\tretq   <br><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>修改二进制代码（注意大小端和指令长度）：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\">(gdb) <span class=\"hljs-built_in\">set</span> variable *(short*)<span class=\"hljs-number\">0</span>x400651=<span class=\"hljs-number\">0</span>x0ceb<br>(gdb) disassemble /mr drawing <br>Dump of assembler code <span class=\"hljs-keyword\">for</span> function drawing:<br><span class=\"hljs-number\">5</span>\t&#123;<br>   <span class=\"hljs-number\">0</span>x0000000000400642 <span class=\"hljs-variable\">&lt;+0&gt;</span>:\t<span class=\"hljs-number\">55</span>\tpush   %rbp<br>   <span class=\"hljs-number\">0</span>x0000000000400643 <span class=\"hljs-variable\">&lt;+1&gt;</span>:\t<span class=\"hljs-number\">48</span> <span class=\"hljs-number\">89</span> e5\tmov    %rsp,%rbp<br>   <span class=\"hljs-number\">0</span>x0000000000400646 <span class=\"hljs-variable\">&lt;+4&gt;</span>:\t<span class=\"hljs-number\">48</span> <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>\tsub    <span class=\"hljs-variable\">$0x10</span>,%rsp<br>   <span class=\"hljs-number\">0</span>x000000000040064a <span class=\"hljs-variable\">&lt;+8&gt;</span>:\t<span class=\"hljs-number\">89</span> <span class=\"hljs-number\">7</span>d fc\tmov    %edi,-<span class=\"hljs-number\">0</span>x4(%rbp)<br><br><span class=\"hljs-number\">6</span>\t  if (n != <span class=\"hljs-number\">0</span>)<br>   <span class=\"hljs-number\">0</span>x000000000040064d <span class=\"hljs-variable\">&lt;+11&gt;</span>:\t<span class=\"hljs-number\">83</span> <span class=\"hljs-number\">7</span>d fc <span class=\"hljs-number\">00</span>\tcmpl   <span class=\"hljs-variable\">$0x0</span>,-<span class=\"hljs-number\">0</span>x4(%rbp)<br>   <span class=\"hljs-number\">0</span>x0000000000400651 <span class=\"hljs-variable\">&lt;+15&gt;</span>:\teb <span class=\"hljs-number\">0</span>c\tjmp    <span class=\"hljs-number\">0</span>x40065f <span class=\"hljs-variable\">&lt;drawing+29&gt;</span><br><br><span class=\"hljs-number\">7</span>\t    puts (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>   <span class=\"hljs-number\">0</span>x0000000000400653 <span class=\"hljs-variable\">&lt;+17&gt;</span>:\tbf e0 <span class=\"hljs-number\">07</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">00</span>\tmov    <span class=\"hljs-variable\">$0x4007e0</span>,%edi<br>   <span class=\"hljs-number\">0</span>x0000000000400658 <span class=\"hljs-variable\">&lt;+22&gt;</span>:\te8 b3 fe ff ff\tcallq  <span class=\"hljs-number\">0</span>x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br>   <span class=\"hljs-number\">0</span>x000000000040065d <span class=\"hljs-variable\">&lt;+27&gt;</span>:\teb <span class=\"hljs-number\">0</span>a\tjmp    <span class=\"hljs-number\">0</span>x400669 <span class=\"hljs-variable\">&lt;drawing+39&gt;</span><br><br><span class=\"hljs-number\">8</span>\t  else<br><span class=\"hljs-number\">9</span>\t    puts (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>   <span class=\"hljs-number\">0</span>x000000000040065f <span class=\"hljs-variable\">&lt;+29&gt;</span>:\tbf <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">08</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">00</span>\tmov    <span class=\"hljs-variable\">$0x400812</span>,%edi<br>   <span class=\"hljs-number\">0</span>x0000000000400664 <span class=\"hljs-variable\">&lt;+34&gt;</span>:\te8 a7 fe ff ff\tcallq  <span class=\"hljs-number\">0</span>x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br><br><span class=\"hljs-number\">10</span>\t&#125;<br>   <span class=\"hljs-number\">0</span>x0000000000400669 <span class=\"hljs-variable\">&lt;+39&gt;</span>:\tc9\tleaveq <br>   <span class=\"hljs-number\">0</span>x000000000040066a <span class=\"hljs-variable\">&lt;+40&gt;</span>:\tc3\tretq   <br><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，条件跳转指令“je”已经被改为无条件跳转“jmp”了。</p>\n<p>退出，运行一下：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>./a.<span class=\"hljs-keyword\">out</span> <br>Your number is <span class=\"hljs-number\">2</span><br>You win <span class=\"hljs-variable\">$3000</span>!<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Patching.html#Patching\">gdb手册</a></p>\n<h4 id=\"13、信号\"><a href=\"#13、信号\" class=\"headerlink\" title=\"13、信号\"></a>13、信号</h4><h5 id=\"查看信号处理信息\"><a href=\"#查看信号处理信息\" class=\"headerlink\" title=\"查看信号处理信息\"></a>查看信号处理信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGINT, handler);<br>        signal(SIGALRM, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>i signals</code>”命令（或者“<code>i handle</code>”命令，<code>i</code>是<code>info</code>命令缩写）查看gdb如何处理进程收到的信号:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br><br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">Yes</span>             Hangup<br>SIGINT        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Interrupt<br>SIGQUIT       <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">Yes</span>             Quit<br><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br>SIGALRM       <span class=\"hljs-literal\">No</span>        <span class=\"hljs-literal\">No</span>      <span class=\"hljs-literal\">Yes</span>             Alarm<span class=\"hljs-built_in\"> clock</span><br><span class=\"hljs-built_in\"></span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br></code></pre></td></tr></table></figure>\n\n<p>第一项（<code>Signal</code>）：标示每个信号。<br>第二项（<code>Stop</code>）：表示被调试的程序有对应的信号发生时，gdb是否会暂停程序。<br>第三项（<code>Print</code>）：表示被调试的程序有对应的信号发生时，gdb是否会打印相关信息。<br>第四项（<code>Pass to program</code>）：gdb是否会把这个信号发给被调试的程序。<br>第五项（<code>Description</code>）：信号的描述信息。</p>\n<p>从上面的输出可以看到，当<code>SIGINT</code>信号发生时，gdb会暂停被调试的程序，并打印相关信息，但不会把这个信号发给被调试的程序。而当<code>SIGALRM</code>信号发生时，gdb不会暂停被调试的程序，也不打印相关信息，但会把这个信号发给被调试的程序。</p>\n<p>启动gdb调试上面的程序，同时另起一个终端，先后发送<code>SIGINT</code>和<code>SIGALRM</code>信号给被调试的进程，输出如下：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\">Program received <span class=\"hljs-keyword\">signal</span><span class=\"hljs-string\"> SIGINT</span>, Interrupt.<br><span class=\"hljs-number\">0xfeeeae55</span> <span class=\"hljs-keyword\">in</span> ___nanosleep () from /lib/libc.so<span class=\"hljs-number\">.1</span><br>(gdb) c<br>Continuing.<br>Receive <span class=\"hljs-keyword\">signal</span><span class=\"hljs-string\"></span>: <span class=\"hljs-number\">14</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到收到<code>SIGINT</code>时，程序暂停了，也输出了信号信息，但并没有把<code>SIGINT</code>信号交由进程处理（程序没有输出）。而收到<code>SIGALRM</code>信号时，程序没有暂停，也没有输出信号信息，但把<code>SIGALRM</code>信号交由进程处理了（程序打印了输出）。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"信号发生时是否暂停程序\"><a href=\"#信号发生时是否暂停程序\" class=\"headerlink\" title=\"信号发生时是否暂停程序\"></a>信号发生时是否暂停程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGHUP, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>handle signal stop/nostop</code>”命令设置当信号发生时，是否暂停程序的执行，以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行<code>continue</code>命令继续程序的执行。</p>\n<p>接下来用“<code>handle SIGHUP nostop</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不暂停程序，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nostop<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">No</span>        <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">Yes</span>             Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>Receive signal: 1<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，程序收到<code>SIGHUP</code>信号发生时，没有暂停，而是继续执行。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP stop</code>”命令即可。需要注意的是，设置<code>stop</code>的同时，默认也会设置<code>print</code>（关于<code>print</code>，请参见<a href=\"https://www.kancloud.cn/wizardforcel/gdb-tips-100/146797\">信号发生时是否打印信号信息</a>）。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"信号发生时是否打印信号信息\"><a href=\"#信号发生时是否打印信号信息\" class=\"headerlink\" title=\"信号发生时是否打印信号信息\"></a>信号发生时是否打印信号信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGHUP, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>handle signal print/noprint</code>”命令设置当信号发生时，是否打印信号信息，以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行<code>continue</code>命令继续程序的执行。</p>\n<p>接下来用“<code>handle SIGHUP noprint</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不打印信号信息，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP noprint <br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">No</span>        <span class=\"hljs-literal\">No</span>      <span class=\"hljs-literal\">Yes</span>             Hangup<br>(gdb) r<br>Starting program: /data1/nan/test <br>[Thread debugging using libthread_db enabled]<br>Receive signal: 1<br></code></pre></td></tr></table></figure>\n\n<p>需要注意的是，设置<code>noprint</code>的同时，默认也会设置<code>nostop</code>。可以看到，程序收到<code>SIGHUP</code>信号发生时，没有暂停，也没有打印信号信息。而是继续执行。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP print</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"信号发生时是否把信号给程序处理\"><a href=\"#信号发生时是否把信号给程序处理\" class=\"headerlink\" title=\"信号发生时是否把信号给程序处理\"></a>信号发生时是否把信号给程序处理</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGHUP, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>handle signal pass(noignore)/nopass(ignore)</code>”命令设置当信号发生时，是否把信号丢给程序处理.其中<code>pass</code>和<code>noignore</code>含义相同，<code>nopass</code>和<code>ignore</code>含义相同。以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会把信号丢给程序处理。</p>\n<p>接下来用“<code>handle SIGHUP nopass</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不把信号丢给程序处理，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nopass<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>0xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /lib/libc.so.1<br>(gdb) c<br>Continuing.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>SIGHUP</code>信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP pass</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"给程序发送信号\"><a href=\"#给程序发送信号\" class=\"headerlink\" title=\"给程序发送信号\"></a>给程序发送信号</h5><p>用gdb调试程序时，可以用“<code>handle signal pass(noignore)/nopass(ignore)</code>”命令设置当信号发生时，是否把信号丢给程序处理.其中<code>pass</code>和<code>noignore</code>含义相同，<code>nopass</code>和<code>ignore</code>含义相同。以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会把信号丢给程序处理。</p>\n<p>接下来用“<code>handle SIGHUP nopass</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不把信号丢给程序处理，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nopass<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>0xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /lib/libc.so.1<br>(gdb) c<br>Continuing.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>SIGHUP</code>信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP pass</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<p>用gdb调试程序时，可以用“<code>handle signal pass(noignore)/nopass(ignore)</code>”命令设置当信号发生时，是否把信号丢给程序处理.其中<code>pass</code>和<code>noignore</code>含义相同，<code>nopass</code>和<code>ignore</code>含义相同。以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会把信号丢给程序处理。</p>\n<p>接下来用“<code>handle SIGHUP nopass</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不把信号丢给程序处理，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nopass<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>0xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /lib/libc.so.1<br>(gdb) c<br>Continuing.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>SIGHUP</code>信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP pass</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"使用“-siginfo”变量\"><a href=\"#使用“-siginfo”变量\" class=\"headerlink\" title=\"使用“$_siginfo”变量\"></a>使用“$_siginfo”变量</h5><h4 id=\"14、共享库\"><a href=\"#14、共享库\" class=\"headerlink\" title=\"14、共享库\"></a>14、共享库</h4><h5 id=\"显示共享库链接信息\"><a href=\"#显示共享库链接信息\" class=\"headerlink\" title=\"显示共享库链接信息\"></a>显示共享库链接信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;hiredis/hiredis.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">1026</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>        redisContext *c = <span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-type\">void</span> *reply = <span class=\"hljs-literal\">NULL</span>;<br><br>        <span class=\"hljs-built_in\">memset</span>(a, <span class=\"hljs-string\">&#x27;a&#x27;</span>, (<span class=\"hljs-keyword\">sizeof</span>(a) - <span class=\"hljs-number\">1</span>));<br>        c = redisConnect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">6379</span>);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> != c)<br>        &#123;<br>              reply = redisCommand(c, <span class=\"hljs-string\">&quot;set 1 %s&quot;</span>, a);<br>              freeReplyObject(reply);<br><br>              reply = redisCommand(c, <span class=\"hljs-string\">&quot;get 1&quot;</span>);<br>              freeReplyObject(reply);<br><br>              redisFree(c);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用”<code>info sharedlibrary regex</code>“命令可以显示程序加载的共享链接库信息，其中<code>regex</code>可以是正则表达式，意为显示名字符合<code>regex</code>的共享链接库。如果没有<code>regex</code>，则列出所有的库。以上面程序为例:</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x109f0: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting <span class=\"hljs-keyword\">program</span>: /<span class=\"hljs-keyword\">export</span>/home/nan/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                       char a[<span class=\"hljs-number\">1026</span>] = <span class=\"hljs-comment\">&#123;0&#125;</span>;<br>(gdb) info sharedlibrary<br>From        <span class=\"hljs-keyword\">To</span>          Syms <span class=\"hljs-keyword\">Read</span>   Shared <span class=\"hljs-keyword\">Object</span> <span class=\"hljs-keyword\">Library</span><br><span class=\"hljs-number\">0</span>xff3b44a0  <span class=\"hljs-number\">0</span>xff3e3490  Yes <span class=\"hljs-comment\">(*)     /usr/lib/ld.so.1</span><br><span class=\"hljs-comment\">0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11</span><br><span class=\"hljs-comment\">0xff3137f0  0xff31a9f4  Yes (*)</span>     /lib/libsocket.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff215fd4  <span class=\"hljs-number\">0</span>xff28545c  Yes <span class=\"hljs-comment\">(*)     /lib/libnsl.so.1</span><br><span class=\"hljs-comment\">0xff0a3a20  0xff14fedc  Yes (*)</span>     /lib/libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff320400  <span class=\"hljs-number\">0</span>xff3234c8  Yes <span class=\"hljs-comment\">(*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1</span><br><span class=\"hljs-comment\">(*)</span>: Shared <span class=\"hljs-keyword\">library</span> <span class=\"hljs-keyword\">is</span> missing debugging information.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到列出所有加载的共享链接库信息，带“<code>*</code>”表示库缺少调试信息。</p>\n<p>另外也可以使用正则表达式：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i sharedlibrary hiredi*<br><span class=\"hljs-keyword\">From</span>        To          Syms <span class=\"hljs-keyword\">Read</span>   Shared Object Library<br><span class=\"hljs-number\">0</span>xff3325f0  <span class=\"hljs-number\">0</span>xff33d4b4  Yes         <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/lib/</span>libhiredis.so.<span class=\"hljs-number\">0.11</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到只列出了一个库信息。<br>参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries\">gdb手册</a>.</p>\n<h4 id=\"15、脚本\"><a href=\"#15、脚本\" class=\"headerlink\" title=\"15、脚本\"></a>15、脚本</h4><h5 id=\"配置gdb-init文件\"><a href=\"#配置gdb-init文件\" class=\"headerlink\" title=\"配置gdb init文件\"></a>配置gdb init文件</h5><p>使用”<code>info sharedlibrary regex</code>“命令可以显示程序加载的共享链接库信息，其中<code>regex</code>可以是正则表达式，意为显示名字符合<code>regex</code>的共享链接库。如果没有<code>regex</code>，则列出所有的库。以上面程序为例:</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x109f0: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting <span class=\"hljs-keyword\">program</span>: /<span class=\"hljs-keyword\">export</span>/home/nan/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                       char a[<span class=\"hljs-number\">1026</span>] = <span class=\"hljs-comment\">&#123;0&#125;</span>;<br>(gdb) info sharedlibrary<br>From        <span class=\"hljs-keyword\">To</span>          Syms <span class=\"hljs-keyword\">Read</span>   Shared <span class=\"hljs-keyword\">Object</span> <span class=\"hljs-keyword\">Library</span><br><span class=\"hljs-number\">0</span>xff3b44a0  <span class=\"hljs-number\">0</span>xff3e3490  Yes <span class=\"hljs-comment\">(*)     /usr/lib/ld.so.1</span><br><span class=\"hljs-comment\">0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11</span><br><span class=\"hljs-comment\">0xff3137f0  0xff31a9f4  Yes (*)</span>     /lib/libsocket.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff215fd4  <span class=\"hljs-number\">0</span>xff28545c  Yes <span class=\"hljs-comment\">(*)     /lib/libnsl.so.1</span><br><span class=\"hljs-comment\">0xff0a3a20  0xff14fedc  Yes (*)</span>     /lib/libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff320400  <span class=\"hljs-number\">0</span>xff3234c8  Yes <span class=\"hljs-comment\">(*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1</span><br><span class=\"hljs-comment\">(*)</span>: Shared <span class=\"hljs-keyword\">library</span> <span class=\"hljs-keyword\">is</span> missing debugging information.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到列出所有加载的共享链接库信息，带“<code>*</code>”表示库缺少调试信息。</p>\n<p>另外也可以使用正则表达式：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i sharedlibrary hiredi*<br><span class=\"hljs-keyword\">From</span>        To          Syms <span class=\"hljs-keyword\">Read</span>   Shared Object Library<br><span class=\"hljs-number\">0</span>xff3325f0  <span class=\"hljs-number\">0</span>xff33d4b4  Yes         <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/lib/</span>libhiredis.so.<span class=\"hljs-number\">0.11</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到只列出了一个库信息。<br>参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries\">gdb手册</a>.</p>\n<h5 id=\"按何种方式解析脚本文件\"><a href=\"#按何种方式解析脚本文件\" class=\"headerlink\" title=\"按何种方式解析脚本文件\"></a>按何种方式解析脚本文件</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>        <span class=\"hljs-type\">int</span> a;<br>        <span class=\"hljs-type\">int</span> b;<br>        <span class=\"hljs-type\">int</span> c;<br>        <span class=\"hljs-type\">int</span> d;<br>&#125;ex_st;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。<br>gdb用“<code>set script-extension</code>”命令来决定按何种格式来解析脚本文件。它可以取3个值：<br>a）<code>off</code>：所有的脚本文件都解析成gdb的命令脚本；<br>b）<code>soft</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；<br>c）<code>strict</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；<br>以上面程序为例，进行调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) q<br>A debugging <span class=\"hljs-keyword\">session</span> <span class=\"hljs-keyword\">is</span> active.<br><br>        Inferior <span class=\"hljs-number\">1</span> [process <span class=\"hljs-number\">24249</span>] will be killed.<br><br>Quit anyway? (y <span class=\"hljs-keyword\">or</span> n) y<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb退出时，默认行为会提示用户是否退出。</p>\n<p>下面写一个脚本文件（<a href=\"http://gdb.py/\">gdb.py</a>），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br></code></pre></td></tr></table></figure>\n\n<p>再次开始调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) <span class=\"hljs-keyword\">show</span> script-<span class=\"hljs-keyword\">extension</span><br>Script filename <span class=\"hljs-keyword\">extension</span> recognition <span class=\"hljs-keyword\">is</span> &quot;soft&quot;.<br>(gdb) source gdb.py<br>  File &quot;gdb.py&quot;, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br>              ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure>\n\n<p>可以看到“<code>script-extension</code>”默认值是<code>soft</code>，接下来执行“<code>source gdb.py</code>”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。<br>再执行一次：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, line <span class=\"hljs-number\">12</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) set script-extension off<br>(gdb) source gdb.py<br>(gdb) <span class=\"hljs-string\">q</span><br><span class=\"hljs-string\">[root@linux:~]</span>$<br></code></pre></td></tr></table></figure>\n\n<p>这次把“<code>script-extension</code>”值改为<code>off</code>，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html\">gdb手册</a></p>\n<h5 id=\"保存历史命令\"><a href=\"#保存历史命令\" class=\"headerlink\" title=\"保存历史命令\"></a>保存历史命令</h5><p>gdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。<br>gdb用“<code>set script-extension</code>”命令来决定按何种格式来解析脚本文件。它可以取3个值：<br>a）<code>off</code>：所有的脚本文件都解析成gdb的命令脚本；<br>b）<code>soft</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；<br>c）<code>strict</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；<br>以上面程序为例，进行调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) q<br>A debugging <span class=\"hljs-keyword\">session</span> <span class=\"hljs-keyword\">is</span> active.<br><br>        Inferior <span class=\"hljs-number\">1</span> [process <span class=\"hljs-number\">24249</span>] will be killed.<br><br>Quit anyway? (y <span class=\"hljs-keyword\">or</span> n) y<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb退出时，默认行为会提示用户是否退出。</p>\n<p>下面写一个脚本文件（<a href=\"http://gdb.py/\">gdb.py</a>），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br></code></pre></td></tr></table></figure>\n\n<p>再次开始调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) <span class=\"hljs-keyword\">show</span> script-<span class=\"hljs-keyword\">extension</span><br>Script filename <span class=\"hljs-keyword\">extension</span> recognition <span class=\"hljs-keyword\">is</span> &quot;soft&quot;.<br>(gdb) source gdb.py<br>  File &quot;gdb.py&quot;, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br>              ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure>\n\n<p>可以看到“<code>script-extension</code>”默认值是<code>soft</code>，接下来执行“<code>source gdb.py</code>”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。<br>再执行一次：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, line <span class=\"hljs-number\">12</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) set script-extension off<br>(gdb) source gdb.py<br>(gdb) <span class=\"hljs-string\">q</span><br><span class=\"hljs-string\">[root@linux:~]</span>$<br></code></pre></td></tr></table></figure>\n\n<p>这次把“<code>script-extension</code>”值改为<code>off</code>，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html\">gdb手册</a></p>\n<h4 id=\"16、源文件\"><a href=\"#16、源文件\" class=\"headerlink\" title=\"16、源文件\"></a>16、源文件</h4><h5 id=\"设置源文件查找路径\"><a href=\"#设置源文件查找路径\" class=\"headerlink\" title=\"设置源文件查找路径\"></a>设置源文件查找路径</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        <span class=\"hljs-type\">time_t</span> now = time(<span class=\"hljs-literal\">NULL</span>);<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">local</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">gmt</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>        localtime_r(&amp;now, &amp;local);<br>        gmtime_r(&amp;now, &amp;gmt);<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>有时gdb不能准确地定位到源文件的位置（比如文件被移走了，等等），此时可以用<code>directory</code>命令设置查找源文件的路径。以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x400560: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>       a.c: No such <span class=\"hljs-keyword\">file</span> or directory.<br>(gdb) directory ..<span class=\"hljs-regexp\">/ki/</span><br><span class=\"hljs-keyword\">Source</span> directories searched: <span class=\"hljs-regexp\">/home/</span>nan<span class=\"hljs-regexp\">/../</span>ki:$cdir:$cwd<br>(gdb) n<br><span class=\"hljs-number\">6</span>               struct tm local = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">7</span>               struct tm gmt = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">9</span>               localtime_r(&amp;now, &amp;local);<br>(gdb)<br><span class=\"hljs-number\">10</span>              gmtime_r(&amp;now, &amp;gmt);<br>(gdb) q<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用<code>directory</code>（或<code>dir</code>)命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。</p>\n<p>如果希望在gdb启动时，加载code的位置，避免每次在gdb中再次输入命令，可以使用gdb的<code>-d</code> 参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gdb -q a.out -d /search/code/some <br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html\">gdb手册</a>.</p>\n<h5 id=\"替换查找源文件的目录\"><a href=\"#替换查找源文件的目录\" class=\"headerlink\" title=\"替换查找源文件的目录\"></a>替换查找源文件的目录</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        <span class=\"hljs-type\">time_t</span> now = time(<span class=\"hljs-literal\">NULL</span>);<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">local</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">gmt</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>        localtime_r(&amp;now, &amp;local);<br>        gmtime_r(&amp;now, &amp;gmt);<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>有时调试程序时，源代码文件可能已经移到其它的文件夹了。此时可以用<code>set substitute-path from to</code>命令设置新的文件夹（<code>to</code>）目录替换旧的（<code>from</code>）。以上面程序为例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x400560</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">5.</span><br>Starting program: /home/<span class=\"hljs-keyword\">nan</span>/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>       a.c: <span class=\"hljs-keyword\">No</span> such file <span class=\"hljs-keyword\">or</span> directory.<br>(gdb) <span class=\"hljs-keyword\">set</span> substitute-<span class=\"hljs-type\">path</span> /home/<span class=\"hljs-keyword\">nan</span> /home/ki<br>(gdb) n<br><span class=\"hljs-number\">6</span>                       struct tm <span class=\"hljs-keyword\">local</span> = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">7</span>                       struct tm gmt = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">9</span>                       localtime_r(&amp;now, &amp;<span class=\"hljs-keyword\">local</span>);<br>(gdb)<br><span class=\"hljs-number\">10</span>                      gmtime_r(&amp;now, &amp;gmt);<br>(gdb)<br><span class=\"hljs-number\">12</span>                      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>调试时，因为源文件已经移到<code>/home/ki</code>这个文件夹下了，所以gdb找不到源文件。使用<code>set substitute-path /home/nan /home/ki</code>命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html\">gdb手册</a>.</p>\n<h4 id=\"17、图形化界面\"><a href=\"#17、图形化界面\" class=\"headerlink\" title=\"17、图形化界面\"></a>17、图形化界面</h4><h5 id=\"进入和退出图形化调试界面\"><a href=\"#进入和退出图形化调试界面\" class=\"headerlink\" title=\"进入和退出图形化调试界面\"></a>进入和退出图形化调试界面</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>启动gdb时指定“<code>-tui</code>”参数（例如：<code>gdb -tui program</code>），或者运行gdb过程中使用“<code>Crtl+X+A</code>”组合键，都可以进入图形化调试界面。以调试上面程序为例：</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\">   ┌──a.<span class=\"hljs-keyword\">c</span>──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j <span class=\"hljs-operator\">=</span> j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span><span class=\"hljs-punctuation\">,</span> j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      int main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>B+&gt;│<span class=\"hljs-number\">24</span>              fun<span class=\"hljs-number\">2</span>()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">25</span>              return <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;                                                                      │</span><br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   │<span class=\"hljs-number\">28</span>                                                                                             │<br>   │<span class=\"hljs-number\">29</span>                                                                                             │<br>   │<span class=\"hljs-number\">30</span>                                                                                             │<br>   │<span class=\"hljs-number\">31</span>                                                                                             │<br>   │<span class=\"hljs-number\">32</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">22141</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>Type <span class=\"hljs-string\">&quot;apropos word&quot;</span> <span class=\"hljs-keyword\">to</span> search for commands related <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&quot;word&quot;</span>...<br>Reading symbols from a...done.<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x40052b</span>: file a.<span class=\"hljs-keyword\">c</span><span class=\"hljs-punctuation\">,</span> line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/nan/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> main () at a.<span class=\"hljs-keyword\">c</span>:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，显示了当前的程序的进程号，将要执行的代码行号，<code>PC</code>寄存器的值。<br>退出图形化调试界面也是用“<code>Crtl+X+A</code>”组合键。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI.html\">gdb手册</a>.</p>\n<h5 id=\"显示汇编代码窗口\"><a href=\"#显示汇编代码窗口\" class=\"headerlink\" title=\"显示汇编代码窗口\"></a>显示汇编代码窗口</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb图形化调试界面时，可以使用“<code>layout asm</code>”命令显示汇编代码窗口。以调试上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">\t    ┌───────────────────────────────────────────────────────────────────────────────────────────────┐<br>  &gt;│<span class=\"hljs-number\">0x40052b</span> &lt;main+<span class=\"hljs-number\">4</span>&gt;               callq  <span class=\"hljs-number\">0x4004f3</span> &lt;fun2&gt;                                         │<br>   │<span class=\"hljs-number\">0x400530</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;               <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax                                               │<br>   │<span class=\"hljs-number\">0x400535</span> &lt;main+<span class=\"hljs-number\">14</span>&gt;              leaveq                                                         │<br>   │<span class=\"hljs-number\">0x400536</span> &lt;main+<span class=\"hljs-number\">15</span>&gt;              retq                                                           │<br>   │<span class=\"hljs-number\">0x400537</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x400538</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x400539</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053a</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053b</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053c</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053d</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053e</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053f</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x400540</span> &lt;__libc_csu_fini&gt;      <span class=\"hljs-keyword\">repz</span> retq                                                      │<br>   │<span class=\"hljs-number\">0x400542</span>                        data16 data16 data16 data16 nopw %cs:<span class=\"hljs-number\">0x0</span>(%rax,%rax,<span class=\"hljs-number\">1</span>)          │<br>   │<span class=\"hljs-number\">0x400550</span> &lt;__libc_csu_init&gt;      <span class=\"hljs-keyword\">mov</span>    %rbp,-<span class=\"hljs-number\">0x28</span>(%rsp)                                        │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">44658</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40052b</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/<span class=\"hljs-meta\">nan</span>/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，显示了当前的程序的汇编代码。<br>如果既想显示源代码，又想显示汇编代码，可以使用“<code>layout split</code>”命令：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">   ┌──<span class=\"hljs-keyword\">a</span>.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>   │<span class=\"hljs-number\">25</span>              <span class=\"hljs-literal\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   │<span class=\"hljs-number\">28</span>                                                                                             │<br>   │<span class=\"hljs-number\">29</span>                                                                                             │<br>   │<span class=\"hljs-number\">30</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>  &gt;│<span class=\"hljs-number\">0x40052b</span> &lt;main+<span class=\"hljs-number\">4</span>&gt;       callq  <span class=\"hljs-number\">0x4004f3</span> &lt;fun2&gt;                                                 │<br>   │<span class=\"hljs-number\">0x400530</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;       mov    $<span class=\"hljs-number\">0x0</span>,%eax                                                       │<br>   │<span class=\"hljs-number\">0x400535</span> &lt;main+<span class=\"hljs-number\">14</span>&gt;      leaveq                                                                 │<br>   │<span class=\"hljs-number\">0x400536</span> &lt;main+<span class=\"hljs-number\">15</span>&gt;      retq                                                                   │<br>   │<span class=\"hljs-number\">0x400537</span>                nop                                                                    │<br>   │<span class=\"hljs-number\">0x400538</span>                nop                                                                    │<br>   │<span class=\"hljs-number\">0x400539</span>                nop                                                                    │<br>   │<span class=\"hljs-number\">0x40053a</span>                nop                                                                    │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native <span class=\"hljs-built_in\">process</span> <span class=\"hljs-number\">44658</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><br>(gdb) <span class=\"hljs-built_in\">start</span><br>Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x40052b</span>: <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">a</span>.c, <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">24.</span><br>Starting program: /home/nan/<span class=\"hljs-keyword\">a</span><br><br>Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">a</span>.c:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到上面显示的是源代码，下面显示的是汇编代码。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html\">gdb手册</a>.</p>\n<h5 id=\"显示寄存器窗口\"><a href=\"#显示寄存器窗口\" class=\"headerlink\" title=\"显示寄存器窗口\"></a>显示寄存器窗口</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb图形化调试界面时，可以使用“<code>layout regs</code>”命令显示寄存器窗口。以调试上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">┌──Register group: general─────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x34e4590f60</span>     <span class=\"hljs-number\">227169341280</span>     <span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        │<br>│<span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        <span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe4b8</span>   <span class=\"hljs-number\">140737488348344</span>  │<br>│<span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe4a8</span>   <span class=\"hljs-number\">140737488348328</span>  <span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span>                        │<br>│<span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   │<br>│<span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x34e458f300</span>     <span class=\"hljs-number\">227169334016</span>     <span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x34e3a0e9f0</span>     <span class=\"hljs-number\">227157273072</span>     │<br>│<span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe210</span>   <span class=\"hljs-number\">140737488347664</span>  <span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x34e421ec20</span>     <span class=\"hljs-number\">227165727776</span>     │<br>│<span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span>                  <span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe4a0</span>   <span class=\"hljs-number\">140737488348320</span>  │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2()<span class=\"hljs-comment\">;                                                                        │</span><br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>Reading symbols from a...done.<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40052b</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/<span class=\"hljs-meta\">nan</span>/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，显示了通用寄存器的内容。<br>如果想查看浮点寄存器，可以使用“<code>tui reg float</code>”命令：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">┌──Register group: <span class=\"hljs-meta\">float</span>───────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-built_in\">st0</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st1</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st2</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st3</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st4</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st5</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st6</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">16</span>              fun1()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40052b</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/<span class=\"hljs-meta\">nan</span>/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb) tui reg <span class=\"hljs-meta\">float</span><br></code></pre></td></tr></table></figure>\n\n<p>“<code>tui reg system</code>”命令显示系统寄存器：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">┌──Register group: system──────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-keyword\">orig_rax </span>      <span class=\"hljs-number\">0xffffffffffffffff</span>       -<span class=\"hljs-number\">1</span>                                                        │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">16</span>              fun1()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">17</span>              <span class=\"hljs-keyword\">j++; </span>                                                                          │<br>   │<span class=\"hljs-number\">18</span>              <span class=\"hljs-keyword\">j </span>= <span class=\"hljs-keyword\">j </span>* <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-keyword\">j); </span>                                                            │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      int main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><br>Temporary <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-number\">1</span>, main () <span class=\"hljs-built_in\">at</span> a.c:<span class=\"hljs-number\">24</span><br>(gdb) tui reg system<br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>想切换回显示通用寄存器内容，可以使用“<code>tui reg general</code>”命令：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">┌──Register group: general─────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x34e4590f60</span>     <span class=\"hljs-number\">227169341280</span>     <span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        │<br>│<span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        <span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe4b8</span>   <span class=\"hljs-number\">140737488348344</span>  │<br>│<span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe4a8</span>   <span class=\"hljs-number\">140737488348328</span>  <span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span>                        │<br>│<span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   │<br>│<span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x34e458f300</span>     <span class=\"hljs-number\">227169334016</span>     <span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x34e3a0e9f0</span>     <span class=\"hljs-number\">227157273072</span>     │<br>│<span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe210</span>   <span class=\"hljs-number\">140737488347664</span>  <span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x34e421ec20</span>     <span class=\"hljs-number\">227165727776</span>     │<br>│<span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span>                  <span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe4a0</span>   <span class=\"hljs-number\">140737488348320</span>  │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">16</span>              fun1()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>(gdb) tui reg general<br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html\">gdb手册</a>.</p>\n<h5 id=\"调整窗口大小\"><a href=\"#调整窗口大小\" class=\"headerlink\" title=\"调整窗口大小\"></a>调整窗口大小</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb图形化调试界面时，可以使用“<code>winheight &lt;win_name&gt; [+ | -]count</code>”命令调整窗口大小（<code>winheight</code>缩写为<code>win</code>。<code>win_name</code>可以是<code>src</code>、<code>cmd</code>、<code>asm</code>和<code>regs</code>）。以调试上面程序为例，这是原始的<code>src</code>窗口大小：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++;                                                                           │<br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span>;                                                                     │<br>   │<span class=\"hljs-number\">19</span>              printf(&quot;%d\\n&quot;, j);                                                             │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>      <span class=\"hljs-type\">int</span> main(<span class=\"hljs-type\">void</span>)                                                                        <span class=\"hljs-number\">22</span><br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   │<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>B+&gt;│<span class=\"hljs-number\">25</span>                                                                                             │<br>   │                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                            <span class=\"hljs-number\">32</span><br>   │                                                                                               │<br>   │                                                                                               │<br>   │                                                                                               │<br>   │                                                                                               │<br>   │                                                                                               │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">9667</span> <span class=\"hljs-keyword\">In</span>: main                                                <span class=\"hljs-type\">Line</span>: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><span class=\"hljs-keyword\">Usage</span>: winheight &lt;win_name&gt; [+ | -] &lt;#lines&gt;<br>(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x40052b</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">24.</span><br>Starting program: /home/<span class=\"hljs-keyword\">nan</span>/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">24</span><br></code></pre></td></tr></table></figure>\n\n<p>执行“<code>winheight src -5</code>”命令后：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs d\">   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++;                                                                           │<br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span>;                                                                     │<br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);                                                             │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(<span class=\"hljs-keyword\">void</span>)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>   │<span class=\"hljs-number\">25</span>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">9667</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0</span>x40052b<br>Usage: winheight &lt;win_name&gt; [+ | -] &lt;<span class=\"hljs-meta\">#lines&gt;</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到窗口变小了。<br>接着执行“<code>winheight src +5</code>”命令：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs d\">   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++;                                                                           │<br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span>;                                                                     │<br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);                                                             │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(<span class=\"hljs-keyword\">void</span>)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>   │<span class=\"hljs-number\">25</span>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   │<span class=\"hljs-number\">28</span>                                                                                             │<br>   │<span class=\"hljs-number\">29</span>                                                                                             │<br>   │<span class=\"hljs-number\">30</span>                                                                                             │<br>   │<span class=\"hljs-number\">31</span>                                                                                             │<br>   │<span class=\"hljs-number\">32</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">9667</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0</span>x40052b<br>Usage: winheight &lt;win_name&gt; [+ | -] &lt;<span class=\"hljs-meta\">#lines&gt;</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到窗口恢复了原样。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html\">gdb手册</a>.</p>\n<h4 id=\"18、其他\"><a href=\"#18、其他\" class=\"headerlink\" title=\"18、其他\"></a>18、其他</h4><h5 id=\"命令行选项的格式\"><a href=\"#命令行选项的格式\" class=\"headerlink\" title=\"命令行选项的格式\"></a>命令行选项的格式</h5><p>gdb的帮助信息和在线文档对于长选项的形式使用了不同的风格。你可能有点迷惑，gdb的长选项究竟应该是“-”，还是“–”？</p>\n<p>是的，这两种方式都可以。例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">$ gdb -help<br>$ gdb <span class=\"hljs-attr\">--help</span><br><br>$ gdb -args ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> c<br>$ gdb <span class=\"hljs-attr\">--args</span> ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> c<br></code></pre></td></tr></table></figure>\n\n<p>好吧，使用短的。</p>\n<h5 id=\"支持预处理器宏信息\"><a href=\"#支持预处理器宏信息\" class=\"headerlink\" title=\"支持预处理器宏信息\"></a>支持预处理器宏信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NAME <span class=\"hljs-string\">&quot;Joe&quot;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Hello %s\\n&quot;</span>, NAME);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用<code>gcc -g</code>编译生成的程序，是不包含预处理器宏信息的：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) p <span class=\"hljs-type\">NAME</span><br><span class=\"hljs-keyword\">No</span> symbol &quot;NAME&quot; <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">current</span> context.<br></code></pre></td></tr></table></figure>\n\n<p>如果想在gdb中查看宏信息，可以使用<code>gcc -g3</code>进行编译：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) p <span class=\"hljs-type\">NAME</span><br><span class=\"hljs-meta\">$1</span> = &quot;Joe&quot;<br></code></pre></td></tr></table></figure>\n\n<p>关于预处理器宏的命令，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Macros.html#Macros\">gdb手册</a></p>\n<h5 id=\"使用命令的缩写形式\"><a href=\"#使用命令的缩写形式\" class=\"headerlink\" title=\"使用命令的缩写形式\"></a>使用命令的缩写形式</h5><p>在gdb中，你不用必须输入完整的命令，只需命令的（前）几个字母即可。规则是，只要这个缩写不会和其它命令有歧义（注，是否有歧义，这个规则从文档上看不出，看起来需要查看gdb的源代码，或者在实际使用中进行总结）。也可以使用tab键进行命令补全。</p>\n<p>其中许多常用命令只使用第一个字母就可以，比如：</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-function\"><span class=\"hljs-title\">b</span> -&gt;</span> break<br><span class=\"hljs-function\"><span class=\"hljs-title\">c</span> -&gt;</span> continue<br><span class=\"hljs-function\"><span class=\"hljs-title\">d</span> -&gt;</span> delete<br><span class=\"hljs-function\"><span class=\"hljs-title\">f</span> -&gt;</span> frame<br><span class=\"hljs-function\"><span class=\"hljs-title\">i</span> -&gt;</span> info<br><span class=\"hljs-function\"><span class=\"hljs-title\">j</span> -&gt;</span> jump<br><span class=\"hljs-function\"><span class=\"hljs-title\">l</span> -&gt;</span> list<br><span class=\"hljs-function\"><span class=\"hljs-title\">n</span> -&gt;</span> next<br><span class=\"hljs-function\"><span class=\"hljs-title\">p</span> -&gt;</span> print<br><span class=\"hljs-function\"><span class=\"hljs-title\">r</span> -&gt;</span> run<br><span class=\"hljs-function\"><span class=\"hljs-title\">s</span> -&gt;</span> step<br><span class=\"hljs-function\"><span class=\"hljs-title\">u</span> -&gt;</span> <span class=\"hljs-keyword\">until</span><br></code></pre></td></tr></table></figure>\n\n<p>也有使用两个或几个字母的，比如：</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-function\"><span class=\"hljs-title\">aw</span> -&gt;</span> awatch<br><span class=\"hljs-function\"><span class=\"hljs-title\">bt</span> -&gt;</span> backtrace<br><span class=\"hljs-function\"><span class=\"hljs-title\">dir</span> -&gt;</span> directory<br><span class=\"hljs-function\"><span class=\"hljs-title\">disas</span> -&gt;</span> disassemble<br><span class=\"hljs-function\"><span class=\"hljs-title\">fin</span> -&gt;</span> finish<br><span class=\"hljs-function\"><span class=\"hljs-title\">ig</span> -&gt;</span> ignore<br><span class=\"hljs-function\"><span class=\"hljs-title\">ni</span> -&gt;</span> nexti<br><span class=\"hljs-function\"><span class=\"hljs-title\">rw</span> -&gt;</span> rwatch<br><span class=\"hljs-function\"><span class=\"hljs-title\">si</span> -&gt;</span> stepi<br><span class=\"hljs-function\"><span class=\"hljs-title\">tb</span> -&gt;</span> tbreak<br><span class=\"hljs-function\"><span class=\"hljs-title\">wa</span> -&gt;</span> watch<br><span class=\"hljs-function\"><span class=\"hljs-title\">win</span> -&gt;</span> winheight<br></code></pre></td></tr></table></figure>\n\n<p>另外，如果直接按回车键，会重复执行上一次的命令。</p>\n<h5 id=\"在GDB中执行shell命令和make\"><a href=\"#在GDB中执行shell命令和make\" class=\"headerlink\" title=\"在GDB中执行shell命令和make\"></a>在GDB中执行shell命令和make</h5><p>你可以不离开gdb，直接执行shell命令，比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">(gdb) <span class=\"hljs-keyword\">shell</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">ls</span></span><br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(gdb) !<span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<p>这里，”!”和命令之间不需要有空格（即，有也成）。</p>\n<p>特别是当你在构建环境(build目录)下调试程序的时候，可以直接运行make：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">(gdb) make CFLAGS<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;-g -O0&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Shell-Commands.html#Shell-Commands\">gdb手册</a></p>\n<h5 id=\"在GDB中执行cd和pwd命令\"><a href=\"#在GDB中执行cd和pwd命令\" class=\"headerlink\" title=\"在GDB中执行cd和pwd命令\"></a>在GDB中执行cd和pwd命令</h5><p>是的，gdb确实支持这两个命令，虽然我没有想到它们有什么特别的用处。</p>\n<p>也许，当你启动gdb之后，发现需要切换工作目录，但又不想退出gdb的时候：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) pwd<br>Working directory <span class=\"hljs-regexp\">/home/</span>xmj.<br>(gdb) cd tmp<br>Working directory <span class=\"hljs-regexp\">/home/</span>xmj/tmp.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Working-Directory.html#Working-Directory\">gdb手册</a></p>\n<h5 id=\"设置命令提示符\"><a href=\"#设置命令提示符\" class=\"headerlink\" title=\"设置命令提示符\"></a>设置命令提示符</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">gdb -q `<span class=\"hljs-built_in\">which</span> gdb`</span><br>Reading symbols from /home/xmj/install/binutils-gdb-git/bin/gdb...done.<br>(gdb) r -q<br>Starting program: /home/xmj/install/binutils-gdb-git/bin/gdb -q<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.<br>(gdb)<br><br><br></code></pre></td></tr></table></figure>\n\n<p> 当你用gdb来调试gdb的时候，通过设置命令提示符，可以帮助你区分这两个gdb：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">$ gdb -q `which gdb`<br>Reading symbols <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/install/</span>binutils-gdb-git<span class=\"hljs-regexp\">/bin/g</span>db...done.<br>(gdb) set prompt (main gdb) <br>(main gdb) r -q<br>Starting program: <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/install/</span>binutils-gdb-git<span class=\"hljs-regexp\">/bin/g</span>db -q<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class=\"hljs-string\">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.<br>(gdb) <br></code></pre></td></tr></table></figure>\n\n<p>注意，这里<code>set prompt (main gdb)</code>结尾处是有一个空格的。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Prompt.html#Prompt\">gdb手册</a></p>\n<h5 id=\"设置被调试程序的参数\"><a href=\"#设置被调试程序的参数\" class=\"headerlink\" title=\"设置被调试程序的参数\"></a>设置被调试程序的参数</h5><p>可以在gdb启动时，通过选项指定被调试程序的参数，例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">$ gdb -args ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> c<br></code></pre></td></tr></table></figure>\n\n<p>也可以在gdb中，通过命令来设置，例如：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">(gdb) set <span class=\"hljs-built_in\">args</span> a b c<br>(gdb) <span class=\"hljs-built_in\">show</span> <span class=\"hljs-built_in\">args</span><br>Argument list to give <span class=\"hljs-built_in\">program</span> being debugged when it <span class=\"hljs-built_in\">is</span> started <span class=\"hljs-built_in\">is</span> <span class=\"hljs-string\">&quot;a b c&quot;</span>.<br></code></pre></td></tr></table></figure>\n\n<p>也可以在运行程序时，直接指定：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) r <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span><br>Starting program: /home/xmj/tmp/<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span><br>(gdb) show args<br>Argument list to give program being debugged when it is started is <span class=\"hljs-string\">&quot;a b&quot;</span>.<br>(gdb) r<br>Starting program: /home/xmj/tmp/<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> <br></code></pre></td></tr></table></figure>\n\n<p>可以看出，参数已经被保存了，下次运行时直接运行<code>run</code>命令，即可。</p>\n<p>有意的是，如果我接下来，想让参数为空，该怎么办？是的，直接：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">set</span> args<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Arguments.html#Arguments\">gdb手册</a></p>\n<h5 id=\"设置被调试程序的环境变量\"><a href=\"#设置被调试程序的环境变量\" class=\"headerlink\" title=\"设置被调试程序的环境变量\"></a>设置被调试程序的环境变量</h5><figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vhdl\">(gdb) u <span class=\"hljs-number\">309</span><br><span class=\"hljs-literal\">Warning</span>: couldn<span class=\"hljs-symbol\">&#x27;t</span> activate thread debugging using libthread_db: Cannot find <span class=\"hljs-keyword\">new</span> threads: <span class=\"hljs-keyword\">generic</span> <span class=\"hljs-literal\">error</span><br><span class=\"hljs-literal\">Warning</span>: couldn<span class=\"hljs-symbol\">&#x27;t</span> activate thread debugging using libthread_db: Cannot find <span class=\"hljs-keyword\">new</span> threads: <span class=\"hljs-keyword\">generic</span> <span class=\"hljs-literal\">error</span><br><span class=\"hljs-literal\">warning</span>: Unable <span class=\"hljs-keyword\">to</span> find libthread_db matching inferior<span class=\"hljs-symbol\">&#x27;s</span> thread <span class=\"hljs-keyword\">library</span>, thread debugging will <span class=\"hljs-keyword\">not</span> be available.<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在gdb中，可以通过命令<code>set env varname=value</code>来设置被调试程序的环境变量。对于上面的例子，网上可以搜到一些解决方法，其中一种方法就是设置LD_PRELOAD环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">env</span> LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0<br></code></pre></td></tr></table></figure>\n\n<p>注意，这个实际路径在不同的机器环境下可能不一样。把这个命令加到~&#x2F;.gdbinit文件中，就可以了。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Environment.html#Environment\">gdb手册</a></p>\n<h5 id=\"得到命令的帮助信息\"><a href=\"#得到命令的帮助信息\" class=\"headerlink\" title=\"得到命令的帮助信息\"></a>得到命令的帮助信息</h5><p>使用<code>help</code>命令可以得到gdb的命令帮助信息：</p>\n<p>（1）<code>help</code>命令不加任何参数会得到命令的分类：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) help<br>List <span class=\"hljs-keyword\">of</span> classes <span class=\"hljs-keyword\">of</span> commands:<br><br>aliases <span class=\"hljs-comment\">-- Aliases of other commands</span><br>breakpoints <span class=\"hljs-comment\">-- Making program stop at certain points</span><br>data <span class=\"hljs-comment\">-- Examining data</span><br><span class=\"hljs-built_in\">files</span> <span class=\"hljs-comment\">-- Specifying and examining files</span><br>internals <span class=\"hljs-comment\">-- Maintenance commands</span><br>obscure <span class=\"hljs-comment\">-- Obscure features</span><br>running <span class=\"hljs-comment\">-- Running the program</span><br>stack <span class=\"hljs-comment\">-- Examining the stack</span><br>status <span class=\"hljs-comment\">-- Status inquiries</span><br>support <span class=\"hljs-comment\">-- Support facilities</span><br>tracepoints <span class=\"hljs-comment\">-- Tracing of program execution without stopping the program</span><br>user-defined <span class=\"hljs-comment\">-- User-defined commands</span><br><br>Type <span class=\"hljs-string\">&quot;help&quot;</span> followed <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">a</span> class name <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">a</span> list <span class=\"hljs-keyword\">of</span> commands <span class=\"hljs-keyword\">in</span> that class.<br>Type <span class=\"hljs-string\">&quot;help all&quot;</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> list <span class=\"hljs-keyword\">of</span> all commands.<br>Type <span class=\"hljs-string\">&quot;help&quot;</span> followed <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">command</span> <span class=\"hljs-title\">name</span> <span class=\"hljs-title\">for</span> <span class=\"hljs-title\">full</span> <span class=\"hljs-title\">documentation</span>.<br>Type <span class=\"hljs-string\">&quot;apropos word&quot;</span> <span class=\"hljs-built_in\">to</span> search <span class=\"hljs-keyword\">for</span> commands related <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&quot;word&quot;</span>.<br>Command name abbreviations are allowed <span class=\"hljs-keyword\">if</span> unambiguous.<br></code></pre></td></tr></table></figure>\n\n<p>（2）当输入<code>help class</code>命令时，可以得到这个类别下所有命令的列表和命令功能：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">(gdb) help data<br>Examining data.<br><br>List <span class=\"hljs-keyword\">of</span> commands:<br><br>append <span class=\"hljs-comment\">-- Append target code/data to a local file</span><br>append <span class=\"hljs-type\">binary</span> <span class=\"hljs-comment\">-- Append target code/data to a raw binary file</span><br>append <span class=\"hljs-type\">binary</span> memory <span class=\"hljs-comment\">-- Append contents of memory to a raw binary file</span><br>append <span class=\"hljs-type\">binary</span> <span class=\"hljs-keyword\">value</span> <span class=\"hljs-comment\">-- Append the value of an expression to a raw binary file</span><br>append memory <span class=\"hljs-comment\">-- Append contents of memory to a raw binary file</span><br>append <span class=\"hljs-keyword\">value</span> <span class=\"hljs-comment\">-- Append the value of an expression to a raw binary file</span><br><span class=\"hljs-keyword\">call</span> <span class=\"hljs-comment\">-- Call a function in the program</span><br>disassemble <span class=\"hljs-comment\">-- Disassemble a specified section of memory</span><br>display <span class=\"hljs-comment\">-- Print value of expression EXP each time the program stops</span><br>dump <span class=\"hljs-comment\">-- Dump target code/data to a local file</span><br>dump <span class=\"hljs-type\">binary</span> <span class=\"hljs-comment\">-- Write target code/data to a raw binary file</span><br>dump <span class=\"hljs-type\">binary</span> memory <span class=\"hljs-comment\">-- Write contents of memory to a raw binary file</span><br>dump <span class=\"hljs-type\">binary</span> <span class=\"hljs-keyword\">value</span> <span class=\"hljs-comment\">-- Write the value of an expression to a raw binary file</span><br>......<br></code></pre></td></tr></table></figure>\n\n<p>（3）也可以用<code>help command</code>命令得到某一个具体命令的用法：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">(gdb) <span class=\"hljs-keyword\">help</span> mem<br>Define attributes <span class=\"hljs-keyword\">for</span> memory region <span class=\"hljs-built_in\">or</span> reset memory region handling totarget-based.<br>Usage: mem auto<br>   mem &lt;<span class=\"hljs-keyword\">lo</span> addr&gt; &lt;<span class=\"hljs-keyword\">hi</span> addr&gt; [<span class=\"hljs-symbol\">&lt;mode&gt;</span> <span class=\"hljs-symbol\">&lt;width&gt;</span> <span class=\"hljs-symbol\">&lt;cache&gt;</span>],<br>where <span class=\"hljs-symbol\">&lt;mode&gt;</span>  may <span class=\"hljs-keyword\">be</span> rw (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>), ro (<span class=\"hljs-keyword\">read</span>-<span class=\"hljs-keyword\">only</span>) <span class=\"hljs-built_in\">or</span> wo (<span class=\"hljs-keyword\">write</span>-<span class=\"hljs-keyword\">only</span>),<br>  <span class=\"hljs-symbol\">&lt;width&gt;</span> may <span class=\"hljs-keyword\">be</span> <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-built_in\">or</span> <span class=\"hljs-number\">64</span>, <span class=\"hljs-built_in\">and</span><br>  <span class=\"hljs-symbol\">&lt;cache&gt;</span> may <span class=\"hljs-keyword\">be</span> cache <span class=\"hljs-built_in\">or</span> nocache<br></code></pre></td></tr></table></figure>\n\n<p>（4）用<code>apropos regexp</code>命令查找所有符合<code>regexp</code>正则表达式的命令信息：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">(gdb) apropos set<br>awatch -- Set a watchpoint for an expression<br><span class=\"hljs-keyword\">b </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br><span class=\"hljs-keyword\">br </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br><span class=\"hljs-keyword\">bre </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br><span class=\"hljs-keyword\">brea </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br>......<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Help.html\">gdb手册</a></p>\n<h5 id=\"记录执行DGB的过程\"><a href=\"#记录执行DGB的过程\" class=\"headerlink\" title=\"记录执行DGB的过程\"></a>记录执行DGB的过程</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;wchar.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">char</span> str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>        <span class=\"hljs-type\">wchar_t</span> str2[] = <span class=\"hljs-string\">L&quot;abcd&quot;</span>;<br>        <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以使用“<code>set logging on</code>”命令把执行gdb的过程记录下来，方便以后自己参考或是别人帮忙分析。默认的日志文件是“<code>gdb.txt</code>”，也可以用“<code>set logging file file</code>”改成别的名字。以上面程序为例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">set</span> logging file <span class=\"hljs-keyword\">log</span>.txt<br>(gdb) <span class=\"hljs-keyword\">set</span> logging <span class=\"hljs-keyword\">on</span><br>Copying output <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">log</span>.txt.<br>(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x8050abe</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">6.</span><br>Starting program: /data1/<span class=\"hljs-keyword\">nan</span>/a <br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               <span class=\"hljs-type\">char</span> str1[] = &quot;abcd&quot;;<br>(gdb) n<br><span class=\"hljs-number\">7</span>               wchar_t str2[] = L&quot;abcd&quot;;<br>(gdb) x/s str1<br><span class=\"hljs-number\">0x804779f</span>:      &quot;abcd&quot;<br>(gdb) n       <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>(gdb) x/ws str2<br><span class=\"hljs-number\">0x8047788</span>:      U&quot;abcd&quot;<br>(gdb) q<br>A debugging <span class=\"hljs-keyword\">session</span> <span class=\"hljs-keyword\">is</span> active.<br><br>        Inferior <span class=\"hljs-number\">1</span> [process <span class=\"hljs-number\">9931</span>    ] will be killed.<br><br>Quit anyway? (y <span class=\"hljs-keyword\">or</span> n) y<br></code></pre></td></tr></table></figure>\n\n<p>执行完后，查看log.txt文件：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">bash</span>-<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">2</span># cat log.txt <br><span class=\"hljs-attribute\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x8050abe: file a.c, line <span class=\"hljs-number\">6</span>.<br><span class=\"hljs-attribute\">Starting</span> program: /data1/nan/a <span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[Thread debugging using libthread_db enabled]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[New Thread 1 (LWP 1)]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[Switching to Thread 1 (LWP 1)]</span><br><br><span class=\"hljs-attribute\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-attribute\">6</span>               char str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br><span class=\"hljs-attribute\">7</span>               wchar_t str2[] = L<span class=\"hljs-string\">&quot;abcd&quot;</span>;<br><span class=\"hljs-attribute\">0x804779f</span>:      <span class=\"hljs-string\">&quot;abcd&quot;</span><br><span class=\"hljs-attribute\">9</span>               return <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-attribute\">0x8047788</span>:      U<span class=\"hljs-string\">&quot;abcd&quot;</span><br><span class=\"hljs-attribute\">A</span> debugging session is active.<br><br>        <span class=\"hljs-attribute\">Inferior</span> <span class=\"hljs-number\">1</span><span class=\"hljs-meta\"> [process 9931    ] will be killed.</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">Quit anyway? (y or n)</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到log.txt详细地记录了gdb的执行过程。</p>\n<p>此外“<code>set logging overwrite on</code>”命令可以让输出覆盖之前的日志文件；而 “<code>set logging redirect on</code>”命令会让gdb的日志不会打印在终端。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Logging-Output.html\">gdb手册</a>.</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.kancloud.cn/wizardforcel/gdb-tips-100/146720\">直接执行函数 · 100个gdb小技巧 · 看云 (kancloud.cn)</a></p>\n<!--[^2] : <100个GDB小技巧>-->\n\n<p>开源开发工具博客：<a href=\"https://hellogcc.github.io/\">Welcome to OSDT Blog | 开源开发工具技术博客（OSDT Blog） (hellogcc.github.io)</a><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;100个GDB小技巧&gt;<br><a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section></p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>GDB笔记</p>\n<p>本篇博客作为GDB的使用方法记录，方便使用时查找，不不定期更新。文中使用方法均时基于WSL:Ubuntu-20.4.如果想了解更多GDB至少，可以查看GDB官方手册：<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/\">Top (Debugging with GDB) (sourceware.org)</a></p>\n<p><a href=\"https://sourceware.org/gdb/onlinedocs/\">Documentation for GDB version 13.2.90.20230625-git (sourceware.org)</a></p>\n<h4 id=\"1、GDB介绍：\"><a href=\"#1、GDB介绍：\" class=\"headerlink\" title=\"1、GDB介绍：\"></a>1、GDB介绍：</h4><p>​        GDB是GNU调试器，一个用于C和C++等编程语言的开源调试器。GDB支持多种操作系统和编程语言，并提供了丰富的调试功能，如断点、单步执行、变量查看等。当然如果你要开始看这个教程了，那么就必然知道他是用来干啥的。</p>\n<h4 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install gdb</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、基本操作\"><a href=\"#3、基本操作\" class=\"headerlink\" title=\"3、基本操作\"></a>3、基本操作</h4><h5 id=\"进入GDB界面：\"><a href=\"#进入GDB界面：\" class=\"headerlink\" title=\"进入GDB界面：\"></a>进入GDB界面：</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@Noodles:/usr1/code# gdb<br>GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1<br>Copyright (C) 2022 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type &quot;show copying&quot; and &quot;show warranty&quot; for details.<br>This GDB was configured as &quot;x86_64-linux-gnu&quot;.<br>Type &quot;show configuration&quot; for configuration details.<br>For bug reporting instructions, please see:<br>&lt;https://www.gnu.org/software/gdb/bugs/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For help, type &quot;help&quot;.<br>Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.<br></code></pre></td></tr></table></figure>\n\n<p>进入GDB界面不显示提示信息：</p>\n<p>如果不想显示这个信息，则可以使用<code>-q</code>选项把提示信息关掉:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">gdb -q</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>你可以在~&#x2F;.bashrc中，为gdb设置一个别名：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">alias gdb=&quot;gdb -q&quot;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"信息查询\"><a href=\"#信息查询\" class=\"headerlink\" title=\"信息查询\"></a>信息查询</h5><h6 id=\"查询版本信息\"><a href=\"#查询版本信息\" class=\"headerlink\" title=\"查询版本信息\"></a>查询版本信息</h6><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">查询版本信息：(gdb) show version<br>(gdb) show version<br>GNU gdb (Ubuntu 12.1-0ubuntu1~22.04) 12.1<br>Copyright (C) 2022 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type &quot;show copying&quot; and &quot;show warranty&quot; for details.<br>This GDB was configured as &quot;x86_64-linux-gnu&quot;.<br>Type &quot;show configuration&quot; for configuration details.<br>For bug reporting instructions, please see:<br>&lt;https://www.gnu.org/software/gdb/bugs/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For help, type &quot;help&quot;.<br>Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">版权相关信息：(gdb) show copying或者<br>(gdb) show copying<br>                    GNU GENERAL PUBLIC LICENSE<br>                       Version 3, 29 June 2007<br><br> Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;<br> Everyone is permitted to copy and distribute verbatim copies<br> of this license document, but changing it is not allowed.<br><br>                            Preamble<br><br>  The GNU General Public License is a free, copyleft license for<br>software and other kinds of works.<br><br>  The licenses for most software and other practical works are designed<br>to take away your freedom to share and change the works.  By contrast,<br>the GNU General Public License is intended to guarantee your freedom to<br>share and change all versions of a program--to make sure it remains free<br>software for all its users.  We, the Free Software Foundation, use the<br>GNU General Public License for most of our software; it applies also to<br>any other work released this way by its authors.  You can apply it to<br>your programs, too.<br><br>(gdb) show warranty<br>  15. Disclaimer of Warranty.<br><br>  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY<br>APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT<br>HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY<br>OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,<br>THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR<br>PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM<br>IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF<br>ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br><br>  16. Limitation of Liability.<br><br>  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING<br>WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS<br>THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY<br>GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE<br>USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF<br>DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD<br>PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),<br>EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF<br>SUCH DAMAGES.<br><br></code></pre></td></tr></table></figure>\n\n<h6 id=\"输出信息多的时候不暂停输出：\"><a href=\"#输出信息多的时候不暂停输出：\" class=\"headerlink\" title=\"输出信息多的时候不暂停输出：\"></a>输出信息多的时候不暂停输出：</h6><p>当GDB输出信息较多时，会暂停输出，并打印提示信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">--Type &lt;RET&gt; for more, q to quit, c to continue without paging--qq<br></code></pre></td></tr></table></figure>\n\n<p>如果想要全部输出不暂停，可以使用</p>\n<p>“set pagination off<code>”或者“</code>set height 0&#96;”命令。这样gdb就会全部输出，不会暂停。</p>\n<h5 id=\"进入GDB\"><a href=\"#进入GDB\" class=\"headerlink\" title=\"进入GDB\"></a>进入GDB</h5><p>编译文件，生成a.out go</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">root@Noodles:/usr1/code# gdb a.out <br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、函数相关\"><a href=\"#4、函数相关\" class=\"headerlink\" title=\"4、函数相关\"></a>4、函数相关</h4><h5 id=\"列出函数名称：“info-functions”\"><a href=\"#列出函数名称：“info-functions”\" class=\"headerlink\" title=\"列出函数名称：“info functions”\"></a>列出函数名称：“<code>info functions</code>”</h5><p>使用gdb调试时，使用“<code>info functions</code>”命令可以列出可执行文件的所有函数名称</p>\n<p>以下代码为例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试时，使用“<code>info functions</code>”命令可以列出可执行文件的所有函数名称。如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) info functions<br>All defined functions:<br><br>File a.c:<br>int main(void);<br>void *thread_func(void *);<br><br>Non-debugging symbols:<br>0x0805079c  _PROCEDURE_LINKAGE_TABLE_<br>0x080507ac  _cleanup@plt<br>0x080507bc  atexit<br>0x080507bc  atexit@plt<br>0x080507cc  __fpstart<br>0x080507cc  __fpstart@plt<br>0x080507dc  exit@plt<br>0x080507ec  __deregister_frame_info_bases@plt<br>0x080507fc  __register_frame_info_bases@plt<br>0x0805080c  _Jv_RegisterClasses@plt<br>0x0805081c  sleep<br>0x0805081c  sleep@plt<br>0x0805082c  pthread_create@plt<br>0x0805083c  _start<br>0x080508b4  _mcount<br>0x080508b8  __do_global_dtors_aux<br>0x08050914  frame_dummy<br>0x080509f4  __do_global_ctors_aux<br>0x08050a24  _init<br>0x08050a31  _fini<br></code></pre></td></tr></table></figure>\n\n<p>另外这个命令也支持正则表达式：“<code>info functions regex</code>”，这样只会列出符合正则表达式的函数名称，例如：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">(gdb) info functions thre*<br>All functions matching regular expression <span class=\"hljs-string\">&quot;thre*&quot;</span>:<br><br><span class=\"hljs-built_in\">File</span> a.c:<br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *)</span></span>;<br><br>Non-debugging symbols:<br><span class=\"hljs-number\">0x0805082c</span>  pthread_create@plt<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb只会列出名字里包含“<code>thre</code>”的函数。</p>\n<h6 id=\"进入或者跳过函数：step、set-step-mode-on\"><a href=\"#进入或者跳过函数：step、set-step-mode-on\" class=\"headerlink\" title=\"进入或者跳过函数：step、set step-mode on\"></a>进入或者跳过函数：step、set step-mode on</h6><p>使用GDB调试的时候，使用step命令（s）进入函数，如果不想进入某个函数可以直接使用next命令（缩写为n）不进入函数，gdb会等函数执行完，再显示下一行要执行的程序代码。</p>\n<p>默认情况下，gdb不会进入不带调试信息的函数。可以执行“set step-mode on”命令，这样gdb就不会跳过没有调试信息的函数。</p>\n<h6 id=\"退出正在调试的函数：“finish”或者“return”\"><a href=\"#退出正在调试的函数：“finish”或者“return”\" class=\"headerlink\" title=\"退出正在调试的函数：“finish”或者“return”\"></a>退出正在调试的函数：“<code>finish</code>”或者“<code>return</code>”</h6><p>当单步调试一个函数时，如果不想继续跟踪下去了，可以有两种方式退出。</p>\n<p>第一种用“<code>finish</code>”命令，这样函数会继续执行完，并且打印返回值，然后等待输入接下来的命令。</p>\n<p>第二种用“<code>return</code>”命令，这样函数不会继续执行下面的语句，而是直接返回。也可以用“<code>return expression</code>”命令指定函数的返回值</p>\n<h6 id=\"直接执行函数：call”或“print\"><a href=\"#直接执行函数：call”或“print\" class=\"headerlink\" title=\"直接执行函数：call”或“print\"></a>直接执行函数：<code>call</code>”或“<code>print</code></h6><p>使用gdb调试程序时，可以使用“<code>call</code>”或“<code>print</code>”命令直接调用函数执行</p>\n<h6 id=\"打印函数堆栈信息：i-frame\"><a href=\"#打印函数堆栈信息：i-frame\" class=\"headerlink\" title=\"打印函数堆栈信息：i frame\"></a>打印函数堆栈信息：i frame</h6><p>使用gdb调试程序时，可以使用“<code>i frame</code>”命令（<code>i</code>是<code>info</code>命令缩写）显示函数堆栈帧信息。执行该命令，会输出函数的堆栈地址，指令寄存器的值，局部变量地址等信息，可以对照汇编指令分析函数的栈信息。</p>\n<h6 id=\"打印尾调用栈帧信息：\"><a href=\"#打印尾调用栈帧信息：\" class=\"headerlink\" title=\"打印尾调用栈帧信息：\"></a>打印尾调用栈帧信息：</h6><p>当一个函数最后一条指令是调用另外一个函数时，开启优化选项的编译器常常以最后被调用的函数返回值作为调用者的返回值，这称之为“尾调用（Tail call）”。以上面程序为例，编译程序（使用‘-O’）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gcc -g -O -o test test.c<br></code></pre></td></tr></table></figure>\n\n<p>查看<code>main</code>函数汇编代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) disassemble main<br>Dump of assembler code for function main:<br>0x0000000000400565 &lt;+0&gt;:     sub    $0x8,%rsp<br>0x0000000000400569 &lt;+4&gt;:     callq  0x400536 &lt;a&gt;<br>0x000000000040056e &lt;+9&gt;:     mov    $0x0,%eax<br>0x0000000000400573 &lt;+14&gt;:    add    $0x8,%rsp<br>0x0000000000400577 &lt;+18&gt;:    retq<br></code></pre></td></tr></table></figure>\n\n<p>可以看到<code>main</code>函数直接调用了函数<code>a</code>，根本看不到函数<code>b</code>和函数<code>c</code>的影子。</p>\n<p>在函数<code>a</code>入口处打上断点，程序停止后，打印堆栈帧信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) i frame<br>Stack level 0, frame at 0x7fffffffe590:<br> rip = 0x400536 in a (test.c:4); saved rip = 0x40056e<br> called by frame at 0x7fffffffe5a0<br> source language c.<br> Arglist at 0x7fffffffe580, args:<br> Locals at 0x7fffffffe580, Previous frame&#x27;s sp is 0x7fffffffe590<br> Saved registers:<br>  rip at 0x7fffffffe588<br></code></pre></td></tr></table></figure>\n\n<p>看不到尾调用的相关信息。</p>\n<p>可以设置“<code>debug entry-values</code>”选项为非0的值，这样除了输出正常的函数堆栈帧信息以外，还可以输出尾调用的相关信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) set debug entry-values 1<br>(gdb) b test.c:4<br>Breakpoint 1 at 0x400536: file test.c, line 4.<br>(gdb) r<br>Starting program: /home/nanxiao/test<br><br>Breakpoint 1, a () at test.c:4<br>4       &#123;<br>(gdb) i frame<br>tailcall: initial:<br>Stack level 0, frame at 0x7fffffffe590:<br> rip = 0x400536 in a (test.c:4); saved rip = 0x40056e<br> called by frame at 0x7fffffffe5a0<br> source language c.<br> Arglist at 0x7fffffffe580, args:<br> Locals at 0x7fffffffe580, Previous frame&#x27;s sp is 0x7fffffffe590<br> Saved registers:<br>  rip at 0x7fffffffe588<br></code></pre></td></tr></table></figure>\n\n<p>可以看到输出了“<code>tailcall: initial:</code>”信息。</p>\n<h6 id=\"选择函数堆栈帧：“frame-n”\"><a href=\"#选择函数堆栈帧：“frame-n”\" class=\"headerlink\" title=\"选择函数堆栈帧：“frame n”\"></a>选择函数堆栈帧：“<code>frame n</code>”</h6><p>用gdb调试程序时，当程序暂停后，可以用“<code>frame n</code>”命令选择函数堆栈帧，其中<code>n</code>是层数。用gdb调试程序时，当程序暂停后，可以用“<code>frame n</code>”命令选择函数堆栈帧，其中<code>n</code>是层数。</p>\n<p>备注，此处需要加入例子说明</p>\n<p>用gdb调试程序时，当程序暂停后，可以用“<code>frame n</code>”命令选择函数堆栈帧，其中<code>n</code>是层数。</p>\n<h6 id=\"上下切换函数堆栈\"><a href=\"#上下切换函数堆栈\" class=\"headerlink\" title=\"上下切换函数堆栈\"></a>上下切换函数堆栈</h6><p>用gdb调试程序时，当程序暂停后，可以用“<code>up n</code>”或“<code>down n</code>”命令向上或向下选择函数堆栈帧，其中<code>n</code>是层数。</p>\n<p>例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func1</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func2</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，当程序暂停后，可以用“<code>up n</code>”或“<code>down n</code>”命令向上或向下选择函数堆栈帧，其中<code>n</code>是层数。以上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) b <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40053d</span>: file <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">5</span>.<br>(gdb) r<br>Starting program: /home/nanxiao/<span class=\"hljs-keyword\">test</span><br><br>Breakpoint <span class=\"hljs-number\">1</span>, func1 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>               return <span class=\"hljs-number\">2</span> * a<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-keyword\">bt</span><br>#<span class=\"hljs-number\">0</span>  func1 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0x0000000000400560</span> <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0x000000000040059e</span> <span class=\"hljs-keyword\">in</span> main () <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb) frame <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br><span class=\"hljs-number\">18</span>              c = <span class=\"hljs-number\">2</span> * func2(a)<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-meta\">up</span> <span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0x000000000040059e</span> <span class=\"hljs-keyword\">in</span> main () <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br><span class=\"hljs-number\">24</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, func3(<span class=\"hljs-number\">10</span>))<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-meta\">down</span> <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0x0000000000400560</span> <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>              c = <span class=\"hljs-number\">2</span> * func1(a)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序断住后，先执行“<code>frame 2</code>”命令，切换到<code>fun3</code>函数。接着执行“<code>up 1</code>”命令，此时会切换到<code>main</code>函数，也就是会往外层的堆栈帧移动一层。反之，当执行“<code>down 2</code>”命令后，又会向内层堆栈帧移动二层。如果不指定<code>n</code>，则<code>n</code>默认为<code>1</code>.</p>\n<p>还有“<code>up-silently n</code>”和“<code>down-silently n</code>”这两个命令，与“<code>up n</code>”和“<code>down n</code>”命令区别在于，切换堆栈帧后，不会打印信息，仍以上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) <span class=\"hljs-meta\">up</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br><span class=\"hljs-number\">18</span>              c = <span class=\"hljs-number\">2</span> * func2(a)<span class=\"hljs-comment\">;</span><br>(gdb) <span class=\"hljs-keyword\">bt</span><br>#<span class=\"hljs-number\">0</span>  func1 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">5</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0x0000000000400560</span> <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0x0000000000400586</span> <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">18</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0x000000000040059e</span> <span class=\"hljs-keyword\">in</span> main () <span class=\"hljs-meta\">at</span> <span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb) <span class=\"hljs-meta\">up</span>-silently<br>(gdb) i frame<br>Stack level <span class=\"hljs-number\">3</span>, frame <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe5a0</span>:<br> <span class=\"hljs-built_in\">rip</span> = <span class=\"hljs-number\">0x40059e</span> <span class=\"hljs-keyword\">in</span> main (<span class=\"hljs-keyword\">test</span><span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span>)<span class=\"hljs-comment\">; saved rip = 0x7ffff7a35ec5</span><br> caller of frame <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe590</span><br> source language c.<br> Arglist <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe590</span>, args:<br> Locals <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x7fffffffe590</span>, Previous frame<span class=\"hljs-string\">&#x27;s sp is 0x7fffffffe5a0</span><br><span class=\"hljs-string\"> Saved registers:</span><br><span class=\"hljs-string\">  rbp at 0x7fffffffe590, rip at 0x7fffffffe598</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到从<code>func3</code>切换到<code>main</code>函数堆栈帧时，并没有打印出相关信息。</p>\n<h4 id=\"5、断点：b\"><a href=\"#5、断点：b\" class=\"headerlink\" title=\"5、断点：b\"></a>5、断点：b</h4><h6 id=\"在匿名空间设置断点\"><a href=\"#在匿名空间设置断点\" class=\"headerlink\" title=\"在匿名空间设置断点\"></a>在匿名空间设置断点</h6><p>例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">namespace</span> Foo<br>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">  </span>&#123;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">namespace</span><br>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bar</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">  </span>&#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要对namespace Foo中的foo函数设置断点，可以使用如下命令：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">(gdb) b Foo::foo<br></code></pre></td></tr></table></figure>\n\n<p>如果要对匿名空间中的bar函数设置断点，可以使用如下命令：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">(gdb) b (anonymous <span class=\"hljs-keyword\">namespace</span>)::<span class=\"hljs-symbol\">bar</span><br></code></pre></td></tr></table></figure>\n\n<h6 id=\"在程序地址上打断点\"><a href=\"#在程序地址上打断点\" class=\"headerlink\" title=\"在程序地址上打断点\"></a>在程序地址上打断点</h6><p>例子：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">0000000000400522</span> &lt;main&gt;:<br>  <span class=\"hljs-attribute\">400522</span>:       <span class=\"hljs-number\">55</span>                      push   %rbp<br>  <span class=\"hljs-attribute\">400523</span>:       <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">89</span> e5                mov    %rsp,%rbp<br>  <span class=\"hljs-attribute\">400526</span>:       <span class=\"hljs-number\">8</span>b <span class=\"hljs-number\">05</span> <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">1</span>b <span class=\"hljs-number\">00</span> <span class=\"hljs-number\">00</span>       mov    <span class=\"hljs-number\">0</span>x1b00(%rip),%eax        # <span class=\"hljs-number\">40202</span>c &lt;he+<span class=\"hljs-number\">0</span>xc&gt;<br>  <span class=\"hljs-attribute\">40052c</span>:       <span class=\"hljs-number\">85</span> c0                   test   %eax,%eax<br>  <span class=\"hljs-attribute\">40052e</span>:       <span class=\"hljs-number\">75</span> <span class=\"hljs-number\">07</span>                   jne    <span class=\"hljs-number\">400537</span> &lt;main+<span class=\"hljs-number\">0</span>x15&gt;<br>  <span class=\"hljs-attribute\">400530</span>:       b8 <span class=\"hljs-number\">7</span>c <span class=\"hljs-number\">06</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">00</span>          mov    $<span class=\"hljs-number\">0</span>x40067c,%eax<br>  <span class=\"hljs-attribute\">400535</span>:       eb <span class=\"hljs-number\">05</span>                   jmp    <span class=\"hljs-number\">40053</span>c &lt;main+<span class=\"hljs-number\">0</span>x1a&gt;<br></code></pre></td></tr></table></figure>\n\n<p>当调试汇编程序，或者没有调试信息的程序时，经常需要在程序地址上打断点，方法为<code>b *address</code>。例如：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\">(gdb) <span class=\"hljs-keyword\">b</span> *<span class=\"hljs-number\">0x400522</span><br></code></pre></td></tr></table></figure>\n\n<p>该方法，需要结合frame打印函数栈信息的命令结合，先打印栈信息，在选择地址打断点</p>\n<h6 id=\"在程序入口处打断点\"><a href=\"#在程序入口处打断点\" class=\"headerlink\" title=\"在程序入口处打断点\"></a>在程序入口处打断点</h6><p>方法一</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">strip a.out</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">readelf -h a.out</span> <br>ELF Header:<br>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 <br>  Class:                             ELF64<br>  Data:                              2&#x27;s complement, little endian<br>  Version:                           1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI Version:                       0<br>  Type:                              EXEC (Executable file)<br>  Machine:                           Advanced Micro Devices X86-64<br>  Version:                           0x1<br>  Entry point address:               0x400440<br>  Start of program headers:          64 (bytes into file)<br>  Start of section headers:          4496 (bytes into file)<br>  Flags:                             0x0<br>  Size of this header:               64 (bytes)<br>  Size of program headers:           56 (bytes)<br>  Number of program headers:         9<br>  Size of section headers:           64 (bytes)<br>  Number of section headers:         29<br>  Section header string table index: 28<br></code></pre></td></tr></table></figure>\n\n<p>方法二</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">gdb a.out</span> <br><span class=\"hljs-meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; info files</span><br>Symbols from &quot;/home/me/a.out&quot;.<br>Local exec file:<br>\t`/home/me/a.out&#x27;, file type elf64-x86-64.<br>\tEntry point: 0x400440<br>\t0x0000000000400238 - 0x0000000000400254 is .interp<br>\t0x0000000000400254 - 0x0000000000400274 is .note.ABI-tag<br>\t0x0000000000400274 - 0x0000000000400298 is .note.gnu.build-id<br>\t0x0000000000400298 - 0x00000000004002b4 is .gnu.hash<br>\t0x00000000004002b8 - 0x0000000000400318 is .dynsym<br>\t0x0000000000400318 - 0x0000000000400355 is .dynstr<br>\t0x0000000000400356 - 0x000000000040035e is .gnu.version<br>\t0x0000000000400360 - 0x0000000000400380 is .gnu.version_r<br>\t0x0000000000400380 - 0x0000000000400398 is .rela.dyn<br>\t0x0000000000400398 - 0x00000000004003e0 is .rela.plt<br>\t0x00000000004003e0 - 0x00000000004003fa is .init<br>\t0x0000000000400400 - 0x0000000000400440 is .plt<br>\t0x0000000000400440 - 0x00000000004005c2 is .text<br>\t0x00000000004005c4 - 0x00000000004005cd is .fini<br>\t0x00000000004005d0 - 0x00000000004005e0 is .rodata<br>\t0x00000000004005e0 - 0x0000000000400614 is .eh_frame_hdr<br>\t0x0000000000400618 - 0x000000000040070c is .eh_frame<br>\t0x0000000000600e10 - 0x0000000000600e18 is .init_array<br>\t0x0000000000600e18 - 0x0000000000600e20 is .fini_array<br>\t0x0000000000600e20 - 0x0000000000600e28 is .jcr<br>\t0x0000000000600e28 - 0x0000000000600ff8 is .dynamic<br>\t0x0000000000600ff8 - 0x0000000000601000 is .got<br>\t0x0000000000601000 - 0x0000000000601030 is .got.plt<br>\t0x0000000000601030 - 0x0000000000601040 is .data<br>\t0x0000000000601040 - 0x0000000000601048 is .bss<br></code></pre></td></tr></table></figure>\n\n<p>当调试没有调试信息的程序时，直接运行<code>start</code>命令是没有效果的：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">(gdb) start<br><span class=\"hljs-keyword\">Function</span> <span class=\"hljs-string\">&quot;main&quot;</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">defined</span>.<br></code></pre></td></tr></table></figure>\n\n<p>如果不知道main在何处，那么可以在程序入口处打断点。先通过<code>readelf</code>或者进入gdb，执行<code>info files</code>获得入口地址，然后：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) b *0x400440<br>(gdb) r<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"在文件行号打断点\"><a href=\"#在文件行号打断点\" class=\"headerlink\" title=\"在文件行号打断点\"></a>在文件行号打断点</h6><p>这个比较简单，如果要在当前文件中的某一行打断点，直接<code>b linenum</code>即可，例如：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\">(gdb) <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">7</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以显式指定文件，<code>b file:linenum</code>例如：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) b <span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6</span><br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x40053b</span>: <span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6.</span> (<span class=\"hljs-number\">2</span> locations)<br>(gdb) i breakpoints <br>Num     Type           Disp Enb Address            What<br><span class=\"hljs-number\">1</span>       <span class=\"hljs-built_in\">breakpoint</span>     keep y   &lt;MULTIPLE&gt;         <br><span class=\"hljs-number\">1.1</span>                         y     <span class=\"hljs-number\">0x000000000040053b</span> <span class=\"hljs-keyword\">in</span> print_a <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">a</span>/<span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">1.2</span>                         y     <span class=\"hljs-number\">0x000000000040054b</span> <span class=\"hljs-keyword\">in</span> print_b <span class=\"hljs-keyword\">at</span> b/<span class=\"hljs-built_in\">file</span>.c:<span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看出，gdb会对所有匹配的文件设置断点。你可以通过指定（部分）路径，来区分相同的文件名：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">(gdb) <span class=\"hljs-selector-tag\">b</span> <span class=\"hljs-selector-tag\">a</span>/file<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<p>注意：通过行号进行设置断点的一个弊端是，如果你更改了源程序，那么之前设置的断点就可能不是你想要的了。</p>\n<h6 id=\"保存已经设置的断点\"><a href=\"#保存已经设置的断点\" class=\"headerlink\" title=\"保存已经设置的断点\"></a>保存已经设置的断点</h6><p>在gdb中，可以使用如下命令将设置的断点保存下来：</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">(gdb) <span class=\"hljs-keyword\">save</span> breakpoints <span class=\"hljs-keyword\">file</span>-<span class=\"hljs-keyword\">name</span>-to-<span class=\"hljs-keyword\">save</span><br></code></pre></td></tr></table></figure>\n\n<p>下此调试时，可以使用如下命令批量设置保存的断点：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">source</span> <span class=\"hljs-keyword\">file</span>-name-to-save<br>(gdb) info breakpoints <br>Num     Type           Disp Enb Address            What<br><span class=\"hljs-number\">1</span>       breakpoint     keep y   <span class=\"hljs-number\">0</span>x00000000005a7af0 in gdb_main at <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/project/</span>binutils-trunk<span class=\"hljs-regexp\">/gdb/m</span>ain.c:<span class=\"hljs-number\">1061</span><br><span class=\"hljs-number\">2</span>       breakpoint     keep y   <span class=\"hljs-number\">0</span>x00000000005a6bd0 in captured_main at <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/project/</span>binutils-trunk<span class=\"hljs-regexp\">/gdb/m</span>ain.c:<span class=\"hljs-number\">310</span><br><span class=\"hljs-number\">3</span>       breakpoint     keep y   <span class=\"hljs-number\">0</span>x00000000005a68b<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"设置临时断点\"><a href=\"#设置临时断点\" class=\"headerlink\" title=\"设置临时断点\"></a>设置临时断点</h6><p>在使用gdb时，如果想让断点只生效一次，可以使用“tbreak”命令（缩写为：tb）。以上面程序为例：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\">(gdb) tb a.c:15<br>Temporary breakpoint 1 at 0x400500: <span class=\"hljs-keyword\">file</span> a.c, <span class=\"hljs-keyword\">line</span> 15.<br>(gdb) i b<br>Num     <span class=\"hljs-keyword\">Type</span>           <span class=\"hljs-keyword\">Disp</span> Enb Address            What<br>1       breakpoint     del  y   0x0000000000400500 <span class=\"hljs-keyword\">in</span> main at a.c:15<br>(gdb) r<br>Starting <span class=\"hljs-keyword\">program</span>: /data2/home/nanxiao/a<br><br>Temporary breakpoint 1, main () at a.c:15<br>15              printf(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, <span class=\"hljs-keyword\">st</span>.a, <span class=\"hljs-keyword\">st</span>.b, <span class=\"hljs-keyword\">st</span>.c, <span class=\"hljs-keyword\">st</span>.<span class=\"hljs-keyword\">d</span>);<br>(gdb) i b<br><span class=\"hljs-keyword\">No</span> breakpoints or watchpoints.<br></code></pre></td></tr></table></figure>\n\n<p>首先在文件的第15行设置临时断点，当程序断住后，用“i b”（”info breakpoints”缩写）命令查看断点，发现断点没有了。也就是断点命中一次后，就被删掉了。</p>\n<h6 id=\"设置条件断点：\"><a href=\"#设置条件断点：\" class=\"headerlink\" title=\"设置条件断点：\"></a>设置条件断点：</h6><p>例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br>\t<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">200</span>; i++)<br>\t\t&#123;<br>\t\t\tsum += i;<br>\t\t&#125;<br>\t<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, sum);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以设置条件断点，也就是只有在条件满足时，断点才会被触发，命令是“<code>break … if cond</code>”。以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x4004cc: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                       <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>(gdb) b <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">if</span> i==<span class=\"hljs-number\">101</span><br>Breakpoint <span class=\"hljs-number\">2</span> at <span class=\"hljs-number\">0</span>x4004e3: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">10</span>.<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Breakpoint <span class=\"hljs-number\">2</span>, main () at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                                      sum += i;<br>(gdb) p sum<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">5050</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到设定断点只在<code>i</code>的值为<code>101</code>时触发，此时打印<code>sum</code>的值为<code>5050</code>。</p>\n<h6 id=\"忽略断点：\"><a href=\"#忽略断点：\" class=\"headerlink\" title=\"忽略断点：\"></a>忽略断点：</h6><p>例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br>\t<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;<br><br>\t\t<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">200</span>; i++)<br>\t\t&#123;<br>\t\t\tsum += i;<br>\t\t&#125;<br>\t<br>\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, sum);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在设置断点以后，可以忽略断点，命令是“<code>ignore bnum count</code>”：意思是接下来<code>count</code>次编号为<code>bnum</code>的断点触发都不会让程序中断，只有第<code>count + 1</code>次断点触发才会让程序中断。以上面程序为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) b 10<br>Breakpoint 1 at 0x4004e3: file a.c, line 10.<br>(gdb) ignore 1 5<br>Will ignore next 5 crossings of breakpoint 1.<br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br><br>Breakpoint 1, main () at a.c:10<br>10                                      sum += i;<br>(gdb) p i<br><span class=\"hljs-meta prompt_\">$</span><span class=\"language-bash\">1 = 6</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到设定忽略断点前<code>5</code>次触发后，第一次断点断住时，打印<code>i</code>的值是<code>6</code>。如果想让断点下次就生效，可以将<code>count</code>置为<code>0</code>：“<code>ignore 1 0</code>”。</p>\n<h4 id=\"6、观察点\"><a href=\"#6、观察点\" class=\"headerlink\" title=\"6、观察点\"></a>6、观察点</h4><h5 id=\"设置观察点\"><a href=\"#设置观察点\" class=\"headerlink\" title=\"设置观察点\"></a>设置观察点</h5><p>例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">thread1_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span><br>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                a++;<br>                sleep(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span>* argv[])</span><br>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1;<br><br>        pthread_create(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread1_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>\t\t<br>        sleep(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>watch</code>”命令设置观察点，也就是当一个变量值发生变化时，程序会停下来。以上面程序为例:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4005a8</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">19.</span><br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">19</span><br><span class=\"hljs-number\">19</span>              pthread_create(&amp;t1, <span class=\"hljs-keyword\">NULL</span>, thread1_func, &quot;Thread 1&quot;);<br>(gdb) watch a<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">8813</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">8813</span>)]<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">2</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>watch a</code>”命令以后，当<code>a</code>的值变化：由<code>0</code>变成<code>1</code>，由<code>1</code>变成<code>2</code>，程序都会停下来。<br>此外也可以使用“<code>watch *(data type*)address</code>”这样的命令，仍以上面程序为例:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) p &amp;a<br><span class=\"hljs-number\">$1</span> = (<span class=\"hljs-keyword\">int</span> *) <span class=\"hljs-number\">0x6009c8</span> &lt;a&gt;<br>(gdb) watch *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br>Hardware watchpoint <span class=\"hljs-number\">2</span>: *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class=\"hljs-string\">&quot;/lib64/libthread_db.so.1&quot;</span>.<br>[New Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">15431</span>)]<br>[Switching to Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">15431</span>)]<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br><br>Old value = <span class=\"hljs-number\">0</span><br>New value = <span class=\"hljs-number\">1</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>)<span class=\"hljs-comment\">;</span><br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: *(<span class=\"hljs-keyword\">int</span>*)<span class=\"hljs-number\">0x6009c8</span><br><br>Old value = <span class=\"hljs-number\">1</span><br>New value = <span class=\"hljs-number\">2</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x4006d8</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>先得到<code>a</code>的地址：<code>0x6009c8</code>，接着用“<code>watch *(int*)0x6009c8</code>”设置观察点，可以看到同“<code>watch a</code>”命令效果一样。<br>观察点可以通过软件或硬件的方式实现，取决于具体的系统。但是软件实现的观察点会导致程序运行很慢，使用时需注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<p>如果系统支持硬件观测的话，当设置观测点是会打印如下信息：<br>Hardware watchpoint num: expr</p>\n<p>如果不想用硬件观测点的话可如下设置：<br>set can-use-hw-watchpoints</p>\n<h5 id=\"设置观察点之对特定线程生效\"><a href=\"#设置观察点之对特定线程生效\" class=\"headerlink\" title=\"设置观察点之对特定线程生效\"></a>设置观察点之对特定线程生效</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;pthread.h&gt;</span><br><br>int a = 0;<br><br>void *thread1_func(void *p_arg)<br>&#123;<br>        while (1)<br>        &#123;<br>                a++;<br>                sleep(10);<br>        &#125;<br>&#125;<br><br>void *thread2_func(void *p_arg)<br>&#123;<br>        while (1)<br>        &#123;<br>                a++;<br>                sleep(10);<br>        &#125;<br>&#125;<br><br>int main(void)<br>&#123;<br>        pthread_t t1, t2;<br><br>        pthread_create(&amp;t1, NULL, thread1_func, &quot;Thread 1&quot;);<br>\t\tpthread_create(&amp;t2, NULL, thread2_func, &quot;Thread 2&quot;);<br><br>        sleep(1000);<br>        return;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>watch expr thread threadnum</code>”命令设置观察点只针对特定线程生效，也就是只有编号为<code>threadnum</code>的线程改变了变量的值，程序才会停下来，其它编号线程改变变量的值不会让程序停住。以上面程序为例:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4005d4</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">28.</span><br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">28</span><br><span class=\"hljs-number\">28</span>              pthread_create(&amp;t1, <span class=\"hljs-keyword\">NULL</span>, thread1_func, &quot;Thread 1&quot;);<br>(gdb) n<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">25443</span>)]<br><span class=\"hljs-number\">29</span>              pthread_create(&amp;t2, <span class=\"hljs-keyword\">NULL</span>, thread2_func, &quot;Thread 2&quot;);<br>(gdb)<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">25444</span>)]<br><span class=\"hljs-number\">31</span>              sleep(<span class=\"hljs-number\">1000</span>);<br>(gdb) i threads<br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">3</span>    Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">25444</span>) <span class=\"hljs-number\">0x00007ffff7915911</span> <span class=\"hljs-keyword\">in</span> clone () <span class=\"hljs-keyword\">from</span> /lib64/libc.so<span class=\"hljs-number\">.6</span><br>  <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">25443</span>) <span class=\"hljs-number\">0x00007ffff78d9bcd</span> <span class=\"hljs-keyword\">in</span> nanosleep () <span class=\"hljs-keyword\">from</span> /lib64/libc.so<span class=\"hljs-number\">.6</span><br>* <span class=\"hljs-number\">1</span>    Thread <span class=\"hljs-number\">0x7ffff7fe9700</span> (LWP <span class=\"hljs-number\">25413</span>) main () at a.c:<span class=\"hljs-number\">31</span><br>(gdb) wa a thread <span class=\"hljs-number\">2</span><br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br>(gdb) c<br>Continuing.<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">25443</span>)]<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">3</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x400718</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">3</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x400718</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>Hardware watchpoint <span class=\"hljs-number\">2</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">7</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x400718</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>wa a thread 2</code>”命令（<code>wa</code>是<code>watch</code>命令的缩写）以后，只有<code>thread1_func</code>改变<code>a</code>的值才会让程序停下来。<br>需要注意的是这种针对特定线程设置观察点方式只对硬件观察点才生效，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"设置读观察点\"><a href=\"#设置读观察点\" class=\"headerlink\" title=\"设置读观察点\"></a>设置读观察点</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;pthread.h&gt;</span><br><br>int a = 0;<br><br>void *thread1_func(void *p_arg)<br>&#123;<br>        while (1)<br>        &#123;<br>                printf(&quot;%d\\n&quot;, a);<br>                sleep(10);<br>        &#125;<br>&#125;<br><br>int main(void)<br>&#123;<br>        pthread_t t1;<br><br>        pthread_create(&amp;t1, NULL, thread1_func, &quot;Thread 1&quot;);<br><br>        sleep(1000);<br>        return;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>rwatch</code>”命令设置读观察点，也就是当发生读取变量行为时，程序就会暂停住。以上面程序为例:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x4005f3</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">19</span>.<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class=\"hljs-string\">&quot;/lib64/libthread_db.so.1&quot;</span>.<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">19</span><br><span class=\"hljs-number\">19</span>              pthread_create(&amp;t1, NULL, thread1_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>)<span class=\"hljs-comment\">;</span><br>(gdb) rw a<br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br>(gdb) c<br>Continuing.<br>[New Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">5540</span>)]<br>[Switching to Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">5540</span>)]<br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br><br>Value = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40071c</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br>(gdb) c<br>Continuing.<br><span class=\"hljs-number\">0</span><br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br><br>Value = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40071c</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br>(gdb) c<br>Continuing.<br><span class=\"hljs-number\">0</span><br>Hardware read watchpoint <span class=\"hljs-number\">2</span>: a<br><br>Value = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40071c</span>) <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>rw a</code>”命令（<code>rw</code>是<code>rwatch</code>命令的缩写）以后，每次访问<code>a</code>的值都会让程序停下来。<br>需要注意的是<code>rwatch</code>命令只对硬件观察点才生效，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"设置写观察点\"><a href=\"#设置写观察点\" class=\"headerlink\" title=\"设置写观察点\"></a>设置写观察点</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread1_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                a++;<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread2_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);;<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread1_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread2_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb可以使用“<code>awatch</code>”命令设置读写观察点，也就是当发生读取变量或改变变量值的行为时，程序就会暂停住。以上面程序为例:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) aw a<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br>(gdb) r<br>Starting program: /data2/home/nanxiao/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">16938</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">16938</span>)]<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-keyword\">Value</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40076c</span>) at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      a++;<br>(gdb) c<br>Continuing.<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-built_in\">Old</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">New</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">1</span><br>thread1_func (p_arg=<span class=\"hljs-number\">0x40076c</span>) at a.c:<span class=\"hljs-number\">11</span><br><span class=\"hljs-number\">11</span>                      sleep(<span class=\"hljs-number\">10</span>);<br>(gdb) c<br>Continuing.<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">16939</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff6e2b700</span> (LWP <span class=\"hljs-number\">16939</span>)]<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-keyword\">Value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0x00000000004005f2</span> <span class=\"hljs-keyword\">in</span> thread2_func (p_arg=<span class=\"hljs-number\">0x400775</span>) at a.c:<span class=\"hljs-number\">19</span><br><span class=\"hljs-number\">19</span>                      printf(&quot;%d\\n&quot;, a);;<br>(gdb) c<br>Continuing.<br><span class=\"hljs-number\">1</span><br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">0x7ffff782c700</span> (LWP <span class=\"hljs-number\">16938</span>)]<br>Hardware <span class=\"hljs-keyword\">access</span> (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>) watchpoint <span class=\"hljs-number\">1</span>: a<br><br><span class=\"hljs-keyword\">Value</span> = <span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0x00000000004005c6</span> <span class=\"hljs-keyword\">in</span> thread1_func (p_arg=<span class=\"hljs-number\">0x40076c</span>) at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>                      a++;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用“<code>aw a</code>”命令（<code>aw</code>是<code>awatch</code>命令的缩写）以后，每次读取或改变<code>a</code>的值都会让程序停下来。<br>需要注意的是<code>awatch</code>命令只对硬件观察点才生效，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Watchpoints.html\">gdb手册</a>.</p>\n<h4 id=\"7、Catchpoint\"><a href=\"#7、Catchpoint\" class=\"headerlink\" title=\"7、Catchpoint\"></a>7、Catchpoint</h4><h5 id=\"让Catchpoint只触发一次\"><a href=\"#让Catchpoint只触发一次\" class=\"headerlink\" title=\"让Catchpoint只触发一次\"></a>让Catchpoint只触发一次</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdio.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;stdlib.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;sys/types.h&gt;</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;unistd.h&gt;</span><br><br>int main(void) &#123;<br>    pid_t pid;<br>    int i = 0;<br><br>    for (i = 0; i &lt; 2; i++)<br>    &#123;<br>\t    pid = fork();<br>\t    if (pid &lt; 0)<br>\t    &#123;<br>\t        exit(1);<br>\t    &#125;<br>\t    else if (pid == 0)<br>\t    &#123;<br>\t        exit(0);<br>\t    &#125;<br>    &#125;<br>    printf(&quot;hello world\\n&quot;);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>tcatch</code>”命令设置<code>catchpoint</code>只触发一次，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) tcatch fork<br>Catchpoint <span class=\"hljs-number\">1</span> (fork)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Temporary catchpoint <span class=\"hljs-number\">1</span> (forked process <span class=\"hljs-number\">27377</span>), <span class=\"hljs-number\">0</span>x00000034e42acdbd in fork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) c<br>Continuing.<br>hello world<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">27373</span>) exited normally]<br>(gdb) q<br></code></pre></td></tr></table></figure>\n\n<p>可以看到当程序只在第一次调用<code>fork</code>时暂停。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"为fork调用设置catchpoint\"><a href=\"#为fork调用设置catchpoint\" class=\"headerlink\" title=\"为fork调用设置catchpoint\"></a>为fork调用设置catchpoint</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>    <span class=\"hljs-type\">pid_t</span> pid;<br><br>    pid = fork();<br>    <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>catch fork</code>”命令为<code>fork</code>调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> fork<br>Catchpoint <span class=\"hljs-number\">1</span> (fork)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a <br><br>Catchpoint <span class=\"hljs-number\">1</span> (forked process <span class=\"hljs-number\">33499</span>), <span class=\"hljs-number\">0</span>x00000034e42acdbd in fork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>x00000034e42acdbd in fork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x0000000000400561 in main () at a.c:<span class=\"hljs-number\">9</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>fork</code>调用发生后，gdb会暂停程序的运行。<br>注意：目前只有HP-UX和GNU&#x2F;Linux支持这个功能。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"为vfork调用设置catchpoint\"><a href=\"#为vfork调用设置catchpoint\" class=\"headerlink\" title=\"为vfork调用设置catchpoint\"></a>为vfork调用设置catchpoint</h5><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">#include &lt;stdio.h&gt;</span><br><span class=\"hljs-comment\">#include &lt;stdlib.h&gt;</span><br><span class=\"hljs-comment\">#include &lt;sys/types.h&gt;</span><br><span class=\"hljs-comment\">#include &lt;unistd.h&gt;</span><br><br>int main(void) &#123;<br>    pid_t pid;<br><br>    pid = vfork();<br>    <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    printf(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>    return <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>catch vfork</code>”命令为<code>vfork</code>调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> vfork<br>Catchpoint <span class=\"hljs-number\">1</span> (vfork)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (vforked process <span class=\"hljs-number\">27312</span>), <span class=\"hljs-number\">0</span>x00000034e42acfc4 in vfork ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>x00000034e42acfc4 in vfork () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x0000000000400561 in main () at a.c:<span class=\"hljs-number\">9</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>vfork</code>调用发生后，gdb会暂停程序的运行。<br>注意：目前只有HP-UX和GNU&#x2F;Linux支持这个功能。</p>\n<h5 id=\"为exec调用设置catchpoint\"><a href=\"#为exec调用设置catchpoint\" class=\"headerlink\" title=\"为exec调用设置catchpoint\"></a>为exec调用设置catchpoint</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">include &lt;unistd.h&gt;</span><br><br>int main(void) &#123;<br>    execl(&quot;/bin/ls&quot;, &quot;ls&quot;, NULL);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以用“<code>catch exec</code>”命令为<code>exec</code>系列系统调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">(gdb) catch <span class=\"hljs-built_in\">exec</span><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-built_in\">exec</span>)<br>(gdb) r<br>Starting program: /home/nan/a<br>process <span class=\"hljs-number\">32927</span> is executing <span class=\"hljs-keyword\">new</span> program: /bin/ls<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-built_in\">exec</span>&#x27;d /bin/ls), <span class=\"hljs-number\">0x00000034e3a00b00</span> in <span class=\"hljs-built_in\">_start</span> () from /lib64/ld-linux-x86<span class=\"hljs-number\">-64.</span>so<span class=\"hljs-number\">.2</span><br>(gdb) bt<br><span class=\"hljs-meta\">#0  0x00000034e3a00b00 in _start () from /lib64/ld-linux-x86-64.so.2</span><br><span class=\"hljs-meta\">#1  0x0000000000000001 in ?? ()</span><br><span class=\"hljs-meta\">#2  0x00007fffffffe73d in ?? ()</span><br><span class=\"hljs-meta\">#3  0x0000000000000000 in ?? ()</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>execl</code>调用发生后，gdb会暂停程序的运行。<br>注意：目前只有HP-UX和GNU&#x2F;Linux支持这个功能。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"为系统调用调用设置catchpoint\"><a href=\"#为系统调用调用设置catchpoint\" class=\"headerlink\" title=\"为系统调用调用设置catchpoint\"></a>为系统调用调用设置catchpoint</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">char</span> p1[] = <span class=\"hljs-string\">&quot;Sam&quot;</span>;<br>    <span class=\"hljs-type\">char</span> *p2 = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;p1 is %s, p2 is %s\\n&quot;</span>, p1, p2);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试程序时，可以使用<code>catch syscall [name | number]</code>为关注的系统调用设置<code>catchpoint</code>，以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall mmap<br>Catchpoint <span class=\"hljs-number\">1</span> (syscall <span class=\"hljs-string\">&#x27;mmap&#x27;</span> [<span class=\"hljs-number\">9</span>])<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (returned <span class=\"hljs-keyword\">from</span> syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到当<code>mmap</code>调用发生后，gdb会暂停程序的运行。<br>也可以使用系统调用的编号设置<code>catchpoint</code>，仍以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall <span class=\"hljs-number\">9</span><br>Catchpoint <span class=\"hljs-number\">1</span> (syscall <span class=\"hljs-string\">&#x27;mmap&#x27;</span> [<span class=\"hljs-number\">9</span>])<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (returned <span class=\"hljs-keyword\">from</span> syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到和使用<code>catch syscall mmap</code>效果是一样的。（系统调用和编号的映射参考具体的<code>xml</code>文件，以我的系统为例，就是在<code>/usr/local/share/gdb/syscalls</code>文件夹下的<code>amd64-linux.xml</code>。）</p>\n<p>如果不指定具体的系统调用，则会为所有的系统调用设置<code>catchpoint</code>，仍以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall<br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">any</span> syscall)<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall brk), <span class=\"hljs-number\">0</span>x00000034e3a1618a in brk ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (returned <span class=\"hljs-keyword\">from</span> syscall brk), <span class=\"hljs-number\">0</span>x00000034e3a1618a in brk ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br>(gdb)<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">1</span> (<span class=\"hljs-keyword\">call</span> to syscall mmap), <span class=\"hljs-number\">0</span>x00000034e3a16f7a in mmap64 ()<br>   <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>ld-linux-x86-<span class=\"hljs-number\">64</span>.so.<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Set-Catchpoints.html\">gdb手册</a>.</p>\n<h5 id=\"通过为ptrace调用设置catchpoint破解anti-debugging的程序\"><a href=\"#通过为ptrace调用设置catchpoint破解anti-debugging的程序\" class=\"headerlink\" title=\"通过为ptrace调用设置catchpoint破解anti-debugging的程序\"></a>通过为ptrace调用设置catchpoint破解anti-debugging的程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/ptrace.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br> <br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>                                                                      <br>&#123;<br>        <span class=\"hljs-keyword\">if</span> (ptrace(PTRACE_TRACEME, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Gdb is debugging me, exit.\\n&quot;</span>);<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No debugger, continuing\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>有些程序不想被gdb调试，它们就会在程序中调用“<code>ptrace</code>”函数，一旦返回失败，就证明程序正在被gdb等类似的程序追踪，所以就直接退出。以上面程序为例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x400508: file a.c, line <span class=\"hljs-number\">6</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>                       <span class=\"hljs-keyword\">if</span> (ptrace(PTRACE_TRACEME, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>(gdb) n<br><span class=\"hljs-number\">7</span>                               printf(<span class=\"hljs-string\">&quot;Gdb is debugging me, exit.\\n&quot;</span>);<br>(gdb)<br>Gdb is debugging me, <span class=\"hljs-keyword\">exit</span>.<br><span class=\"hljs-number\">8</span>                               return <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n\n<p>破解这类程序的办法就是为<code>ptrace</code>调用设置<code>catchpoint</code>，通过修改<code>ptrace</code>的返回值，达到目的。仍以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) <span class=\"hljs-keyword\">catch</span> syscall ptrace<br>Catchpoint <span class=\"hljs-number\">2</span> (syscall <span class=\"hljs-string\">&#x27;ptrace&#x27;</span> [<span class=\"hljs-number\">101</span>])<br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Catchpoint <span class=\"hljs-number\">2</span> (<span class=\"hljs-keyword\">call</span> to syscall ptrace), <span class=\"hljs-number\">0</span>x00007ffff7b2be9c in ptrace () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) c<br>Continuing.<br><br>Catchpoint <span class=\"hljs-number\">2</span> (returned <span class=\"hljs-keyword\">from</span> syscall ptrace), <span class=\"hljs-number\">0</span>x00007ffff7b2be9c in ptrace () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>(gdb) set $rax = <span class=\"hljs-number\">0</span><br>(gdb) c<br>Continuing.<br>No debugger, continuing<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">11491</span>) exited normally]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，通过修改<code>rax</code>寄存器的值，达到修改返回值的目的，从而让gdb可以继续调试程序（打印“<code>No debugger, continuing</code>”）。<br>详细过程，可以参见这篇文章<a href=\"http://blog.linux.org.tw/~jserv/archives/2011_08.html\">避開 PTRACE_TRACME 反追蹤技巧</a>.</p>\n<h4 id=\"8、打印\"><a href=\"#8、打印\" class=\"headerlink\" title=\"8、打印\"></a>8、打印</h4><h5 id=\"打印ASCII和宽字符字符串\"><a href=\"#打印ASCII和宽字符字符串\" class=\"headerlink\" title=\"打印ASCII和宽字符字符串\"></a>打印ASCII和宽字符字符串</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;wchar.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">char</span> str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>        <span class=\"hljs-type\">wchar_t</span> str2[] = <span class=\"hljs-string\">L&quot;abcd&quot;</span>;<br>        <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以使用“<code>x/s</code>”命令打印ASCII字符串。以上面程序为例：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">Temporary breakpoint <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">main</span> () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               <span class=\"hljs-type\">char</span> str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>(gdb) n<br><span class=\"hljs-number\">7</span>               <span class=\"hljs-type\">wchar_t</span> str2[] = <span class=\"hljs-string\">L&quot;abcd&quot;</span>;<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>(gdb) x/s str1<br><span class=\"hljs-number\">0x804779f</span>:      <span class=\"hljs-string\">&quot;abcd&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印出了<code>str1</code>字符串的值。</p>\n<p>打印宽字符字符串时，要根据宽字符的长度决定如何打印。仍以上面程序为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               char str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>(gdb) n<br><span class=\"hljs-number\">7</span>               wchar_t str2[] = L<span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>(gdb) p sizeof(wchar_t)<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">4</span><br>(gdb) x/ws str2<br><span class=\"hljs-number\">0x8047788</span>:      <span class=\"hljs-string\">U&quot;abcd&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>由于当前平台宽字符的长度为4个字节，则用“<code>x/ws</code>”命令。如果是2个字节，则用“<code>x/hs</code>”命令。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Memory.html\">gdb手册</a>.</p>\n<h5 id=\"打印STL容器中的内容\"><a href=\"#打印STL容器中的内容\" class=\"headerlink\" title=\"打印STL容器中的内容\"></a>打印STL容器中的内容</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><br>using namespace <span class=\"hljs-built_in\">std</span>;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title function_\">vec</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>)</span>; <span class=\"hljs-comment\">// 10 zero-initialized elements</span><br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; vec.size(); i++)<br>    vec[i] = i;<br><br>  <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&quot;vec contains:&quot;</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; vec.size(); i++)<br>    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span> &lt;&lt; vec[i];<br>  <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要打印C++ STL容器的内容，缺省的显示结果可读性很差：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">(gdb) p vec<br><span class=\"hljs-variable\">$1</span> = &#123;&lt;std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;&gt; = &#123;<br>    _M_impl = &#123;&lt;std::allocator&lt;int&gt;&gt; = &#123;&lt;<span class=\"hljs-symbol\">__gnu_cxx:</span><span class=\"hljs-symbol\">:new_allocator&lt;int&gt;&gt;</span> = &#123;&lt;No data fields&gt;&#125;, &lt;No data fields&gt;&#125;, _M_start = <span class=\"hljs-number\">0x404010</span>, _M_finish = <span class=\"hljs-number\">0x404038</span>, <br>          _M_end_of_storage = <span class=\"hljs-number\">0x404038</span>&#125;&#125;, &lt;No data fields&gt;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb 7.0之后，可以使用gcc提供的python脚本，来改善显示结果：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">(gdb) p vec<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">vector</span> of <span class=\"hljs-built_in\">length</span> <span class=\"hljs-number\">10</span>, capacity <span class=\"hljs-number\">10</span> = &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>某些发行版(Fedora 11+)，不需要额外的设置工作。可在gdb命令行下验证（若没有显示，可按下文的方法进行设置）。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">info</span> pretty-printer<br></code></pre></td></tr></table></figure>\n\n<p>方法如下:</p>\n<ol>\n<li><p>获得python脚本，建议使用gcc默认安装的</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">sudo <span class=\"hljs-built_in\">find</span> / -name <span class=\"hljs-string\">&quot;*libstdcxx*&quot;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>若本机查找不到python脚本，建议下载gcc对应版本源码包，相对目录如下</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">gcc</span>-<span class=\"hljs-number\">4</span>.<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">1</span>/libstdc++-v3/python<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>也可直接下载最新版本</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">svn co svn:<span class=\"hljs-regexp\">//g</span>cc.gnu.org<span class=\"hljs-regexp\">/svn/g</span>cc<span class=\"hljs-regexp\">/trunk/</span>libstdc++-v3/python<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>将如下代码添加到.gdbinit文件中（假设python脚本位于 &#x2F;home&#x2F;maude&#x2F;gdb_printers&#x2F; 下）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">python<br><span class=\"hljs-keyword\">import</span> sys<br>sys.path.<span class=\"hljs-keyword\">insert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;/home/maude/gdb_printers/python&#x27;</span>)<br><span class=\"hljs-keyword\">from</span> libstdcxx.v6.printers <span class=\"hljs-keyword\">import</span> register_libstdcxx_printers<br>register_libstdcxx_printers (<span class=\"hljs-keyword\">None</span>)<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<p>（源自<a href=\"https://sourceware.org/gdb/wiki/STLSupport%EF%BC%89\">https://sourceware.org/gdb/wiki/STLSupport）</a></p>\n<p><code>p vec</code>的输出无法阅读，但能给我们提示，从而得到无需脚本支持的技巧：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">(gdb) <span class=\"hljs-selector-tag\">p</span> *(vec._M_impl._M_start)<span class=\"hljs-keyword\">@vec</span>.size()<br>$<span class=\"hljs-number\">2</span> = &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>将 <a href=\"http://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt\">dbinit_stl_views</a> 下载下来,，执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat dbinit_stl_views-1.03.txt &gt;&gt; ~/.gdbinit<br></code></pre></td></tr></table></figure>\n\n<p>即可<br>一些常用的容器及其对应的命令关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">std::vector&lt;T&gt;  pvector stl_variable <br>std::list&lt;T&gt;  plist stl_variable T <br>std::map&lt;T,T&gt;  pmap stl_variable <br>std::multimap&lt;T,T&gt;  pmap stl_variable <br>std::set&lt;T&gt;  pset stl_variable T <br>std::multiset&lt;T&gt;  pset stl_variable <br>std::deque&lt;T&gt;  pdequeue stl_variable <br>std::stack&lt;T&gt;  pstack stl_variable <br>std::queue&lt;T&gt;  pqueue stl_variable <br>std::priority_queue&lt;T&gt;  ppqueue stl_variable <br>std::bitset&lt;n&gt;&lt;td&gt;  pbitset stl_variable <br>std::string  pstring stl_variable <br>std::widestring  pwstring stl_variable  <br></code></pre></td></tr></table></figure>\n\n<h5 id=\"打印大数组中的内容\"><a href=\"#打印大数组中的内容\" class=\"headerlink\" title=\"打印大数组中的内容\"></a>打印大数组中的内容</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">201</span>];<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">201</span>; i++)<br>    <span class=\"hljs-built_in\">array</span>[i] = i;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要打印大数组的内容，缺省最多会显示200个元素：</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">(gdb) p<span class=\"hljs-built_in\"> array</span><br><span class=\"hljs-built_in\"></span>$1 = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, <br>  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, <br>  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, <br>  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, <br>  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199...&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以使用如下命令，设置这个最大限制数：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">print</span> elements number-of-elements<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用如下命令，设置为没有限制：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">print</span> elements 0<br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">(gdb) set print elements unlimited<br>(gdb) p<span class=\"hljs-built_in\"> array</span><br><span class=\"hljs-built_in\"></span>$2 = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, <br>  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, <br>  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, <br>  133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, <br>  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/download/onlinedocs/gdb/Print-Settings.html#Print-Settings\">gdb手册</a></p>\n<h5 id=\"打印数组中任意连续元素值\"><a href=\"#打印数组中任意连续元素值\" class=\"headerlink\" title=\"打印数组中任意连续元素值\"></a>打印数组中任意连续元素值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">201</span>];<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">201</span>; i++)<br>    <span class=\"hljs-built_in\">array</span>[i] = i;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果要打印数组中任意连续元素的值，可以使用“<code>p array[index]@num</code>”命令（<code>p</code>是<code>print</code>命令的缩写）。其中<code>index</code>是数组索引（从0开始计数），<code>num</code>是连续多少个元素。以上面代码为例：</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">(gdb) p<span class=\"hljs-built_in\"> array</span><br><span class=\"hljs-built_in\"></span>$8 = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,<br>  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,<br>  63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,<br>  94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,<br>  120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,<br>  145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,<br>  170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,<br>  195, 196, 197, 198, 199...&#125;<br>(gdb) p array[60]@10<br>$9 = &#123;60, 61, 62, 63, 64, 65, 66, 67, 68, 69&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印了<code>array</code>数组第60~69个元素的值。<br>如果要打印从数组开头连续元素的值，也可使用这个命令：“<code>p *array@num</code>”：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">(gdb) p *array<span class=\"hljs-symbol\">@10</span><br>$2 = &#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Arrays.html#Arrays\">gdb手册</a></p>\n<h5 id=\"打印数组的索引下标\"><a href=\"#打印数组的索引下标\" class=\"headerlink\" title=\"打印数组的索引下标\"></a>打印数组的索引下标</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> num[<span class=\"hljs-number\">10</span>] = &#123; <br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">0</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">1</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">2</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">3</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">4</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">5</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">6</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">7</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">8</span>,<br>  <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">9</span><br>&#125;;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)<br>    <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;num[%d] = %d\\n&quot;</span>, i, num[i]);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，当打印一个数组时，缺省是不打印索引下标的：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) p num<br><span class=\"hljs-meta\"><span class=\"hljs-keyword\">$1</span> = &#123;1, 2, 4, 8, 16, 32, 64, 128, 256, 512&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>如果要打印索引下标，则可以通过如下命令进行设置：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) set print array-indexes on<br><br>(gdb) <span class=\"hljs-selector-tag\">p</span> num<br>$<span class=\"hljs-number\">2</span> = &#123;<span class=\"hljs-selector-attr\">[0]</span> = <span class=\"hljs-number\">1</span>, <span class=\"hljs-selector-attr\">[1]</span> = <span class=\"hljs-number\">2</span>, <span class=\"hljs-selector-attr\">[2]</span> = <span class=\"hljs-number\">4</span>, <span class=\"hljs-selector-attr\">[3]</span> = <span class=\"hljs-number\">8</span>, <span class=\"hljs-selector-attr\">[4]</span> = <span class=\"hljs-number\">16</span>, <span class=\"hljs-selector-attr\">[5]</span> = <span class=\"hljs-number\">32</span>, <span class=\"hljs-selector-attr\">[6]</span> = <span class=\"hljs-number\">64</span>, <span class=\"hljs-selector-attr\">[7]</span> = <span class=\"hljs-number\">128</span>, <span class=\"hljs-selector-attr\">[8]</span> = <span class=\"hljs-number\">256</span>, <span class=\"hljs-selector-attr\">[9]</span> = <span class=\"hljs-number\">512</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print\">gdb手册</a></p>\n<h5 id=\"打印函数局部变量的值\"><a href=\"#打印函数局部变量的值\" class=\"headerlink\" title=\"打印函数局部变量的值\"></a>打印函数局部变量的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_a</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_b</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">1</span>;<br>\tfun_a();<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, b);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_c</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">2</span>;<br>\tfun_b();<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, c);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun_d</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> d = <span class=\"hljs-number\">3</span>;<br>\tfun_c();<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, d);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">int</span> var = <span class=\"hljs-number\">-1</span>;<br>\tfun_d();<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果要打印函数局部变量的值，可以使用“bt full”命令（bt是backtrace的缩写）。首先我们在函数fun_a里打上断点，当程序断住时，显示调用栈信息：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt<br>#<span class=\"hljs-number\">0</span>  fun_a () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x000109b0 <span class=\"hljs-keyword\">in</span> fun_b () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x000109e4 <span class=\"hljs-keyword\">in</span> fun_c () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">19</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x00010a18 <span class=\"hljs-keyword\">in</span> fun_d () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">26</span><br>#<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>x00010a4c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">33</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来，用“bt full”命令显示各个函数的局部变量值：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt full<br>#<span class=\"hljs-number\">0</span>  fun_a () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br>        <span class=\"hljs-selector-tag\">a</span> = <span class=\"hljs-number\">0</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x000109b0 <span class=\"hljs-keyword\">in</span> fun_b () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>        <span class=\"hljs-selector-tag\">b</span> = <span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x000109e4 <span class=\"hljs-keyword\">in</span> fun_c () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">19</span><br>        c = <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x00010a18 <span class=\"hljs-keyword\">in</span> fun_d () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">26</span><br>        d = <span class=\"hljs-number\">3</span><br>#<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>x00010a4c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">33</span><br>        <span class=\"hljs-selector-tag\">var</span> = -<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以使用如下“bt full n”，意思是从内向外显示n个栈桢，及其局部变量，例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt full <span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">0</span>  fun_a () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">6</span><br>        <span class=\"hljs-selector-tag\">a</span> = <span class=\"hljs-number\">0</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x000109b0 <span class=\"hljs-keyword\">in</span> fun_b () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>        <span class=\"hljs-selector-tag\">b</span> = <span class=\"hljs-number\">1</span><br>(More stack frames follow...)<br></code></pre></td></tr></table></figure>\n\n<p>而“bt full -n”，意思是从外向内显示n个栈桢，及其局部变量，例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) bt full -<span class=\"hljs-number\">2</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x00010a18 <span class=\"hljs-keyword\">in</span> fun_d () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">26</span><br>        d = <span class=\"hljs-number\">3</span><br>#<span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>x00010a4c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">33</span><br>        <span class=\"hljs-selector-tag\">var</span> = -<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Backtrace.html\">gdb手册</a></p>\n<p>如果只是想打印当前函数局部变量的值，可以使用如下命令：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">(gdb) info locals<br><span class=\"hljs-attribute\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Frame-Info.html#index-info-locals\">gdb手册</a></p>\n<h5 id=\"打印进程内存信息\"><a href=\"#打印进程内存信息\" class=\"headerlink\" title=\"打印进程内存信息\"></a>打印进程内存信息</h5><p>用gdb调试程序时，如果想查看进程的内存映射信息，可以使用“i proc mappings”命令（i是info命令缩写），例如:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i proc mappings<br>process <span class=\"hljs-number\">27676</span> flags:<br>PR_STOPPED Process (LWP) is stopped<br>PR_ISTOP Stopped on an event of interest<br>PR_RLC Run-on-last-close is <span class=\"hljs-keyword\">in</span> effect<br>PR_MSACCT Microstate accounting enabled<br>PR_PCOMPAT Micro-state accounting inherited on fork<br>PR_FAULTED : Incurred a traced hardware fault FLTBPT: Breakpoint trap<br><br>Mapped address spaces:<br><br>    Start Addr   End Addr       Size     Offset   Flags<br>     <span class=\"hljs-number\">0x8046000</span>  <span class=\"hljs-number\">0x8047fff</span>     <span class=\"hljs-number\">0x2000</span> <span class=\"hljs-number\">0xfffff000</span> -s--rwx<br>     <span class=\"hljs-number\">0x8050000</span>  <span class=\"hljs-number\">0x8050fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----r-x<br>     <span class=\"hljs-number\">0x8060000</span>  <span class=\"hljs-number\">0x8060fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfee40000</span> <span class=\"hljs-number\">0xfef4efff</span>   <span class=\"hljs-number\">0x10f000</span>          <span class=\"hljs-number\">0</span> ----r-x<br>    <span class=\"hljs-number\">0xfef50000</span> <span class=\"hljs-number\">0xfef55fff</span>     <span class=\"hljs-number\">0x6000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfef5f000</span> <span class=\"hljs-number\">0xfef66fff</span>     <span class=\"hljs-number\">0x8000</span>   <span class=\"hljs-number\">0x10f000</span> ----rwx<br>    <span class=\"hljs-number\">0xfef67000</span> <span class=\"hljs-number\">0xfef68fff</span>     <span class=\"hljs-number\">0x2000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfef70000</span> <span class=\"hljs-number\">0xfef70fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfef80000</span> <span class=\"hljs-number\">0xfef80fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ---sr--<br>    <span class=\"hljs-number\">0xfef90000</span> <span class=\"hljs-number\">0xfef90fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rw-<br>    <span class=\"hljs-number\">0xfefa0000</span> <span class=\"hljs-number\">0xfefa0fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rw-<br>    <span class=\"hljs-number\">0xfefb0000</span> <span class=\"hljs-number\">0xfefb0fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfefc0000</span> <span class=\"hljs-number\">0xfefeafff</span>    <span class=\"hljs-number\">0x2b000</span>          <span class=\"hljs-number\">0</span> ----r-x<br>    <span class=\"hljs-number\">0xfeff0000</span> <span class=\"hljs-number\">0xfeff0fff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br>    <span class=\"hljs-number\">0xfeffb000</span> <span class=\"hljs-number\">0xfeffcfff</span>     <span class=\"hljs-number\">0x2000</span>    <span class=\"hljs-number\">0x2b000</span> ----rwx<br>    <span class=\"hljs-number\">0xfeffd000</span> <span class=\"hljs-number\">0xfeffdfff</span>     <span class=\"hljs-number\">0x1000</span>          <span class=\"hljs-number\">0</span> ----rwx<br></code></pre></td></tr></table></figure>\n\n<p>首先输出了进程的flags，接着是进程的内存映射信息。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/SVR4-Process-Information.html#index-info-proc-exe\">gdb手册</a>.</p>\n<p>此外，也可以用”i files”（还有一个同样作用的命令：“i target”）命令，它可以更详细地输出进程的内存信息，包括引用的动态链接库等等，例如：</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tcl\">(gdb) i files<br>Symbols from <span class=\"hljs-string\">&quot;/data1/nan/a&quot;</span>.<br>Unix /<span class=\"hljs-keyword\">proc</span><span class=\"hljs-title\"> child</span> process:<span class=\"hljs-title\"></span><br><span class=\"hljs-title\">    Using</span> the<span class=\"hljs-title\"> running</span> image<span class=\"hljs-title\"> of</span> child<span class=\"hljs-title\"> Thread</span> 1 (LWP 1)<span class=\"hljs-title\"> via</span> /<span class=\"hljs-keyword\">proc</span>.<span class=\"hljs-title\"></span><br><span class=\"hljs-title\">    While</span> running<span class=\"hljs-title\"> this,</span> GDB<span class=\"hljs-title\"> does</span> not<span class=\"hljs-title\"> access</span> memory<span class=\"hljs-title\"> from...</span><br>Local<span class=\"hljs-title\"> exec</span> file:<br>    `/data1/nan/a&#x27;,<span class=\"hljs-title\"> file</span> type<span class=\"hljs-title\"> elf32-i386-sol2.</span><br><span class=\"hljs-title\">    Entry</span> point: 0x8050950<br>    0x080500f4 - 0x08050105<span class=\"hljs-title\"> is</span> .interp<br>    0x08050108 - 0x08050114<span class=\"hljs-title\"> is</span> .eh_frame_hdr<br>    0x08050114 - 0x08050218<span class=\"hljs-title\"> is</span> .hash<br>    0x08050218 - 0x08050418<span class=\"hljs-title\"> is</span> .dynsym<br>    0x08050418 - 0x080507e6<span class=\"hljs-title\"> is</span> .dynstr<br>    0x080507e8 - 0x08050818<span class=\"hljs-title\"> is</span> .SUNW_version<br>    0x08050818 - 0x08050858<span class=\"hljs-title\"> is</span> .SUNW_versym<br>    0x08050858 - 0x08050890<span class=\"hljs-title\"> is</span> .SUNW_reloc<br>    0x08050890 - 0x080508c8<span class=\"hljs-title\"> is</span> .rel.plt<br>    0x080508c8 - 0x08050948<span class=\"hljs-title\"> is</span> .plt<br>    ......<br>\t0xfef5fb58 - 0xfef5fc48<span class=\"hljs-title\"> is</span> .dynamic<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef5fc80 - 0xfef650e2<span class=\"hljs-title\"> is</span> .data<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef650e2 - 0xfef650e2<span class=\"hljs-title\"> is</span> .bssf<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef650e8 - 0xfef65be0<span class=\"hljs-title\"> is</span> .picdata<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef65be0 - 0xfef666a7<span class=\"hljs-title\"> is</span> .data1<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br>    0xfef666a8 - 0xfef680dc<span class=\"hljs-title\"> is</span> .bss<span class=\"hljs-title\"> in</span> /usr/lib/libc.so.1<br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Files.html\">gdb手册</a></p>\n<h5 id=\"打印静态变量的值\"><a href=\"#打印静态变量的值\" class=\"headerlink\" title=\"打印静态变量的值\"></a>打印静态变量的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/* main.c */</span><br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>;<br><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  print_var_1();<br>  print_var_2();<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">/* static-1.c */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> var = <span class=\"hljs-number\">1</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123; <br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;var = %d\\n&quot;</span>, var);<br>&#125; <br><br><span class=\"hljs-comment\">/* static-2.c */</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> var = <span class=\"hljs-number\">2</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_var_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123; <br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;var = %d\\n&quot;</span>, var);<br>&#125; <br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果直接打印静态变量，则结果并不一定是你想要的：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">$ gcc -g <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">1</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.c</span><br>$ gdb -<span class=\"hljs-selector-tag\">q</span> ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span><br>(gdb) start<br>(gdb) <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">var</span><br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">2</span><br><br>$ gcc -g <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">2</span><span class=\"hljs-selector-class\">.c</span> static-<span class=\"hljs-number\">1</span><span class=\"hljs-selector-class\">.c</span><br>$ gdb -<span class=\"hljs-selector-tag\">q</span> ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span><br>(gdb) start<br>(gdb) <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">var</span><br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>你可以显式地指定文件名（上下文）：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">(gdb) p <span class=\"hljs-string\">&#x27;static-1.c&#x27;</span>::var<br><span class=\"hljs-variable\">$1</span> = <span class=\"hljs-number\">1</span><br>(gdb) p <span class=\"hljs-string\">&#x27;static-2.c&#x27;</span>::var<br><span class=\"hljs-variable\">$2</span> = <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables\">gdb手册</a></p>\n<h5 id=\"打印变量的类型和所在文件\"><a href=\"#打印变量的类型和所在文件\" class=\"headerlink\" title=\"打印变量的类型和所在文件\"></a>打印变量的类型和所在文件</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">child</span> &#123;</span><br>  <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">10</span>];<br>  <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> &#123;</span> boy, girl &#125; gender;<br>&#125;;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">child</span> <span class=\"hljs-title\">he</span> =</span> &#123; <span class=\"hljs-string\">&quot;Tom&quot;</span>, boy &#125;;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">child</span> <span class=\"hljs-title\">she</span> =</span> &#123; <span class=\"hljs-string\">&quot;Jerry&quot;</span>, girl &#125;;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Hello %s %s.\\n&quot;</span>, he.gender == boy ? <span class=\"hljs-string\">&quot;boy&quot;</span> : <span class=\"hljs-string\">&quot;girl&quot;</span>, he.name);<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Hello %s %s.\\n&quot;</span>, she.gender == boy ? <span class=\"hljs-string\">&quot;boy&quot;</span> : <span class=\"hljs-string\">&quot;girl&quot;</span>, she.name);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，可以使用如下命令查看变量的类型：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">(gdb) whatis he<br><span class=\"hljs-attribute\">type</span> <span class=\"hljs-operator\">=</span> struct child<br></code></pre></td></tr></table></figure>\n\n<p>如果想查看详细的类型信息：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\">(gdb) p<span class=\"hljs-keyword\">type</span> he<br><span class=\"hljs-keyword\">type</span> = struct child &#123;<br>    char name[10];<br>    enum &#123;boy, girl&#125; gender;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果想查看定义该变量的文件：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) i <span class=\"hljs-keyword\">variables</span> he<br>All <span class=\"hljs-comment\">variables matching regular expression</span> <span class=\"hljs-comment\">&quot;he&quot;</span><span class=\"hljs-comment\">:</span><br><br>File <span class=\"hljs-comment\">variable.c:</span><br>struct <span class=\"hljs-comment\">child he</span>;<br><br>Non-debugging symbols:<br><span class=\"hljs-number\">0x0000000000402030</span>  she<br><span class=\"hljs-number\">0x00007ffff7dd3380</span>  __check_rhosts_file<br></code></pre></td></tr></table></figure>\n\n<p>哦，gdb会显示所有包含（匹配）该表达式的变量。如果只想查看完全匹配给定名字的变量：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) i <span class=\"hljs-keyword\">variables</span> ^he$<br>All <span class=\"hljs-comment\">variables matching regular expression</span> <span class=\"hljs-comment\">&quot;^he$&quot;</span><span class=\"hljs-comment\">:</span><br><br>File <span class=\"hljs-comment\">variable.c:</span><br>struct <span class=\"hljs-comment\">child he</span>;<br></code></pre></td></tr></table></figure>\n\n<p>注：<code>info variables</code>不会显示局部变量，即使是static的也没有太多的信息。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Symbols.html\">gdb手册</a></p>\n<h5 id=\"打印内存的值\"><a href=\"#打印内存的值\" class=\"headerlink\" title=\"打印内存的值\"></a>打印内存的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">100</span>];<br><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">sizeof</span>(a); i++)<br>        &#123;<br>                a[i] = i;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb中使用“<code>x</code>”命令来打印内存的值，格式为“<code>x/nfu addr</code>”。含义为以<code>f</code>格式打印从<code>addr</code>开始的<code>n</code>个长度单元为<code>u</code>的内存值。参数具体含义如下：<br>a）n：输出单元的个数。<br>b）f：是输出格式。比如<code>x</code>是以16进制形式输出，<code>o</code>是以8进制形式输出,等等。<br>c）u：标明一个单元的长度。<code>b</code>是一个<code>byte</code>，<code>h</code>是两个<code>byte</code>（halfword），<code>w</code>是四个<code>byte</code>（word），<code>g</code>是八个<code>byte</code>（giant word）。</p>\n<p>以上面程序为例：<br>（1） 以16进制格式打印数组前<code>a</code>16个byte的值：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) x/16xb a<br><span class=\"hljs-number\">0x7fffffffe4a0</span>: <span class=\"hljs-number\">0x00</span>    <span class=\"hljs-number\">0x01</span>    <span class=\"hljs-number\">0x02</span>    <span class=\"hljs-number\">0x03</span>    <span class=\"hljs-number\">0x04</span>    <span class=\"hljs-number\">0x05</span>    <span class=\"hljs-number\">0x06</span>    <span class=\"hljs-number\">0x07</span><br><span class=\"hljs-number\">0x7fffffffe4a8</span>: <span class=\"hljs-number\">0x08</span>    <span class=\"hljs-number\">0x09</span>    <span class=\"hljs-number\">0x0a</span>    <span class=\"hljs-number\">0x0b</span>    <span class=\"hljs-number\">0x0c</span>    <span class=\"hljs-number\">0x0d</span>    <span class=\"hljs-number\">0x0e</span>    <span class=\"hljs-number\">0x0f</span><br></code></pre></td></tr></table></figure>\n\n<p>（2） 以无符号10进制格式打印数组<code>a</code>前16个byte的值：</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">(gdb) x/16ub a<br>0x7fffffffe4a0:<span class=\"hljs-number\"> 0 </span>     <span class=\"hljs-number\"> 1 </span>     <span class=\"hljs-number\"> 2 </span>     <span class=\"hljs-number\"> 3 </span>     <span class=\"hljs-number\"> 4 </span>     <span class=\"hljs-number\"> 5 </span>     <span class=\"hljs-number\"> 6 </span>      7<br>0x7fffffffe4a8:<span class=\"hljs-number\"> 8 </span>     <span class=\"hljs-number\"> 9 </span>     <span class=\"hljs-number\"> 10 </span>    <span class=\"hljs-number\"> 11 </span>    <span class=\"hljs-number\"> 12 </span>    <span class=\"hljs-number\"> 13 </span>    <span class=\"hljs-number\"> 14 </span>     15<br></code></pre></td></tr></table></figure>\n\n<p>（3） 以2进制格式打印数组前16个<code>a</code>byte的值：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">(gdb) x/<span class=\"hljs-number\">16</span>tb a<br><span class=\"hljs-number\">0</span>x7fffffffe4a0: <span class=\"hljs-number\">00000000</span>        <span class=\"hljs-number\">00000001</span>        <span class=\"hljs-number\">00000010</span>        <span class=\"hljs-number\">00000011</span>        <span class=\"hljs-number\">00000100</span>        <span class=\"hljs-number\">00000101</span>        <span class=\"hljs-number\">00000110</span>        <span class=\"hljs-number\">00000111</span><br><span class=\"hljs-number\">0</span>x7fffffffe4a8: <span class=\"hljs-number\">00001000</span>        <span class=\"hljs-number\">00001001</span>        <span class=\"hljs-number\">00001010</span>        <span class=\"hljs-number\">00001011</span>        <span class=\"hljs-number\">00001100</span>        <span class=\"hljs-number\">00001101</span>        <span class=\"hljs-number\">00001110</span>        <span class=\"hljs-number\">00001111</span><br></code></pre></td></tr></table></figure>\n\n<p>（4） 以16进制格式打印数组<code>a</code>前16个word（4个byte）的值：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">(gdb) x/<span class=\"hljs-number\">16</span>xw a<br><span class=\"hljs-number\">0</span>x7fffffffe4a0: <span class=\"hljs-number\">0x03020100</span>      <span class=\"hljs-number\">0x07060504</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">0b0a0908</span>      <span class=\"hljs-number\">0</span>x0f0e0d0c<br><span class=\"hljs-number\">0</span>x7fffffffe4b0: <span class=\"hljs-number\">0x13121110</span>      <span class=\"hljs-number\">0x17161514</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">1b1a1918</span>      <span class=\"hljs-number\">0</span>x1f1e1d1c<br><span class=\"hljs-number\">0</span>x7fffffffe4c0: <span class=\"hljs-number\">0x23222120</span>      <span class=\"hljs-number\">0x27262524</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">2b2a2928</span>      <span class=\"hljs-number\">0</span>x2f2e2d2c<br><span class=\"hljs-number\">0</span>x7fffffffe4d0: <span class=\"hljs-number\">0x33323130</span>      <span class=\"hljs-number\">0x37363534</span>      <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">3b3a3938</span>      <span class=\"hljs-number\">0</span>x3f3e3d3c<br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Memory.html\">gdb手册</a>.</p>\n<h5 id=\"打印源代码行\"><a href=\"#打印源代码行\" class=\"headerlink\" title=\"打印源代码行\"></a>打印源代码行</h5><p>如上所示，在gdb中可以使用<code>list</code>（简写为l）命令来显示源代码以及行号。<code>list</code>命令可以指定行号，函数：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> l <span class=\"hljs-number\">24</span><br><span class=\"hljs-comment\">(gdb)</span> l mai<span class=\"hljs-symbol\">n</span><br></code></pre></td></tr></table></figure>\n\n<p>还可以指定向前或向后打印：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> l -<br><span class=\"hljs-comment\">(gdb)</span> l +<br></code></pre></td></tr></table></figure>\n\n<p>还可以指定范围：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> l <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/List.html#List\">gdb手册</a></p>\n<h5 id=\"每行打印一个结构体成员\"><a href=\"#每行打印一个结构体成员\" class=\"headerlink\" title=\"每行打印一个结构体成员\"></a>每行打印一个结构体成员</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>        <span class=\"hljs-type\">int</span> a;<br>        <span class=\"hljs-type\">int</span> b;<br>        <span class=\"hljs-type\">int</span> c;<br>        <span class=\"hljs-type\">int</span> d;<br>        <span class=\"hljs-type\">pthread_mutex_t</span> mutex;<br>&#125;ex_st;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, PTHREAD_MUTEX_INITIALIZER&#125;;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>默认情况下，gdb以一种“紧凑”的方式打印结构体。以上面代码为例：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sqf\">(gdb) n<br><span class=\"hljs-number\">15</span>              printf(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>(gdb) p st<br>$<span class=\"hljs-number\">1</span> = &#123;a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>, c = <span class=\"hljs-number\">3</span>, d = <span class=\"hljs-number\">4</span>, mutex = &#123;<span class=\"hljs-variable\">__data</span> = &#123;<span class=\"hljs-variable\">__lock</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__count</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__owner</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__nusers</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__kind</span> = <span class=\"hljs-number\">0</span>,<br>      <span class=\"hljs-variable\">__spins</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">__list</span> = &#123;<span class=\"hljs-variable\">__prev</span> = <span class=\"hljs-number\">0</span>x0, <span class=\"hljs-variable\">__next</span> = <span class=\"hljs-number\">0</span>x0&#125;&#125;, <span class=\"hljs-variable\">__size</span> = <span class=\"hljs-string\">&#x27;\\000&#x27;</span> &lt;repeats <span class=\"hljs-number\">39</span> times&gt;, <span class=\"hljs-variable\">__align</span> = <span class=\"hljs-number\">0</span>&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到结构体的显示很混乱，尤其是结构体里还嵌套着其它结构体时。</p>\n<p>可以执行“set print pretty on”命令，这样每行只会显示结构体的一名成员，而且还会根据成员的定义层次进行缩进：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) <span class=\"hljs-keyword\">set</span> print <span class=\"hljs-comment\">pretty on</span><br>(gdb) p <span class=\"hljs-comment\">st</span><br>$2 = &#123;<br>  a <span class=\"hljs-comment\">= 1,</span><br>  b <span class=\"hljs-comment\">= 2,</span><br>  c <span class=\"hljs-comment\">= 3,</span><br>  d <span class=\"hljs-comment\">= 4,</span><br>  mutex <span class=\"hljs-comment\">= &#123;</span><br>    __data <span class=\"hljs-comment\">= &#123;</span><br>      __lock <span class=\"hljs-comment\">= 0,</span><br>      __count <span class=\"hljs-comment\">= 0,</span><br>      __owner <span class=\"hljs-comment\">= 0,</span><br>      __nusers <span class=\"hljs-comment\">= 0,</span><br>      __kind <span class=\"hljs-comment\">= 0,</span><br>      __spins <span class=\"hljs-comment\">= 0,</span><br>      __list <span class=\"hljs-comment\">= &#123;</span><br>        __prev <span class=\"hljs-comment\">= 0x0,</span><br>        __next <span class=\"hljs-comment\">= 0x0</span><br>      &#125;<br>    &#125;,<br>    __size <span class=\"hljs-comment\">=</span> <span class=\"hljs-comment\">&#x27;\\000&#x27;</span> <span class=\"hljs-comment\">&lt;repeats 39 times&gt;,</span><br>    __align <span class=\"hljs-comment\">= 0</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-print-settings\">gdb手册</a></p>\n<h5 id=\"按照派生类型打印对象\"><a href=\"#按照派生类型打印对象\" class=\"headerlink\" title=\"按照派生类型打印对象\"></a>按照派生类型打印对象</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br> <span class=\"hljs-keyword\">public</span>:<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">draw</span> <span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> : <span class=\"hljs-keyword\">public</span> Shape &#123;<br> <span class=\"hljs-type\">int</span> radius;<br> <span class=\"hljs-keyword\">public</span>:<br>  <span class=\"hljs-built_in\">Circle</span> () &#123; radius = <span class=\"hljs-number\">1</span>; &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">draw</span> <span class=\"hljs-params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"hljs-string\">&quot;drawing a circle...\\n&quot;</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span> : <span class=\"hljs-keyword\">public</span> Shape &#123;<br> <span class=\"hljs-type\">int</span> height;<br> <span class=\"hljs-keyword\">public</span>:<br>  <span class=\"hljs-built_in\">Square</span> () &#123; height = <span class=\"hljs-number\">2</span>; &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">draw</span> <span class=\"hljs-params\">()</span> </span>&#123; cout &lt;&lt; <span class=\"hljs-string\">&quot;drawing a square...\\n&quot;</span>; &#125;<br>&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">drawShape</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">class</span> Shape &amp;p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  p.<span class=\"hljs-built_in\">draw</span> ();<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  Circle a;<br>  Square b;<br>  <span class=\"hljs-built_in\">drawShape</span> (a);<br>  <span class=\"hljs-built_in\">drawShape</span> (b);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，当打印一个对象时，缺省是按照声明的类型进行打印：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-comment\">(gdb)</span> frame<br><span class=\"hljs-attr\">#0</span>  drawShape <span class=\"hljs-comment\">(p=...)</span> at object.cxx:<span class=\"hljs-number\">25</span><br><span class=\"hljs-number\">25</span>\t  p.draw <span class=\"hljs-comment\">()</span>;<br><span class=\"hljs-comment\">(gdb)</span> p p<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-comment\">(Shape &amp;)</span> @<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">7</span>fffffffde<span class=\"hljs-number\">90</span>: &#123;_vptr.Shape = <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">400</span>a<span class=\"hljs-number\">80</span> &lt;vtable for Circle<span class=\"hljs-number\">+16</span>&gt;&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在这个例子中，p虽然声明为class Shape，但它实际的派生类型可能为class Circle和Square。如果要缺省按照派生类型进行打印，则可以通过如下命令进行设置：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">set</span> print <span class=\"hljs-keyword\">object</span> <span class=\"hljs-keyword\">on</span><br><br>(gdb) p p<br><span class=\"hljs-meta\">$2</span> = (<span class=\"hljs-type\">Circle</span> &amp;) @<span class=\"hljs-number\">0x7fffffffde90</span>: &#123;&lt;Shape&gt; = &#123;_vptr.Shape = <span class=\"hljs-number\">0x400a80</span> &lt;vtable <span class=\"hljs-keyword\">for</span> <span class=\"hljs-type\">Circle</span>+<span class=\"hljs-number\">16</span>&gt;&#125;, radius = <span class=\"hljs-number\">1</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当打印对象类型信息时，该设置也会起作用：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">(gdb) whatis p<br>type = Shape &amp;<br>(gdb) ptype p<br>type = <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> &#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">void</span></span>)</span>;<br>&#125; &amp;<br><br>(gdb) <span class=\"hljs-function\"><span class=\"hljs-keyword\">set</span> print <span class=\"hljs-built_in\">object</span> <span class=\"hljs-title\">on</span></span><br><span class=\"hljs-function\">(<span class=\"hljs-params\">gdb</span>) whatis p</span><br><span class=\"hljs-function\">type</span> = <span class=\"hljs-comment\">/* real type = Circle &amp; */</span><br>Shape &amp;<br>(gdb) ptype p<br>type = <span class=\"hljs-comment\">/* real type = Circle &amp; */</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> &#123;<br>  <span class=\"hljs-keyword\">public</span>:<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">void</span></span>)</span>;<br>&#125; &amp;<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Print-Settings.html#index-set-print\">gdb手册</a></p>\n<h5 id=\"指定程序的输入输出设备\"><a href=\"#指定程序的输入输出设备\" class=\"headerlink\" title=\"指定程序的输入输出设备\"></a>指定程序的输入输出设备</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> i;<br><br>  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++)<br>    &#123;<br>      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;i = %d\\n&quot;</span>, i);<br>    &#125;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，缺省情况下程序的输入输出是和gdb使用同一个终端。你也可以为程序指定一个单独的输入输出终端。</p>\n<p>首先，打开一个新终端，使用如下命令获得设备文件名：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">$ tty<br><span class=\"hljs-regexp\">/dev/</span>pts/<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>然后，通过命令行选项指定程序的输入输出设备：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">$ gdb -tty <span class=\"hljs-regexp\">/dev/</span>pts<span class=\"hljs-regexp\">/2 ./</span>a.out<br>(gdb) r<br></code></pre></td></tr></table></figure>\n\n<p>或者，在gdb中，使用命令进行设置：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) tty <span class=\"hljs-regexp\">/dev/</span>pts/<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Input_002fOutput.html#index-tty\">gdb手册</a></p>\n<h5 id=\"使用“-”和“-”变量\"><a href=\"#使用“-”和“-”变量\" class=\"headerlink\" title=\"使用“$\\”和“$_”变量\"></a>使用“$\\”和“$_”变量</h5><h5 id=\"打印程序动态分配内存的信息\"><a href=\"#打印程序动态分配内存的信息\" class=\"headerlink\" title=\"打印程序动态分配内存的信息\"></a>打印程序动态分配内存的信息</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;malloc.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">char</span> *p[<span class=\"hljs-number\">10</span>];<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">sizeof</span>(p)/<span class=\"hljs-built_in\">sizeof</span>(p[<span class=\"hljs-number\">0</span>]); i++)<br>        &#123;<br>                p[i] = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">100000</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用下面的自定义命令，打印程序动态分配内存的信息：</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">define mallocinfo<br>  <span class=\"hljs-keyword\">set</span> $__f = <span class=\"hljs-meta\">fopen</span>(<span class=\"hljs-string\">&quot;/dev/tty&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>)<br>  <span class=\"hljs-keyword\">call</span> malloc_info(0, $__f)<br>  <span class=\"hljs-keyword\">call</span> <span class=\"hljs-meta\">fclose</span>($__f)<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure>\n\n<p>以上面程序为例：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">Temporary breakpoint <span class=\"hljs-number\">5</span>, main () <span class=\"hljs-keyword\">at</span> a.c:<span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">7</span>               int i = <span class=\"hljs-number\">0</span>;<br>(gdb) mallocinfo <br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">malloc</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heap</span> <span class=\"hljs-attr\">nr</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sizes</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">sizes</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heap</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;135168&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">malloc</span>&gt;</span></span><br><span class=\"hljs-variable\">$20</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-variable\">$21</span> = <span class=\"hljs-number\">0</span><br>(gdb) n<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) mallocinfo <br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">malloc</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heap</span> <span class=\"hljs-attr\">nr</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sizes</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">sizes</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heap</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;532480&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">malloc</span>&gt;</span></span><br><span class=\"hljs-variable\">$22</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-variable\">$23</span> = <span class=\"hljs-number\">0</span><br>(gdb) n<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) <br><span class=\"hljs-number\">11</span>                      p[i] = malloc(<span class=\"hljs-number\">100000</span>);<br>(gdb) <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; sizeof(p)/sizeof(p[<span class=\"hljs-number\">0</span>]); i++)<br>(gdb) mallocinfo <br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">malloc</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heap</span> <span class=\"hljs-attr\">nr</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span></span><br><span class=\"language-xml\"></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">sizes</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">sizes</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heap</span>&gt;</span></span><span class=\"language-xml\"></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;fast&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">total</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;rest&quot;</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;0&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;current&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">system</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;max&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;total&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aspace</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;mprotect&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;1134592&quot;</span>/&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">malloc</span>&gt;</span></span><br><span class=\"hljs-variable\">$24</span> = <span class=\"hljs-number\">0</span><br><span class=\"hljs-variable\">$25</span> = <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb输出了动态分配内存的变化信息。<br>参见<a href=\"http://stackoverflow.com/questions/1471226/most-tricky-useful-commands-for-gdb-debugger\">stackoverflow</a>.</p>\n<h5 id=\"打印调用栈帧中变量的值\"><a href=\"#打印调用栈帧中变量的值\" class=\"headerlink\" title=\"打印调用栈帧中变量的值\"></a>打印调用栈帧中变量的值</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">return</span> b * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">return</span> b * <span class=\"hljs-built_in\">func1</span>(a);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">3</span>;<br>  <span class=\"hljs-keyword\">return</span> b * <span class=\"hljs-built_in\">func2</span>(a);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，如果想查看调用栈帧中的变量，可以先切换到该栈帧中，然后打印：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) <span class=\"hljs-selector-tag\">b</span> func1<br>(gdb) r<br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  func1 (a=<span class=\"hljs-number\">10</span>) at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">5</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>x0000000000400560 <span class=\"hljs-keyword\">in</span> func2 (a=<span class=\"hljs-number\">10</span>) at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">12</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x0000000000400582 <span class=\"hljs-keyword\">in</span> func3 (a=<span class=\"hljs-number\">10</span>) at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">18</span><br>#<span class=\"hljs-number\">3</span>  <span class=\"hljs-number\">0</span>x0000000000400596 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-selector-tag\">main</span> () at frame<span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">23</span><br>(gdb) f <span class=\"hljs-number\">1</span><br>(gdb) <span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-selector-tag\">b</span><br>(gdb) f <span class=\"hljs-number\">2</span><br>(gdb) <span class=\"hljs-selector-tag\">p</span> b<br></code></pre></td></tr></table></figure>\n\n<p>也可以不进行切换，直接打印：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">(gdb) p func2::b<br><span class=\"hljs-variable\">$1</span> = <span class=\"hljs-number\">2</span><br>(gdb) p func3::b<br><span class=\"hljs-variable\">$2</span> = <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<p>同样，对于C++的函数名，需要使用单引号括起来，比如：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">(gdb) p <span class=\"hljs-string\">&#x27;(anonymous namespace)::SSAA::handleStore&#x27;</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:n-&gt;pi-&gt;inst-&gt;dump</span>()<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Variables.html#Variables\">gdb手册</a></p>\n<h4 id=\"9、多进程-x2F-线程\"><a href=\"#9、多进程-x2F-线程\" class=\"headerlink\" title=\"9、多进程&#x2F;线程\"></a>9、多进程&#x2F;线程</h4><h5 id=\"调试已经运行的进程\"><a href=\"#调试已经运行的进程\" class=\"headerlink\" title=\"调试已经运行的进程\"></a>调试已经运行的进程</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, (<span class=\"hljs-type\">char</span>*)p_arg);<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>调试已经运行的进程有两种方法：一种是gdb启动时，指定进程的ID：gdb program processID（也可以用-p或者–pid指定进程ID，例如：gdb program -p&#x3D;10210）。以上面代码为例，用“ps”命令已经获得进程ID为10210：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\">bash-<span class=\"hljs-number\">3.2#</span> gdb -q a <span class=\"hljs-number\">10210</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> /data/nan/a...done.<br>Attaching <span class=\"hljs-keyword\">to</span> program `/data/nan/a<span class=\"hljs-comment\">&#x27;, process 10210</span><br>[<span class=\"hljs-built_in\">New</span> process <span class=\"hljs-number\">10210</span>]<br>Retry #<span class=\"hljs-number\">1</span>:<br>Retry #<span class=\"hljs-number\">2</span>:<br>Retry #<span class=\"hljs-number\">3</span>:<br>Retry #<span class=\"hljs-number\">4</span>:<br>Reading symbols <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">3</span>        ]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">2</span>        ]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)]<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span><br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>xfeedcae4 <span class=\"hljs-keyword\">in</span> sleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x080509ef <span class=\"hljs-keyword\">in</span> main () at a.c:<span class=\"hljs-number\">17</span><br></code></pre></td></tr></table></figure>\n\n<p>如果嫌每次ps查看进程号比较麻烦，请尝试如下脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">保存为xgdb.sh（添加可执行权限）</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">用法 xgdb.sh a</span> <br>prog_bin=$1<br>running_name=$(basename $prog_bin)<br>pid=$(/sbin/pidof $running_name)<br>gdb attach $pid<br></code></pre></td></tr></table></figure>\n\n<p>另一种是先启动gdb，然后用“attach”命令“附着”在进程上：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\">bash-<span class=\"hljs-number\">3.2#</span> gdb -q a<br>Reading symbols <span class=\"hljs-keyword\">from</span> /data/nan/a...done.<br>(gdb) attach <span class=\"hljs-number\">10210</span><br>Attaching <span class=\"hljs-keyword\">to</span> program `/data/nan/a<span class=\"hljs-comment\">&#x27;, process 10210</span><br>[<span class=\"hljs-built_in\">New</span> process <span class=\"hljs-number\">10210</span>]<br>Retry #<span class=\"hljs-number\">1</span>:<br>Retry #<span class=\"hljs-number\">2</span>:<br>Retry #<span class=\"hljs-number\">3</span>:<br>Retry #<span class=\"hljs-number\">4</span>:<br>Reading symbols <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">3</span>        ]<br>[<span class=\"hljs-built_in\">New</span> LWP    <span class=\"hljs-number\">2</span>        ]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)]<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span>...(no debugging symbols found)...done.<br>Loaded symbols <span class=\"hljs-keyword\">for</span> /<span class=\"hljs-keyword\">lib</span>/ld.so.<span class=\"hljs-number\">1</span><br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>(gdb) bt<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">0</span>xfeedcae4 <span class=\"hljs-keyword\">in</span> sleep () <span class=\"hljs-keyword\">from</span> /usr/<span class=\"hljs-keyword\">lib</span>/libc.so.<span class=\"hljs-number\">1</span><br>#<span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">0</span>x080509ef <span class=\"hljs-keyword\">in</span> main () at a.c:<span class=\"hljs-number\">17</span><br></code></pre></td></tr></table></figure>\n\n<p>如果不想继续调试了，可以用“detach”命令“脱离”进程：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arcade\">(gdb) detach<br>Detaching from program: <span class=\"hljs-regexp\">/data/</span><span class=\"hljs-literal\">nan</span>/a, process <span class=\"hljs-number\">10210</span><br>(gdb) bt<br>No stack.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Attach.html#index-attach\">gdb手册</a></p>\n<h5 id=\"调试子进程\"><a href=\"#调试子进程\" class=\"headerlink\" title=\"调试子进程\"></a>调试子进程</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>\t<span class=\"hljs-type\">pid_t</span> pid;<br><br>\tpid = fork();<br>\t<span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>\t&#123;<br>\t\t<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>\t&#125;<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在调试多进程程序时，gdb默认会追踪父进程。例如：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">8</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>               pid = fork();<br>(gdb) n<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb) hello world<br><br><span class=\"hljs-number\">13</span>              <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">15</span>                      <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br>(gdb)<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">12786</span>) exited normally]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序执行到第15行：父进程退出。</p>\n<p>如果要调试子进程，要使用如下命令：“set follow-fork-mode child”，例如：</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\">(gdb) set follow-fork-mode child<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">8</span>.<br>Starting program: /data2/home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>               pid = <span class=\"hljs-built_in\">fork</span>();<br>(gdb) n<br><span class=\"hljs-selector-attr\">[New process 12241]</span><br><span class=\"hljs-selector-attr\">[Switching to process 12241]</span><br><span class=\"hljs-number\">9</span>               if (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">13</span>              else if (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">17</span>              <span class=\"hljs-built_in\">printf</span>(&quot;hello world\\n&quot;);<br>(gdb)<br>hello world<br><span class=\"hljs-number\">18</span>              return <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序执行到第17行：子进程打印“hello world”。</p>\n<p>这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\">gdb手册</a></p>\n<h5 id=\"同时调试父进程和子进程\"><a href=\"#同时调试父进程和子进程\" class=\"headerlink\" title=\"同时调试父进程和子进程\"></a>同时调试父进程和子进程</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>    <span class=\"hljs-type\">pid_t</span> pid;<br><br>    pid = fork();<br>    <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Parent\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Child\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在调试多进程程序时，gdb默认只会追踪父进程的运行，而子进程会独立运行，gdb不会控制。以上面程序为例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">7</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">7</span>           pid = fork();<br>(gdb) n<br><span class=\"hljs-number\">8</span>           <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb) Child<br><br><span class=\"hljs-number\">12</span>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">14</span>              printf(<span class=\"hljs-string\">&quot;Parent\\n&quot;</span>);<br>(gdb)<br>Parent<br><span class=\"hljs-number\">15</span>              <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n\n<p>可以看到当单步执行到第8行时，程序打印出“Child” ，证明子进程已经开始独立运行。</p>\n<p>如果要同时调试父进程和子进程，可以使用“<code>set detach-on-fork off</code>”（默认<code>detach-on-fork</code>是<code>on</code>）命令，这样gdb就能同时调试父子进程，并且在调试一个进程时，另外一个进程处于挂起状态。仍以上面程序为例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) set detach-on-fork off<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x40055c: file a.c, line <span class=\"hljs-number\">7</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">7</span><br><span class=\"hljs-number\">7</span>           pid = fork();<br>(gdb) n<br>[New process <span class=\"hljs-number\">1050</span>]<br><span class=\"hljs-number\">8</span>           <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">12</span>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb) i inferior<br>  Num  Description       Executable<br>  <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1050</span>      <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>* <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1046</span>      <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>(gdb) n<br><span class=\"hljs-number\">14</span>              printf(<span class=\"hljs-string\">&quot;Parent\\n&quot;</span>);<br>(gdb) n<br>Parent<br><span class=\"hljs-number\">15</span>              <span class=\"hljs-keyword\">exit</span>(<span class=\"hljs-number\">0</span>);<br>(gdb)<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">1046</span>) exited normally]<br>(gdb)<br>The program is not being run.<br>(gdb) i inferiors<br>  Num  Description       Executable<br>  <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1050</span>      <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>* <span class=\"hljs-number\">1</span>    &lt;null&gt;            <span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a<br>(gdb) inferior <span class=\"hljs-number\">2</span><br>[Switching to inferior <span class=\"hljs-number\">2</span> [process <span class=\"hljs-number\">1050</span>] (<span class=\"hljs-regexp\">/data2/</span>home<span class=\"hljs-regexp\">/nanxiao/</span>a)]<br>[Switching to thread <span class=\"hljs-number\">2</span> (process <span class=\"hljs-number\">1050</span>)]<br><span class=\"hljs-comment\">#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6</span><br>(gdb) bt<br><span class=\"hljs-comment\">#0  0x00007ffff7af6cad in fork () from /lib64/libc.so.6</span><br><span class=\"hljs-comment\">#1  0x0000000000400561 in main () at a.c:7</span><br>(gdb) n<br>Single stepping until <span class=\"hljs-keyword\">exit</span> from <span class=\"hljs-keyword\">function</span> fork,<br>which has no line number information.<br>main () at a.c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>           <span class=\"hljs-keyword\">if</span> (pid &lt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">12</span>          <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pid &gt; <span class=\"hljs-number\">0</span>)<br>(gdb)<br><span class=\"hljs-number\">17</span>          printf(<span class=\"hljs-string\">&quot;Child\\n&quot;</span>);<br>(gdb)<br>Child<br><span class=\"hljs-number\">18</span>          return <span class=\"hljs-number\">0</span>;<br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>在使用“<code>set detach-on-fork off</code>”命令后，用“<code>i inferiors</code>”（<code>i</code>是<code>info</code>命令缩写）查看进程状态，可以看到父子进程都在被gdb调试的状态，前面显示“*”是正在调试的进程。当父进程退出后，用“<code>inferior infno</code>”切换到子进程去调试。</p>\n<p>这个命令目前Linux支持，其它很多操作系统都不支持，使用时请注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Forks.html\">gdb手册</a></p>\n<p>此外，如果想让父子进程都同时运行，可以使用“<code>set schedule-multiple on</code>”（默认<code>schedule-multiple</code>是<code>off</code>）命令，仍以上述代码为例：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) <span class=\"hljs-keyword\">set</span> detach-on-fork <span class=\"hljs-comment\">off</span><br>(gdb) <span class=\"hljs-keyword\">set</span> <span class=\"hljs-comment\">schedule-multiple on</span><br>(gdb) start<br>Temporary <span class=\"hljs-comment\">breakpoint 1 at 0x40059c: file a.c, line 7.</span><br>Starting <span class=\"hljs-comment\">program:</span> /data2/<span class=\"hljs-comment\">home</span>/nanxiao/<span class=\"hljs-comment\">a</span><br><br>Temporary <span class=\"hljs-comment\">breakpoint 1, main () at a.c:7</span><br>7           pid <span class=\"hljs-comment\">= fork()</span>;<br>(gdb) n<br>[New process <span class=\"hljs-number\">26597</span>]<br>Child<br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印出了“Child”，证明子进程也在运行了。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/All_002dStop-Mode.html#All_002dStop-Mode\">gdb手册</a></p>\n<h5 id=\"查看线程信息\"><a href=\"#查看线程信息\" class=\"headerlink\" title=\"查看线程信息\"></a>查看线程信息</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, (<span class=\"hljs-type\">char</span>*)p_arg);<br>                <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">10</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        <span class=\"hljs-built_in\">pthread_create</span>(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        <span class=\"hljs-built_in\">sleep</span>(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试多线程程序，可以用“i threads”命令（i是info命令缩写）查看所有线程的信息，以上面程序为例（运行平台为Linux，CPU为X86_64）:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">  (gdb) i threads<br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">3</span>    Thread <span class=\"hljs-number\">0</span>x7ffff6e2b700 (LWP <span class=\"hljs-number\">31773</span>) <span class=\"hljs-number\">0</span>x00007ffff7915911 in clone () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>  <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">0</span>x7ffff782c700 (LWP <span class=\"hljs-number\">31744</span>) <span class=\"hljs-number\">0</span>x00007ffff78d9bcd in nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib64/</span>libc.so.<span class=\"hljs-number\">6</span><br>* <span class=\"hljs-number\">1</span>    Thread <span class=\"hljs-number\">0</span>x7ffff7fe9700 (LWP <span class=\"hljs-number\">31738</span>) main () at a.c:<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n\n<p>第一项（Id）：是gdb标示每个线程的唯一ID：1，2等等。<br>第二项（Target Id）：是具体系统平台用来标示每个线程的ID，不同平台信息可能会不同。 像当前Linux平台显示的就是： Thread 0x7ffff6e2b700 (LWP 31773)。<br>第三项（Frame）：显示的是线程执行到哪个函数。<br>前面带“*”表示的是“current thread”，可以理解为gdb调试多线程程序时，选择的一个“默认线程”。</p>\n<p>再以Solaris平台（CPU为X86_64）为例，可以看到显示信息会略有不同：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i threads<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)]<br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">6</span>    Thread <span class=\"hljs-number\">3</span> (LWP <span class=\"hljs-number\">3</span>)  <span class=\"hljs-number\">0</span>xfeec870d in _thr_setup () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/libc.so.<span class=\"hljs-number\">1</span><br>  <span class=\"hljs-number\">5</span>    Thread <span class=\"hljs-number\">2</span> (LWP <span class=\"hljs-number\">2</span>)  <span class=\"hljs-number\">0</span>xfefc9661 in elf_find_sym () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/ld.so.<span class=\"hljs-number\">1</span><br>  <span class=\"hljs-number\">4</span>    LWP    <span class=\"hljs-number\">3</span>          <span class=\"hljs-number\">0</span>xfeec870d in _thr_setup () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/libc.so.<span class=\"hljs-number\">1</span><br>  <span class=\"hljs-number\">3</span>    LWP    <span class=\"hljs-number\">2</span>          <span class=\"hljs-number\">0</span>xfefc9661 in elf_find_sym () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/usr/</span>lib/ld.so.<span class=\"hljs-number\">1</span><br>* <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)  main () at a.c:<span class=\"hljs-number\">18</span><br>  <span class=\"hljs-number\">1</span>    LWP    <span class=\"hljs-number\">1</span>          main () at a.c:<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以用“i threads [Id…]”指定打印某些线程的信息，例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">  (gdb) <span class=\"hljs-selector-tag\">i</span> threads <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span><br>  Id   Target Id         Frame<br>  <span class=\"hljs-number\">2</span>    Thread <span class=\"hljs-number\">0</span>x7ffff782c700 (LWP <span class=\"hljs-number\">12248</span>) <span class=\"hljs-number\">0</span>x00007ffff78d9bcd in nanosleep () <span class=\"hljs-selector-tag\">from</span> /lib64/libc<span class=\"hljs-selector-class\">.so</span>.<span class=\"hljs-number\">6</span><br>* <span class=\"hljs-number\">1</span>    Thread <span class=\"hljs-number\">0</span>x7ffff7fe9700 (LWP <span class=\"hljs-number\">12244</span>) <span class=\"hljs-selector-tag\">main</span> () at <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.c</span>:<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Threads.html\">gdb手册</a>.</p>\n<h5 id=\"在Solaris上使用maintenance命令查看线程信息\"><a href=\"#在Solaris上使用maintenance命令查看线程信息\" class=\"headerlink\" title=\"在Solaris上使用maintenance命令查看线程信息\"></a>在Solaris上使用maintenance命令查看线程信息</h5><p>用gdb调试多线程程序时，如果想查看线程信息，可以使用“i threads”命令（i是info命令缩写），例如:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i threads<br><span class=\"hljs-number\">106</span> process <span class=\"hljs-number\">2689429</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">105</span> process <span class=\"hljs-number\">2623893</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">104</span> process <span class=\"hljs-number\">2558357</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">103</span> process <span class=\"hljs-number\">2492821</span>      <span class=\"hljs-number\">0</span>xff04af84 in __lwp_park () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>在Solaris操作系统上，gdb为Solaris量身定做了一个查看线程信息的命令：“maint info sol-threads”（maint是maintenance命令缩写），例如:</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">(gdb) maint <span class=\"hljs-literal\">inf</span>o sol-threads<br><span class=\"hljs-keyword\">user</span>   <span class=\"hljs-title\">thread</span> <span class=\"hljs-comment\">#1, lwp 1, (active)</span><br><span class=\"hljs-keyword\">user</span>   <span class=\"hljs-title\">thread</span> <span class=\"hljs-comment\">#2, lwp 2, (active)    startfunc: monitor_thread</span><br><span class=\"hljs-keyword\">user</span>   <span class=\"hljs-title\">thread</span> <span class=\"hljs-comment\">#3, lwp 3, (asleep)    startfunc: mem_db_thread</span><br>- Sleep func: <span class=\"hljs-number\">0</span>x000aa32c<br></code></pre></td></tr></table></figure>\n\n<p>可以看到相比于info命令，maintenance命令显示了更多信息。例如线程当前状态（active，asleep），入口函数（startfunc）等。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Threads.html\">gdb手册</a></p>\n<h5 id=\"不显示线程启动和退出信息\"><a href=\"#不显示线程启动和退出信息\" class=\"headerlink\" title=\"不显示线程启动和退出信息\"></a>不显示线程启动和退出信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">thread_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *p_arg)</span><br>&#123;<br>       sleep(<span class=\"hljs-number\">10</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">pthread_t</span> t1, t2;<br><br>        pthread_create(&amp;t1, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 1&quot;</span>);<br>        pthread_create(&amp;t2, <span class=\"hljs-literal\">NULL</span>, thread_func, <span class=\"hljs-string\">&quot;Thread 2&quot;</span>);<br><br>        sleep(<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>默认情况下，gdb检测到有线程产生和退出时，会打印提示信息，以上面程序为例:</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">(gdb) r<br>Starting program: /<span class=\"hljs-built_in\">data</span>/<span class=\"hljs-number\">nan</span>/a<br><span class=\"hljs-meta\">[</span><span class=\"hljs-keyword\">Thread</span> debugging using libthread_db enabled<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> <span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> LWP    <span class=\"hljs-number\">2</span>        <span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> LWP    <span class=\"hljs-number\">3</span>        <span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span>LWP    <span class=\"hljs-number\">2</span>         exited<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> <span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">2</span>        <span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span>LWP    <span class=\"hljs-number\">3</span>         exited<span class=\"hljs-meta\">]</span><br><span class=\"hljs-meta\">[</span><span class=\"hljs-literal\">New</span> <span class=\"hljs-keyword\">Thread</span> <span class=\"hljs-number\">3</span>        <span class=\"hljs-meta\">]</span><br></code></pre></td></tr></table></figure>\n\n<p>如果不想显示这些信息，可以使用“<code>set print thread-events off</code>”命令，这样当有线程产生和退出时，就不会打印提示信息：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) <span class=\"hljs-keyword\">set</span> print <span class=\"hljs-comment\">thread-events off</span><br>(gdb) r<br>Starting <span class=\"hljs-comment\">program:</span> /data/<span class=\"hljs-comment\">nan</span>/a<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到不再打印相关信息。</p>\n<p>这个命令有些平台不支持，使用时需注意。参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Threads.html\">gdb手册</a>.</p>\n<h5 id=\"使用“-thread”变量\"><a href=\"#使用“-thread”变量\" class=\"headerlink\" title=\"使用“$_thread”变量\"></a>使用“$_thread”变量</h5><h5 id=\"一个gdb会话中同时调试多个程序\"><a href=\"#一个gdb会话中同时调试多个程序\" class=\"headerlink\" title=\"一个gdb会话中同时调试多个程序\"></a>一个gdb会话中同时调试多个程序</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">a.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = a * b;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;c is %d\\n&quot;</span>, c);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br>b.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func1</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func2</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb支持在一个会话中同时调试多个程序。以上面程序为例，首先调试<code>a</code>程序：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">root@bash:~$ gdb <span class=\"hljs-keyword\">a</span><br>GNU gdb (Ubuntu <span class=\"hljs-number\">7.7</span><span class=\"hljs-number\">-0</span>ubuntu3) <span class=\"hljs-number\">7.7</span><br>Copyright (C) <span class=\"hljs-number\">2014</span> Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL <span class=\"hljs-built_in\">version</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">or</span> later &lt;<span class=\"hljs-keyword\">http</span>://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free <span class=\"hljs-built_in\">to</span> change <span class=\"hljs-keyword\">and</span> redistribute <span class=\"hljs-keyword\">it</span>.<br>There is NO WARRANTY, <span class=\"hljs-built_in\">to</span> <span class=\"hljs-keyword\">the</span> extent permitted <span class=\"hljs-keyword\">by</span> law.  Type <span class=\"hljs-string\">&quot;show copying&quot;</span><br><span class=\"hljs-keyword\">and</span> <span class=\"hljs-string\">&quot;show warranty&quot;</span> <span class=\"hljs-keyword\">for</span> details.<br>This GDB was configured <span class=\"hljs-keyword\">as</span> <span class=\"hljs-string\">&quot;x86_64-linux-gnu&quot;</span>.<br>Type <span class=\"hljs-string\">&quot;show configuration&quot;</span> <span class=\"hljs-keyword\">for</span> configuration details.<br>For bug reporting instructions, please see:<br>&lt;<span class=\"hljs-keyword\">http</span>://www.gnu.org/software/gdb/bugs/&gt;.<br>Find <span class=\"hljs-keyword\">the</span> GDB manual <span class=\"hljs-keyword\">and</span> other documentation resources online <span class=\"hljs-keyword\">at</span>:<br>&lt;<span class=\"hljs-keyword\">http</span>://www.gnu.org/software/gdb/documentation/&gt;.<br>For help, type <span class=\"hljs-string\">&quot;help&quot;</span>.<br>Type <span class=\"hljs-string\">&quot;apropos word&quot;</span> <span class=\"hljs-built_in\">to</span> search <span class=\"hljs-keyword\">for</span> commands related <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&quot;word&quot;</span>...<br>Reading symbols <span class=\"hljs-built_in\">from</span> <span class=\"hljs-keyword\">a</span>...done.<br>(gdb) <span class=\"hljs-built_in\">start</span><br>Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x400568</span>: <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">a</span>.c, <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">10.</span><br>Starting program: /home/nanxiao/<span class=\"hljs-keyword\">a</span><br></code></pre></td></tr></table></figure>\n\n<p>接着使用“<code>add-inferior [ -copies n ] [ -exec executable ]</code>”命令加载可执行文件<code>b</code>。其中<code>n</code>默认为1：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) add-inferior -copies <span class=\"hljs-number\">2</span> -exec b<br>Added inferior <span class=\"hljs-number\">2</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> b...done.<br>Added inferior <span class=\"hljs-number\">3</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> b...done.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">2</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br>(gdb) inferior <span class=\"hljs-number\">2</span><br>[Switching to inferior <span class=\"hljs-number\">2</span> [&lt;<span class=\"hljs-keyword\">null</span>&gt;] (<span class=\"hljs-regexp\">/home/</span>nanxiao/b)]<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">2</span> at <span class=\"hljs-number\">0</span>x400568: main. (<span class=\"hljs-number\">3</span> locations)<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br><br>Temporary breakpoint <span class=\"hljs-number\">2</span>, main () at b.c:<span class=\"hljs-number\">24</span><br><span class=\"hljs-number\">24</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, func3(<span class=\"hljs-number\">10</span>));<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1590</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br></code></pre></td></tr></table></figure>\n\n<p>可以看到可以调试<code>b</code>程序了。</p>\n<p>另外也可用“<code>clone-inferior [ -copies n ] [ infno ]</code>”克隆现有的<code>inferior</code>，其中<code>n</code>默认为1，<code>infno</code>默认为当前的<code>inferior</code>：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1590</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br>(gdb) clone-inferior -copies <span class=\"hljs-number\">1</span><br>Added inferior <span class=\"hljs-number\">4</span>.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable<br>  <span class=\"hljs-number\">4</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">1590</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/b<br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">1586</span>      <span class=\"hljs-regexp\">/home/</span>nanxiao/a<br></code></pre></td></tr></table></figure>\n\n<p>可以看到又多了一个<code>b</code>程序。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html\">gdb手册</a>.</p>\n<h5 id=\"打印程序进程空间信息\"><a href=\"#打印程序进程空间信息\" class=\"headerlink\" title=\"打印程序进程空间信息\"></a>打印程序进程空间信息</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\">a.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = a * b;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;c is %d\\n&quot;</span>, c);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br>b.c:<br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * a;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func1</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func3</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;<br>        c = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">func2</span>(a);<br>        <span class=\"hljs-keyword\">return</span> c;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-built_in\">func3</span>(<span class=\"hljs-number\">10</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试多个进程时，可以使用“<code>maint info program-spaces</code>”打印当前所有被调试的进程信息。以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">[root@localhost nan]# gdb a<br>GNU gdb (GDB) <span class=\"hljs-number\">7.8</span>.<span class=\"hljs-number\">1</span><br>......<br>Reading symbols <span class=\"hljs-keyword\">from</span> a...done.<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x4004f9: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">10</span>.<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a <br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">10</span><br><span class=\"hljs-number\">10</span>              func(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);<br>(gdb) add-inferior -exec b<br>Added inferior <span class=\"hljs-number\">2</span><br>Reading symbols <span class=\"hljs-keyword\">from</span> b...done.<br>(gdb) i inferiors b<br>Args must be numbers or <span class=\"hljs-string\">&#x27;$&#x27;</span> variables.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable        <br>  <span class=\"hljs-number\">2</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nan/b       <br>* <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">15753</span>     <span class=\"hljs-regexp\">/home/</span>nan/a       <br>(gdb) inferior <span class=\"hljs-number\">2</span><br>[Switching to inferior <span class=\"hljs-number\">2</span> [&lt;<span class=\"hljs-keyword\">null</span>&gt;] (<span class=\"hljs-regexp\">/home/</span>nan/b)]<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">2</span> at <span class=\"hljs-number\">0</span>x4004f9: main. (<span class=\"hljs-number\">2</span> locations)<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/b <br><br>Temporary breakpoint <span class=\"hljs-number\">2</span>, main () at b.c:<span class=\"hljs-number\">24</span><br><span class=\"hljs-number\">24</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, func3(<span class=\"hljs-number\">10</span>));<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable        <br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">15902</span>     <span class=\"hljs-regexp\">/home/</span>nan/b       <br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">15753</span>     <span class=\"hljs-regexp\">/home/</span>nan/a       <br>(gdb) clone-inferior -copies <span class=\"hljs-number\">2</span><br>Added inferior <span class=\"hljs-number\">3</span>.<br>Added inferior <span class=\"hljs-number\">4</span>.<br>(gdb) i inferiors<br>  Num  <span class=\"hljs-keyword\">Description</span>       Executable        <br>  <span class=\"hljs-number\">4</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nan/b       <br>  <span class=\"hljs-number\">3</span>    &lt;<span class=\"hljs-keyword\">null</span>&gt;            <span class=\"hljs-regexp\">/home/</span>nan/b       <br>* <span class=\"hljs-number\">2</span>    process <span class=\"hljs-number\">15902</span>     <span class=\"hljs-regexp\">/home/</span>nan/b       <br>  <span class=\"hljs-number\">1</span>    process <span class=\"hljs-number\">15753</span>     <span class=\"hljs-regexp\">/home/</span>nan/a       <br>(gdb) maint info program-spaces<br>  Id   Executable        <br>  <span class=\"hljs-number\">4</span>    <span class=\"hljs-regexp\">/home/</span>nan/b       <br>        Bound inferiors: ID <span class=\"hljs-number\">4</span> (process <span class=\"hljs-number\">0</span>)<br>  <span class=\"hljs-number\">3</span>    <span class=\"hljs-regexp\">/home/</span>nan/b       <br>        Bound inferiors: ID <span class=\"hljs-number\">3</span> (process <span class=\"hljs-number\">0</span>)<br>* <span class=\"hljs-number\">2</span>    <span class=\"hljs-regexp\">/home/</span>nan/b       <br>        Bound inferiors: ID <span class=\"hljs-number\">2</span> (process <span class=\"hljs-number\">15902</span>)<br>  <span class=\"hljs-number\">1</span>    <span class=\"hljs-regexp\">/home/</span>nan/a       <br>        Bound inferiors: ID <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">15753</span>)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到执行“<code>maint info program-spaces</code>”命令后，打印出当前有4个<code>program-spaces</code>（编号从1到4）。另外还有每个<code>program-spaces</code>对应的程序，<code>inferior</code>编号及进程号。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Inferiors-and-Programs.html\">gdb手册</a>.</p>\n<h5 id=\"使用“-exitcode”变量\"><a href=\"#使用“-exitcode”变量\" class=\"headerlink\" title=\"使用“$_exitcode”变量\"></a>使用“$_exitcode”变量</h5><h4 id=\"10、core-dump文件\"><a href=\"#10、core-dump文件\" class=\"headerlink\" title=\"10、core dump文件\"></a>10、core dump文件</h4><h5 id=\"为调试进程产生core-dump文件\"><a href=\"#为调试进程产生core-dump文件\" class=\"headerlink\" title=\"为调试进程产生core dump文件\"></a>为调试进程产生core dump文件</h5><p>在用gdb调试程序时，我们有时想让被调试的进程产生core dump文件，记录现在进程的状态，以供以后分析。可以用“generate-core-file”命令来产生core dump文件：</p>\n<figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vhdl\">(gdb) help <span class=\"hljs-keyword\">generate</span>-core-<span class=\"hljs-keyword\">file</span><br>Save a core <span class=\"hljs-keyword\">file</span> <span class=\"hljs-keyword\">with</span> the current state <span class=\"hljs-keyword\">of</span> the debugged <span class=\"hljs-keyword\">process</span>.<br>Argument <span class=\"hljs-keyword\">is</span> optional filename.  <span class=\"hljs-keyword\">Default</span> filename <span class=\"hljs-keyword\">is</span> <span class=\"hljs-symbol\">&#x27;core</span>.&lt;process_id&gt;&#x27;.<br><br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x8050c12: <span class=\"hljs-keyword\">file</span> a.c, <span class=\"hljs-literal\">line</span> <span class=\"hljs-number\">9</span>.<br>Starting program: /data1/nan/a<br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">9</span>           change_var();<br>(gdb) <span class=\"hljs-keyword\">generate</span>-core-<span class=\"hljs-keyword\">file</span><br>Saved corefile core.<span class=\"hljs-number\">12955</span><br></code></pre></td></tr></table></figure>\n\n<p>也可使用“gcore”命令：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) help gcore<br>Save <span class=\"hljs-keyword\">a</span> core <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">the</span> current state <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">the</span> debugged <span class=\"hljs-built_in\">process</span>.<br>Argument is optional filename.  Default filename is <span class=\"hljs-string\">&#x27;core.&lt;process_id&gt;&#x27;</span>.<br>(gdb) gcore<br>Saved corefile core<span class=\"hljs-number\">.13256</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html\">gdb手册</a></p>\n<h5 id=\"加载可执行程序和core-dump文件\"><a href=\"#加载可执行程序和core-dump文件\" class=\"headerlink\" title=\"加载可执行程序和core dump文件\"></a>加载可执行程序和core dump文件</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>        <span class=\"hljs-type\">int</span> *p = <span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>        *p = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>例子程序访问了一个空指针，所以程序会crash并产生core dump文件。用gdb调试core dump文件，通常用这个命令形式：“gdb path&#x2F;to&#x2F;the&#x2F;executable path&#x2F;to&#x2F;the&#x2F;coredump”，然后gdb会显示程序crash的位置：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">bash</span>-<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">2</span># gdb -q /data/nan/a /var/core/core.a.<span class=\"hljs-number\">22268</span>.<span class=\"hljs-number\">1402638140</span><br><span class=\"hljs-attribute\">Reading</span> symbols from /data/nan/a...done.<span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[New LWP 1]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[Thread debugging using libthread_db enabled]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[New Thread 1 (LWP 1)]</span><br><span class=\"hljs-attribute\">Core</span> was generated by `./a&#x27;.<br><span class=\"hljs-attribute\">Program</span> terminated with signal <span class=\"hljs-number\">11</span>, Segmentation fault.<br><span class=\"hljs-comment\">#0  0x0000000000400cdb in main () at a.c:6</span><br><span class=\"hljs-attribute\">6</span>               *p = <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>有时我们想在gdb启动后，动态加载可执行程序和core dump文件，这时可以用“file”和“core”（core-file命令缩写）命令。“file”命令用来读取可执行文件的符号表信息，而“core”命令则是指定core dump文件的位置：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\">bash-<span class=\"hljs-number\">3.2#</span> gdb -q<br>(gdb) file /data/nan/a<br>Reading symbols <span class=\"hljs-keyword\">from</span> /data/nan/a...done.<br>(gdb) core /var/core/core.a.<span class=\"hljs-number\">22268.1402638140</span><br>[<span class=\"hljs-built_in\">New</span> LWP <span class=\"hljs-number\">1</span>]<br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>Core was generated <span class=\"hljs-keyword\">by</span> `./a<span class=\"hljs-comment\">&#x27;.</span><br>Program terminated <span class=\"hljs-keyword\">with</span> signal <span class=\"hljs-number\">11</span>, Segmentation fault.<br>#<span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>x0000000000400cdb <span class=\"hljs-keyword\">in</span> main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               *p = <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb同样显示程序crash的位置。</p>\n<p>这两个命令可参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Files.html#index-core-dump-file\">gdb手册</a></p>\n<h4 id=\"11、汇编\"><a href=\"#11、汇编\" class=\"headerlink\" title=\"11、汇编\"></a>11、汇编</h4><h5 id=\"设置汇编指令格式\"><a href=\"#设置汇编指令格式\" class=\"headerlink\" title=\"设置汇编指令格式\"></a>设置汇编指令格式</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> global_var;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change_var</span><span class=\"hljs-params\">()</span></span>&#123;<br>    global_var=<span class=\"hljs-number\">100</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">change_var</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在Intel x86处理器上，gdb默认显示汇编指令格式是AT&amp;T格式。例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) disassemble main<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %ebp<br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    %esp,%ebp<br>   <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax<br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %ebp<br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以用“set disassembly-flavor”命令将格式改为intel格式：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) set disassembly-flavor intel<br>(gdb) disassemble main<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   <span class=\"hljs-built_in\">ebp</span><br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-built_in\">ebp</span>,<span class=\"hljs-built_in\">esp</span><br>   <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-built_in\">eax</span>,<span class=\"hljs-number\">0x0</span><br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    <span class=\"hljs-built_in\">ebp</span><br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>目前“set disassembly-flavor”命令只能用在Intel x86处理器上，并且取值只有“intel”和“att”。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html\">gdb手册</a></p>\n<h5 id=\"在函数的第一条汇编指令打断点\"><a href=\"#在函数的第一条汇编指令打断点\" class=\"headerlink\" title=\"在函数的第一条汇编指令打断点\"></a>在函数的第一条汇编指令打断点</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> global_var;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change_var</span><span class=\"hljs-params\">()</span></span>&#123;<br>    global_var=<span class=\"hljs-number\">100</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">change_var</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通常给函数打断点的命令：“b func”（b是break命令的缩写），不会把断点设置在汇编指令层次函数的开头，例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) b main<br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x8050c12</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">9</span>.<br>(gdb) r<br>Starting program: /data1/<span class=\"hljs-meta\">nan</span>/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">9</span>           change_var()<span class=\"hljs-comment\">;</span><br>(gdb) disassemble<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %ebp<br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    %esp,%ebp<br>=&gt; <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax<br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %ebp<br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序停在了第三条汇编指令（箭头所指位置）。如果要把断点设置在汇编指令层次函数的开头，要使用如下命令：“b *func”，例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) b *main<br>Breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x8050c0f</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">8</span>.<br>(gdb) r<br>Starting program: /data1/<span class=\"hljs-meta\">nan</span>/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">8</span>       <span class=\"hljs-keyword\">int</span> main(void)&#123;<br>(gdb) disassemble<br>Dump of assembler code for function main:<br>=&gt; <span class=\"hljs-number\">0x08050c0f</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %ebp<br>   <span class=\"hljs-number\">0x08050c10</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    %esp,%ebp<br>   <span class=\"hljs-number\">0x08050c12</span> &lt;+<span class=\"hljs-number\">3</span>&gt;:     <span class=\"hljs-keyword\">call</span>   <span class=\"hljs-number\">0x8050c00</span> &lt;change_var&gt;<br>   <span class=\"hljs-number\">0x08050c17</span> &lt;+<span class=\"hljs-number\">8</span>&gt;:     <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax<br>   <span class=\"hljs-number\">0x08050c1c</span> &lt;+<span class=\"hljs-number\">13</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %ebp<br>   <span class=\"hljs-number\">0x08050c1d</span> &lt;+<span class=\"hljs-number\">14</span>&gt;:    <span class=\"hljs-keyword\">ret</span><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到程序停在了第一条汇编指令（箭头所指位置）。</p>\n<h5 id=\"自动反汇编后面要执行的代码\"><a href=\"#自动反汇编后面要执行的代码\" class=\"headerlink\" title=\"自动反汇编后面要执行的代码\"></a>自动反汇编后面要执行的代码</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) set disassemble-next-line on<br>(gdb) start <br>The program being debugged has been started already.<br>Start it from the beginning? (y or n) y<br>Temporary breakpoint 3 at 0x400543: file 1.c, line 14.<br>Starting program: /home/teawater/tmp/a.out <br><br>Temporary breakpoint 3, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14<br>14      printf(&quot;1\\n&quot;);<br>=&gt; 0x0000000000400543 &lt;main+19&gt;:    bf f0 05 40 00  mov    $0x4005f0,%edi<br>   0x0000000000400548 &lt;main+24&gt;:    e8 c3 fe ff ff  callq  0x400410 &lt;puts@plt&gt;<br>(gdb) si<br>0x0000000000400548  14      printf(&quot;1\\n&quot;);<br>0x0000000000400543 &lt;main+19&gt;:    bf f0 05 40 00  mov    $0x4005f0,%edi<br>=&gt; 0x0000000000400548 &lt;main+24&gt;:    e8 c3 fe ff ff  callq  0x400410 &lt;puts@plt&gt;<br>(gdb) <br>0x0000000000400410 in puts@plt ()<br>=&gt; 0x0000000000400410 &lt;puts@plt+0&gt;: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 &lt;puts@got.plt&gt;<br><br>(gdb) set disassemble-next-line auto <br>(gdb) start <br>Temporary breakpoint 1 at 0x400543: file 1.c, line 14.<br>Starting program: /home/teawater/tmp/a.out <br><br>Temporary breakpoint 1, main (argc=1, argv=0x7fffffffdf38, envp=0x7fffffffdf48) at 1.c:14<br>14      printf(&quot;1\\n&quot;);<br>(gdb) si<br>0x0000000000400548  14      printf(&quot;1\\n&quot;);<br>(gdb) <br>0x0000000000400410 in puts@plt ()<br>=&gt; 0x0000000000400410 &lt;puts@plt+0&gt;: ff 25 02 0c 20 00   jmpq   *0x200c02(%rip)        # 0x601018 &lt;puts@got.plt&gt;<br>(gdb) <br>0x0000000000400416 in puts@plt ()<br>=&gt; 0x0000000000400416 &lt;puts@plt+6&gt;: 68 00 00 00 00  pushq  $0x0<br></code></pre></td></tr></table></figure>\n\n<p>如果要在任意情况下反汇编后面要执行的代码：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">(gdb) <span class=\"hljs-keyword\">set</span> disassemble-<span class=\"hljs-keyword\">next</span>-<span class=\"hljs-built_in\">line</span> <span class=\"hljs-keyword\">on</span><br></code></pre></td></tr></table></figure>\n\n<p>如果要在后面的代码没有源码的情况下才反汇编后面要执行的代码：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">(gdb) set disassemble-next-line <span class=\"hljs-keyword\">auto</span><br></code></pre></td></tr></table></figure>\n\n<p>关闭这个功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">(gdb) set disassemble-next-line off<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"将源程序和汇编指令映射起来\"><a href=\"#将源程序和汇编指令映射起来\" class=\"headerlink\" title=\"将源程序和汇编指令映射起来\"></a>将源程序和汇编指令映射起来</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> a;<br>        <span class=\"hljs-type\">int</span> b;<br>        <span class=\"hljs-type\">int</span> c;<br>        <span class=\"hljs-type\">int</span> d;<br>&#125;ex_st;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>&#123;<br>        ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>可以用“disas &#x2F;m fun”（disas是disassemble命令缩写）命令将函数代码和汇编指令映射起来，以上面代码为例：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">(gdb) disas /m main<br>Dump of assembler code <span class=\"hljs-keyword\">for</span> function main:<br><span class=\"hljs-number\">11</span>      <span class=\"hljs-keyword\">int</span> main(void) &#123;<br>   <span class=\"hljs-number\">0x00000000004004c4</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %rbp<br>   <span class=\"hljs-number\">0x00000000004004c5</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     mov    %rsp,%rbp<br>   <span class=\"hljs-number\">0x00000000004004c8</span> &lt;+<span class=\"hljs-number\">4</span>&gt;:     <span class=\"hljs-keyword\">push</span>   %rbx<br>   <span class=\"hljs-number\">0x00000000004004c9</span> &lt;+<span class=\"hljs-number\">5</span>&gt;:     <span class=\"hljs-function\"><span class=\"hljs-keyword\">sub</span>    $0<span class=\"hljs-title\">x18</span>,%<span class=\"hljs-title\">rsp</span></span><br><span class=\"hljs-function\"></span><br><span class=\"hljs-function\">12              <span class=\"hljs-title\">ex_st</span> <span class=\"hljs-title\">st</span> = </span>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>   <span class=\"hljs-number\">0x00000000004004cd</span> &lt;+<span class=\"hljs-number\">9</span>&gt;:     movl   $0x1,-<span class=\"hljs-number\">0x20</span>(%rbp)<br>   <span class=\"hljs-number\">0x00000000004004d4</span> &lt;+<span class=\"hljs-number\">16</span>&gt;:    movl   $0x2,-<span class=\"hljs-number\">0x1c</span>(%rbp)<br>   <span class=\"hljs-number\">0x00000000004004db</span> &lt;+<span class=\"hljs-number\">23</span>&gt;:    movl   $0x3,-<span class=\"hljs-number\">0x18</span>(%rbp)<br>   <span class=\"hljs-number\">0x00000000004004e2</span> &lt;+<span class=\"hljs-number\">30</span>&gt;:    movl   $0x4,-<span class=\"hljs-number\">0x14</span>(%rbp)<br><br><span class=\"hljs-number\">13</span>              <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>   <span class=\"hljs-number\">0x00000000004004e9</span> &lt;+<span class=\"hljs-number\">37</span>&gt;:    mov    -<span class=\"hljs-number\">0x14</span>(%rbp),%esi<br>   <span class=\"hljs-number\">0x00000000004004ec</span> &lt;+<span class=\"hljs-number\">40</span>&gt;:    mov    -<span class=\"hljs-number\">0x18</span>(%rbp),%ecx<br>   <span class=\"hljs-number\">0x00000000004004ef</span> &lt;+<span class=\"hljs-number\">43</span>&gt;:    mov    -<span class=\"hljs-number\">0x1c</span>(%rbp),%edx<br>   <span class=\"hljs-number\">0x00000000004004f2</span> &lt;+<span class=\"hljs-number\">46</span>&gt;:    mov    -<span class=\"hljs-number\">0x20</span>(%rbp),%ebx<br>   <span class=\"hljs-number\">0x00000000004004f5</span> &lt;+<span class=\"hljs-number\">49</span>&gt;:    mov    $0x400618,%eax<br>   <span class=\"hljs-number\">0x00000000004004fa</span> &lt;+<span class=\"hljs-number\">54</span>&gt;:    mov    %esi,%r8d<br>   <span class=\"hljs-number\">0x00000000004004fd</span> &lt;+<span class=\"hljs-number\">57</span>&gt;:    mov    %ebx,%esi<br>   <span class=\"hljs-number\">0x00000000004004ff</span> &lt;+<span class=\"hljs-number\">59</span>&gt;:    mov    %rax,%rdi<br>   <span class=\"hljs-number\">0x0000000000400502</span> &lt;+<span class=\"hljs-number\">62</span>&gt;:    mov    $0<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">0</span>,%eax<br>   <span class=\"hljs-number\">0x0000000000400507</span> &lt;+<span class=\"hljs-number\">67</span>&gt;:    callq  <span class=\"hljs-number\">0x4003b8</span> &lt;<span class=\"hljs-keyword\">printf</span>@plt&gt;<br><br><span class=\"hljs-number\">14</span>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>   <span class=\"hljs-number\">0x000000000040050c</span> &lt;+<span class=\"hljs-number\">72</span>&gt;:    mov    $0<span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">0</span>,%eax<br><br><span class=\"hljs-number\">15</span>      &#125;<br>   <span class=\"hljs-number\">0x0000000000400511</span> &lt;+<span class=\"hljs-number\">77</span>&gt;:    add    $0x18,%rsp<br>   <span class=\"hljs-number\">0x0000000000400515</span> &lt;+<span class=\"hljs-number\">81</span>&gt;:    <span class=\"hljs-keyword\">pop</span>    %rbx<br>   <span class=\"hljs-number\">0x0000000000400516</span> &lt;+<span class=\"hljs-number\">82</span>&gt;:    leaveq<br>   <span class=\"hljs-number\">0x0000000000400517</span> &lt;+<span class=\"hljs-number\">83</span>&gt;:    retq<br><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到每一条C语句下面是对应的汇编代码。</p>\n<p>如果只想查看某一行所对应的地址范围，可以：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) i <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">13</span><br>Line <span class=\"hljs-number\">13</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">&quot;foo.c&quot;</span> starts <span class=\"hljs-keyword\">at</span> address <span class=\"hljs-number\">0x4004e9</span> &lt;main+<span class=\"hljs-number\">37</span>&gt; <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">ends</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x40050c</span> &lt;main+<span class=\"hljs-number\">72</span>&gt;.\t<br></code></pre></td></tr></table></figure>\n\n<p>如果只想查看这一条语句对应的汇编代码，可以使用“<code>disassemble [Start],[End]</code>”命令：</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\">(gdb) disassemble <span class=\"hljs-number\">0x4004e9</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">0x40050c</span><br>Dump of assembler code from <span class=\"hljs-number\">0x4004e9</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">0x40050c</span>:<br>   <span class=\"hljs-number\">0x00000000004004e9</span> &lt;main<span class=\"hljs-number\">+37</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">14</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%esi</span><br>   <span class=\"hljs-number\">0x00000000004004ec</span> &lt;main<span class=\"hljs-number\">+40</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">18</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%ecx</span><br>   <span class=\"hljs-number\">0x00000000004004ef</span> &lt;main<span class=\"hljs-number\">+43</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">1</span><span class=\"hljs-keyword\">c</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%edx</span><br>   <span class=\"hljs-number\">0x00000000004004f2</span> &lt;main<span class=\"hljs-number\">+46</span>&gt;:        mov    <span class=\"hljs-number\">-0</span><span class=\"hljs-keyword\">x</span><span class=\"hljs-number\">20</span>(<span class=\"hljs-variable\">%rbp</span>)<span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%ebx</span><br>   <span class=\"hljs-number\">0x00000000004004f5</span> &lt;main<span class=\"hljs-number\">+49</span>&gt;:        mov    $<span class=\"hljs-number\">0x400618</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%eax</span><br>   <span class=\"hljs-number\">0x00000000004004fa</span> &lt;main<span class=\"hljs-number\">+54</span>&gt;:        mov    <span class=\"hljs-variable\">%esi</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%r8d</span><br>   <span class=\"hljs-number\">0x00000000004004fd</span> &lt;main<span class=\"hljs-number\">+57</span>&gt;:        mov    <span class=\"hljs-variable\">%ebx</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%esi</span><br>   <span class=\"hljs-number\">0x00000000004004ff</span> &lt;main<span class=\"hljs-number\">+59</span>&gt;:        mov    <span class=\"hljs-variable\">%rax</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%rdi</span><br>   <span class=\"hljs-number\">0x0000000000400502</span> &lt;main<span class=\"hljs-number\">+62</span>&gt;:        mov    $<span class=\"hljs-number\">0x0</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-variable\">%eax</span><br>   <span class=\"hljs-number\">0x0000000000400507</span> &lt;main<span class=\"hljs-number\">+67</span>&gt;:        callq  <span class=\"hljs-number\">0x4003b8</span> &lt;printf<span class=\"hljs-title\">@plt</span>&gt;<br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html\">gdb手册</a></p>\n<h5 id=\"显示将要执行的汇编指令\"><a href=\"#显示将要执行的汇编指令\" class=\"headerlink\" title=\"显示将要执行的汇编指令\"></a>显示将要执行的汇编指令</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> global_var;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change_var</span><span class=\"hljs-params\">()</span></span>&#123;<br>    global_var=<span class=\"hljs-number\">100</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span>&#123;<br>    <span class=\"hljs-built_in\">change_var</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb调试汇编程序时，可以用“<code>display /i $pc</code>”命令显示当程序停止时，将要执行的汇编指令。以上面程序为例：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span><span class=\"hljs-symbol\">x400488:</span> file a.c, line <span class=\"hljs-number\">9</span>.<br>Starting progr<span class=\"hljs-symbol\">am:</span> /data2/home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.<span class=\"hljs-symbol\">c:9</span><br><span class=\"hljs-number\">9</span>           change_var();<br>(gdb) display /i $pc<br><span class=\"hljs-symbol\">1:</span> x/i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x400488 &lt;main+<span class=\"hljs-number\">4</span>&gt;<span class=\"hljs-symbol\">:</span>   mov    $<span class=\"hljs-number\">0</span>x0,%eax<br>(gdb) si<br><span class=\"hljs-number\">0</span>x000000000040048d      <span class=\"hljs-number\">9</span>           change_var();<br><span class=\"hljs-symbol\">1:</span> x/i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x40048d &lt;main+<span class=\"hljs-number\">9</span>&gt;<span class=\"hljs-symbol\">:</span>   callq  <span class=\"hljs-number\">0</span>x400474 &lt;change_var&gt;<br>(gdb)<br>change_var () at a.<span class=\"hljs-symbol\">c:4</span><br><span class=\"hljs-number\">4</span>       void change_var()&#123;<br><span class=\"hljs-symbol\">1:</span> x/i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x400474 &lt;change_var&gt;<span class=\"hljs-symbol\">:</span>       push   %rbp<br></code></pre></td></tr></table></figure>\n\n<p>可以看到打印出了将要执行的汇编指令。此外也可以一次显示多条指令：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">(gdb) display /<span class=\"hljs-number\">3</span>i $pc<br><span class=\"hljs-symbol\">2:</span> x/<span class=\"hljs-number\">3</span>i $pc<br>=&gt; <span class=\"hljs-number\">0</span>x400474 &lt;change_var&gt;<span class=\"hljs-symbol\">:</span>       push   %rbp<br>   <span class=\"hljs-number\">0</span>x400475 &lt;change_var+<span class=\"hljs-number\">1</span>&gt;<span class=\"hljs-symbol\">:</span>     mov    %rsp,%rbp<br>   <span class=\"hljs-number\">0</span>x400478 &lt;change_var+<span class=\"hljs-number\">4</span>&gt;<span class=\"hljs-symbol\">:</span>     movl   $<span class=\"hljs-number\">0</span>x64,<span class=\"hljs-number\">0</span>x2003de(%rip)        # <span class=\"hljs-number\">0</span>x600860 &lt;global_var&gt;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到一次显示了<code>3</code>条指令。</p>\n<p>取消显示可以用<code>undisplay</code>命令。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Auto-Display.html\">gdb手册</a></p>\n<h5 id=\"打印寄存器的值\"><a href=\"#打印寄存器的值\" class=\"headerlink\" title=\"打印寄存器的值\"></a>打印寄存器的值</h5><p>用gdb调试程序时，如果想查看寄存器的值，可以使用“i registers”命令（i是info命令缩写），例如:</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i registers<br><span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x7ffff7dd9f60</span>   <span class=\"hljs-number\">140737351884640</span><br><span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe608</span>   <span class=\"hljs-number\">140737488348680</span><br><span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe5f8</span>   <span class=\"hljs-number\">140737488348664</span><br><span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span><br><span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe510</span>   <span class=\"hljs-number\">0x7fffffffe510</span><br><span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe4c0</span>   <span class=\"hljs-number\">0x7fffffffe4c0</span><br><span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x7ffff7dd8300</span>   <span class=\"hljs-number\">140737351877376</span><br><span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x7ffff7deb9e0</span>   <span class=\"hljs-number\">140737351956960</span><br><span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe360</span>   <span class=\"hljs-number\">140737488348000</span><br><span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x7ffff7a68be0</span>   <span class=\"hljs-number\">140737348275168</span><br><span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span><br><span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe5f0</span>   <span class=\"hljs-number\">140737488348656</span><br><span class=\"hljs-built_in\">r14</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">r15</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">rip</span>            <span class=\"hljs-number\">0x4004cd</span> <span class=\"hljs-number\">0x4004cd</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;<br>eflags         <span class=\"hljs-number\">0x206</span>    [ PF IF ]<br><span class=\"hljs-built_in\">cs</span>             <span class=\"hljs-number\">0x33</span>     <span class=\"hljs-number\">51</span><br><span class=\"hljs-built_in\">ss</span>             <span class=\"hljs-number\">0x2b</span>     <span class=\"hljs-number\">43</span><br><span class=\"hljs-built_in\">ds</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">es</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">fs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br><span class=\"hljs-built_in\">gs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>以上输出不包括浮点寄存器和向量寄存器的内容。使用“i all-registers”命令，可以输出所有寄存器的内容：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i all-registers<br>\t<span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x7ffff7dd9f60</span>   <span class=\"hljs-number\">140737351884640</span><br>\t<span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe608</span>   <span class=\"hljs-number\">140737488348680</span><br>\t<span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe5f8</span>   <span class=\"hljs-number\">140737488348664</span><br>\t<span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span><br>\t<span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe510</span>   <span class=\"hljs-number\">0x7fffffffe510</span><br>\t<span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe4c0</span>   <span class=\"hljs-number\">0x7fffffffe4c0</span><br>\t<span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x7ffff7dd8300</span>   <span class=\"hljs-number\">140737351877376</span><br>\t<span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x7ffff7deb9e0</span>   <span class=\"hljs-number\">140737351956960</span><br>\t<span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe360</span>   <span class=\"hljs-number\">140737488348000</span><br>\t<span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x7ffff7a68be0</span>   <span class=\"hljs-number\">140737348275168</span><br>\t<span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span><br>\t<span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe5f0</span>   <span class=\"hljs-number\">140737488348656</span><br>\t<span class=\"hljs-built_in\">r14</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">r15</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">rip</span>            <span class=\"hljs-number\">0x4004cd</span> <span class=\"hljs-number\">0x4004cd</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;<br>\teflags         <span class=\"hljs-number\">0x206</span>    [ PF IF ]<br>\t<span class=\"hljs-built_in\">cs</span>             <span class=\"hljs-number\">0x33</span>     <span class=\"hljs-number\">51</span><br>\t<span class=\"hljs-built_in\">ss</span>             <span class=\"hljs-number\">0x2b</span>     <span class=\"hljs-number\">43</span><br>\t<span class=\"hljs-built_in\">ds</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">es</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">fs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">gs</span>             <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-built_in\">st0</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st1</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st2</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st3</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st4</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st5</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st6</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t<span class=\"hljs-built_in\">st7</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)<br>\t......<br></code></pre></td></tr></table></figure>\n\n<p>要打印单个寄存器的值，可以使用“i registers regname”或者“p $regname”，例如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">(gdb) i registers <span class=\"hljs-built_in\">eax</span><br><span class=\"hljs-built_in\">eax</span>            <span class=\"hljs-number\">0xf7dd9f60</span>       -<span class=\"hljs-number\">136470688</span><br>(gdb) p $<span class=\"hljs-built_in\">eax</span><br><span class=\"hljs-number\">$1</span> = -<span class=\"hljs-number\">136470688</span><br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Registers.html\">gdb手册</a>.</p>\n<h5 id=\"显示程序原始机器码\"><a href=\"#显示程序原始机器码\" class=\"headerlink\" title=\"显示程序原始机器码\"></a>显示程序原始机器码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello, world\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用“disassemble &#x2F;r”命令可以用16进制形式显示程序的原始机器码。以上面程序为例：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">(gdb) disassemble /r main<br>Dump of assembler code for function main:<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400530</span> &lt;+<span class=\"hljs-number\">0</span>&gt;:     <span class=\"hljs-number\">55</span>      push   %rbp<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400531</span> &lt;+<span class=\"hljs-number\">1</span>&gt;:     <span class=\"hljs-number\">48</span> <span class=\"hljs-number\">89</span> e5        mov    %rsp,%rbp<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400534</span> &lt;+<span class=\"hljs-number\">4</span>&gt;:     bf e<span class=\"hljs-number\">0 05 40 00</span>  mov    $<span class=\"hljs-number\">0x4005e0</span>,%edi<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400539</span> &lt;+<span class=\"hljs-number\">9</span>&gt;:     e8 d2 fe ff ff  callq  <span class=\"hljs-number\">0x400410</span> &lt;puts@plt&gt;<br>   <span class=\"hljs-number\">0</span>x000000000040053e &lt;+<span class=\"hljs-number\">14</span>&gt;:    b<span class=\"hljs-number\">8 00 00 00</span> <span class=\"hljs-number\">00</span>  mov    $<span class=\"hljs-number\">0</span>x0,%eax<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400543</span> &lt;+<span class=\"hljs-number\">19</span>&gt;:    <span class=\"hljs-number\">5d</span>      pop    %rbp<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400544</span> &lt;+<span class=\"hljs-number\">20</span>&gt;:    c3      retq<br>End of assembler dump.<br>(gdb) disassemble /r <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400534</span>,+<span class=\"hljs-number\">4</span><br>Dump of assembler code from <span class=\"hljs-number\">0x400534</span> to <span class=\"hljs-number\">0x400538</span>:<br>   <span class=\"hljs-number\">0</span>x00000<span class=\"hljs-number\">00000400534</span> &lt;main+<span class=\"hljs-number\">4</span>&gt;: bf e<span class=\"hljs-number\">0 05 40 00</span>  mov    $<span class=\"hljs-number\">0x4005e0</span>,%edi<br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html\">gdb手册</a></p>\n<h4 id=\"12、改变进程的执行\"><a href=\"#12、改变进程的执行\" class=\"headerlink\" title=\"12、改变进程的执行\"></a>12、改变进程的执行</h4><h5 id=\"改变字符串的值\"><a href=\"#改变字符串的值\" class=\"headerlink\" title=\"改变字符串的值\"></a>改变字符串的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">char</span> p1[] = <span class=\"hljs-string\">&quot;Sam&quot;</span>;<br>\t<span class=\"hljs-type\">char</span> *p2 = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br>\t<br>\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;p1 is %s, p2 is %s\\n&quot;</span>, p1, p2);<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p> 使用gdb调试程序时，可以用“<code>set</code>”命令改变字符串的值，以上面程序为例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x8050af0</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">5.</span><br>Starting program: /data1/<span class=\"hljs-keyword\">nan</span>/a <br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>               <span class=\"hljs-type\">char</span> p1[] = &quot;Sam&quot;;<br>(gdb) n<br><span class=\"hljs-number\">6</span>               <span class=\"hljs-type\">char</span> *p2 = &quot;Bob&quot;;<br>(gdb) <br><span class=\"hljs-number\">8</span>               printf(&quot;p1 is %s, p2 is %s\\n&quot;, p1, p2);<br>(gdb) <span class=\"hljs-keyword\">set</span> main::p1=&quot;Jil&quot;<br>(gdb) <span class=\"hljs-keyword\">set</span> main::p2=&quot;Bill&quot;<br>(gdb) n<br>p1 <span class=\"hljs-keyword\">is</span> Jil, p2 <span class=\"hljs-keyword\">is</span> Bill<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到执行<code>p1</code>和<code>p2</code>的字符串都发生了变化。也可以通过访问内存地址的方法改变字符串的值：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">Starting program: /data1/nan/a <br>[<span class=\"hljs-meta\">Thread debugging using libthread_db enabled</span>]<br>[<span class=\"hljs-meta\">New Thread 1 (LWP 1)</span>]<br>[<span class=\"hljs-meta\">Switching to Thread 1 (LWP 1)</span>]<br><br>Temporary breakpoint <span class=\"hljs-number\">2</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>               <span class=\"hljs-built_in\">char</span> p1[] = <span class=\"hljs-string\">&quot;Sam&quot;</span>;<br>(gdb) n<br><span class=\"hljs-number\">6</span>               <span class=\"hljs-built_in\">char</span> *p2 = <span class=\"hljs-string\">&quot;Bob&quot;</span>;<br>(gdb) p p1<br>$<span class=\"hljs-number\">1</span> = <span class=\"hljs-string\">&quot;Sam&quot;</span><br>(gdb) p &amp;p1<br>$<span class=\"hljs-number\">2</span> = (<span class=\"hljs-built_in\">char</span> (*)[<span class=\"hljs-number\">4</span>]) <span class=\"hljs-number\">0x80477a4</span><br>(gdb) <span class=\"hljs-keyword\">set</span> &#123;<span class=\"hljs-built_in\">char</span> [<span class=\"hljs-number\">4</span>]&#125; <span class=\"hljs-number\">0x80477a4</span> = <span class=\"hljs-string\">&quot;Ace&quot;</span><br>(gdb) n<br><span class=\"hljs-number\">8</span>               printf(<span class=\"hljs-string\">&quot;p1 is %s, p2 is %s\\n&quot;</span>, p1, p2);<br>(gdb) <br>p1 <span class=\"hljs-keyword\">is</span> Ace, p2 <span class=\"hljs-keyword\">is</span> Bob<br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>在改变字符串的值时候，一定要注意内存越界的问题。<br>参见<a href=\"http://stackoverflow.com/questions/19503057/in-gdb-how-can-i-write-a-string-to-memory\">stackoverflow</a>.</p>\n<h5 id=\"设置变量的值\"><a href=\"#设置变量的值\" class=\"headerlink\" title=\"设置变量的值\"></a>设置变量的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>;<br><br>    <span class=\"hljs-keyword\">return</span> i;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">0</span>;<br><br>    a = func();<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在gdb中，可以用“<code>set var variable=expr</code>”命令设置变量的值，以上面代码为例：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">Breakpoint <span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-title function_\">at</span> <span class=\"hljs-title function_\">a</span>.<span class=\"hljs-title function_\">c</span>:5<br><span class=\"hljs-number\">5</span>                   <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;</span><br>(gdb) n<br><span class=\"hljs-number\">7</span>                   <span class=\"hljs-keyword\">return</span> i<span class=\"hljs-comment\">;</span><br>(gdb) set var i = <span class=\"hljs-number\">8</span><br>(gdb) p i<br>$4 = <span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到在<code>func</code>函数里用<code>set</code>命令把<code>i</code>的值修改成为<code>8</code>。</p>\n<p>也可以用“<code>set &#123;type&#125;address=expr</code>”的方式，含义是给存储地址在<code>address</code>，变量类型为<code>type</code>的变量赋值，仍以上面代码为例：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">Breakpoint <span class=\"hljs-number\">2</span>, <span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-title function_\">at</span> <span class=\"hljs-title function_\">a</span>.<span class=\"hljs-title function_\">c</span>:5<br><span class=\"hljs-number\">5</span>                   <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;</span><br>(gdb) n<br><span class=\"hljs-number\">7</span>                   <span class=\"hljs-keyword\">return</span> i<span class=\"hljs-comment\">;</span><br>(gdb) p &amp;i<br>$5 = (<span class=\"hljs-built_in\">int</span> *) <span class=\"hljs-number\">0x8047a54</span><br>(gdb) set &#123;<span class=\"hljs-built_in\">int</span>&#125;<span class=\"hljs-number\">0x8047a54</span> = <span class=\"hljs-number\">8</span><br>(gdb) p i<br>$6 = <span class=\"hljs-number\">8</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到<code>i</code>的值被修改成为<code>8</code>。</p>\n<p>另外寄存器也可以作为变量，因此同样可以修改寄存器的值：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">Breakpoint <span class=\"hljs-number\">2</span>, func () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                   <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span>;<br>(gdb)<br>(gdb) n<br><span class=\"hljs-number\">7</span>                   <span class=\"hljs-keyword\">return</span> i;<br>(gdb)<br><span class=\"hljs-number\">8</span>               &#125;<br>(gdb) <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">var</span> $eax = <span class=\"hljs-number\">8</span><br>(gdb) <span class=\"hljs-function\">n</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">main</span> () at a.c:15</span><br><span class=\"hljs-function\">15                  <span class=\"hljs-title\">printf</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a</span>)</span>;<br>(gdb)<br><span class=\"hljs-number\">8</span><br><span class=\"hljs-number\">16</span>                  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>可以看到因为eax寄存器存储着函数的返回值，所以当把eax寄存器的值改为<code>8</code>后，函数的返回值也变成了<code>8</code>。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Assignment.html#Assignment\">gdb手册</a></p>\n<h5 id=\"修改PC寄存器的值\"><a href=\"#修改PC寄存器的值\" class=\"headerlink\" title=\"修改PC寄存器的值\"></a>修改PC寄存器的值</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;       <br>        <span class=\"hljs-type\">int</span> a =<span class=\"hljs-number\">0</span>;               <br><br>        a++;    <br>        a++;    <br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, a);      <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>PC寄存器会存储程序下一条要执行的指令，通过修改这个寄存器的值，可以达到改变程序执行流程的目的。<br>上面的程序会输出“<code>a=2</code>”，下面介绍一下如何通过修改PC寄存器的值，改变程序执行流程。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"hljs-number\">4</span>               int a =<span class=\"hljs-number\">0</span>;<br>(gdb) disassemble main<br>Dump <span class=\"hljs-keyword\">of</span> assembler code <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">function</span> main:<br><span class=\"hljs-number\">0x08050921</span> &lt;main+<span class=\"hljs-number\">0</span>&gt;:    push   <span class=\"hljs-meta\">%ebp</span><br><span class=\"hljs-number\">0x08050922</span> &lt;main+<span class=\"hljs-number\">1</span>&gt;:    mov    <span class=\"hljs-meta\">%esp</span>,<span class=\"hljs-meta\">%ebp</span><br><span class=\"hljs-number\">0x08050924</span> &lt;main+<span class=\"hljs-number\">3</span>&gt;:    sub    <span class=\"hljs-variable\">$0x8</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x08050927</span> &lt;main+<span class=\"hljs-number\">6</span>&gt;:    <span class=\"hljs-keyword\">and</span>    <span class=\"hljs-variable\">$0xfffffff0</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x0805092a</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;:    mov    <span class=\"hljs-variable\">$0x0</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x0805092f</span> &lt;main+<span class=\"hljs-number\">14</span>&gt;:   add    <span class=\"hljs-variable\">$0xf</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050932</span> &lt;main+<span class=\"hljs-number\">17</span>&gt;:   add    <span class=\"hljs-variable\">$0xf</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050935</span> &lt;main+<span class=\"hljs-number\">20</span>&gt;:   shr    <span class=\"hljs-variable\">$0x4</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050938</span> &lt;main+<span class=\"hljs-number\">23</span>&gt;:   shl    <span class=\"hljs-variable\">$0x4</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x0805093b</span> &lt;main+<span class=\"hljs-number\">26</span>&gt;:   sub    <span class=\"hljs-meta\">%eax</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x0805093d</span> &lt;main+<span class=\"hljs-number\">28</span>&gt;:   movl   <span class=\"hljs-variable\">$0x0</span>,-<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>)<br><span class=\"hljs-number\">0x08050944</span> &lt;main+<span class=\"hljs-number\">35</span>&gt;:   lea    -<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>),<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050947</span> &lt;main+<span class=\"hljs-number\">38</span>&gt;:   incl   (<span class=\"hljs-meta\">%eax</span>)<br><span class=\"hljs-number\">0x08050949</span> &lt;main+<span class=\"hljs-number\">40</span>&gt;:   lea    -<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>),<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x0805094c</span> &lt;main+<span class=\"hljs-number\">43</span>&gt;:   incl   (<span class=\"hljs-meta\">%eax</span>)<br><span class=\"hljs-number\">0x0805094e</span> &lt;main+<span class=\"hljs-number\">45</span>&gt;:   sub    <span class=\"hljs-variable\">$0x8</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x08050951</span> &lt;main+<span class=\"hljs-number\">48</span>&gt;:   pushl  -<span class=\"hljs-number\">0x4</span>(<span class=\"hljs-meta\">%ebp</span>)<br><span class=\"hljs-number\">0x08050954</span> &lt;main+<span class=\"hljs-number\">51</span>&gt;:   push   <span class=\"hljs-variable\">$0x80509b4</span><br><span class=\"hljs-number\">0x08050959</span> &lt;main+<span class=\"hljs-number\">56</span>&gt;:   call   <span class=\"hljs-number\">0x80507cc</span> &lt;printf@plt&gt;<br><span class=\"hljs-number\">0x0805095e</span> &lt;main+<span class=\"hljs-number\">61</span>&gt;:   add    <span class=\"hljs-variable\">$0x10</span>,<span class=\"hljs-meta\">%esp</span><br><span class=\"hljs-number\">0x08050961</span> &lt;main+<span class=\"hljs-number\">64</span>&gt;:   mov    <span class=\"hljs-variable\">$0x0</span>,<span class=\"hljs-meta\">%eax</span><br><span class=\"hljs-number\">0x08050966</span> &lt;main+<span class=\"hljs-number\">69</span>&gt;:   leave<br><span class=\"hljs-number\">0x08050967</span> &lt;main+<span class=\"hljs-number\">70</span>&gt;:   ret<br>End <span class=\"hljs-keyword\">of</span> assembler dump.<br>(gdb) info line <span class=\"hljs-number\">6</span><br>Line <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">&quot;a.c&quot;</span> starts <span class=\"hljs-keyword\">at</span> address <span class=\"hljs-number\">0x8050944</span> &lt;main+<span class=\"hljs-number\">35</span>&gt; <span class=\"hljs-keyword\">and</span> ends <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x8050949</span> &lt;main+<span class=\"hljs-number\">40</span>&gt;.<br>(gdb) info line <span class=\"hljs-number\">7</span><br>Line <span class=\"hljs-number\">7</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-string\">&quot;a.c&quot;</span> starts <span class=\"hljs-keyword\">at</span> address <span class=\"hljs-number\">0x8050949</span> &lt;main+<span class=\"hljs-number\">40</span>&gt; <span class=\"hljs-keyword\">and</span> ends <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x805094e</span> &lt;main+<span class=\"hljs-number\">45</span>&gt;.<br></code></pre></td></tr></table></figure>\n\n<p>通过“<code>info line 6</code>”和“<code>info line 7</code>”命令可以知道两条“<code>a++;</code>”语句的汇编指令起始地址分别是<code>0x8050944</code>和<code>0x8050949</code>。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">(gdb) n<br><span class=\"hljs-number\">6</span>               a++;<br>(gdb) p <span class=\"hljs-symbol\">$</span>pc<br><span class=\"hljs-meta\"><span class=\"hljs-keyword\">$3</span> = (void (*)()) 0x8050944 &lt;main+35&gt;</span><br>(gdb) <span class=\"hljs-keyword\">set</span> var <span class=\"hljs-comment\">$pc=0x08050949</span><br></code></pre></td></tr></table></figure>\n\n<p>当程序要执行第一条“<code>a++;</code>”语句时，打印<code>pc</code>寄存器的值，看到<code>pc</code>寄存器的值为<code>0x8050944</code>，与“<code>info line 6</code>”命令得到的一致。接下来，把<code>pc</code>寄存器的值改为<code>0x8050949</code>，也就是通过“<code>info line 7</code>”命令得到的第二条“<code>a++;</code>”语句的起始地址。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">(<span class=\"hljs-name\">gdb</span>) n<br><span class=\"hljs-number\">8</span>               printf(<span class=\"hljs-string\">&quot;a=%d\\n&quot;</span>, a)<span class=\"hljs-comment\">;</span><br>(<span class=\"hljs-name\">gdb</span>)<br>a=1<br><span class=\"hljs-number\">9</span>               return <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来执行，可以看到程序输出“<code>a=1</code>”，也就是跳过了第一条“<code>a++;</code>”语句。</p>\n<h5 id=\"跳转到指定位置执行\"><a href=\"#跳转到指定位置执行\" class=\"headerlink\" title=\"跳转到指定位置执行\"></a>跳转到指定位置执行</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span><br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;error&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>;<br><br>  fun (i--);<br>  fun (i--);<br>  fun (i--);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>当调试程序时，你可能不小心走过了出错的地方：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">(gdb) n<br><span class=\"hljs-number\">13</span>\t  <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">(i--)</span></span>;<br>(gdb) <br><span class=\"hljs-number\">14</span>\t  <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">(i--)</span></span>;<br>(gdb) <br><span class=\"hljs-number\">15</span>\t  <span class=\"hljs-function\"><span class=\"hljs-title\">fun</span> <span class=\"hljs-params\">(i--)</span></span>;<br>(gdb) <br>error<br><span class=\"hljs-number\">17</span>\t  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>看起来是在15行，调用fun的时候出错了。常见的办法是在15行设置个断点，然后从头<code>run</code>一次。</p>\n<p>如果你的环境支持反向执行，那么更好了。</p>\n<p>如果不支持，你也可以直接<code>jump</code>到15行，再执行一次：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">(gdb) <span class=\"hljs-keyword\">b </span><span class=\"hljs-number\">15</span><br><span class=\"hljs-keyword\">Breakpoint </span><span class=\"hljs-number\">2</span> <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">0x40056a</span>: file <span class=\"hljs-keyword\">jump.c, </span>line <span class=\"hljs-number\">15</span>.<br>(gdb) <span class=\"hljs-keyword\">j </span><span class=\"hljs-number\">15</span><br>Continuing <span class=\"hljs-built_in\">at</span> <span class=\"hljs-number\">0x40056a</span>.<br><br><span class=\"hljs-keyword\">Breakpoint </span><span class=\"hljs-number\">2</span>, main () <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">jump.c:15</span><br><span class=\"hljs-keyword\"></span><span class=\"hljs-number\">15</span>\t  fun (i--);<br>(gdb) s<br>fun (x=-<span class=\"hljs-number\">2</span>) <span class=\"hljs-built_in\">at</span> <span class=\"hljs-keyword\">jump.c:5</span><br><span class=\"hljs-keyword\"></span><span class=\"hljs-number\">5</span>\t  if (x &lt; <span class=\"hljs-number\">0</span>)<br>(gdb) n<br><span class=\"hljs-number\">6</span>\t    puts (<span class=\"hljs-string\">&quot;error&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<ol>\n<li><code>jump</code>命令只改变pc的值，所以改变程序执行可能会出现不同的结果，比如变量i的值</li>\n<li>通过（临时）断点的配合，可以让你的程序跳到指定的位置，并停下来</li>\n</ol>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Jumping.html#Jumping\">gdb手册</a></p>\n<h5 id=\"使用断点命令改变程序的执行\"><a href=\"#使用断点命令改变程序的执行\" class=\"headerlink\" title=\"使用断点命令改变程序的执行\"></a>使用断点命令改变程序的执行</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">drawing</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span><br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>  <span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> n;<br><br>  srand (time (<span class=\"hljs-number\">0</span>));<br>  n = rand () % <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Your number is %d\\n&quot;</span>, n);<br>  drawing (n);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个例子程序可能不太好，只是可以用来演示下断点命令的用法：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) b drawing<br>Breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x40064d</span>: file win.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">6.</span><br>(gdb) command <span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">Type</span> commands <span class=\"hljs-keyword\">for</span> breakpoint(s) <span class=\"hljs-number\">1</span>, one per <span class=\"hljs-type\">line</span>.<br><span class=\"hljs-keyword\">End</span> <span class=\"hljs-keyword\">with</span> a <span class=\"hljs-type\">line</span> saying just &quot;end&quot;.<br>&gt;silent<br>&gt;<span class=\"hljs-keyword\">set</span> variable n = <span class=\"hljs-number\">0</span><br>&gt;<span class=\"hljs-keyword\">continue</span><br>&gt;<span class=\"hljs-keyword\">end</span><br>(gdb) r<br>Starting program: /home/xmj/tmp/a.<span class=\"hljs-keyword\">out</span> <br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br><span class=\"hljs-keyword\">Using</span> host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.<br>Your number <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">6</span><br>You win <span class=\"hljs-meta\">$3000</span>!<br>[Inferior <span class=\"hljs-number\">1</span> (process <span class=\"hljs-number\">4134</span>) exited normally]<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，当程序运行到断点处，会自动把变量n的值修改为0，然后继续执行。</p>\n<p>如果你在调试一个大程序，重新编译一次会花费很长时间，比如调试编译器的bug，那么你可以用这种方式在gdb中先实验性的修改下试试，而不需要修改源码，重新编译。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Break-Commands.html#Break-Commands\">gdb手册</a></p>\n<h5 id=\"修改被调试程序的二进制文件\"><a href=\"#修改被调试程序的二进制文件\" class=\"headerlink\" title=\"修改被调试程序的二进制文件\"></a>修改被调试程序的二进制文件</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">drawing</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span><br>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-number\">0</span>)<br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>  <span class=\"hljs-keyword\">else</span><br>    <span class=\"hljs-built_in\">puts</span> (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>  <span class=\"hljs-type\">int</span> n;<br><br>  srand (time (<span class=\"hljs-number\">0</span>));<br>  n = rand () % <span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Your number is %d\\n&quot;</span>, n);<br>  drawing (n);<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure>\n\n<p>gdb不仅可以用来调试程序，还可以修改程序的二进制代码。</p>\n<p>缺省情况下，gdb是以只读方式加载程序的。可以通过命令行选项指定为可写：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">$ gcc -<span class=\"hljs-keyword\">write</span> ./a.<span class=\"hljs-keyword\">out</span><br>(gdb) <span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">write</span><br>Writing <span class=\"hljs-keyword\">into</span> executable <span class=\"hljs-keyword\">and</span> core files <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">on</span>.<br></code></pre></td></tr></table></figure>\n\n<p>也可以在gdb中，使用命令设置并重新加载程序：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">(gdb) <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">write</span> <span class=\"hljs-keyword\">on</span><br>(gdb) <span class=\"hljs-keyword\">file</span> ./a.<span class=\"hljs-keyword\">out</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来，查看反汇编：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">(gdb) disassemble /mr drawing <br>Dump of assembler code for function drawing:<br>5\t&#123;<br>   0x0000000000400642 <span class=\"hljs-variable\">&lt;+0&gt;</span>:\t55\tpush   %rbp<br>   0x0000000000400643 <span class=\"hljs-variable\">&lt;+1&gt;</span>:\t48 89 e5\tmov    %rsp,%rbp<br>   0x0000000000400646 <span class=\"hljs-variable\">&lt;+4&gt;</span>:\t48 83 ec 10\tsub    $0x10,%rsp<br>   0x000000000040064a <span class=\"hljs-variable\">&lt;+8&gt;</span>:\t89 7d fc\tmov    %edi,-0x4(%rbp)<br><br>6\t  if (n != 0)<br>   0x000000000040064d <span class=\"hljs-variable\">&lt;+11&gt;</span>:\t83 7d fc 00\tcmpl   $0x0,-0x4(%rbp)<br>   0x0000000000400651 <span class=\"hljs-variable\">&lt;+15&gt;</span>:\t74 0c\tje     0x40065f <span class=\"hljs-variable\">&lt;drawing+29&gt;</span><br><br>7\t    puts (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>   0x0000000000400653 <span class=\"hljs-variable\">&lt;+17&gt;</span>:\tbf e0 07 40 00\tmov    $0x4007e0,%edi<br>   0x0000000000400658 <span class=\"hljs-variable\">&lt;+22&gt;</span>:\te8 b3 fe ff ff\tcallq  0x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br>   0x000000000040065d <span class=\"hljs-variable\">&lt;+27&gt;</span>:\teb 0a\tjmp    0x400669 <span class=\"hljs-variable\">&lt;drawing+39&gt;</span><br><br>8\t  else<br>9\t    puts (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>   0x000000000040065f <span class=\"hljs-variable\">&lt;+29&gt;</span>:\tbf 12 08 40 00\tmov    $0x400812,%edi<br>   0x0000000000400664 <span class=\"hljs-variable\">&lt;+34&gt;</span>:\te8 a7 fe ff ff\tcallq  0x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br><br>10\t&#125;<br>   0x0000000000400669 <span class=\"hljs-variable\">&lt;+39&gt;</span>:\tc9\tleaveq <br>   0x000000000040066a <span class=\"hljs-variable\">&lt;+40&gt;</span>:\tc3\tretq   <br><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>修改二进制代码（注意大小端和指令长度）：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\">(gdb) <span class=\"hljs-built_in\">set</span> variable *(short*)<span class=\"hljs-number\">0</span>x400651=<span class=\"hljs-number\">0</span>x0ceb<br>(gdb) disassemble /mr drawing <br>Dump of assembler code <span class=\"hljs-keyword\">for</span> function drawing:<br><span class=\"hljs-number\">5</span>\t&#123;<br>   <span class=\"hljs-number\">0</span>x0000000000400642 <span class=\"hljs-variable\">&lt;+0&gt;</span>:\t<span class=\"hljs-number\">55</span>\tpush   %rbp<br>   <span class=\"hljs-number\">0</span>x0000000000400643 <span class=\"hljs-variable\">&lt;+1&gt;</span>:\t<span class=\"hljs-number\">48</span> <span class=\"hljs-number\">89</span> e5\tmov    %rsp,%rbp<br>   <span class=\"hljs-number\">0</span>x0000000000400646 <span class=\"hljs-variable\">&lt;+4&gt;</span>:\t<span class=\"hljs-number\">48</span> <span class=\"hljs-number\">83</span> ec <span class=\"hljs-number\">10</span>\tsub    <span class=\"hljs-variable\">$0x10</span>,%rsp<br>   <span class=\"hljs-number\">0</span>x000000000040064a <span class=\"hljs-variable\">&lt;+8&gt;</span>:\t<span class=\"hljs-number\">89</span> <span class=\"hljs-number\">7</span>d fc\tmov    %edi,-<span class=\"hljs-number\">0</span>x4(%rbp)<br><br><span class=\"hljs-number\">6</span>\t  if (n != <span class=\"hljs-number\">0</span>)<br>   <span class=\"hljs-number\">0</span>x000000000040064d <span class=\"hljs-variable\">&lt;+11&gt;</span>:\t<span class=\"hljs-number\">83</span> <span class=\"hljs-number\">7</span>d fc <span class=\"hljs-number\">00</span>\tcmpl   <span class=\"hljs-variable\">$0x0</span>,-<span class=\"hljs-number\">0</span>x4(%rbp)<br>   <span class=\"hljs-number\">0</span>x0000000000400651 <span class=\"hljs-variable\">&lt;+15&gt;</span>:\teb <span class=\"hljs-number\">0</span>c\tjmp    <span class=\"hljs-number\">0</span>x40065f <span class=\"hljs-variable\">&lt;drawing+29&gt;</span><br><br><span class=\"hljs-number\">7</span>\t    puts (<span class=\"hljs-string\">&quot;Try again?\\nAll you need is a dollar, and a dream.&quot;</span>);<br>   <span class=\"hljs-number\">0</span>x0000000000400653 <span class=\"hljs-variable\">&lt;+17&gt;</span>:\tbf e0 <span class=\"hljs-number\">07</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">00</span>\tmov    <span class=\"hljs-variable\">$0x4007e0</span>,%edi<br>   <span class=\"hljs-number\">0</span>x0000000000400658 <span class=\"hljs-variable\">&lt;+22&gt;</span>:\te8 b3 fe ff ff\tcallq  <span class=\"hljs-number\">0</span>x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br>   <span class=\"hljs-number\">0</span>x000000000040065d <span class=\"hljs-variable\">&lt;+27&gt;</span>:\teb <span class=\"hljs-number\">0</span>a\tjmp    <span class=\"hljs-number\">0</span>x400669 <span class=\"hljs-variable\">&lt;drawing+39&gt;</span><br><br><span class=\"hljs-number\">8</span>\t  else<br><span class=\"hljs-number\">9</span>\t    puts (<span class=\"hljs-string\">&quot;You win $3000!&quot;</span>);<br>   <span class=\"hljs-number\">0</span>x000000000040065f <span class=\"hljs-variable\">&lt;+29&gt;</span>:\tbf <span class=\"hljs-number\">12</span> <span class=\"hljs-number\">08</span> <span class=\"hljs-number\">40</span> <span class=\"hljs-number\">00</span>\tmov    <span class=\"hljs-variable\">$0x400812</span>,%edi<br>   <span class=\"hljs-number\">0</span>x0000000000400664 <span class=\"hljs-variable\">&lt;+34&gt;</span>:\te8 a7 fe ff ff\tcallq  <span class=\"hljs-number\">0</span>x400510 <span class=\"hljs-variable\">&lt;puts@plt&gt;</span><br><br><span class=\"hljs-number\">10</span>\t&#125;<br>   <span class=\"hljs-number\">0</span>x0000000000400669 <span class=\"hljs-variable\">&lt;+39&gt;</span>:\tc9\tleaveq <br>   <span class=\"hljs-number\">0</span>x000000000040066a <span class=\"hljs-variable\">&lt;+40&gt;</span>:\tc3\tretq   <br><br>End of assembler dump.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，条件跳转指令“je”已经被改为无条件跳转“jmp”了。</p>\n<p>退出，运行一下：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>./a.<span class=\"hljs-keyword\">out</span> <br>Your number is <span class=\"hljs-number\">2</span><br>You win <span class=\"hljs-variable\">$3000</span>!<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Patching.html#Patching\">gdb手册</a></p>\n<h4 id=\"13、信号\"><a href=\"#13、信号\" class=\"headerlink\" title=\"13、信号\"></a>13、信号</h4><h5 id=\"查看信号处理信息\"><a href=\"#查看信号处理信息\" class=\"headerlink\" title=\"查看信号处理信息\"></a>查看信号处理信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGINT, handler);<br>        signal(SIGALRM, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>i signals</code>”命令（或者“<code>i handle</code>”命令，<code>i</code>是<code>info</code>命令缩写）查看gdb如何处理进程收到的信号:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br><br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">Yes</span>             Hangup<br>SIGINT        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Interrupt<br>SIGQUIT       <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">Yes</span>             Quit<br><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br>SIGALRM       <span class=\"hljs-literal\">No</span>        <span class=\"hljs-literal\">No</span>      <span class=\"hljs-literal\">Yes</span>             Alarm<span class=\"hljs-built_in\"> clock</span><br><span class=\"hljs-built_in\"></span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br></code></pre></td></tr></table></figure>\n\n<p>第一项（<code>Signal</code>）：标示每个信号。<br>第二项（<code>Stop</code>）：表示被调试的程序有对应的信号发生时，gdb是否会暂停程序。<br>第三项（<code>Print</code>）：表示被调试的程序有对应的信号发生时，gdb是否会打印相关信息。<br>第四项（<code>Pass to program</code>）：gdb是否会把这个信号发给被调试的程序。<br>第五项（<code>Description</code>）：信号的描述信息。</p>\n<p>从上面的输出可以看到，当<code>SIGINT</code>信号发生时，gdb会暂停被调试的程序，并打印相关信息，但不会把这个信号发给被调试的程序。而当<code>SIGALRM</code>信号发生时，gdb不会暂停被调试的程序，也不打印相关信息，但会把这个信号发给被调试的程序。</p>\n<p>启动gdb调试上面的程序，同时另起一个终端，先后发送<code>SIGINT</code>和<code>SIGALRM</code>信号给被调试的进程，输出如下：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\">Program received <span class=\"hljs-keyword\">signal</span><span class=\"hljs-string\"> SIGINT</span>, Interrupt.<br><span class=\"hljs-number\">0xfeeeae55</span> <span class=\"hljs-keyword\">in</span> ___nanosleep () from /lib/libc.so<span class=\"hljs-number\">.1</span><br>(gdb) c<br>Continuing.<br>Receive <span class=\"hljs-keyword\">signal</span><span class=\"hljs-string\"></span>: <span class=\"hljs-number\">14</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到收到<code>SIGINT</code>时，程序暂停了，也输出了信号信息，但并没有把<code>SIGINT</code>信号交由进程处理（程序没有输出）。而收到<code>SIGALRM</code>信号时，程序没有暂停，也没有输出信号信息，但把<code>SIGALRM</code>信号交由进程处理了（程序打印了输出）。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"信号发生时是否暂停程序\"><a href=\"#信号发生时是否暂停程序\" class=\"headerlink\" title=\"信号发生时是否暂停程序\"></a>信号发生时是否暂停程序</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGHUP, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>handle signal stop/nostop</code>”命令设置当信号发生时，是否暂停程序的执行，以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行<code>continue</code>命令继续程序的执行。</p>\n<p>接下来用“<code>handle SIGHUP nostop</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不暂停程序，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nostop<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">No</span>        <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">Yes</span>             Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>Receive signal: 1<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，程序收到<code>SIGHUP</code>信号发生时，没有暂停，而是继续执行。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP stop</code>”命令即可。需要注意的是，设置<code>stop</code>的同时，默认也会设置<code>print</code>（关于<code>print</code>，请参见<a href=\"https://www.kancloud.cn/wizardforcel/gdb-tips-100/146797\">信号发生时是否打印信号信息</a>）。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"信号发生时是否打印信号信息\"><a href=\"#信号发生时是否打印信号信息\" class=\"headerlink\" title=\"信号发生时是否打印信号信息\"></a>信号发生时是否打印信号信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGHUP, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>handle signal print/noprint</code>”命令设置当信号发生时，是否打印信号信息，以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会暂停程序的执行，并打印收到信号的信息。此时需要执行<code>continue</code>命令继续程序的执行。</p>\n<p>接下来用“<code>handle SIGHUP noprint</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不打印信号信息，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP noprint <br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">No</span>        <span class=\"hljs-literal\">No</span>      <span class=\"hljs-literal\">Yes</span>             Hangup<br>(gdb) r<br>Starting program: /data1/nan/test <br>[Thread debugging using libthread_db enabled]<br>Receive signal: 1<br></code></pre></td></tr></table></figure>\n\n<p>需要注意的是，设置<code>noprint</code>的同时，默认也会设置<code>nostop</code>。可以看到，程序收到<code>SIGHUP</code>信号发生时，没有暂停，也没有打印信号信息。而是继续执行。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP print</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"信号发生时是否把信号给程序处理\"><a href=\"#信号发生时是否把信号给程序处理\" class=\"headerlink\" title=\"信号发生时是否把信号给程序处理\"></a>信号发生时是否把信号给程序处理</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span>;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sig)</span><br>&#123;<br>        signal(sig, handler);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Receive signal: %d\\n&quot;</span>, sig);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        signal(SIGHUP, handler);<br>        <br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)<br>        &#123;<br>                sleep(<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以用“<code>handle signal pass(noignore)/nopass(ignore)</code>”命令设置当信号发生时，是否把信号丢给程序处理.其中<code>pass</code>和<code>noignore</code>含义相同，<code>nopass</code>和<code>ignore</code>含义相同。以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会把信号丢给程序处理。</p>\n<p>接下来用“<code>handle SIGHUP nopass</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不把信号丢给程序处理，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nopass<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>0xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /lib/libc.so.1<br>(gdb) c<br>Continuing.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>SIGHUP</code>信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP pass</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"给程序发送信号\"><a href=\"#给程序发送信号\" class=\"headerlink\" title=\"给程序发送信号\"></a>给程序发送信号</h5><p>用gdb调试程序时，可以用“<code>handle signal pass(noignore)/nopass(ignore)</code>”命令设置当信号发生时，是否把信号丢给程序处理.其中<code>pass</code>和<code>noignore</code>含义相同，<code>nopass</code>和<code>ignore</code>含义相同。以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会把信号丢给程序处理。</p>\n<p>接下来用“<code>handle SIGHUP nopass</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不把信号丢给程序处理，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nopass<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>0xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /lib/libc.so.1<br>(gdb) c<br>Continuing.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>SIGHUP</code>信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP pass</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<p>用gdb调试程序时，可以用“<code>handle signal pass(noignore)/nopass(ignore)</code>”命令设置当信号发生时，是否把信号丢给程序处理.其中<code>pass</code>和<code>noignore</code>含义相同，<code>nopass</code>和<code>ignore</code>含义相同。以上面程序为例:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i signals <br>Signal        Stop      <span class=\"hljs-keyword\">Print</span>   Pass to program <span class=\"hljs-keyword\">Description</span><br><br>SIGHUP        Yes       Yes     Yes             Hangup<br>......<br><br>(gdb) r<br>Starting program: <span class=\"hljs-regexp\">/data1/</span>nan/test <br>[Thread debugging using libthread_db enabled]<br>[<span class=\"hljs-keyword\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Program received signal SIGHUP, Hangup.<br>[Switching to Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><span class=\"hljs-number\">0</span>xfeeeae55 in ___nanosleep () <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/lib/</span>libc.so.<span class=\"hljs-number\">1</span><br>(gdb) c<br>Continuing.<br>Receive signal: <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到，默认情况下，发生<code>SIGHUP</code>信号时，gdb会把信号丢给程序处理。</p>\n<p>接下来用“<code>handle SIGHUP nopass</code>”命令设置当<code>SIGHUP</code>信号发生时，gdb不把信号丢给程序处理，执行如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) handle SIGHUP nopass<br>Signal        Stop      <span class=\"hljs-built_in\">Print</span>   Pass <span class=\"hljs-keyword\">to</span> program Description<br>SIGHUP        <span class=\"hljs-literal\">Yes</span>       <span class=\"hljs-literal\">Yes</span>     <span class=\"hljs-literal\">No</span>              Hangup<br>(gdb) c<br>Continuing.<br><br>Program received signal SIGHUP, Hangup.<br>0xfeeeae55 <span class=\"hljs-keyword\">in</span> ___nanosleep () <span class=\"hljs-keyword\">from</span> /lib/libc.so.1<br>(gdb) c<br>Continuing.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>SIGHUP</code>信号发生时，程序没有打印“Receive signal: 1”，说明gdb没有把信号丢给程序处理。</p>\n<p>如果想恢复之前的行为，用“<code>handle SIGHUP pass</code>”命令即可。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Signals.html\">gdb手册</a>.</p>\n<h5 id=\"使用“-siginfo”变量\"><a href=\"#使用“-siginfo”变量\" class=\"headerlink\" title=\"使用“$_siginfo”变量\"></a>使用“$_siginfo”变量</h5><h4 id=\"14、共享库\"><a href=\"#14、共享库\" class=\"headerlink\" title=\"14、共享库\"></a>14、共享库</h4><h5 id=\"显示共享库链接信息\"><a href=\"#显示共享库链接信息\" class=\"headerlink\" title=\"显示共享库链接信息\"></a>显示共享库链接信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;hiredis/hiredis.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">1026</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>        redisContext *c = <span class=\"hljs-literal\">NULL</span>;<br>        <span class=\"hljs-type\">void</span> *reply = <span class=\"hljs-literal\">NULL</span>;<br><br>        <span class=\"hljs-built_in\">memset</span>(a, <span class=\"hljs-string\">&#x27;a&#x27;</span>, (<span class=\"hljs-keyword\">sizeof</span>(a) - <span class=\"hljs-number\">1</span>));<br>        c = redisConnect(<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>, <span class=\"hljs-number\">6379</span>);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> != c)<br>        &#123;<br>              reply = redisCommand(c, <span class=\"hljs-string\">&quot;set 1 %s&quot;</span>, a);<br>              freeReplyObject(reply);<br><br>              reply = redisCommand(c, <span class=\"hljs-string\">&quot;get 1&quot;</span>);<br>              freeReplyObject(reply);<br><br>              redisFree(c);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用”<code>info sharedlibrary regex</code>“命令可以显示程序加载的共享链接库信息，其中<code>regex</code>可以是正则表达式，意为显示名字符合<code>regex</code>的共享链接库。如果没有<code>regex</code>，则列出所有的库。以上面程序为例:</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x109f0: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting <span class=\"hljs-keyword\">program</span>: /<span class=\"hljs-keyword\">export</span>/home/nan/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                       char a[<span class=\"hljs-number\">1026</span>] = <span class=\"hljs-comment\">&#123;0&#125;</span>;<br>(gdb) info sharedlibrary<br>From        <span class=\"hljs-keyword\">To</span>          Syms <span class=\"hljs-keyword\">Read</span>   Shared <span class=\"hljs-keyword\">Object</span> <span class=\"hljs-keyword\">Library</span><br><span class=\"hljs-number\">0</span>xff3b44a0  <span class=\"hljs-number\">0</span>xff3e3490  Yes <span class=\"hljs-comment\">(*)     /usr/lib/ld.so.1</span><br><span class=\"hljs-comment\">0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11</span><br><span class=\"hljs-comment\">0xff3137f0  0xff31a9f4  Yes (*)</span>     /lib/libsocket.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff215fd4  <span class=\"hljs-number\">0</span>xff28545c  Yes <span class=\"hljs-comment\">(*)     /lib/libnsl.so.1</span><br><span class=\"hljs-comment\">0xff0a3a20  0xff14fedc  Yes (*)</span>     /lib/libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff320400  <span class=\"hljs-number\">0</span>xff3234c8  Yes <span class=\"hljs-comment\">(*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1</span><br><span class=\"hljs-comment\">(*)</span>: Shared <span class=\"hljs-keyword\">library</span> <span class=\"hljs-keyword\">is</span> missing debugging information.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到列出所有加载的共享链接库信息，带“<code>*</code>”表示库缺少调试信息。</p>\n<p>另外也可以使用正则表达式：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i sharedlibrary hiredi*<br><span class=\"hljs-keyword\">From</span>        To          Syms <span class=\"hljs-keyword\">Read</span>   Shared Object Library<br><span class=\"hljs-number\">0</span>xff3325f0  <span class=\"hljs-number\">0</span>xff33d4b4  Yes         <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/lib/</span>libhiredis.so.<span class=\"hljs-number\">0.11</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到只列出了一个库信息。<br>参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries\">gdb手册</a>.</p>\n<h4 id=\"15、脚本\"><a href=\"#15、脚本\" class=\"headerlink\" title=\"15、脚本\"></a>15、脚本</h4><h5 id=\"配置gdb-init文件\"><a href=\"#配置gdb-init文件\" class=\"headerlink\" title=\"配置gdb init文件\"></a>配置gdb init文件</h5><p>使用”<code>info sharedlibrary regex</code>“命令可以显示程序加载的共享链接库信息，其中<code>regex</code>可以是正则表达式，意为显示名字符合<code>regex</code>的共享链接库。如果没有<code>regex</code>，则列出所有的库。以上面程序为例:</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x109f0: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting <span class=\"hljs-keyword\">program</span>: /<span class=\"hljs-keyword\">export</span>/home/nan/a<br>[Thread debugging using libthread_db enabled]<br>[New Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>                       char a[<span class=\"hljs-number\">1026</span>] = <span class=\"hljs-comment\">&#123;0&#125;</span>;<br>(gdb) info sharedlibrary<br>From        <span class=\"hljs-keyword\">To</span>          Syms <span class=\"hljs-keyword\">Read</span>   Shared <span class=\"hljs-keyword\">Object</span> <span class=\"hljs-keyword\">Library</span><br><span class=\"hljs-number\">0</span>xff3b44a0  <span class=\"hljs-number\">0</span>xff3e3490  Yes <span class=\"hljs-comment\">(*)     /usr/lib/ld.so.1</span><br><span class=\"hljs-comment\">0xff3325f0  0xff33d4b4  Yes         /usr/local/lib/libhiredis.so.0.11</span><br><span class=\"hljs-comment\">0xff3137f0  0xff31a9f4  Yes (*)</span>     /lib/libsocket.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff215fd4  <span class=\"hljs-number\">0</span>xff28545c  Yes <span class=\"hljs-comment\">(*)     /lib/libnsl.so.1</span><br><span class=\"hljs-comment\">0xff0a3a20  0xff14fedc  Yes (*)</span>     /lib/libc.so.<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>xff320400  <span class=\"hljs-number\">0</span>xff3234c8  Yes <span class=\"hljs-comment\">(*)     /platform/SUNW,UltraAX-i2/lib/libc_psr.so.1</span><br><span class=\"hljs-comment\">(*)</span>: Shared <span class=\"hljs-keyword\">library</span> <span class=\"hljs-keyword\">is</span> missing debugging information.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到列出所有加载的共享链接库信息，带“<code>*</code>”表示库缺少调试信息。</p>\n<p>另外也可以使用正则表达式：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) i sharedlibrary hiredi*<br><span class=\"hljs-keyword\">From</span>        To          Syms <span class=\"hljs-keyword\">Read</span>   Shared Object Library<br><span class=\"hljs-number\">0</span>xff3325f0  <span class=\"hljs-number\">0</span>xff33d4b4  Yes         <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/lib/</span>libhiredis.so.<span class=\"hljs-number\">0.11</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到只列出了一个库信息。<br>参见<a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/Files.html#index-shared-libraries\">gdb手册</a>.</p>\n<h5 id=\"按何种方式解析脚本文件\"><a href=\"#按何种方式解析脚本文件\" class=\"headerlink\" title=\"按何种方式解析脚本文件\"></a>按何种方式解析脚本文件</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span></span><br><span class=\"hljs-class\">&#123;</span><br>        <span class=\"hljs-type\">int</span> a;<br>        <span class=\"hljs-type\">int</span> b;<br>        <span class=\"hljs-type\">int</span> c;<br>        <span class=\"hljs-type\">int</span> d;<br>&#125;ex_st;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d,%d,%d,%d\\n&quot;</span>, st.a, st.b, st.c, st.d);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>gdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。<br>gdb用“<code>set script-extension</code>”命令来决定按何种格式来解析脚本文件。它可以取3个值：<br>a）<code>off</code>：所有的脚本文件都解析成gdb的命令脚本；<br>b）<code>soft</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；<br>c）<code>strict</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；<br>以上面程序为例，进行调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) q<br>A debugging <span class=\"hljs-keyword\">session</span> <span class=\"hljs-keyword\">is</span> active.<br><br>        Inferior <span class=\"hljs-number\">1</span> [process <span class=\"hljs-number\">24249</span>] will be killed.<br><br>Quit anyway? (y <span class=\"hljs-keyword\">or</span> n) y<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb退出时，默认行为会提示用户是否退出。</p>\n<p>下面写一个脚本文件（<a href=\"http://gdb.py/\">gdb.py</a>），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br></code></pre></td></tr></table></figure>\n\n<p>再次开始调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) <span class=\"hljs-keyword\">show</span> script-<span class=\"hljs-keyword\">extension</span><br>Script filename <span class=\"hljs-keyword\">extension</span> recognition <span class=\"hljs-keyword\">is</span> &quot;soft&quot;.<br>(gdb) source gdb.py<br>  File &quot;gdb.py&quot;, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br>              ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure>\n\n<p>可以看到“<code>script-extension</code>”默认值是<code>soft</code>，接下来执行“<code>source gdb.py</code>”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。<br>再执行一次：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, line <span class=\"hljs-number\">12</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) set script-extension off<br>(gdb) source gdb.py<br>(gdb) <span class=\"hljs-string\">q</span><br><span class=\"hljs-string\">[root@linux:~]</span>$<br></code></pre></td></tr></table></figure>\n\n<p>这次把“<code>script-extension</code>”值改为<code>off</code>，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html\">gdb手册</a></p>\n<h5 id=\"保存历史命令\"><a href=\"#保存历史命令\" class=\"headerlink\" title=\"保存历史命令\"></a>保存历史命令</h5><p>gdb支持的脚本文件分为两种：一种是只包含gdb自身命令的脚本，例如“.gdbinit”文件，当gdb在启动时，就会执行“.gdbinit”文件中的命令；此外，gdb还支持其它一些语言写的脚本文件（比如python）。<br>gdb用“<code>set script-extension</code>”命令来决定按何种格式来解析脚本文件。它可以取3个值：<br>a）<code>off</code>：所有的脚本文件都解析成gdb的命令脚本；<br>b）<code>soft</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则就按命令脚本解析；<br>c）<code>strict</code>：根据脚本文件扩展名决定如何解析脚本。如果gdb支持解析这种脚本语言（比如python），就按这种语言解析，否则不解析；<br>以上面程序为例，进行调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) q<br>A debugging <span class=\"hljs-keyword\">session</span> <span class=\"hljs-keyword\">is</span> active.<br><br>        Inferior <span class=\"hljs-number\">1</span> [process <span class=\"hljs-number\">24249</span>] will be killed.<br><br>Quit anyway? (y <span class=\"hljs-keyword\">or</span> n) y<br></code></pre></td></tr></table></figure>\n\n<p>可以看到gdb退出时，默认行为会提示用户是否退出。</p>\n<p>下面写一个脚本文件（<a href=\"http://gdb.py/\">gdb.py</a>），但内容是一个gdb命令，不是真正的python脚本。用途是退出gdb时不提示：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\"><span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br></code></pre></td></tr></table></figure>\n\n<p>再次开始调试：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">12.</span><br>Starting program: /data2/home/nanxiao/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) <span class=\"hljs-keyword\">show</span> script-<span class=\"hljs-keyword\">extension</span><br>Script filename <span class=\"hljs-keyword\">extension</span> recognition <span class=\"hljs-keyword\">is</span> &quot;soft&quot;.<br>(gdb) source gdb.py<br>  File &quot;gdb.py&quot;, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">set</span> confirm <span class=\"hljs-keyword\">off</span><br>              ^<br>SyntaxError: invalid syntax<br></code></pre></td></tr></table></figure>\n\n<p>可以看到“<code>script-extension</code>”默认值是<code>soft</code>，接下来执行“<code>source gdb.py</code>”,会按照pyhton语言解析gdb.py文件，但是由于这个文件实质上是一个gdb命令脚本，所以解析出错。<br>再执行一次：</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs perl\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x4004cd</span>: file a.c, line <span class=\"hljs-number\">12</span>.<br>Starting program: <span class=\"hljs-regexp\">/data2/</span>home/nanxiao/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">12</span><br><span class=\"hljs-number\">12</span>              ex_st st = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>&#125;;<br>(gdb) set script-extension off<br>(gdb) source gdb.py<br>(gdb) <span class=\"hljs-string\">q</span><br><span class=\"hljs-string\">[root@linux:~]</span>$<br></code></pre></td></tr></table></figure>\n\n<p>这次把“<code>script-extension</code>”值改为<code>off</code>，所以脚本会按gdb命令脚本去解析，可以看到这次脚本命令生效了。</p>\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Extending-GDB.html\">gdb手册</a></p>\n<h4 id=\"16、源文件\"><a href=\"#16、源文件\" class=\"headerlink\" title=\"16、源文件\"></a>16、源文件</h4><h5 id=\"设置源文件查找路径\"><a href=\"#设置源文件查找路径\" class=\"headerlink\" title=\"设置源文件查找路径\"></a>设置源文件查找路径</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        <span class=\"hljs-type\">time_t</span> now = time(<span class=\"hljs-literal\">NULL</span>);<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">local</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">gmt</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>        localtime_r(&amp;now, &amp;local);<br>        gmtime_r(&amp;now, &amp;gmt);<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>有时gdb不能准确地定位到源文件的位置（比如文件被移走了，等等），此时可以用<code>directory</code>命令设置查找源文件的路径。以上面程序为例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x400560: <span class=\"hljs-keyword\">file</span> a.c, line <span class=\"hljs-number\">5</span>.<br>Starting program: <span class=\"hljs-regexp\">/home/</span>nan/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>       a.c: No such <span class=\"hljs-keyword\">file</span> or directory.<br>(gdb) directory ..<span class=\"hljs-regexp\">/ki/</span><br><span class=\"hljs-keyword\">Source</span> directories searched: <span class=\"hljs-regexp\">/home/</span>nan<span class=\"hljs-regexp\">/../</span>ki:$cdir:$cwd<br>(gdb) n<br><span class=\"hljs-number\">6</span>               struct tm local = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">7</span>               struct tm gmt = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">9</span>               localtime_r(&amp;now, &amp;local);<br>(gdb)<br><span class=\"hljs-number\">10</span>              gmtime_r(&amp;now, &amp;gmt);<br>(gdb) q<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，使用<code>directory</code>（或<code>dir</code>)命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。</p>\n<p>如果希望在gdb启动时，加载code的位置，避免每次在gdb中再次输入命令，可以使用gdb的<code>-d</code> 参数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gdb -q a.out -d /search/code/some <br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html\">gdb手册</a>.</p>\n<h5 id=\"替换查找源文件的目录\"><a href=\"#替换查找源文件的目录\" class=\"headerlink\" title=\"替换查找源文件的目录\"></a>替换查找源文件的目录</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> &#123;<br>        <span class=\"hljs-type\">time_t</span> now = time(<span class=\"hljs-literal\">NULL</span>);<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">local</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tm</span> <span class=\"hljs-title\">gmt</span> =</span> &#123;<span class=\"hljs-number\">0</span>&#125;;<br><br>        localtime_r(&amp;now, &amp;local);<br>        gmtime_r(&amp;now, &amp;gmt);<br><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>有时调试程序时，源代码文件可能已经移到其它的文件夹了。此时可以用<code>set substitute-path from to</code>命令设置新的文件夹（<code>to</code>）目录替换旧的（<code>from</code>）。以上面程序为例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x400560</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">5.</span><br>Starting program: /home/<span class=\"hljs-keyword\">nan</span>/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">5</span><br><span class=\"hljs-number\">5</span>       a.c: <span class=\"hljs-keyword\">No</span> such file <span class=\"hljs-keyword\">or</span> directory.<br>(gdb) <span class=\"hljs-keyword\">set</span> substitute-<span class=\"hljs-type\">path</span> /home/<span class=\"hljs-keyword\">nan</span> /home/ki<br>(gdb) n<br><span class=\"hljs-number\">6</span>                       struct tm <span class=\"hljs-keyword\">local</span> = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">7</span>                       struct tm gmt = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>(gdb)<br><span class=\"hljs-number\">9</span>                       localtime_r(&amp;now, &amp;<span class=\"hljs-keyword\">local</span>);<br>(gdb)<br><span class=\"hljs-number\">10</span>                      gmtime_r(&amp;now, &amp;gmt);<br>(gdb)<br><span class=\"hljs-number\">12</span>                      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br></code></pre></td></tr></table></figure>\n\n<p>调试时，因为源文件已经移到<code>/home/ki</code>这个文件夹下了，所以gdb找不到源文件。使用<code>set substitute-path /home/nan /home/ki</code>命令设置源文件的查找目录后，gdb就可以正常地解析源代码了。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html\">gdb手册</a>.</p>\n<h4 id=\"17、图形化界面\"><a href=\"#17、图形化界面\" class=\"headerlink\" title=\"17、图形化界面\"></a>17、图形化界面</h4><h5 id=\"进入和退出图形化调试界面\"><a href=\"#进入和退出图形化调试界面\" class=\"headerlink\" title=\"进入和退出图形化调试界面\"></a>进入和退出图形化调试界面</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>启动gdb时指定“<code>-tui</code>”参数（例如：<code>gdb -tui program</code>），或者运行gdb过程中使用“<code>Crtl+X+A</code>”组合键，都可以进入图形化调试界面。以调试上面程序为例：</p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs llvm\">   ┌──a.<span class=\"hljs-keyword\">c</span>──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j <span class=\"hljs-operator\">=</span> j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span><span class=\"hljs-punctuation\">,</span> j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      int main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>B+&gt;│<span class=\"hljs-number\">24</span>              fun<span class=\"hljs-number\">2</span>()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">25</span>              return <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;                                                                      │</span><br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   │<span class=\"hljs-number\">28</span>                                                                                             │<br>   │<span class=\"hljs-number\">29</span>                                                                                             │<br>   │<span class=\"hljs-number\">30</span>                                                                                             │<br>   │<span class=\"hljs-number\">31</span>                                                                                             │<br>   │<span class=\"hljs-number\">32</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">22141</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>Type <span class=\"hljs-string\">&quot;apropos word&quot;</span> <span class=\"hljs-keyword\">to</span> search for commands related <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">&quot;word&quot;</span>...<br>Reading symbols from a...done.<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x40052b</span>: file a.<span class=\"hljs-keyword\">c</span><span class=\"hljs-punctuation\">,</span> line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/nan/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span> main () at a.<span class=\"hljs-keyword\">c</span>:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，显示了当前的程序的进程号，将要执行的代码行号，<code>PC</code>寄存器的值。<br>退出图形化调试界面也是用“<code>Crtl+X+A</code>”组合键。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI.html\">gdb手册</a>.</p>\n<h5 id=\"显示汇编代码窗口\"><a href=\"#显示汇编代码窗口\" class=\"headerlink\" title=\"显示汇编代码窗口\"></a>显示汇编代码窗口</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb图形化调试界面时，可以使用“<code>layout asm</code>”命令显示汇编代码窗口。以调试上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">\t    ┌───────────────────────────────────────────────────────────────────────────────────────────────┐<br>  &gt;│<span class=\"hljs-number\">0x40052b</span> &lt;main+<span class=\"hljs-number\">4</span>&gt;               callq  <span class=\"hljs-number\">0x4004f3</span> &lt;fun2&gt;                                         │<br>   │<span class=\"hljs-number\">0x400530</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;               <span class=\"hljs-keyword\">mov</span>    <span class=\"hljs-number\">$0</span>x0,%eax                                               │<br>   │<span class=\"hljs-number\">0x400535</span> &lt;main+<span class=\"hljs-number\">14</span>&gt;              leaveq                                                         │<br>   │<span class=\"hljs-number\">0x400536</span> &lt;main+<span class=\"hljs-number\">15</span>&gt;              retq                                                           │<br>   │<span class=\"hljs-number\">0x400537</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x400538</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x400539</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053a</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053b</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053c</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053d</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053e</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x40053f</span>                        <span class=\"hljs-keyword\">nop</span>                                                            │<br>   │<span class=\"hljs-number\">0x400540</span> &lt;__libc_csu_fini&gt;      <span class=\"hljs-keyword\">repz</span> retq                                                      │<br>   │<span class=\"hljs-number\">0x400542</span>                        data16 data16 data16 data16 nopw %cs:<span class=\"hljs-number\">0x0</span>(%rax,%rax,<span class=\"hljs-number\">1</span>)          │<br>   │<span class=\"hljs-number\">0x400550</span> &lt;__libc_csu_init&gt;      <span class=\"hljs-keyword\">mov</span>    %rbp,-<span class=\"hljs-number\">0x28</span>(%rsp)                                        │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">44658</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40052b</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/<span class=\"hljs-meta\">nan</span>/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，显示了当前的程序的汇编代码。<br>如果既想显示源代码，又想显示汇编代码，可以使用“<code>layout split</code>”命令：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">   ┌──<span class=\"hljs-keyword\">a</span>.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>   │<span class=\"hljs-number\">25</span>              <span class=\"hljs-literal\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   │<span class=\"hljs-number\">28</span>                                                                                             │<br>   │<span class=\"hljs-number\">29</span>                                                                                             │<br>   │<span class=\"hljs-number\">30</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>  &gt;│<span class=\"hljs-number\">0x40052b</span> &lt;main+<span class=\"hljs-number\">4</span>&gt;       callq  <span class=\"hljs-number\">0x4004f3</span> &lt;fun2&gt;                                                 │<br>   │<span class=\"hljs-number\">0x400530</span> &lt;main+<span class=\"hljs-number\">9</span>&gt;       mov    $<span class=\"hljs-number\">0x0</span>,%eax                                                       │<br>   │<span class=\"hljs-number\">0x400535</span> &lt;main+<span class=\"hljs-number\">14</span>&gt;      leaveq                                                                 │<br>   │<span class=\"hljs-number\">0x400536</span> &lt;main+<span class=\"hljs-number\">15</span>&gt;      retq                                                                   │<br>   │<span class=\"hljs-number\">0x400537</span>                nop                                                                    │<br>   │<span class=\"hljs-number\">0x400538</span>                nop                                                                    │<br>   │<span class=\"hljs-number\">0x400539</span>                nop                                                                    │<br>   │<span class=\"hljs-number\">0x40053a</span>                nop                                                                    │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native <span class=\"hljs-built_in\">process</span> <span class=\"hljs-number\">44658</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><br>(gdb) <span class=\"hljs-built_in\">start</span><br>Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">0x40052b</span>: <span class=\"hljs-built_in\">file</span> <span class=\"hljs-keyword\">a</span>.c, <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">24.</span><br>Starting program: /home/nan/<span class=\"hljs-keyword\">a</span><br><br>Temporary <span class=\"hljs-built_in\">breakpoint</span> <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-keyword\">at</span> <span class=\"hljs-keyword\">a</span>.c:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到上面显示的是源代码，下面显示的是汇编代码。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html\">gdb手册</a>.</p>\n<h5 id=\"显示寄存器窗口\"><a href=\"#显示寄存器窗口\" class=\"headerlink\" title=\"显示寄存器窗口\"></a>显示寄存器窗口</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb图形化调试界面时，可以使用“<code>layout regs</code>”命令显示寄存器窗口。以调试上面程序为例：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">┌──Register group: general─────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x34e4590f60</span>     <span class=\"hljs-number\">227169341280</span>     <span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        │<br>│<span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        <span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe4b8</span>   <span class=\"hljs-number\">140737488348344</span>  │<br>│<span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe4a8</span>   <span class=\"hljs-number\">140737488348328</span>  <span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span>                        │<br>│<span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   │<br>│<span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x34e458f300</span>     <span class=\"hljs-number\">227169334016</span>     <span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x34e3a0e9f0</span>     <span class=\"hljs-number\">227157273072</span>     │<br>│<span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe210</span>   <span class=\"hljs-number\">140737488347664</span>  <span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x34e421ec20</span>     <span class=\"hljs-number\">227165727776</span>     │<br>│<span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span>                  <span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe4a0</span>   <span class=\"hljs-number\">140737488348320</span>  │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2()<span class=\"hljs-comment\">;                                                                        │</span><br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>Reading symbols from a...done.<br>(gdb) start<br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40052b</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/<span class=\"hljs-meta\">nan</span>/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，显示了通用寄存器的内容。<br>如果想查看浮点寄存器，可以使用“<code>tui reg float</code>”命令：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">┌──Register group: <span class=\"hljs-meta\">float</span>───────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-built_in\">st0</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st1</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st2</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st3</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st4</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st5</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>│<span class=\"hljs-built_in\">st6</span>            <span class=\"hljs-number\">0</span>        (raw <span class=\"hljs-number\">0x00000000000000000000</span>)                                              │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">16</span>              fun1()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>Temporary breakpoint <span class=\"hljs-number\">1</span> <span class=\"hljs-meta\">at</span> <span class=\"hljs-number\">0x40052b</span>: file a<span class=\"hljs-number\">.</span>c, line <span class=\"hljs-number\">24</span>.<br>Starting program: /home/<span class=\"hljs-meta\">nan</span>/a<br><br>Temporary breakpoint <span class=\"hljs-number\">1</span>, main () <span class=\"hljs-meta\">at</span> a<span class=\"hljs-number\">.</span>c:<span class=\"hljs-number\">24</span><br>(gdb) tui reg <span class=\"hljs-meta\">float</span><br></code></pre></td></tr></table></figure>\n\n<p>“<code>tui reg system</code>”命令显示系统寄存器：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">┌──Register group: system──────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-keyword\">orig_rax </span>      <span class=\"hljs-number\">0xffffffffffffffff</span>       -<span class=\"hljs-number\">1</span>                                                        │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>│                                                                                                  │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">16</span>              fun1()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">17</span>              <span class=\"hljs-keyword\">j++; </span>                                                                          │<br>   │<span class=\"hljs-number\">18</span>              <span class=\"hljs-keyword\">j </span>= <span class=\"hljs-keyword\">j </span>* <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, <span class=\"hljs-keyword\">j); </span>                                                            │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      int main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><br>Temporary <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-number\">1</span>, main () <span class=\"hljs-built_in\">at</span> a.c:<span class=\"hljs-number\">24</span><br>(gdb) tui reg system<br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>想切换回显示通用寄存器内容，可以使用“<code>tui reg general</code>”命令：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">┌──Register group: general─────────────────────────────────────────────────────────────────────────┐<br>│<span class=\"hljs-built_in\">rax</span>            <span class=\"hljs-number\">0x34e4590f60</span>     <span class=\"hljs-number\">227169341280</span>     <span class=\"hljs-built_in\">rbx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        │<br>│<span class=\"hljs-built_in\">rcx</span>            <span class=\"hljs-number\">0x0</span>      <span class=\"hljs-number\">0</span>                        <span class=\"hljs-built_in\">rdx</span>            <span class=\"hljs-number\">0x7fffffffe4b8</span>   <span class=\"hljs-number\">140737488348344</span>  │<br>│<span class=\"hljs-built_in\">rsi</span>            <span class=\"hljs-number\">0x7fffffffe4a8</span>   <span class=\"hljs-number\">140737488348328</span>  <span class=\"hljs-built_in\">rdi</span>            <span class=\"hljs-number\">0x1</span>      <span class=\"hljs-number\">1</span>                        │<br>│<span class=\"hljs-built_in\">rbp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-built_in\">rsp</span>            <span class=\"hljs-number\">0x7fffffffe3c0</span>   <span class=\"hljs-number\">0x7fffffffe3c0</span>   │<br>│<span class=\"hljs-built_in\">r8</span>             <span class=\"hljs-number\">0x34e458f300</span>     <span class=\"hljs-number\">227169334016</span>     <span class=\"hljs-built_in\">r9</span>             <span class=\"hljs-number\">0x34e3a0e9f0</span>     <span class=\"hljs-number\">227157273072</span>     │<br>│<span class=\"hljs-built_in\">r10</span>            <span class=\"hljs-number\">0x7fffffffe210</span>   <span class=\"hljs-number\">140737488347664</span>  <span class=\"hljs-built_in\">r11</span>            <span class=\"hljs-number\">0x34e421ec20</span>     <span class=\"hljs-number\">227165727776</span>     │<br>│<span class=\"hljs-built_in\">r12</span>            <span class=\"hljs-number\">0x4003e0</span> <span class=\"hljs-number\">4195296</span>                  <span class=\"hljs-built_in\">r13</span>            <span class=\"hljs-number\">0x7fffffffe4a0</span>   <span class=\"hljs-number\">140737488348320</span>  │<br>└──────────────────────────────────────────────────────────────────────────────────────────────────┘<br>   │<span class=\"hljs-number\">16</span>              fun1()<span class=\"hljs-comment\">;                                                                        │</span><br>   │<span class=\"hljs-number\">17</span>              j++<span class=\"hljs-comment\">;                                                                           │</span><br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span><span class=\"hljs-comment\">;                                                                     │</span><br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j)<span class=\"hljs-comment\">;                                                             │</span><br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(void)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">12552</span> <span class=\"hljs-keyword\">In</span>: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br>(gdb) tui reg general<br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html\">gdb手册</a>.</p>\n<h5 id=\"调整窗口大小\"><a href=\"#调整窗口大小\" class=\"headerlink\" title=\"调整窗口大小\"></a>调整窗口大小</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br><br>        i++;<br>        i = i * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fun2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;<br><br>        fun1();<br>        j++;<br>        j = j * <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        fun2();<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用gdb图形化调试界面时，可以使用“<code>winheight &lt;win_name&gt; [+ | -]count</code>”命令调整窗口大小（<code>winheight</code>缩写为<code>win</code>。<code>win_name</code>可以是<code>src</code>、<code>cmd</code>、<code>asm</code>和<code>regs</code>）。以调试上面程序为例，这是原始的<code>src</code>窗口大小：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++;                                                                           │<br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span>;                                                                     │<br>   │<span class=\"hljs-number\">19</span>              printf(&quot;%d\\n&quot;, j);                                                             │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>      <span class=\"hljs-type\">int</span> main(<span class=\"hljs-type\">void</span>)                                                                        <span class=\"hljs-number\">22</span><br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>   │<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>B+&gt;│<span class=\"hljs-number\">25</span>                                                                                             │<br>   │                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                            <span class=\"hljs-number\">32</span><br>   │                                                                                               │<br>   │                                                                                               │<br>   │                                                                                               │<br>   │                                                                                               │<br>   │                                                                                               │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">9667</span> <span class=\"hljs-keyword\">In</span>: main                                                <span class=\"hljs-type\">Line</span>: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0x40052b</span><br><span class=\"hljs-keyword\">Usage</span>: winheight &lt;win_name&gt; [+ | -] &lt;#lines&gt;<br>(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x40052b</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">24.</span><br>Starting program: /home/<span class=\"hljs-keyword\">nan</span>/a<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">24</span><br></code></pre></td></tr></table></figure>\n\n<p>执行“<code>winheight src -5</code>”命令后：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs d\">   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++;                                                                           │<br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span>;                                                                     │<br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);                                                             │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(<span class=\"hljs-keyword\">void</span>)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>   │<span class=\"hljs-number\">25</span>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">9667</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0</span>x40052b<br>Usage: winheight &lt;win_name&gt; [+ | -] &lt;<span class=\"hljs-meta\">#lines&gt;</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到窗口变小了。<br>接着执行“<code>winheight src +5</code>”命令：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs d\">   ┌──a.c──────────────────────────────────────────────────────────────────────────────────────────┐<br>   │<span class=\"hljs-number\">17</span>              j++;                                                                           │<br>   │<span class=\"hljs-number\">18</span>              j = j * <span class=\"hljs-number\">2</span>;                                                                     │<br>   │<span class=\"hljs-number\">19</span>              printf(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, j);                                                             │<br>   │<span class=\"hljs-number\">20</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">21</span>                                                                                             │<br>   │<span class=\"hljs-number\">22</span>      <span class=\"hljs-keyword\">int</span> main(<span class=\"hljs-keyword\">void</span>)                                                                         │<br>   │<span class=\"hljs-number\">23</span>      &#123;                                                                                      │<br>  &gt;│<span class=\"hljs-number\">24</span>              fun2();                                                                        │<br>   │<span class=\"hljs-number\">25</span>              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;                                                                      │<br>   │<span class=\"hljs-number\">26</span>      &#125;                                                                                      │<br>   │<span class=\"hljs-number\">27</span>                                                                                             │<br>   │<span class=\"hljs-number\">28</span>                                                                                             │<br>   │<span class=\"hljs-number\">29</span>                                                                                             │<br>   │<span class=\"hljs-number\">30</span>                                                                                             │<br>   │<span class=\"hljs-number\">31</span>                                                                                             │<br>   │<span class=\"hljs-number\">32</span>                                                                                             │<br>   └───────────────────────────────────────────────────────────────────────────────────────────────┘<br>native process <span class=\"hljs-number\">9667</span> In: main                                               Line: <span class=\"hljs-number\">24</span>   PC: <span class=\"hljs-number\">0</span>x40052b<br>Usage: winheight &lt;win_name&gt; [+ | -] &lt;<span class=\"hljs-meta\">#lines&gt;</span><br>(gdb)<br></code></pre></td></tr></table></figure>\n\n<p>可以看到窗口恢复了原样。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html\">gdb手册</a>.</p>\n<h4 id=\"18、其他\"><a href=\"#18、其他\" class=\"headerlink\" title=\"18、其他\"></a>18、其他</h4><h5 id=\"命令行选项的格式\"><a href=\"#命令行选项的格式\" class=\"headerlink\" title=\"命令行选项的格式\"></a>命令行选项的格式</h5><p>gdb的帮助信息和在线文档对于长选项的形式使用了不同的风格。你可能有点迷惑，gdb的长选项究竟应该是“-”，还是“–”？</p>\n<p>是的，这两种方式都可以。例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">$ gdb -help<br>$ gdb <span class=\"hljs-attr\">--help</span><br><br>$ gdb -args ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> c<br>$ gdb <span class=\"hljs-attr\">--args</span> ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> c<br></code></pre></td></tr></table></figure>\n\n<p>好吧，使用短的。</p>\n<h5 id=\"支持预处理器宏信息\"><a href=\"#支持预处理器宏信息\" class=\"headerlink\" title=\"支持预处理器宏信息\"></a>支持预处理器宏信息</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NAME <span class=\"hljs-string\">&quot;Joe&quot;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">&quot;Hello %s\\n&quot;</span>, NAME);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用<code>gcc -g</code>编译生成的程序，是不包含预处理器宏信息的：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) p <span class=\"hljs-type\">NAME</span><br><span class=\"hljs-keyword\">No</span> symbol &quot;NAME&quot; <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">current</span> context.<br></code></pre></td></tr></table></figure>\n\n<p>如果想在gdb中查看宏信息，可以使用<code>gcc -g3</code>进行编译：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) p <span class=\"hljs-type\">NAME</span><br><span class=\"hljs-meta\">$1</span> = &quot;Joe&quot;<br></code></pre></td></tr></table></figure>\n\n<p>关于预处理器宏的命令，参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Macros.html#Macros\">gdb手册</a></p>\n<h5 id=\"使用命令的缩写形式\"><a href=\"#使用命令的缩写形式\" class=\"headerlink\" title=\"使用命令的缩写形式\"></a>使用命令的缩写形式</h5><p>在gdb中，你不用必须输入完整的命令，只需命令的（前）几个字母即可。规则是，只要这个缩写不会和其它命令有歧义（注，是否有歧义，这个规则从文档上看不出，看起来需要查看gdb的源代码，或者在实际使用中进行总结）。也可以使用tab键进行命令补全。</p>\n<p>其中许多常用命令只使用第一个字母就可以，比如：</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-function\"><span class=\"hljs-title\">b</span> -&gt;</span> break<br><span class=\"hljs-function\"><span class=\"hljs-title\">c</span> -&gt;</span> continue<br><span class=\"hljs-function\"><span class=\"hljs-title\">d</span> -&gt;</span> delete<br><span class=\"hljs-function\"><span class=\"hljs-title\">f</span> -&gt;</span> frame<br><span class=\"hljs-function\"><span class=\"hljs-title\">i</span> -&gt;</span> info<br><span class=\"hljs-function\"><span class=\"hljs-title\">j</span> -&gt;</span> jump<br><span class=\"hljs-function\"><span class=\"hljs-title\">l</span> -&gt;</span> list<br><span class=\"hljs-function\"><span class=\"hljs-title\">n</span> -&gt;</span> next<br><span class=\"hljs-function\"><span class=\"hljs-title\">p</span> -&gt;</span> print<br><span class=\"hljs-function\"><span class=\"hljs-title\">r</span> -&gt;</span> run<br><span class=\"hljs-function\"><span class=\"hljs-title\">s</span> -&gt;</span> step<br><span class=\"hljs-function\"><span class=\"hljs-title\">u</span> -&gt;</span> <span class=\"hljs-keyword\">until</span><br></code></pre></td></tr></table></figure>\n\n<p>也有使用两个或几个字母的，比如：</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-function\"><span class=\"hljs-title\">aw</span> -&gt;</span> awatch<br><span class=\"hljs-function\"><span class=\"hljs-title\">bt</span> -&gt;</span> backtrace<br><span class=\"hljs-function\"><span class=\"hljs-title\">dir</span> -&gt;</span> directory<br><span class=\"hljs-function\"><span class=\"hljs-title\">disas</span> -&gt;</span> disassemble<br><span class=\"hljs-function\"><span class=\"hljs-title\">fin</span> -&gt;</span> finish<br><span class=\"hljs-function\"><span class=\"hljs-title\">ig</span> -&gt;</span> ignore<br><span class=\"hljs-function\"><span class=\"hljs-title\">ni</span> -&gt;</span> nexti<br><span class=\"hljs-function\"><span class=\"hljs-title\">rw</span> -&gt;</span> rwatch<br><span class=\"hljs-function\"><span class=\"hljs-title\">si</span> -&gt;</span> stepi<br><span class=\"hljs-function\"><span class=\"hljs-title\">tb</span> -&gt;</span> tbreak<br><span class=\"hljs-function\"><span class=\"hljs-title\">wa</span> -&gt;</span> watch<br><span class=\"hljs-function\"><span class=\"hljs-title\">win</span> -&gt;</span> winheight<br></code></pre></td></tr></table></figure>\n\n<p>另外，如果直接按回车键，会重复执行上一次的命令。</p>\n<h5 id=\"在GDB中执行shell命令和make\"><a href=\"#在GDB中执行shell命令和make\" class=\"headerlink\" title=\"在GDB中执行shell命令和make\"></a>在GDB中执行shell命令和make</h5><p>你可以不离开gdb，直接执行shell命令，比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">(gdb) <span class=\"hljs-keyword\">shell</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">ls</span></span><br></code></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">(gdb) !<span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<p>这里，”!”和命令之间不需要有空格（即，有也成）。</p>\n<p>特别是当你在构建环境(build目录)下调试程序的时候，可以直接运行make：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">(gdb) make CFLAGS<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;-g -O0&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Shell-Commands.html#Shell-Commands\">gdb手册</a></p>\n<h5 id=\"在GDB中执行cd和pwd命令\"><a href=\"#在GDB中执行cd和pwd命令\" class=\"headerlink\" title=\"在GDB中执行cd和pwd命令\"></a>在GDB中执行cd和pwd命令</h5><p>是的，gdb确实支持这两个命令，虽然我没有想到它们有什么特别的用处。</p>\n<p>也许，当你启动gdb之后，发现需要切换工作目录，但又不想退出gdb的时候：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">(gdb) pwd<br>Working directory <span class=\"hljs-regexp\">/home/</span>xmj.<br>(gdb) cd tmp<br>Working directory <span class=\"hljs-regexp\">/home/</span>xmj/tmp.<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Working-Directory.html#Working-Directory\">gdb手册</a></p>\n<h5 id=\"设置命令提示符\"><a href=\"#设置命令提示符\" class=\"headerlink\" title=\"设置命令提示符\"></a>设置命令提示符</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">gdb -q `<span class=\"hljs-built_in\">which</span> gdb`</span><br>Reading symbols from /home/xmj/install/binutils-gdb-git/bin/gdb...done.<br>(gdb) r -q<br>Starting program: /home/xmj/install/binutils-gdb-git/bin/gdb -q<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.<br>(gdb)<br><br><br></code></pre></td></tr></table></figure>\n\n<p> 当你用gdb来调试gdb的时候，通过设置命令提示符，可以帮助你区分这两个gdb：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">$ gdb -q `which gdb`<br>Reading symbols <span class=\"hljs-keyword\">from</span> <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/install/</span>binutils-gdb-git<span class=\"hljs-regexp\">/bin/g</span>db...done.<br>(gdb) set prompt (main gdb) <br>(main gdb) r -q<br>Starting program: <span class=\"hljs-regexp\">/home/</span>xmj<span class=\"hljs-regexp\">/install/</span>binutils-gdb-git<span class=\"hljs-regexp\">/bin/g</span>db -q<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class=\"hljs-string\">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.<br>(gdb) <br></code></pre></td></tr></table></figure>\n\n<p>注意，这里<code>set prompt (main gdb)</code>结尾处是有一个空格的。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Prompt.html#Prompt\">gdb手册</a></p>\n<h5 id=\"设置被调试程序的参数\"><a href=\"#设置被调试程序的参数\" class=\"headerlink\" title=\"设置被调试程序的参数\"></a>设置被调试程序的参数</h5><p>可以在gdb启动时，通过选项指定被调试程序的参数，例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">$ gdb -args ./<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> c<br></code></pre></td></tr></table></figure>\n\n<p>也可以在gdb中，通过命令来设置，例如：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">(gdb) set <span class=\"hljs-built_in\">args</span> a b c<br>(gdb) <span class=\"hljs-built_in\">show</span> <span class=\"hljs-built_in\">args</span><br>Argument list to give <span class=\"hljs-built_in\">program</span> being debugged when it <span class=\"hljs-built_in\">is</span> started <span class=\"hljs-built_in\">is</span> <span class=\"hljs-string\">&quot;a b c&quot;</span>.<br></code></pre></td></tr></table></figure>\n\n<p>也可以在运行程序时，直接指定：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">(gdb) r <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span><br>Starting program: /home/xmj/tmp/<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span><br>(gdb) show args<br>Argument list to give program being debugged when it is started is <span class=\"hljs-string\">&quot;a b&quot;</span>.<br>(gdb) r<br>Starting program: /home/xmj/tmp/<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.out</span> <span class=\"hljs-selector-tag\">a</span> <span class=\"hljs-selector-tag\">b</span> <br></code></pre></td></tr></table></figure>\n\n<p>可以看出，参数已经被保存了，下次运行时直接运行<code>run</code>命令，即可。</p>\n<p>有意的是，如果我接下来，想让参数为空，该怎么办？是的，直接：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">(gdb) <span class=\"hljs-built_in\">set</span> args<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Arguments.html#Arguments\">gdb手册</a></p>\n<h5 id=\"设置被调试程序的环境变量\"><a href=\"#设置被调试程序的环境变量\" class=\"headerlink\" title=\"设置被调试程序的环境变量\"></a>设置被调试程序的环境变量</h5><figure class=\"highlight vhdl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vhdl\">(gdb) u <span class=\"hljs-number\">309</span><br><span class=\"hljs-literal\">Warning</span>: couldn<span class=\"hljs-symbol\">&#x27;t</span> activate thread debugging using libthread_db: Cannot find <span class=\"hljs-keyword\">new</span> threads: <span class=\"hljs-keyword\">generic</span> <span class=\"hljs-literal\">error</span><br><span class=\"hljs-literal\">Warning</span>: couldn<span class=\"hljs-symbol\">&#x27;t</span> activate thread debugging using libthread_db: Cannot find <span class=\"hljs-keyword\">new</span> threads: <span class=\"hljs-keyword\">generic</span> <span class=\"hljs-literal\">error</span><br><span class=\"hljs-literal\">warning</span>: Unable <span class=\"hljs-keyword\">to</span> find libthread_db matching inferior<span class=\"hljs-symbol\">&#x27;s</span> thread <span class=\"hljs-keyword\">library</span>, thread debugging will <span class=\"hljs-keyword\">not</span> be available.<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在gdb中，可以通过命令<code>set env varname=value</code>来设置被调试程序的环境变量。对于上面的例子，网上可以搜到一些解决方法，其中一种方法就是设置LD_PRELOAD环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">set</span> <span class=\"hljs-built_in\">env</span> LD_PRELOAD=/lib/x86_64-linux-gnu/libpthread.so.0<br></code></pre></td></tr></table></figure>\n\n<p>注意，这个实际路径在不同的机器环境下可能不一样。把这个命令加到~&#x2F;.gdbinit文件中，就可以了。</p>\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Environment.html#Environment\">gdb手册</a></p>\n<h5 id=\"得到命令的帮助信息\"><a href=\"#得到命令的帮助信息\" class=\"headerlink\" title=\"得到命令的帮助信息\"></a>得到命令的帮助信息</h5><p>使用<code>help</code>命令可以得到gdb的命令帮助信息：</p>\n<p>（1）<code>help</code>命令不加任何参数会得到命令的分类：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">(gdb) help<br>List <span class=\"hljs-keyword\">of</span> classes <span class=\"hljs-keyword\">of</span> commands:<br><br>aliases <span class=\"hljs-comment\">-- Aliases of other commands</span><br>breakpoints <span class=\"hljs-comment\">-- Making program stop at certain points</span><br>data <span class=\"hljs-comment\">-- Examining data</span><br><span class=\"hljs-built_in\">files</span> <span class=\"hljs-comment\">-- Specifying and examining files</span><br>internals <span class=\"hljs-comment\">-- Maintenance commands</span><br>obscure <span class=\"hljs-comment\">-- Obscure features</span><br>running <span class=\"hljs-comment\">-- Running the program</span><br>stack <span class=\"hljs-comment\">-- Examining the stack</span><br>status <span class=\"hljs-comment\">-- Status inquiries</span><br>support <span class=\"hljs-comment\">-- Support facilities</span><br>tracepoints <span class=\"hljs-comment\">-- Tracing of program execution without stopping the program</span><br>user-defined <span class=\"hljs-comment\">-- User-defined commands</span><br><br>Type <span class=\"hljs-string\">&quot;help&quot;</span> followed <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">a</span> class name <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">a</span> list <span class=\"hljs-keyword\">of</span> commands <span class=\"hljs-keyword\">in</span> that class.<br>Type <span class=\"hljs-string\">&quot;help all&quot;</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> list <span class=\"hljs-keyword\">of</span> all commands.<br>Type <span class=\"hljs-string\">&quot;help&quot;</span> followed <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">command</span> <span class=\"hljs-title\">name</span> <span class=\"hljs-title\">for</span> <span class=\"hljs-title\">full</span> <span class=\"hljs-title\">documentation</span>.<br>Type <span class=\"hljs-string\">&quot;apropos word&quot;</span> <span class=\"hljs-built_in\">to</span> search <span class=\"hljs-keyword\">for</span> commands related <span class=\"hljs-built_in\">to</span> <span class=\"hljs-string\">&quot;word&quot;</span>.<br>Command name abbreviations are allowed <span class=\"hljs-keyword\">if</span> unambiguous.<br></code></pre></td></tr></table></figure>\n\n<p>（2）当输入<code>help class</code>命令时，可以得到这个类别下所有命令的列表和命令功能：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">(gdb) help data<br>Examining data.<br><br>List <span class=\"hljs-keyword\">of</span> commands:<br><br>append <span class=\"hljs-comment\">-- Append target code/data to a local file</span><br>append <span class=\"hljs-type\">binary</span> <span class=\"hljs-comment\">-- Append target code/data to a raw binary file</span><br>append <span class=\"hljs-type\">binary</span> memory <span class=\"hljs-comment\">-- Append contents of memory to a raw binary file</span><br>append <span class=\"hljs-type\">binary</span> <span class=\"hljs-keyword\">value</span> <span class=\"hljs-comment\">-- Append the value of an expression to a raw binary file</span><br>append memory <span class=\"hljs-comment\">-- Append contents of memory to a raw binary file</span><br>append <span class=\"hljs-keyword\">value</span> <span class=\"hljs-comment\">-- Append the value of an expression to a raw binary file</span><br><span class=\"hljs-keyword\">call</span> <span class=\"hljs-comment\">-- Call a function in the program</span><br>disassemble <span class=\"hljs-comment\">-- Disassemble a specified section of memory</span><br>display <span class=\"hljs-comment\">-- Print value of expression EXP each time the program stops</span><br>dump <span class=\"hljs-comment\">-- Dump target code/data to a local file</span><br>dump <span class=\"hljs-type\">binary</span> <span class=\"hljs-comment\">-- Write target code/data to a raw binary file</span><br>dump <span class=\"hljs-type\">binary</span> memory <span class=\"hljs-comment\">-- Write contents of memory to a raw binary file</span><br>dump <span class=\"hljs-type\">binary</span> <span class=\"hljs-keyword\">value</span> <span class=\"hljs-comment\">-- Write the value of an expression to a raw binary file</span><br>......<br></code></pre></td></tr></table></figure>\n\n<p>（3）也可以用<code>help command</code>命令得到某一个具体命令的用法：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">(gdb) <span class=\"hljs-keyword\">help</span> mem<br>Define attributes <span class=\"hljs-keyword\">for</span> memory region <span class=\"hljs-built_in\">or</span> reset memory region handling totarget-based.<br>Usage: mem auto<br>   mem &lt;<span class=\"hljs-keyword\">lo</span> addr&gt; &lt;<span class=\"hljs-keyword\">hi</span> addr&gt; [<span class=\"hljs-symbol\">&lt;mode&gt;</span> <span class=\"hljs-symbol\">&lt;width&gt;</span> <span class=\"hljs-symbol\">&lt;cache&gt;</span>],<br>where <span class=\"hljs-symbol\">&lt;mode&gt;</span>  may <span class=\"hljs-keyword\">be</span> rw (<span class=\"hljs-keyword\">read</span>/<span class=\"hljs-keyword\">write</span>), ro (<span class=\"hljs-keyword\">read</span>-<span class=\"hljs-keyword\">only</span>) <span class=\"hljs-built_in\">or</span> wo (<span class=\"hljs-keyword\">write</span>-<span class=\"hljs-keyword\">only</span>),<br>  <span class=\"hljs-symbol\">&lt;width&gt;</span> may <span class=\"hljs-keyword\">be</span> <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-built_in\">or</span> <span class=\"hljs-number\">64</span>, <span class=\"hljs-built_in\">and</span><br>  <span class=\"hljs-symbol\">&lt;cache&gt;</span> may <span class=\"hljs-keyword\">be</span> cache <span class=\"hljs-built_in\">or</span> nocache<br></code></pre></td></tr></table></figure>\n\n<p>（4）用<code>apropos regexp</code>命令查找所有符合<code>regexp</code>正则表达式的命令信息：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">(gdb) apropos set<br>awatch -- Set a watchpoint for an expression<br><span class=\"hljs-keyword\">b </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br><span class=\"hljs-keyword\">br </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br><span class=\"hljs-keyword\">bre </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br><span class=\"hljs-keyword\">brea </span>-- Set <span class=\"hljs-keyword\">breakpoint </span><span class=\"hljs-built_in\">at</span> specified line <span class=\"hljs-keyword\">or </span>function<br>......<br></code></pre></td></tr></table></figure>\n\n<p>详情参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Help.html\">gdb手册</a></p>\n<h5 id=\"记录执行DGB的过程\"><a href=\"#记录执行DGB的过程\" class=\"headerlink\" title=\"记录执行DGB的过程\"></a>记录执行DGB的过程</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;wchar.h&gt;</span></span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>        <span class=\"hljs-type\">char</span> str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br>        <span class=\"hljs-type\">wchar_t</span> str2[] = <span class=\"hljs-string\">L&quot;abcd&quot;</span>;<br>        <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>用gdb调试程序时，可以使用“<code>set logging on</code>”命令把执行gdb的过程记录下来，方便以后自己参考或是别人帮忙分析。默认的日志文件是“<code>gdb.txt</code>”，也可以用“<code>set logging file file</code>”改成别的名字。以上面程序为例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">(gdb) <span class=\"hljs-keyword\">set</span> logging file <span class=\"hljs-keyword\">log</span>.txt<br>(gdb) <span class=\"hljs-keyword\">set</span> logging <span class=\"hljs-keyword\">on</span><br>Copying output <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">log</span>.txt.<br>(gdb) <span class=\"hljs-keyword\">start</span><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0x8050abe</span>: file a.c, <span class=\"hljs-type\">line</span> <span class=\"hljs-number\">6.</span><br>Starting program: /data1/<span class=\"hljs-keyword\">nan</span>/a <br>[Thread debugging <span class=\"hljs-keyword\">using</span> libthread_db enabled]<br>[<span class=\"hljs-built_in\">New</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br>[Switching <span class=\"hljs-keyword\">to</span> Thread <span class=\"hljs-number\">1</span> (LWP <span class=\"hljs-number\">1</span>)]<br><br><span class=\"hljs-keyword\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">6</span>               <span class=\"hljs-type\">char</span> str1[] = &quot;abcd&quot;;<br>(gdb) n<br><span class=\"hljs-number\">7</span>               wchar_t str2[] = L&quot;abcd&quot;;<br>(gdb) x/s str1<br><span class=\"hljs-number\">0x804779f</span>:      &quot;abcd&quot;<br>(gdb) n       <br><span class=\"hljs-number\">9</span>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>(gdb) x/ws str2<br><span class=\"hljs-number\">0x8047788</span>:      U&quot;abcd&quot;<br>(gdb) q<br>A debugging <span class=\"hljs-keyword\">session</span> <span class=\"hljs-keyword\">is</span> active.<br><br>        Inferior <span class=\"hljs-number\">1</span> [process <span class=\"hljs-number\">9931</span>    ] will be killed.<br><br>Quit anyway? (y <span class=\"hljs-keyword\">or</span> n) y<br></code></pre></td></tr></table></figure>\n\n<p>执行完后，查看log.txt文件：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">bash</span>-<span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">2</span># cat log.txt <br><span class=\"hljs-attribute\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span> at <span class=\"hljs-number\">0</span>x8050abe: file a.c, line <span class=\"hljs-number\">6</span>.<br><span class=\"hljs-attribute\">Starting</span> program: /data1/nan/a <span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[Thread debugging using libthread_db enabled]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[New Thread 1 (LWP 1)]</span><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">[Switching to Thread 1 (LWP 1)]</span><br><br><span class=\"hljs-attribute\">Temporary</span> breakpoint <span class=\"hljs-number\">1</span>, main () at a.c:<span class=\"hljs-number\">6</span><br><span class=\"hljs-attribute\">6</span>               char str1[] = <span class=\"hljs-string\">&quot;abcd&quot;</span>;<br><span class=\"hljs-attribute\">7</span>               wchar_t str2[] = L<span class=\"hljs-string\">&quot;abcd&quot;</span>;<br><span class=\"hljs-attribute\">0x804779f</span>:      <span class=\"hljs-string\">&quot;abcd&quot;</span><br><span class=\"hljs-attribute\">9</span>               return <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-attribute\">0x8047788</span>:      U<span class=\"hljs-string\">&quot;abcd&quot;</span><br><span class=\"hljs-attribute\">A</span> debugging session is active.<br><br>        <span class=\"hljs-attribute\">Inferior</span> <span class=\"hljs-number\">1</span><span class=\"hljs-meta\"> [process 9931    ] will be killed.</span><br><span class=\"hljs-meta\"></span><br><span class=\"hljs-meta\">Quit anyway? (y or n)</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到log.txt详细地记录了gdb的执行过程。</p>\n<p>此外“<code>set logging overwrite on</code>”命令可以让输出覆盖之前的日志文件；而 “<code>set logging redirect on</code>”命令会让gdb的日志不会打印在终端。<br>参见<a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Logging-Output.html\">gdb手册</a>.</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.kancloud.cn/wizardforcel/gdb-tips-100/146720\">直接执行函数 · 100个gdb小技巧 · 看云 (kancloud.cn)</a></p>\n<!--[^2] : <100个GDB小技巧>-->\n\n<p>开源开发工具博客：<a href=\"https://hellogcc.github.io/\">Welcome to OSDT Blog | 开源开发工具技术博客（OSDT Blog） (hellogcc.github.io)</a><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;100个GDB小技巧&gt;<br><a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section></p>\n"},{"title":"《道德经》翻译","author":"Noodles","comments":1,"index_img":"/img/book.png","excerpt":"无论我们是否思人生，是否谈人生，我们都是在人生之中。在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。","date":"2022-09-22T02:00:00.000Z","updated":"2022-09-28T12:00:00.000Z","sticky":3,"_content":"\n《道德经》\n\n### 【第一章】\n\n#### 〖原文〗\n\n道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼（jiào）。此两者同出而异名，同谓之玄，玄之又玄，众妙之门。\n\n#### 〖译文〗\n\n#### 〖注〗\n\n【第二章】天下皆知美之为美，斯恶（è）已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和（hè），前后相随。是以圣人处无为之事，行不言之教，万物作焉而不辞，生而\n\n不有，为而不恃，功成而弗居。夫（fú）唯弗居，是以不去。 〖译文〗\n\n【第三章】不尚贤，使民不争；不贵难得之货，使民不为盗；不见（xiàn）可欲，使民心不乱。是以圣人\n\n之治，虚其心，实其腹；弱其志，强其骨。常使民无知无欲，使夫（fú）智者不敢为也。为无为，则无不\n\n治。 〖译文〗\n\n【第四章】道冲而用之或不盈，渊兮似万物之宗。挫其锐，解其纷，和其光，同其尘。湛兮似或存，吾不\n\n知谁之子，象帝之先。 〖译文〗\n\n【第五章】天地不仁，以万物为刍（chú）狗；圣人不仁，以百姓为刍狗。天地之间，其犹橐龠（tuó\n\nyuè）乎？虚而不屈，动而愈出。多言数（shuò）穷，不如守中。 〖译文〗\n\n【第六章】谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。 〖译文〗\n\n【第七章】天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人后其身而身先，外其身而\n\n身存。非以其无私邪（yé）？故能成其私。 〖译文〗\n\n【第八章】上善若水。水善利万物而不争，处众人之所恶（wù），故几（jī）于道。居善地，心善渊，与\n\n善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。 〖译文〗\n\n【第九章】持而盈之，不如其已。揣(chuǎi)而锐之，不可长保。金玉满堂，莫之能守。富贵而骄，自遗（\n\nyí）其咎。功成身退，天之道。 〖译文〗\n\n【第十章】载（zài）营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？爱民治国，能无\n\n知（zhì）乎？天门开阖（hé），能无雌乎？明白四达，能无为乎？生之、畜（xù）之，生而不有，为而不\n\n恃，长（zhǎng）而不宰，是谓玄德。 〖译文〗\n\n【第十一章】三十辐共一毂（gǔ），当其无，有车之用。埏埴（shān zhí）以为器，当其无，有器之用。\n\n凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。 〖译文〗\n\n【第十二章】 五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令\n\n人行妨。是以圣人为腹不为目，故去彼取此。 〖译文〗\n\n【第十三章】宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。何\n\n谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！故贵以身为天下，若可寄天下；爱以\n\n身为天下，若可托天下。 〖译文〗\n\n【第十四章】视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jié），故混（\n\nhùn）而为一。其上不皦（jiǎo皎），其下不昧。绳绳(mǐn mǐn )不可名，复归于无物，是谓无状之状，无\n\n物之象。是谓惚恍。迎之不见其首，随之不见其后。执古之道，以御今之有，能知古始，是谓道纪。 〖译文〗\n\n【第十五章】古之善为士者，微妙玄通，深不可识。夫唯不可识，故强(qiǎng)为之容。豫焉若冬涉川，犹\n\n兮若畏四邻，俨兮其若容，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。孰能浊以静之徐清\n\n？孰能安以久动之徐生？保此道者不欲盈，夫唯不盈，故能蔽不新成。 〖译文〗\n\n【第十六章】致虚极，守静笃（dǔ），万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复\n\n命。复命曰常，知常曰明，不知常，妄作，凶。知常容，容乃公，公乃王（wàng），王（wàng）乃天，天\n\n乃道，道乃久，没（mò）身不殆。 〖译文〗\n\n【第十七章】太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮\n\n其贵言。功成事遂，百姓皆谓我自然。 〖译文〗\n\n【第十八章】大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。 〖译文〗\n\n【第十九章】绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。此三者，以为文不足，\n\n故令有所属，见（xiàn）素抱朴，少私寡欲。 〖译文〗\n\n【第二十章】绝学无忧。唯之与阿（ē），相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮其\n\n未央哉！众人熙熙，如享太牢，如春登台。我独泊兮其未兆，如婴儿之未孩。傫傫（lěi）兮若无所归。众\n\n人皆有余，而我独若遗。我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。澹（\n\ndàn）兮其若海，飂（liù）兮若无止。众人皆有以，而我独顽似鄙。我独异于人，而贵食(sì)母。 〖译文〗\n\n【第二十一章】孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物\n\n。窈（yǎo）兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。吾何以知众甫之\n\n状哉？以此。 〖译文〗\n\n \n\n【第二十二章】曲则全，枉则直，洼则盈，敝则新，少则得，多则惑。是以圣人抱一，为天下式。不自见\n\n（xiàn）故明，不自是故彰，不自伐故有功，不自矜故长。夫唯不争，故天下莫能与之争。古之所谓曲则\n\n全者，岂虚言哉！诚全而归之。 〖译文〗\n\n \n\n【第二十三章】希言自然。故飘风不终朝（zhāo），骤雨不终日。孰为此者？天地。天地尚不能久，而况\n\n于人乎？故从事于道者，道者同于道，德者同于德，失者同于失。同于道者，道亦乐得之；同于德者，德\n\n亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。 〖译文〗\n\n \n\n【第二十四章】企者不立，跨者不行，自见（xiàn）者不明，自是者不彰，自伐者无功，自矜者不长。其\n\n在道也，曰余食赘（zhuì）行。物或恶（wù）之，故有道者不处（chǔ）。 〖译文〗\n\n \n\n【第二十五章】有物混（hùn）成，先天地生。寂兮寥兮，独立不改，周行而不殆，可以为天下母。吾不知\n\n其名，字之曰道，强(qiǎng)为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。域中\n\n有四大，而王居其一焉。人法地，地法天，天法道，道法自然。 〖译文〗\n\n \n\n【第二十六章】重为轻根，静为躁君。是以圣人终日行不离辎（zī）重。虽有荣观（guàn），燕处超然，\n\n奈何万乘（shèng）之主，而以身轻天下？轻则失本，躁则失君。 〖译文〗\n\n \n\n【第二十七章】善行无辙迹，善言无瑕谪(xiá zhé)，善数（shǔ）不用筹策，善闭无关楗（jiàn）而不可\n\n开，善结无绳约而不可解。是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。故善人者，\n\n不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。 〖译文〗\n\n \n\n【第二十八章】知其雄，守其雌，为天下溪。为天下溪，常德不离，复归于婴儿。知其白，守其黑，为天\n\n下式。为天下式，常德不忒（tè），复归于无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复\n\n归于朴。朴散则为器，圣人用之则为官长（zhǎng）。故大制不割。 〖译文〗\n\n \n\n【第二十九章】将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。故物或\n\n行或随，或歔（xū）或吹，或强或羸（léi），或挫或隳（huī）。是以圣人去甚，去奢，去泰。 〖译文〗\n\n \n\n【第三十章】以道佐人主者，不以兵强天下，其事好（hào）还。师之所处，荆棘生焉。大军之后，必有凶\n\n年。善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。物壮则老，是\n\n谓不道，不道早已。 〖译文〗\n\n \n\n【第三十一章】夫佳兵者，不祥之器。物或恶（wù）之，故有道者不处（chǔ）。君子居则贵左，用兵则贵\n\n右。兵者，不祥之器，非君子之器。不得已而用之，恬淡为上，胜而不美。而美之者，是乐(yào)杀人。夫\n\n乐(yào)杀人者，则不可以得志于天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧（\n\nsāng）礼处之。杀人之众，以哀悲泣之，战胜，以丧礼处之。 〖译文〗\n\n \n\n【第三十二章】道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民\n\n莫之令而自均。始制有名，名亦既有，夫亦将知止。知止可以不殆。譬道之在天下，犹川谷之于江海。 〖译文〗\n\n \n\n【第三十三章】知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志，不失其所者久，\n\n死而不亡者寿。 〖译文〗\n\n \n\n【第三十四章】大道泛兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主，常无欲，\n\n可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。 〖译文〗\n\n \n\n【第三十五章】执大象，天下往；往而不害，安平太。乐（yuè）与饵，过客止。道之出口，淡乎其无味，\n\n视之不足见（jiàn），听之不足闻，用之不足既。 〖译文〗\n\n \n\n【第三十六章】将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必\n\n固与之，是谓微明。柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。 〖译文〗\n\n \n\n【第三十七章】道常无为而无不为，侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名\n\n之朴，夫亦将无欲。不欲以静，天下将自定。 〖译文〗\n\n \n\n【第三十八章】上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德为之而有以为。\n\n上仁为之而无以为，上义为之而有以为，上礼为之而莫之应，则攘(rǎng)臂而扔之。故失道而后德，失德\n\n而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄(bó)而乱之首。前识者，道之华而愚之始。是以大\n\n丈夫处其厚，不居其薄(bó)；处其实，不居其华。故去彼取此。 〖译文〗\n\n \n\n【第三十九章】昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王\n\n得一以为天下贞。其致之。天无以清将恐裂，地无以宁将恐发（fèi，“发”通“废”），神无以灵将恐歇\n\n，谷无以盈将恐竭，万物无以生将恐灭，侯王无以贵高将恐蹶（jué）。故贵以贱为本，高以下为基。是以\n\n侯王自谓孤寡不穀（谷gǔ）。此非以贱为本邪（yé）？非乎？故致数（shuò）舆（yù）无舆。不欲琭（\n\nlù）琭如玉，珞（luò）珞如石。 〖译文〗\n\n \n\n【第四十章】反者，道之动；弱者，道之用。天下万物生于有，有生于无。 〖译文〗\n\n \n\n【第四十一章】 上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。故建\n\n言有之：明道若昧，进道若退，夷道若颣（lèi）。上德若谷，大白若辱，广德若不足，建德若偷，质真若\n\n渝（yú）。大方无隅（yú），大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。 〖译文〗\n\n \n\n【第四十二章】道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。人之所恶（wù），\n\n唯孤寡不穀（谷gǔ），而王公以为称（chēng）。故物，或损之而益，或益之而损。人之所教（jiào），我\n\n亦教之。强梁者不得其死，吾将以为教父。 〖译文〗\n\n \n\n【第四十三章】天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益\n\n，天下希及之。 〖译文〗\n\n \n\n【第四十四章】名与身孰亲？身与货孰多？得与亡孰病？ 是故甚爱必大费，多藏必厚亡。知足不辱，知止\n\n不殆，可以长久。 〖译文〗\n\n \n\n【第四十五章】大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若讷。躁胜寒，\n\n静胜热。清静为天下正。 〖译文〗\n\n \n\n【第四十六章】天下有道，却走马以粪；天下无道，戎马生于郊。祸莫大于不知足，咎莫大于欲得，故知\n\n足之足，常足矣。 〖译文〗\n\n \n\n【第四十七章】不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名\n\n，不为而成。 〖译文〗\n\n \n\n【第四十八章】为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常以无事，及其有\n\n事，不足以取天下。 〖译文〗\n\n \n\n【第四十九章】圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。信者，吾信之；\n\n不信者，吾亦信之，德信。圣人在天下歙歙（xīxī），为天下浑其心。（百姓皆注其耳目），圣人皆孩之。 〖译文〗\n\n【第五十章】出生入死。生之徒十有三，死之徒十有三。人之生动之死地，亦十有三。夫何故？以其生生\n\n之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被（pī）甲兵，兕无所投其角，虎无所措其爪（\n\nzhǎo），兵无所容其刃。夫何故？以其无死地。 〖译文〗\n\n \n\n【第五十一章】道生之，德畜（xù）之，物形之，势成之。是以万物莫不尊道而贵德。道之尊，德之贵，\n\n夫莫之命而常自然。故道生之，德畜之。长之、育之、亭之、毒之、养之、覆之。生而不有，为而不恃，\n\n长（zhǎng）而不宰，是谓玄德。 〖译文〗\n\n \n\n【第五十二章】天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没（mò）身不殆。\n\n塞（sè）其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见（jiàn）小曰明，守柔曰强。用其光\n\n，复归其明，无遗身殃，是为习常。 〖译文〗\n\n \n\n【第五十三章】使我介然有知，行于大道，唯施（迤yí）是畏。大道甚夷，而民好径。朝（cháo）甚除，\n\n田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！ 〖译文〗\n\n \n\n【第五十四章】善建者不拔，善抱者不脱，子孙以祭祀不辍。修之于身，其德乃真；修之于家，其德乃余\n\n；修之于乡，其德乃长（zhǎng）；修之于国，其德乃丰；修之于天下，其德乃普。故以身观身，以家观家\n\n，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。 〖译文〗\n\n \n\n【第五十五章】 含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫(shì)，猛兽不据，攫(jué)鸟不搏\n\n。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。知和曰常，知常\n\n曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。 〖译文〗\n\n \n\n【第五十六章】知（zhì）者不言，言者不知（zhì）。塞（sè）其兑，闭其门，挫其锐；解其纷，和其光\n\n，同其尘，是谓玄同。故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱\n\n，故为天下贵。 〖译文〗\n\n \n\n【第五十七章】以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。天下多忌讳，而民弥贫；\n\n民多利器，国家滋昏；人多伎（jì）巧，奇物滋起；法令滋彰，盗贼多有。故圣人云：“我无为而民自化\n\n，我好静而民自正，我无事而民自富，我无欲而民自朴。” 〖译文〗\n\n \n\n【第五十八章】其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？\n\n其无正。正复为奇，善复为妖，人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光\n\n而不耀。 〖译文〗\n\n \n\n【第五十九章】治人事天莫若啬（sè）。夫唯啬，是谓早服。早服谓之重(chóng)积德，重(chóng)积德则\n\n无不克，无不克则莫知其极，莫知其极，可以有国。有国之母，可以长久。是谓深根固柢（dǐ），长生久\n\n视之道。 〖译文〗\n\n \n\n【第六十章】治大国若烹小鲜。以道莅（lì）天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人\n\n，圣人亦不伤人。夫两不相伤，故德交归焉。 〖译文〗\n\n \n\n【第六十一章】大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。故大国以下小国，则取小\n\n国；小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜（xù）人，小国不过欲入事人，\n\n夫两者各得其所欲，大者宜为下。 〖译文〗\n\n \n\n【第六十二章】道者万物之奥，善人之宝，不善人之所保。美言可以市，尊行可以加人。人之不善，何弃\n\n之有！故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？不曰以求得，有罪\n\n以免邪（yé）？故为天下贵。 〖译文〗\n\n \n\n【第六十三章】为无为，事无事，味无味。大小多少，报怨以德。图难于其易，为大于其细。天下难事必\n\n作于易，天下大事必作于细，是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难，是以圣人犹\n\n难之。故终无难矣。 〖译文〗\n\n \n\n【第六十四章】其安易持，其未兆易谋，其脆易泮（pàn），其微易散。为之于未有，治之于未乱。合抱之\n\n木，生于毫末；九层之台，起于累土；千里之行，始于足下。为者败之，执者失之。是以圣人无为，故无\n\n败；无执，故无失。民之从事，常于几成而败之。慎终如始，则无败事。是以圣人欲不欲，不贵难得之货\n\n。学不学，复众人之所过。以辅万物之自然，而不敢为。 〖译文〗\n\n \n\n【第六十五章】古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以\n\n智治国，国之福。知此两者，亦稽（jī）式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃\n\n至大顺。 〖译文〗\n\n \n\n【第六十六章】江海所以能为百谷王者，以其善下之，故能为百谷王。是以欲上民，必以言下之；欲先民\n\n，必以身后之。是以圣人处上而民不重，处前而民不害，是以天下乐推而不厌。以其不争，故天下莫能与\n\n之争。 〖译文〗\n\n \n\n【第六十七章】天下皆谓我道大，似不肖（xiào）。夫唯大，故似不肖。若肖，久矣其细也夫。我有三宝\n\n，持而保之。一曰慈，二曰俭，三曰不敢为天下先。慈，故能勇；俭，故能广；不敢为天下先，故能成器\n\n长（zhǎng）。今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固，天将救之，以慈卫\n\n之。 〖译文〗\n\n \n\n【第六十八章】善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。是谓不争之德，是谓用人\n\n之力，是谓配天古之极。 〖译文〗\n\n \n\n【第六十九章】用兵有言，吾不敢为主而为客，不敢进寸而退尺。是谓行（xíng）无行（háng），攘\n\n(rǎng)无臂，扔无敌，执无兵。祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。 〖译文〗\n\n \n\n【第七十章】吾言甚易知，甚易行，天下莫能知，莫能行。言有宗，事有君。夫唯无知，是以不我知。知\n\n我者希，则我者贵，是以圣人被（pī，“被”同“披”）褐怀玉。 〖译文〗\n\n \n\n【第七十一章】知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。 〖译文〗\n\n \n\n【第七十二章】民不畏威，则大威至。无狎（xiá）其所居，无厌（yà，“厌”同“压”）其所生。夫唯不\n\n厌（yà，“厌”同“压”），是以不厌(yàn)。是以圣人自知，不自见（xiàn）；自爱，不自贵。故去彼取\n\n此。 〖译文〗\n\n \n\n【第七十三章】勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶（wù），孰知其故？是以圣人\n\n犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟（chǎn）然而善谋。天网恢恢，疏而不失。 〖译文〗\n\n \n\n【第七十四章】民不畏死，奈何以死惧之！若使民常畏死，而为奇者，吾得执而杀之，孰敢？常有司杀者\n\n杀，夫代司杀者杀，是谓代大匠斫（zhuó）。夫代大匠斫者，希有不伤其手矣。 〖译文〗\n\n \n\n【第七十五章】民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。民之轻死，以\n\n其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。 〖译文〗\n\n \n\n【第七十六章】人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。故坚强者死之徒，柔弱\n\n者生之徒。是以兵强则不胜，木强则兵。强大处下，柔弱处上。 〖译文〗\n\n \n\n【第七十七章】天之道，其犹张弓与！高者抑之，下者举之；有余者损之，不足者补之。天之道，损有余\n\n而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。是以圣人为而不恃，功成而\n\n不处，其不欲见（xiàn）贤。 〖译文〗\n\n \n\n【第七十八章】天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之。弱之胜强，柔之胜刚，天下莫不知\n\n，莫能行。是以圣人云，受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。 〖译文〗\n\n \n\n【第七十九章】和大怨，必有余怨，安可以为善？是以圣人执左契，而不责于人。有德司契，无德司彻。\n\n天道无亲，常与善人。 〖译文〗\n\n \n\n【第八十章】小国寡民，使有什伯（bǎi）之器而不用，使民重（zhòng）死而不远徙(xí)。虽有舟舆，无\n\n所乘之；虽有甲兵，无所陈之；使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡犬\n\n之声相闻，民至老死不相往来。 〖译文〗\n\n \n\n【第八十一章】信言不美，美言不信；善者不辩，辩者不善；知（zhì）者不博，博者不知（zhì）。圣人\n\n不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害。圣人之道，为而不争。〖译文〗","source":"_posts/读书笔记/《道德经》翻译.md","raw":"---\ntitle: 《道德经》翻译\ncategories: 读书笔记\ntags: 哲学\nauthor: Noodles\ncomments: true\nindex_img: /img/book.png\nexcerpt: 无论我们是否思人生，是否谈人生，我们都是在人生之中。在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。\ndate: 2022-09-22 10:00:00\nupdated: 2022-09-28 20:00:00\nsticky: 3\n---\n\n《道德经》\n\n### 【第一章】\n\n#### 〖原文〗\n\n道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼（jiào）。此两者同出而异名，同谓之玄，玄之又玄，众妙之门。\n\n#### 〖译文〗\n\n#### 〖注〗\n\n【第二章】天下皆知美之为美，斯恶（è）已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和（hè），前后相随。是以圣人处无为之事，行不言之教，万物作焉而不辞，生而\n\n不有，为而不恃，功成而弗居。夫（fú）唯弗居，是以不去。 〖译文〗\n\n【第三章】不尚贤，使民不争；不贵难得之货，使民不为盗；不见（xiàn）可欲，使民心不乱。是以圣人\n\n之治，虚其心，实其腹；弱其志，强其骨。常使民无知无欲，使夫（fú）智者不敢为也。为无为，则无不\n\n治。 〖译文〗\n\n【第四章】道冲而用之或不盈，渊兮似万物之宗。挫其锐，解其纷，和其光，同其尘。湛兮似或存，吾不\n\n知谁之子，象帝之先。 〖译文〗\n\n【第五章】天地不仁，以万物为刍（chú）狗；圣人不仁，以百姓为刍狗。天地之间，其犹橐龠（tuó\n\nyuè）乎？虚而不屈，动而愈出。多言数（shuò）穷，不如守中。 〖译文〗\n\n【第六章】谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。 〖译文〗\n\n【第七章】天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人后其身而身先，外其身而\n\n身存。非以其无私邪（yé）？故能成其私。 〖译文〗\n\n【第八章】上善若水。水善利万物而不争，处众人之所恶（wù），故几（jī）于道。居善地，心善渊，与\n\n善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。 〖译文〗\n\n【第九章】持而盈之，不如其已。揣(chuǎi)而锐之，不可长保。金玉满堂，莫之能守。富贵而骄，自遗（\n\nyí）其咎。功成身退，天之道。 〖译文〗\n\n【第十章】载（zài）营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？爱民治国，能无\n\n知（zhì）乎？天门开阖（hé），能无雌乎？明白四达，能无为乎？生之、畜（xù）之，生而不有，为而不\n\n恃，长（zhǎng）而不宰，是谓玄德。 〖译文〗\n\n【第十一章】三十辐共一毂（gǔ），当其无，有车之用。埏埴（shān zhí）以为器，当其无，有器之用。\n\n凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。 〖译文〗\n\n【第十二章】 五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令\n\n人行妨。是以圣人为腹不为目，故去彼取此。 〖译文〗\n\n【第十三章】宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。何\n\n谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！故贵以身为天下，若可寄天下；爱以\n\n身为天下，若可托天下。 〖译文〗\n\n【第十四章】视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jié），故混（\n\nhùn）而为一。其上不皦（jiǎo皎），其下不昧。绳绳(mǐn mǐn )不可名，复归于无物，是谓无状之状，无\n\n物之象。是谓惚恍。迎之不见其首，随之不见其后。执古之道，以御今之有，能知古始，是谓道纪。 〖译文〗\n\n【第十五章】古之善为士者，微妙玄通，深不可识。夫唯不可识，故强(qiǎng)为之容。豫焉若冬涉川，犹\n\n兮若畏四邻，俨兮其若容，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。孰能浊以静之徐清\n\n？孰能安以久动之徐生？保此道者不欲盈，夫唯不盈，故能蔽不新成。 〖译文〗\n\n【第十六章】致虚极，守静笃（dǔ），万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复\n\n命。复命曰常，知常曰明，不知常，妄作，凶。知常容，容乃公，公乃王（wàng），王（wàng）乃天，天\n\n乃道，道乃久，没（mò）身不殆。 〖译文〗\n\n【第十七章】太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮\n\n其贵言。功成事遂，百姓皆谓我自然。 〖译文〗\n\n【第十八章】大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。 〖译文〗\n\n【第十九章】绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。此三者，以为文不足，\n\n故令有所属，见（xiàn）素抱朴，少私寡欲。 〖译文〗\n\n【第二十章】绝学无忧。唯之与阿（ē），相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮其\n\n未央哉！众人熙熙，如享太牢，如春登台。我独泊兮其未兆，如婴儿之未孩。傫傫（lěi）兮若无所归。众\n\n人皆有余，而我独若遗。我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。澹（\n\ndàn）兮其若海，飂（liù）兮若无止。众人皆有以，而我独顽似鄙。我独异于人，而贵食(sì)母。 〖译文〗\n\n【第二十一章】孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物\n\n。窈（yǎo）兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。吾何以知众甫之\n\n状哉？以此。 〖译文〗\n\n \n\n【第二十二章】曲则全，枉则直，洼则盈，敝则新，少则得，多则惑。是以圣人抱一，为天下式。不自见\n\n（xiàn）故明，不自是故彰，不自伐故有功，不自矜故长。夫唯不争，故天下莫能与之争。古之所谓曲则\n\n全者，岂虚言哉！诚全而归之。 〖译文〗\n\n \n\n【第二十三章】希言自然。故飘风不终朝（zhāo），骤雨不终日。孰为此者？天地。天地尚不能久，而况\n\n于人乎？故从事于道者，道者同于道，德者同于德，失者同于失。同于道者，道亦乐得之；同于德者，德\n\n亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。 〖译文〗\n\n \n\n【第二十四章】企者不立，跨者不行，自见（xiàn）者不明，自是者不彰，自伐者无功，自矜者不长。其\n\n在道也，曰余食赘（zhuì）行。物或恶（wù）之，故有道者不处（chǔ）。 〖译文〗\n\n \n\n【第二十五章】有物混（hùn）成，先天地生。寂兮寥兮，独立不改，周行而不殆，可以为天下母。吾不知\n\n其名，字之曰道，强(qiǎng)为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。域中\n\n有四大，而王居其一焉。人法地，地法天，天法道，道法自然。 〖译文〗\n\n \n\n【第二十六章】重为轻根，静为躁君。是以圣人终日行不离辎（zī）重。虽有荣观（guàn），燕处超然，\n\n奈何万乘（shèng）之主，而以身轻天下？轻则失本，躁则失君。 〖译文〗\n\n \n\n【第二十七章】善行无辙迹，善言无瑕谪(xiá zhé)，善数（shǔ）不用筹策，善闭无关楗（jiàn）而不可\n\n开，善结无绳约而不可解。是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。故善人者，\n\n不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。 〖译文〗\n\n \n\n【第二十八章】知其雄，守其雌，为天下溪。为天下溪，常德不离，复归于婴儿。知其白，守其黑，为天\n\n下式。为天下式，常德不忒（tè），复归于无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复\n\n归于朴。朴散则为器，圣人用之则为官长（zhǎng）。故大制不割。 〖译文〗\n\n \n\n【第二十九章】将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。故物或\n\n行或随，或歔（xū）或吹，或强或羸（léi），或挫或隳（huī）。是以圣人去甚，去奢，去泰。 〖译文〗\n\n \n\n【第三十章】以道佐人主者，不以兵强天下，其事好（hào）还。师之所处，荆棘生焉。大军之后，必有凶\n\n年。善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。物壮则老，是\n\n谓不道，不道早已。 〖译文〗\n\n \n\n【第三十一章】夫佳兵者，不祥之器。物或恶（wù）之，故有道者不处（chǔ）。君子居则贵左，用兵则贵\n\n右。兵者，不祥之器，非君子之器。不得已而用之，恬淡为上，胜而不美。而美之者，是乐(yào)杀人。夫\n\n乐(yào)杀人者，则不可以得志于天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧（\n\nsāng）礼处之。杀人之众，以哀悲泣之，战胜，以丧礼处之。 〖译文〗\n\n \n\n【第三十二章】道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民\n\n莫之令而自均。始制有名，名亦既有，夫亦将知止。知止可以不殆。譬道之在天下，犹川谷之于江海。 〖译文〗\n\n \n\n【第三十三章】知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志，不失其所者久，\n\n死而不亡者寿。 〖译文〗\n\n \n\n【第三十四章】大道泛兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主，常无欲，\n\n可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。 〖译文〗\n\n \n\n【第三十五章】执大象，天下往；往而不害，安平太。乐（yuè）与饵，过客止。道之出口，淡乎其无味，\n\n视之不足见（jiàn），听之不足闻，用之不足既。 〖译文〗\n\n \n\n【第三十六章】将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必\n\n固与之，是谓微明。柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。 〖译文〗\n\n \n\n【第三十七章】道常无为而无不为，侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名\n\n之朴，夫亦将无欲。不欲以静，天下将自定。 〖译文〗\n\n \n\n【第三十八章】上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德为之而有以为。\n\n上仁为之而无以为，上义为之而有以为，上礼为之而莫之应，则攘(rǎng)臂而扔之。故失道而后德，失德\n\n而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄(bó)而乱之首。前识者，道之华而愚之始。是以大\n\n丈夫处其厚，不居其薄(bó)；处其实，不居其华。故去彼取此。 〖译文〗\n\n \n\n【第三十九章】昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王\n\n得一以为天下贞。其致之。天无以清将恐裂，地无以宁将恐发（fèi，“发”通“废”），神无以灵将恐歇\n\n，谷无以盈将恐竭，万物无以生将恐灭，侯王无以贵高将恐蹶（jué）。故贵以贱为本，高以下为基。是以\n\n侯王自谓孤寡不穀（谷gǔ）。此非以贱为本邪（yé）？非乎？故致数（shuò）舆（yù）无舆。不欲琭（\n\nlù）琭如玉，珞（luò）珞如石。 〖译文〗\n\n \n\n【第四十章】反者，道之动；弱者，道之用。天下万物生于有，有生于无。 〖译文〗\n\n \n\n【第四十一章】 上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。故建\n\n言有之：明道若昧，进道若退，夷道若颣（lèi）。上德若谷，大白若辱，广德若不足，建德若偷，质真若\n\n渝（yú）。大方无隅（yú），大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。 〖译文〗\n\n \n\n【第四十二章】道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。人之所恶（wù），\n\n唯孤寡不穀（谷gǔ），而王公以为称（chēng）。故物，或损之而益，或益之而损。人之所教（jiào），我\n\n亦教之。强梁者不得其死，吾将以为教父。 〖译文〗\n\n \n\n【第四十三章】天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益\n\n，天下希及之。 〖译文〗\n\n \n\n【第四十四章】名与身孰亲？身与货孰多？得与亡孰病？ 是故甚爱必大费，多藏必厚亡。知足不辱，知止\n\n不殆，可以长久。 〖译文〗\n\n \n\n【第四十五章】大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若讷。躁胜寒，\n\n静胜热。清静为天下正。 〖译文〗\n\n \n\n【第四十六章】天下有道，却走马以粪；天下无道，戎马生于郊。祸莫大于不知足，咎莫大于欲得，故知\n\n足之足，常足矣。 〖译文〗\n\n \n\n【第四十七章】不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名\n\n，不为而成。 〖译文〗\n\n \n\n【第四十八章】为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常以无事，及其有\n\n事，不足以取天下。 〖译文〗\n\n \n\n【第四十九章】圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。信者，吾信之；\n\n不信者，吾亦信之，德信。圣人在天下歙歙（xīxī），为天下浑其心。（百姓皆注其耳目），圣人皆孩之。 〖译文〗\n\n【第五十章】出生入死。生之徒十有三，死之徒十有三。人之生动之死地，亦十有三。夫何故？以其生生\n\n之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被（pī）甲兵，兕无所投其角，虎无所措其爪（\n\nzhǎo），兵无所容其刃。夫何故？以其无死地。 〖译文〗\n\n \n\n【第五十一章】道生之，德畜（xù）之，物形之，势成之。是以万物莫不尊道而贵德。道之尊，德之贵，\n\n夫莫之命而常自然。故道生之，德畜之。长之、育之、亭之、毒之、养之、覆之。生而不有，为而不恃，\n\n长（zhǎng）而不宰，是谓玄德。 〖译文〗\n\n \n\n【第五十二章】天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没（mò）身不殆。\n\n塞（sè）其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见（jiàn）小曰明，守柔曰强。用其光\n\n，复归其明，无遗身殃，是为习常。 〖译文〗\n\n \n\n【第五十三章】使我介然有知，行于大道，唯施（迤yí）是畏。大道甚夷，而民好径。朝（cháo）甚除，\n\n田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！ 〖译文〗\n\n \n\n【第五十四章】善建者不拔，善抱者不脱，子孙以祭祀不辍。修之于身，其德乃真；修之于家，其德乃余\n\n；修之于乡，其德乃长（zhǎng）；修之于国，其德乃丰；修之于天下，其德乃普。故以身观身，以家观家\n\n，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。 〖译文〗\n\n \n\n【第五十五章】 含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫(shì)，猛兽不据，攫(jué)鸟不搏\n\n。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。知和曰常，知常\n\n曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。 〖译文〗\n\n \n\n【第五十六章】知（zhì）者不言，言者不知（zhì）。塞（sè）其兑，闭其门，挫其锐；解其纷，和其光\n\n，同其尘，是谓玄同。故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱\n\n，故为天下贵。 〖译文〗\n\n \n\n【第五十七章】以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。天下多忌讳，而民弥贫；\n\n民多利器，国家滋昏；人多伎（jì）巧，奇物滋起；法令滋彰，盗贼多有。故圣人云：“我无为而民自化\n\n，我好静而民自正，我无事而民自富，我无欲而民自朴。” 〖译文〗\n\n \n\n【第五十八章】其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？\n\n其无正。正复为奇，善复为妖，人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光\n\n而不耀。 〖译文〗\n\n \n\n【第五十九章】治人事天莫若啬（sè）。夫唯啬，是谓早服。早服谓之重(chóng)积德，重(chóng)积德则\n\n无不克，无不克则莫知其极，莫知其极，可以有国。有国之母，可以长久。是谓深根固柢（dǐ），长生久\n\n视之道。 〖译文〗\n\n \n\n【第六十章】治大国若烹小鲜。以道莅（lì）天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人\n\n，圣人亦不伤人。夫两不相伤，故德交归焉。 〖译文〗\n\n \n\n【第六十一章】大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。故大国以下小国，则取小\n\n国；小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜（xù）人，小国不过欲入事人，\n\n夫两者各得其所欲，大者宜为下。 〖译文〗\n\n \n\n【第六十二章】道者万物之奥，善人之宝，不善人之所保。美言可以市，尊行可以加人。人之不善，何弃\n\n之有！故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？不曰以求得，有罪\n\n以免邪（yé）？故为天下贵。 〖译文〗\n\n \n\n【第六十三章】为无为，事无事，味无味。大小多少，报怨以德。图难于其易，为大于其细。天下难事必\n\n作于易，天下大事必作于细，是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难，是以圣人犹\n\n难之。故终无难矣。 〖译文〗\n\n \n\n【第六十四章】其安易持，其未兆易谋，其脆易泮（pàn），其微易散。为之于未有，治之于未乱。合抱之\n\n木，生于毫末；九层之台，起于累土；千里之行，始于足下。为者败之，执者失之。是以圣人无为，故无\n\n败；无执，故无失。民之从事，常于几成而败之。慎终如始，则无败事。是以圣人欲不欲，不贵难得之货\n\n。学不学，复众人之所过。以辅万物之自然，而不敢为。 〖译文〗\n\n \n\n【第六十五章】古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以\n\n智治国，国之福。知此两者，亦稽（jī）式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃\n\n至大顺。 〖译文〗\n\n \n\n【第六十六章】江海所以能为百谷王者，以其善下之，故能为百谷王。是以欲上民，必以言下之；欲先民\n\n，必以身后之。是以圣人处上而民不重，处前而民不害，是以天下乐推而不厌。以其不争，故天下莫能与\n\n之争。 〖译文〗\n\n \n\n【第六十七章】天下皆谓我道大，似不肖（xiào）。夫唯大，故似不肖。若肖，久矣其细也夫。我有三宝\n\n，持而保之。一曰慈，二曰俭，三曰不敢为天下先。慈，故能勇；俭，故能广；不敢为天下先，故能成器\n\n长（zhǎng）。今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固，天将救之，以慈卫\n\n之。 〖译文〗\n\n \n\n【第六十八章】善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。是谓不争之德，是谓用人\n\n之力，是谓配天古之极。 〖译文〗\n\n \n\n【第六十九章】用兵有言，吾不敢为主而为客，不敢进寸而退尺。是谓行（xíng）无行（háng），攘\n\n(rǎng)无臂，扔无敌，执无兵。祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。 〖译文〗\n\n \n\n【第七十章】吾言甚易知，甚易行，天下莫能知，莫能行。言有宗，事有君。夫唯无知，是以不我知。知\n\n我者希，则我者贵，是以圣人被（pī，“被”同“披”）褐怀玉。 〖译文〗\n\n \n\n【第七十一章】知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。 〖译文〗\n\n \n\n【第七十二章】民不畏威，则大威至。无狎（xiá）其所居，无厌（yà，“厌”同“压”）其所生。夫唯不\n\n厌（yà，“厌”同“压”），是以不厌(yàn)。是以圣人自知，不自见（xiàn）；自爱，不自贵。故去彼取\n\n此。 〖译文〗\n\n \n\n【第七十三章】勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶（wù），孰知其故？是以圣人\n\n犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟（chǎn）然而善谋。天网恢恢，疏而不失。 〖译文〗\n\n \n\n【第七十四章】民不畏死，奈何以死惧之！若使民常畏死，而为奇者，吾得执而杀之，孰敢？常有司杀者\n\n杀，夫代司杀者杀，是谓代大匠斫（zhuó）。夫代大匠斫者，希有不伤其手矣。 〖译文〗\n\n \n\n【第七十五章】民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。民之轻死，以\n\n其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。 〖译文〗\n\n \n\n【第七十六章】人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。故坚强者死之徒，柔弱\n\n者生之徒。是以兵强则不胜，木强则兵。强大处下，柔弱处上。 〖译文〗\n\n \n\n【第七十七章】天之道，其犹张弓与！高者抑之，下者举之；有余者损之，不足者补之。天之道，损有余\n\n而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。是以圣人为而不恃，功成而\n\n不处，其不欲见（xiàn）贤。 〖译文〗\n\n \n\n【第七十八章】天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之。弱之胜强，柔之胜刚，天下莫不知\n\n，莫能行。是以圣人云，受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。 〖译文〗\n\n \n\n【第七十九章】和大怨，必有余怨，安可以为善？是以圣人执左契，而不责于人。有德司契，无德司彻。\n\n天道无亲，常与善人。 〖译文〗\n\n \n\n【第八十章】小国寡民，使有什伯（bǎi）之器而不用，使民重（zhòng）死而不远徙(xí)。虽有舟舆，无\n\n所乘之；虽有甲兵，无所陈之；使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡犬\n\n之声相闻，民至老死不相往来。 〖译文〗\n\n \n\n【第八十一章】信言不美，美言不信；善者不辩，辩者不善；知（zhì）者不博，博者不知（zhì）。圣人\n\n不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害。圣人之道，为而不争。〖译文〗","slug":"读书笔记/《道德经》翻译","published":1,"_id":"clw7v6798001ne8lb6kga03v1","layout":"post","photos":[],"link":"","content":"<p>《道德经》</p>\n<h3 id=\"【第一章】\"><a href=\"#【第一章】\" class=\"headerlink\" title=\"【第一章】\"></a>【第一章】</h3><h4 id=\"〖原文〗\"><a href=\"#〖原文〗\" class=\"headerlink\" title=\"〖原文〗\"></a>〖原文〗</h4><p>道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼（jiào）。此两者同出而异名，同谓之玄，玄之又玄，众妙之门。</p>\n<h4 id=\"〖译文〗\"><a href=\"#〖译文〗\" class=\"headerlink\" title=\"〖译文〗\"></a>〖译文〗</h4><h4 id=\"〖注〗\"><a href=\"#〖注〗\" class=\"headerlink\" title=\"〖注〗\"></a>〖注〗</h4><p>【第二章】天下皆知美之为美，斯恶（è）已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和（hè），前后相随。是以圣人处无为之事，行不言之教，万物作焉而不辞，生而</p>\n<p>不有，为而不恃，功成而弗居。夫（fú）唯弗居，是以不去。 〖译文〗</p>\n<p>【第三章】不尚贤，使民不争；不贵难得之货，使民不为盗；不见（xiàn）可欲，使民心不乱。是以圣人</p>\n<p>之治，虚其心，实其腹；弱其志，强其骨。常使民无知无欲，使夫（fú）智者不敢为也。为无为，则无不</p>\n<p>治。 〖译文〗</p>\n<p>【第四章】道冲而用之或不盈，渊兮似万物之宗。挫其锐，解其纷，和其光，同其尘。湛兮似或存，吾不</p>\n<p>知谁之子，象帝之先。 〖译文〗</p>\n<p>【第五章】天地不仁，以万物为刍（chú）狗；圣人不仁，以百姓为刍狗。天地之间，其犹橐龠（tuó</p>\n<p>yuè）乎？虚而不屈，动而愈出。多言数（shuò）穷，不如守中。 〖译文〗</p>\n<p>【第六章】谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。 〖译文〗</p>\n<p>【第七章】天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人后其身而身先，外其身而</p>\n<p>身存。非以其无私邪（yé）？故能成其私。 〖译文〗</p>\n<p>【第八章】上善若水。水善利万物而不争，处众人之所恶（wù），故几（jī）于道。居善地，心善渊，与</p>\n<p>善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。 〖译文〗</p>\n<p>【第九章】持而盈之，不如其已。揣(chuǎi)而锐之，不可长保。金玉满堂，莫之能守。富贵而骄，自遗（</p>\n<p>yí）其咎。功成身退，天之道。 〖译文〗</p>\n<p>【第十章】载（zài）营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？爱民治国，能无</p>\n<p>知（zhì）乎？天门开阖（hé），能无雌乎？明白四达，能无为乎？生之、畜（xù）之，生而不有，为而不</p>\n<p>恃，长（zhǎng）而不宰，是谓玄德。 〖译文〗</p>\n<p>【第十一章】三十辐共一毂（gǔ），当其无，有车之用。埏埴（shān zhí）以为器，当其无，有器之用。</p>\n<p>凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。 〖译文〗</p>\n<p>【第十二章】 五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令</p>\n<p>人行妨。是以圣人为腹不为目，故去彼取此。 〖译文〗</p>\n<p>【第十三章】宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。何</p>\n<p>谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！故贵以身为天下，若可寄天下；爱以</p>\n<p>身为天下，若可托天下。 〖译文〗</p>\n<p>【第十四章】视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jié），故混（</p>\n<p>hùn）而为一。其上不皦（jiǎo皎），其下不昧。绳绳(mǐn mǐn )不可名，复归于无物，是谓无状之状，无</p>\n<p>物之象。是谓惚恍。迎之不见其首，随之不见其后。执古之道，以御今之有，能知古始，是谓道纪。 〖译文〗</p>\n<p>【第十五章】古之善为士者，微妙玄通，深不可识。夫唯不可识，故强(qiǎng)为之容。豫焉若冬涉川，犹</p>\n<p>兮若畏四邻，俨兮其若容，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。孰能浊以静之徐清</p>\n<p>？孰能安以久动之徐生？保此道者不欲盈，夫唯不盈，故能蔽不新成。 〖译文〗</p>\n<p>【第十六章】致虚极，守静笃（dǔ），万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复</p>\n<p>命。复命曰常，知常曰明，不知常，妄作，凶。知常容，容乃公，公乃王（wàng），王（wàng）乃天，天</p>\n<p>乃道，道乃久，没（mò）身不殆。 〖译文〗</p>\n<p>【第十七章】太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮</p>\n<p>其贵言。功成事遂，百姓皆谓我自然。 〖译文〗</p>\n<p>【第十八章】大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。 〖译文〗</p>\n<p>【第十九章】绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。此三者，以为文不足，</p>\n<p>故令有所属，见（xiàn）素抱朴，少私寡欲。 〖译文〗</p>\n<p>【第二十章】绝学无忧。唯之与阿（ē），相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮其</p>\n<p>未央哉！众人熙熙，如享太牢，如春登台。我独泊兮其未兆，如婴儿之未孩。傫傫（lěi）兮若无所归。众</p>\n<p>人皆有余，而我独若遗。我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。澹（</p>\n<p>dàn）兮其若海，飂（liù）兮若无止。众人皆有以，而我独顽似鄙。我独异于人，而贵食(sì)母。 〖译文〗</p>\n<p>【第二十一章】孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物</p>\n<p>。窈（yǎo）兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。吾何以知众甫之</p>\n<p>状哉？以此。 〖译文〗</p>\n<p>【第二十二章】曲则全，枉则直，洼则盈，敝则新，少则得，多则惑。是以圣人抱一，为天下式。不自见</p>\n<p>（xiàn）故明，不自是故彰，不自伐故有功，不自矜故长。夫唯不争，故天下莫能与之争。古之所谓曲则</p>\n<p>全者，岂虚言哉！诚全而归之。 〖译文〗</p>\n<p>【第二十三章】希言自然。故飘风不终朝（zhāo），骤雨不终日。孰为此者？天地。天地尚不能久，而况</p>\n<p>于人乎？故从事于道者，道者同于道，德者同于德，失者同于失。同于道者，道亦乐得之；同于德者，德</p>\n<p>亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。 〖译文〗</p>\n<p>【第二十四章】企者不立，跨者不行，自见（xiàn）者不明，自是者不彰，自伐者无功，自矜者不长。其</p>\n<p>在道也，曰余食赘（zhuì）行。物或恶（wù）之，故有道者不处（chǔ）。 〖译文〗</p>\n<p>【第二十五章】有物混（hùn）成，先天地生。寂兮寥兮，独立不改，周行而不殆，可以为天下母。吾不知</p>\n<p>其名，字之曰道，强(qiǎng)为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。域中</p>\n<p>有四大，而王居其一焉。人法地，地法天，天法道，道法自然。 〖译文〗</p>\n<p>【第二十六章】重为轻根，静为躁君。是以圣人终日行不离辎（zī）重。虽有荣观（guàn），燕处超然，</p>\n<p>奈何万乘（shèng）之主，而以身轻天下？轻则失本，躁则失君。 〖译文〗</p>\n<p>【第二十七章】善行无辙迹，善言无瑕谪(xiá zhé)，善数（shǔ）不用筹策，善闭无关楗（jiàn）而不可</p>\n<p>开，善结无绳约而不可解。是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。故善人者，</p>\n<p>不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。 〖译文〗</p>\n<p>【第二十八章】知其雄，守其雌，为天下溪。为天下溪，常德不离，复归于婴儿。知其白，守其黑，为天</p>\n<p>下式。为天下式，常德不忒（tè），复归于无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复</p>\n<p>归于朴。朴散则为器，圣人用之则为官长（zhǎng）。故大制不割。 〖译文〗</p>\n<p>【第二十九章】将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。故物或</p>\n<p>行或随，或歔（xū）或吹，或强或羸（léi），或挫或隳（huī）。是以圣人去甚，去奢，去泰。 〖译文〗</p>\n<p>【第三十章】以道佐人主者，不以兵强天下，其事好（hào）还。师之所处，荆棘生焉。大军之后，必有凶</p>\n<p>年。善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。物壮则老，是</p>\n<p>谓不道，不道早已。 〖译文〗</p>\n<p>【第三十一章】夫佳兵者，不祥之器。物或恶（wù）之，故有道者不处（chǔ）。君子居则贵左，用兵则贵</p>\n<p>右。兵者，不祥之器，非君子之器。不得已而用之，恬淡为上，胜而不美。而美之者，是乐(yào)杀人。夫</p>\n<p>乐(yào)杀人者，则不可以得志于天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧（</p>\n<p>sāng）礼处之。杀人之众，以哀悲泣之，战胜，以丧礼处之。 〖译文〗</p>\n<p>【第三十二章】道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民</p>\n<p>莫之令而自均。始制有名，名亦既有，夫亦将知止。知止可以不殆。譬道之在天下，犹川谷之于江海。 〖译文〗</p>\n<p>【第三十三章】知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志，不失其所者久，</p>\n<p>死而不亡者寿。 〖译文〗</p>\n<p>【第三十四章】大道泛兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主，常无欲，</p>\n<p>可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。 〖译文〗</p>\n<p>【第三十五章】执大象，天下往；往而不害，安平太。乐（yuè）与饵，过客止。道之出口，淡乎其无味，</p>\n<p>视之不足见（jiàn），听之不足闻，用之不足既。 〖译文〗</p>\n<p>【第三十六章】将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必</p>\n<p>固与之，是谓微明。柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。 〖译文〗</p>\n<p>【第三十七章】道常无为而无不为，侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名</p>\n<p>之朴，夫亦将无欲。不欲以静，天下将自定。 〖译文〗</p>\n<p>【第三十八章】上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德为之而有以为。</p>\n<p>上仁为之而无以为，上义为之而有以为，上礼为之而莫之应，则攘(rǎng)臂而扔之。故失道而后德，失德</p>\n<p>而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄(bó)而乱之首。前识者，道之华而愚之始。是以大</p>\n<p>丈夫处其厚，不居其薄(bó)；处其实，不居其华。故去彼取此。 〖译文〗</p>\n<p>【第三十九章】昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王</p>\n<p>得一以为天下贞。其致之。天无以清将恐裂，地无以宁将恐发（fèi，“发”通“废”），神无以灵将恐歇</p>\n<p>，谷无以盈将恐竭，万物无以生将恐灭，侯王无以贵高将恐蹶（jué）。故贵以贱为本，高以下为基。是以</p>\n<p>侯王自谓孤寡不穀（谷gǔ）。此非以贱为本邪（yé）？非乎？故致数（shuò）舆（yù）无舆。不欲琭（</p>\n<p>lù）琭如玉，珞（luò）珞如石。 〖译文〗</p>\n<p>【第四十章】反者，道之动；弱者，道之用。天下万物生于有，有生于无。 〖译文〗</p>\n<p>【第四十一章】 上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。故建</p>\n<p>言有之：明道若昧，进道若退，夷道若颣（lèi）。上德若谷，大白若辱，广德若不足，建德若偷，质真若</p>\n<p>渝（yú）。大方无隅（yú），大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。 〖译文〗</p>\n<p>【第四十二章】道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。人之所恶（wù），</p>\n<p>唯孤寡不穀（谷gǔ），而王公以为称（chēng）。故物，或损之而益，或益之而损。人之所教（jiào），我</p>\n<p>亦教之。强梁者不得其死，吾将以为教父。 〖译文〗</p>\n<p>【第四十三章】天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益</p>\n<p>，天下希及之。 〖译文〗</p>\n<p>【第四十四章】名与身孰亲？身与货孰多？得与亡孰病？ 是故甚爱必大费，多藏必厚亡。知足不辱，知止</p>\n<p>不殆，可以长久。 〖译文〗</p>\n<p>【第四十五章】大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若讷。躁胜寒，</p>\n<p>静胜热。清静为天下正。 〖译文〗</p>\n<p>【第四十六章】天下有道，却走马以粪；天下无道，戎马生于郊。祸莫大于不知足，咎莫大于欲得，故知</p>\n<p>足之足，常足矣。 〖译文〗</p>\n<p>【第四十七章】不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名</p>\n<p>，不为而成。 〖译文〗</p>\n<p>【第四十八章】为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常以无事，及其有</p>\n<p>事，不足以取天下。 〖译文〗</p>\n<p>【第四十九章】圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。信者，吾信之；</p>\n<p>不信者，吾亦信之，德信。圣人在天下歙歙（xīxī），为天下浑其心。（百姓皆注其耳目），圣人皆孩之。 〖译文〗</p>\n<p>【第五十章】出生入死。生之徒十有三，死之徒十有三。人之生动之死地，亦十有三。夫何故？以其生生</p>\n<p>之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被（pī）甲兵，兕无所投其角，虎无所措其爪（</p>\n<p>zhǎo），兵无所容其刃。夫何故？以其无死地。 〖译文〗</p>\n<p>【第五十一章】道生之，德畜（xù）之，物形之，势成之。是以万物莫不尊道而贵德。道之尊，德之贵，</p>\n<p>夫莫之命而常自然。故道生之，德畜之。长之、育之、亭之、毒之、养之、覆之。生而不有，为而不恃，</p>\n<p>长（zhǎng）而不宰，是谓玄德。 〖译文〗</p>\n<p>【第五十二章】天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没（mò）身不殆。</p>\n<p>塞（sè）其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见（jiàn）小曰明，守柔曰强。用其光</p>\n<p>，复归其明，无遗身殃，是为习常。 〖译文〗</p>\n<p>【第五十三章】使我介然有知，行于大道，唯施（迤yí）是畏。大道甚夷，而民好径。朝（cháo）甚除，</p>\n<p>田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！ 〖译文〗</p>\n<p>【第五十四章】善建者不拔，善抱者不脱，子孙以祭祀不辍。修之于身，其德乃真；修之于家，其德乃余</p>\n<p>；修之于乡，其德乃长（zhǎng）；修之于国，其德乃丰；修之于天下，其德乃普。故以身观身，以家观家</p>\n<p>，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。 〖译文〗</p>\n<p>【第五十五章】 含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫(shì)，猛兽不据，攫(jué)鸟不搏</p>\n<p>。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。知和曰常，知常</p>\n<p>曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。 〖译文〗</p>\n<p>【第五十六章】知（zhì）者不言，言者不知（zhì）。塞（sè）其兑，闭其门，挫其锐；解其纷，和其光</p>\n<p>，同其尘，是谓玄同。故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱</p>\n<p>，故为天下贵。 〖译文〗</p>\n<p>【第五十七章】以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。天下多忌讳，而民弥贫；</p>\n<p>民多利器，国家滋昏；人多伎（jì）巧，奇物滋起；法令滋彰，盗贼多有。故圣人云：“我无为而民自化</p>\n<p>，我好静而民自正，我无事而民自富，我无欲而民自朴。” 〖译文〗</p>\n<p>【第五十八章】其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？</p>\n<p>其无正。正复为奇，善复为妖，人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光</p>\n<p>而不耀。 〖译文〗</p>\n<p>【第五十九章】治人事天莫若啬（sè）。夫唯啬，是谓早服。早服谓之重(chóng)积德，重(chóng)积德则</p>\n<p>无不克，无不克则莫知其极，莫知其极，可以有国。有国之母，可以长久。是谓深根固柢（dǐ），长生久</p>\n<p>视之道。 〖译文〗</p>\n<p>【第六十章】治大国若烹小鲜。以道莅（lì）天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人</p>\n<p>，圣人亦不伤人。夫两不相伤，故德交归焉。 〖译文〗</p>\n<p>【第六十一章】大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。故大国以下小国，则取小</p>\n<p>国；小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜（xù）人，小国不过欲入事人，</p>\n<p>夫两者各得其所欲，大者宜为下。 〖译文〗</p>\n<p>【第六十二章】道者万物之奥，善人之宝，不善人之所保。美言可以市，尊行可以加人。人之不善，何弃</p>\n<p>之有！故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？不曰以求得，有罪</p>\n<p>以免邪（yé）？故为天下贵。 〖译文〗</p>\n<p>【第六十三章】为无为，事无事，味无味。大小多少，报怨以德。图难于其易，为大于其细。天下难事必</p>\n<p>作于易，天下大事必作于细，是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难，是以圣人犹</p>\n<p>难之。故终无难矣。 〖译文〗</p>\n<p>【第六十四章】其安易持，其未兆易谋，其脆易泮（pàn），其微易散。为之于未有，治之于未乱。合抱之</p>\n<p>木，生于毫末；九层之台，起于累土；千里之行，始于足下。为者败之，执者失之。是以圣人无为，故无</p>\n<p>败；无执，故无失。民之从事，常于几成而败之。慎终如始，则无败事。是以圣人欲不欲，不贵难得之货</p>\n<p>。学不学，复众人之所过。以辅万物之自然，而不敢为。 〖译文〗</p>\n<p>【第六十五章】古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以</p>\n<p>智治国，国之福。知此两者，亦稽（jī）式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃</p>\n<p>至大顺。 〖译文〗</p>\n<p>【第六十六章】江海所以能为百谷王者，以其善下之，故能为百谷王。是以欲上民，必以言下之；欲先民</p>\n<p>，必以身后之。是以圣人处上而民不重，处前而民不害，是以天下乐推而不厌。以其不争，故天下莫能与</p>\n<p>之争。 〖译文〗</p>\n<p>【第六十七章】天下皆谓我道大，似不肖（xiào）。夫唯大，故似不肖。若肖，久矣其细也夫。我有三宝</p>\n<p>，持而保之。一曰慈，二曰俭，三曰不敢为天下先。慈，故能勇；俭，故能广；不敢为天下先，故能成器</p>\n<p>长（zhǎng）。今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固，天将救之，以慈卫</p>\n<p>之。 〖译文〗</p>\n<p>【第六十八章】善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。是谓不争之德，是谓用人</p>\n<p>之力，是谓配天古之极。 〖译文〗</p>\n<p>【第六十九章】用兵有言，吾不敢为主而为客，不敢进寸而退尺。是谓行（xíng）无行（háng），攘</p>\n<p>(rǎng)无臂，扔无敌，执无兵。祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。 〖译文〗</p>\n<p>【第七十章】吾言甚易知，甚易行，天下莫能知，莫能行。言有宗，事有君。夫唯无知，是以不我知。知</p>\n<p>我者希，则我者贵，是以圣人被（pī，“被”同“披”）褐怀玉。 〖译文〗</p>\n<p>【第七十一章】知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。 〖译文〗</p>\n<p>【第七十二章】民不畏威，则大威至。无狎（xiá）其所居，无厌（yà，“厌”同“压”）其所生。夫唯不</p>\n<p>厌（yà，“厌”同“压”），是以不厌(yàn)。是以圣人自知，不自见（xiàn）；自爱，不自贵。故去彼取</p>\n<p>此。 〖译文〗</p>\n<p>【第七十三章】勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶（wù），孰知其故？是以圣人</p>\n<p>犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟（chǎn）然而善谋。天网恢恢，疏而不失。 〖译文〗</p>\n<p>【第七十四章】民不畏死，奈何以死惧之！若使民常畏死，而为奇者，吾得执而杀之，孰敢？常有司杀者</p>\n<p>杀，夫代司杀者杀，是谓代大匠斫（zhuó）。夫代大匠斫者，希有不伤其手矣。 〖译文〗</p>\n<p>【第七十五章】民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。民之轻死，以</p>\n<p>其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。 〖译文〗</p>\n<p>【第七十六章】人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。故坚强者死之徒，柔弱</p>\n<p>者生之徒。是以兵强则不胜，木强则兵。强大处下，柔弱处上。 〖译文〗</p>\n<p>【第七十七章】天之道，其犹张弓与！高者抑之，下者举之；有余者损之，不足者补之。天之道，损有余</p>\n<p>而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。是以圣人为而不恃，功成而</p>\n<p>不处，其不欲见（xiàn）贤。 〖译文〗</p>\n<p>【第七十八章】天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之。弱之胜强，柔之胜刚，天下莫不知</p>\n<p>，莫能行。是以圣人云，受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。 〖译文〗</p>\n<p>【第七十九章】和大怨，必有余怨，安可以为善？是以圣人执左契，而不责于人。有德司契，无德司彻。</p>\n<p>天道无亲，常与善人。 〖译文〗</p>\n<p>【第八十章】小国寡民，使有什伯（bǎi）之器而不用，使民重（zhòng）死而不远徙(xí)。虽有舟舆，无</p>\n<p>所乘之；虽有甲兵，无所陈之；使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡犬</p>\n<p>之声相闻，民至老死不相往来。 〖译文〗</p>\n<p>【第八十一章】信言不美，美言不信；善者不辩，辩者不善；知（zhì）者不博，博者不知（zhì）。圣人</p>\n<p>不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害。圣人之道，为而不争。〖译文〗</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>《道德经》</p>\n<h3 id=\"【第一章】\"><a href=\"#【第一章】\" class=\"headerlink\" title=\"【第一章】\"></a>【第一章】</h3><h4 id=\"〖原文〗\"><a href=\"#〖原文〗\" class=\"headerlink\" title=\"〖原文〗\"></a>〖原文〗</h4><p>道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼（jiào）。此两者同出而异名，同谓之玄，玄之又玄，众妙之门。</p>\n<h4 id=\"〖译文〗\"><a href=\"#〖译文〗\" class=\"headerlink\" title=\"〖译文〗\"></a>〖译文〗</h4><h4 id=\"〖注〗\"><a href=\"#〖注〗\" class=\"headerlink\" title=\"〖注〗\"></a>〖注〗</h4><p>【第二章】天下皆知美之为美，斯恶（è）已；皆知善之为善，斯不善已。故有无相生，难易相成，长短相较，高下相倾，音声相和（hè），前后相随。是以圣人处无为之事，行不言之教，万物作焉而不辞，生而</p>\n<p>不有，为而不恃，功成而弗居。夫（fú）唯弗居，是以不去。 〖译文〗</p>\n<p>【第三章】不尚贤，使民不争；不贵难得之货，使民不为盗；不见（xiàn）可欲，使民心不乱。是以圣人</p>\n<p>之治，虚其心，实其腹；弱其志，强其骨。常使民无知无欲，使夫（fú）智者不敢为也。为无为，则无不</p>\n<p>治。 〖译文〗</p>\n<p>【第四章】道冲而用之或不盈，渊兮似万物之宗。挫其锐，解其纷，和其光，同其尘。湛兮似或存，吾不</p>\n<p>知谁之子，象帝之先。 〖译文〗</p>\n<p>【第五章】天地不仁，以万物为刍（chú）狗；圣人不仁，以百姓为刍狗。天地之间，其犹橐龠（tuó</p>\n<p>yuè）乎？虚而不屈，动而愈出。多言数（shuò）穷，不如守中。 〖译文〗</p>\n<p>【第六章】谷神不死，是谓玄牝（pìn），玄牝之门，是谓天地根。绵绵若存，用之不勤。 〖译文〗</p>\n<p>【第七章】天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人后其身而身先，外其身而</p>\n<p>身存。非以其无私邪（yé）？故能成其私。 〖译文〗</p>\n<p>【第八章】上善若水。水善利万物而不争，处众人之所恶（wù），故几（jī）于道。居善地，心善渊，与</p>\n<p>善仁，言善信，正善治，事善能，动善时。夫唯不争，故无尤。 〖译文〗</p>\n<p>【第九章】持而盈之，不如其已。揣(chuǎi)而锐之，不可长保。金玉满堂，莫之能守。富贵而骄，自遗（</p>\n<p>yí）其咎。功成身退，天之道。 〖译文〗</p>\n<p>【第十章】载（zài）营魄抱一，能无离乎？专气致柔，能婴儿乎？涤除玄览，能无疵乎？爱民治国，能无</p>\n<p>知（zhì）乎？天门开阖（hé），能无雌乎？明白四达，能无为乎？生之、畜（xù）之，生而不有，为而不</p>\n<p>恃，长（zhǎng）而不宰，是谓玄德。 〖译文〗</p>\n<p>【第十一章】三十辐共一毂（gǔ），当其无，有车之用。埏埴（shān zhí）以为器，当其无，有器之用。</p>\n<p>凿户牖（yǒu）以为室，当其无，有室之用。故有之以为利，无之以为用。 〖译文〗</p>\n<p>【第十二章】 五色令人目盲，五音令人耳聋，五味令人口爽，驰骋畋（tián）猎令人心发狂，难得之货令</p>\n<p>人行妨。是以圣人为腹不为目，故去彼取此。 〖译文〗</p>\n<p>【第十三章】宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。何</p>\n<p>谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患！故贵以身为天下，若可寄天下；爱以</p>\n<p>身为天下，若可托天下。 〖译文〗</p>\n<p>【第十四章】视之不见名曰夷，听之不闻名曰希，搏之不得名曰微。此三者不可致诘（jié），故混（</p>\n<p>hùn）而为一。其上不皦（jiǎo皎），其下不昧。绳绳(mǐn mǐn )不可名，复归于无物，是谓无状之状，无</p>\n<p>物之象。是谓惚恍。迎之不见其首，随之不见其后。执古之道，以御今之有，能知古始，是谓道纪。 〖译文〗</p>\n<p>【第十五章】古之善为士者，微妙玄通，深不可识。夫唯不可识，故强(qiǎng)为之容。豫焉若冬涉川，犹</p>\n<p>兮若畏四邻，俨兮其若容，涣兮若冰之将释，敦兮其若朴，旷兮其若谷，混兮其若浊。孰能浊以静之徐清</p>\n<p>？孰能安以久动之徐生？保此道者不欲盈，夫唯不盈，故能蔽不新成。 〖译文〗</p>\n<p>【第十六章】致虚极，守静笃（dǔ），万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，是谓复</p>\n<p>命。复命曰常，知常曰明，不知常，妄作，凶。知常容，容乃公，公乃王（wàng），王（wàng）乃天，天</p>\n<p>乃道，道乃久，没（mò）身不殆。 〖译文〗</p>\n<p>【第十七章】太上，下知有之。其次，亲而誉之。其次，畏之。其次，侮之。信不足焉，有不信焉。悠兮</p>\n<p>其贵言。功成事遂，百姓皆谓我自然。 〖译文〗</p>\n<p>【第十八章】大道废，有仁义；慧智出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。 〖译文〗</p>\n<p>【第十九章】绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。此三者，以为文不足，</p>\n<p>故令有所属，见（xiàn）素抱朴，少私寡欲。 〖译文〗</p>\n<p>【第二十章】绝学无忧。唯之与阿（ē），相去几何？善之与恶，相去若何？人之所畏，不可不畏。荒兮其</p>\n<p>未央哉！众人熙熙，如享太牢，如春登台。我独泊兮其未兆，如婴儿之未孩。傫傫（lěi）兮若无所归。众</p>\n<p>人皆有余，而我独若遗。我愚人之心也哉！沌沌兮！俗人昭昭，我独昏昏；俗人察察，我独闷闷。澹（</p>\n<p>dàn）兮其若海，飂（liù）兮若无止。众人皆有以，而我独顽似鄙。我独异于人，而贵食(sì)母。 〖译文〗</p>\n<p>【第二十一章】孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物</p>\n<p>。窈（yǎo）兮冥兮，其中有精；其精甚真，其中有信。自古及今，其名不去，以阅众甫。吾何以知众甫之</p>\n<p>状哉？以此。 〖译文〗</p>\n<p>【第二十二章】曲则全，枉则直，洼则盈，敝则新，少则得，多则惑。是以圣人抱一，为天下式。不自见</p>\n<p>（xiàn）故明，不自是故彰，不自伐故有功，不自矜故长。夫唯不争，故天下莫能与之争。古之所谓曲则</p>\n<p>全者，岂虚言哉！诚全而归之。 〖译文〗</p>\n<p>【第二十三章】希言自然。故飘风不终朝（zhāo），骤雨不终日。孰为此者？天地。天地尚不能久，而况</p>\n<p>于人乎？故从事于道者，道者同于道，德者同于德，失者同于失。同于道者，道亦乐得之；同于德者，德</p>\n<p>亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。 〖译文〗</p>\n<p>【第二十四章】企者不立，跨者不行，自见（xiàn）者不明，自是者不彰，自伐者无功，自矜者不长。其</p>\n<p>在道也，曰余食赘（zhuì）行。物或恶（wù）之，故有道者不处（chǔ）。 〖译文〗</p>\n<p>【第二十五章】有物混（hùn）成，先天地生。寂兮寥兮，独立不改，周行而不殆，可以为天下母。吾不知</p>\n<p>其名，字之曰道，强(qiǎng)为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。域中</p>\n<p>有四大，而王居其一焉。人法地，地法天，天法道，道法自然。 〖译文〗</p>\n<p>【第二十六章】重为轻根，静为躁君。是以圣人终日行不离辎（zī）重。虽有荣观（guàn），燕处超然，</p>\n<p>奈何万乘（shèng）之主，而以身轻天下？轻则失本，躁则失君。 〖译文〗</p>\n<p>【第二十七章】善行无辙迹，善言无瑕谪(xiá zhé)，善数（shǔ）不用筹策，善闭无关楗（jiàn）而不可</p>\n<p>开，善结无绳约而不可解。是以圣人常善救人，故无弃人；常善救物，故无弃物，是谓袭明。故善人者，</p>\n<p>不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷，是谓要妙。 〖译文〗</p>\n<p>【第二十八章】知其雄，守其雌，为天下溪。为天下溪，常德不离，复归于婴儿。知其白，守其黑，为天</p>\n<p>下式。为天下式，常德不忒（tè），复归于无极。知其荣，守其辱，为天下谷。为天下谷，常德乃足，复</p>\n<p>归于朴。朴散则为器，圣人用之则为官长（zhǎng）。故大制不割。 〖译文〗</p>\n<p>【第二十九章】将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。故物或</p>\n<p>行或随，或歔（xū）或吹，或强或羸（léi），或挫或隳（huī）。是以圣人去甚，去奢，去泰。 〖译文〗</p>\n<p>【第三十章】以道佐人主者，不以兵强天下，其事好（hào）还。师之所处，荆棘生焉。大军之后，必有凶</p>\n<p>年。善有果而已，不敢以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。物壮则老，是</p>\n<p>谓不道，不道早已。 〖译文〗</p>\n<p>【第三十一章】夫佳兵者，不祥之器。物或恶（wù）之，故有道者不处（chǔ）。君子居则贵左，用兵则贵</p>\n<p>右。兵者，不祥之器，非君子之器。不得已而用之，恬淡为上，胜而不美。而美之者，是乐(yào)杀人。夫</p>\n<p>乐(yào)杀人者，则不可以得志于天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧（</p>\n<p>sāng）礼处之。杀人之众，以哀悲泣之，战胜，以丧礼处之。 〖译文〗</p>\n<p>【第三十二章】道常无名，朴虽小，天下莫能臣也。侯王若能守之，万物将自宾。天地相合以降甘露，民</p>\n<p>莫之令而自均。始制有名，名亦既有，夫亦将知止。知止可以不殆。譬道之在天下，犹川谷之于江海。 〖译文〗</p>\n<p>【第三十三章】知人者智，自知者明。胜人者有力，自胜者强。知足者富，强行者有志，不失其所者久，</p>\n<p>死而不亡者寿。 〖译文〗</p>\n<p>【第三十四章】大道泛兮，其可左右。万物恃之而生而不辞，功成不名有，衣养万物而不为主，常无欲，</p>\n<p>可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。 〖译文〗</p>\n<p>【第三十五章】执大象，天下往；往而不害，安平太。乐（yuè）与饵，过客止。道之出口，淡乎其无味，</p>\n<p>视之不足见（jiàn），听之不足闻，用之不足既。 〖译文〗</p>\n<p>【第三十六章】将欲歙（xī）之，必固张之；将欲弱之，必固强之；将欲废之，必固兴之；将欲夺之，必</p>\n<p>固与之，是谓微明。柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。 〖译文〗</p>\n<p>【第三十七章】道常无为而无不为，侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名</p>\n<p>之朴，夫亦将无欲。不欲以静，天下将自定。 〖译文〗</p>\n<p>【第三十八章】上德不德，是以有德；下德不失德，是以无德。上德无为而无以为，下德为之而有以为。</p>\n<p>上仁为之而无以为，上义为之而有以为，上礼为之而莫之应，则攘(rǎng)臂而扔之。故失道而后德，失德</p>\n<p>而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄(bó)而乱之首。前识者，道之华而愚之始。是以大</p>\n<p>丈夫处其厚，不居其薄(bó)；处其实，不居其华。故去彼取此。 〖译文〗</p>\n<p>【第三十九章】昔之得一者，天得一以清，地得一以宁，神得一以灵，谷得一以盈，万物得一以生，侯王</p>\n<p>得一以为天下贞。其致之。天无以清将恐裂，地无以宁将恐发（fèi，“发”通“废”），神无以灵将恐歇</p>\n<p>，谷无以盈将恐竭，万物无以生将恐灭，侯王无以贵高将恐蹶（jué）。故贵以贱为本，高以下为基。是以</p>\n<p>侯王自谓孤寡不穀（谷gǔ）。此非以贱为本邪（yé）？非乎？故致数（shuò）舆（yù）无舆。不欲琭（</p>\n<p>lù）琭如玉，珞（luò）珞如石。 〖译文〗</p>\n<p>【第四十章】反者，道之动；弱者，道之用。天下万物生于有，有生于无。 〖译文〗</p>\n<p>【第四十一章】 上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之，不笑不足以为道。故建</p>\n<p>言有之：明道若昧，进道若退，夷道若颣（lèi）。上德若谷，大白若辱，广德若不足，建德若偷，质真若</p>\n<p>渝（yú）。大方无隅（yú），大器晚成，大音希声，大象无形。道隐无名，夫唯道善贷且成。 〖译文〗</p>\n<p>【第四十二章】道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。人之所恶（wù），</p>\n<p>唯孤寡不穀（谷gǔ），而王公以为称（chēng）。故物，或损之而益，或益之而损。人之所教（jiào），我</p>\n<p>亦教之。强梁者不得其死，吾将以为教父。 〖译文〗</p>\n<p>【第四十三章】天下之至柔，驰骋天下之至坚，无有入无间，吾是以知无为之有益。不言之教，无为之益</p>\n<p>，天下希及之。 〖译文〗</p>\n<p>【第四十四章】名与身孰亲？身与货孰多？得与亡孰病？ 是故甚爱必大费，多藏必厚亡。知足不辱，知止</p>\n<p>不殆，可以长久。 〖译文〗</p>\n<p>【第四十五章】大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若讷。躁胜寒，</p>\n<p>静胜热。清静为天下正。 〖译文〗</p>\n<p>【第四十六章】天下有道，却走马以粪；天下无道，戎马生于郊。祸莫大于不知足，咎莫大于欲得，故知</p>\n<p>足之足，常足矣。 〖译文〗</p>\n<p>【第四十七章】不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而名</p>\n<p>，不为而成。 〖译文〗</p>\n<p>【第四十八章】为学日益，为道日损。损之又损，以至于无为，无为而无不为。取天下常以无事，及其有</p>\n<p>事，不足以取天下。 〖译文〗</p>\n<p>【第四十九章】圣人无常心，以百姓心为心。善者，吾善之；不善者，吾亦善之，德善。信者，吾信之；</p>\n<p>不信者，吾亦信之，德信。圣人在天下歙歙（xīxī），为天下浑其心。（百姓皆注其耳目），圣人皆孩之。 〖译文〗</p>\n<p>【第五十章】出生入死。生之徒十有三，死之徒十有三。人之生动之死地，亦十有三。夫何故？以其生生</p>\n<p>之厚。盖闻善摄生者，陆行不遇兕（sì）虎，入军不被（pī）甲兵，兕无所投其角，虎无所措其爪（</p>\n<p>zhǎo），兵无所容其刃。夫何故？以其无死地。 〖译文〗</p>\n<p>【第五十一章】道生之，德畜（xù）之，物形之，势成之。是以万物莫不尊道而贵德。道之尊，德之贵，</p>\n<p>夫莫之命而常自然。故道生之，德畜之。长之、育之、亭之、毒之、养之、覆之。生而不有，为而不恃，</p>\n<p>长（zhǎng）而不宰，是谓玄德。 〖译文〗</p>\n<p>【第五十二章】天下有始，以为天下母。既得其母，以知其子；既知其子，复守其母，没（mò）身不殆。</p>\n<p>塞（sè）其兑，闭其门，终身不勤。开其兑，济其事，终身不救。见（jiàn）小曰明，守柔曰强。用其光</p>\n<p>，复归其明，无遗身殃，是为习常。 〖译文〗</p>\n<p>【第五十三章】使我介然有知，行于大道，唯施（迤yí）是畏。大道甚夷，而民好径。朝（cháo）甚除，</p>\n<p>田甚芜，仓甚虚。服文彩，带利剑，厌饮食，财货有余，是为盗夸。非道也哉！ 〖译文〗</p>\n<p>【第五十四章】善建者不拔，善抱者不脱，子孙以祭祀不辍。修之于身，其德乃真；修之于家，其德乃余</p>\n<p>；修之于乡，其德乃长（zhǎng）；修之于国，其德乃丰；修之于天下，其德乃普。故以身观身，以家观家</p>\n<p>，以乡观乡，以国观国，以天下观天下。吾何以知天下然哉？以此。 〖译文〗</p>\n<p>【第五十五章】 含德之厚，比于赤子。蜂虿（chài）虺（huǐ）蛇不螫(shì)，猛兽不据，攫(jué)鸟不搏</p>\n<p>。骨弱筋柔而握固。未知牝牡之合而全作，精之至也。终日号而不嗄（shà），和之至也。知和曰常，知常</p>\n<p>曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。 〖译文〗</p>\n<p>【第五十六章】知（zhì）者不言，言者不知（zhì）。塞（sè）其兑，闭其门，挫其锐；解其纷，和其光</p>\n<p>，同其尘，是谓玄同。故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱</p>\n<p>，故为天下贵。 〖译文〗</p>\n<p>【第五十七章】以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此。天下多忌讳，而民弥贫；</p>\n<p>民多利器，国家滋昏；人多伎（jì）巧，奇物滋起；法令滋彰，盗贼多有。故圣人云：“我无为而民自化</p>\n<p>，我好静而民自正，我无事而民自富，我无欲而民自朴。” 〖译文〗</p>\n<p>【第五十八章】其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮福之所倚，福兮祸之所伏。孰知其极？</p>\n<p>其无正。正复为奇，善复为妖，人之迷，其日固久。是以圣人方而不割，廉而不刿（guì），直而不肆，光</p>\n<p>而不耀。 〖译文〗</p>\n<p>【第五十九章】治人事天莫若啬（sè）。夫唯啬，是谓早服。早服谓之重(chóng)积德，重(chóng)积德则</p>\n<p>无不克，无不克则莫知其极，莫知其极，可以有国。有国之母，可以长久。是谓深根固柢（dǐ），长生久</p>\n<p>视之道。 〖译文〗</p>\n<p>【第六十章】治大国若烹小鲜。以道莅（lì）天下，其鬼不神。非其鬼不神，其神不伤人；非其神不伤人</p>\n<p>，圣人亦不伤人。夫两不相伤，故德交归焉。 〖译文〗</p>\n<p>【第六十一章】大国者下流。天下之交，天下之牝。牝常以静胜牡，以静为下。故大国以下小国，则取小</p>\n<p>国；小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜（xù）人，小国不过欲入事人，</p>\n<p>夫两者各得其所欲，大者宜为下。 〖译文〗</p>\n<p>【第六十二章】道者万物之奥，善人之宝，不善人之所保。美言可以市，尊行可以加人。人之不善，何弃</p>\n<p>之有！故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？不曰以求得，有罪</p>\n<p>以免邪（yé）？故为天下贵。 〖译文〗</p>\n<p>【第六十三章】为无为，事无事，味无味。大小多少，报怨以德。图难于其易，为大于其细。天下难事必</p>\n<p>作于易，天下大事必作于细，是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难，是以圣人犹</p>\n<p>难之。故终无难矣。 〖译文〗</p>\n<p>【第六十四章】其安易持，其未兆易谋，其脆易泮（pàn），其微易散。为之于未有，治之于未乱。合抱之</p>\n<p>木，生于毫末；九层之台，起于累土；千里之行，始于足下。为者败之，执者失之。是以圣人无为，故无</p>\n<p>败；无执，故无失。民之从事，常于几成而败之。慎终如始，则无败事。是以圣人欲不欲，不贵难得之货</p>\n<p>。学不学，复众人之所过。以辅万物之自然，而不敢为。 〖译文〗</p>\n<p>【第六十五章】古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以</p>\n<p>智治国，国之福。知此两者，亦稽（jī）式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃</p>\n<p>至大顺。 〖译文〗</p>\n<p>【第六十六章】江海所以能为百谷王者，以其善下之，故能为百谷王。是以欲上民，必以言下之；欲先民</p>\n<p>，必以身后之。是以圣人处上而民不重，处前而民不害，是以天下乐推而不厌。以其不争，故天下莫能与</p>\n<p>之争。 〖译文〗</p>\n<p>【第六十七章】天下皆谓我道大，似不肖（xiào）。夫唯大，故似不肖。若肖，久矣其细也夫。我有三宝</p>\n<p>，持而保之。一曰慈，二曰俭，三曰不敢为天下先。慈，故能勇；俭，故能广；不敢为天下先，故能成器</p>\n<p>长（zhǎng）。今舍慈且勇，舍俭且广，舍后且先，死矣！夫慈，以战则胜，以守则固，天将救之，以慈卫</p>\n<p>之。 〖译文〗</p>\n<p>【第六十八章】善为士者不武，善战者不怒，善胜敌者不与，善用人者为之下。是谓不争之德，是谓用人</p>\n<p>之力，是谓配天古之极。 〖译文〗</p>\n<p>【第六十九章】用兵有言，吾不敢为主而为客，不敢进寸而退尺。是谓行（xíng）无行（háng），攘</p>\n<p>(rǎng)无臂，扔无敌，执无兵。祸莫大于轻敌，轻敌几丧吾宝。故抗兵相加，哀者胜矣。 〖译文〗</p>\n<p>【第七十章】吾言甚易知，甚易行，天下莫能知，莫能行。言有宗，事有君。夫唯无知，是以不我知。知</p>\n<p>我者希，则我者贵，是以圣人被（pī，“被”同“披”）褐怀玉。 〖译文〗</p>\n<p>【第七十一章】知不知，上；不知知，病。夫唯病病，是以不病。圣人不病，以其病病，是以不病。 〖译文〗</p>\n<p>【第七十二章】民不畏威，则大威至。无狎（xiá）其所居，无厌（yà，“厌”同“压”）其所生。夫唯不</p>\n<p>厌（yà，“厌”同“压”），是以不厌(yàn)。是以圣人自知，不自见（xiàn）；自爱，不自贵。故去彼取</p>\n<p>此。 〖译文〗</p>\n<p>【第七十三章】勇于敢则杀，勇于不敢则活。此两者，或利或害。天之所恶（wù），孰知其故？是以圣人</p>\n<p>犹难之。天之道，不争而善胜，不言而善应，不召而自来，繟（chǎn）然而善谋。天网恢恢，疏而不失。 〖译文〗</p>\n<p>【第七十四章】民不畏死，奈何以死惧之！若使民常畏死，而为奇者，吾得执而杀之，孰敢？常有司杀者</p>\n<p>杀，夫代司杀者杀，是谓代大匠斫（zhuó）。夫代大匠斫者，希有不伤其手矣。 〖译文〗</p>\n<p>【第七十五章】民之饥，以其上食税之多，是以饥。民之难治，以其上之有为，是以难治。民之轻死，以</p>\n<p>其求生之厚，是以轻死。夫唯无以生为者，是贤于贵生。 〖译文〗</p>\n<p>【第七十六章】人之生也柔弱，其死也坚强。万物草木之生也柔脆，其死也枯槁。故坚强者死之徒，柔弱</p>\n<p>者生之徒。是以兵强则不胜，木强则兵。强大处下，柔弱处上。 〖译文〗</p>\n<p>【第七十七章】天之道，其犹张弓与！高者抑之，下者举之；有余者损之，不足者补之。天之道，损有余</p>\n<p>而补不足。人之道则不然，损不足以奉有余。孰能有余以奉天下？唯有道者。是以圣人为而不恃，功成而</p>\n<p>不处，其不欲见（xiàn）贤。 〖译文〗</p>\n<p>【第七十八章】天下莫柔弱于水，而攻坚强者莫之能胜，其无以易之。弱之胜强，柔之胜刚，天下莫不知</p>\n<p>，莫能行。是以圣人云，受国之垢，是谓社稷主；受国不祥，是为天下王。正言若反。 〖译文〗</p>\n<p>【第七十九章】和大怨，必有余怨，安可以为善？是以圣人执左契，而不责于人。有德司契，无德司彻。</p>\n<p>天道无亲，常与善人。 〖译文〗</p>\n<p>【第八十章】小国寡民，使有什伯（bǎi）之器而不用，使民重（zhòng）死而不远徙(xí)。虽有舟舆，无</p>\n<p>所乘之；虽有甲兵，无所陈之；使人复结绳而用之。甘其食，美其服，安其居，乐其俗。邻国相望，鸡犬</p>\n<p>之声相闻，民至老死不相往来。 〖译文〗</p>\n<p>【第八十一章】信言不美，美言不信；善者不辩，辩者不善；知（zhì）者不博，博者不知（zhì）。圣人</p>\n<p>不积，既以为人，己愈有；既以与人，己愈多。天之道，利而不害。圣人之道，为而不争。〖译文〗</p>\n"},{"title":"什么是民谣的诗意","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。","date":"2023-09-18T14:25:03.000Z","updated":"2023-09-18T14:25:03.000Z","sticky":2,"_content":"\n什么是民谣的诗意？\n\n说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国\n：诗的写作课》-黄梵和《人间词话》-王国维；\n\n我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？\n\n民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。\n\n音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。\n\n什么是民谣的诗意？\n\n说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国\n：诗的写作课》-黄梵和《人间词话》-王国维；\n\n我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？\n\n民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。\n\n音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。\n\n","source":"_posts/杂话集/什么是民谣的诗意.md","raw":"---\ntitle: 什么是民谣的诗意\ncategories: 随笔\ntags: 音乐\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。\ndate: 2023-09-18 22:25:03\nupdated: 2023-09-18 22:25:03\nsticky: 2\n---\n\n什么是民谣的诗意？\n\n说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国\n：诗的写作课》-黄梵和《人间词话》-王国维；\n\n我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？\n\n民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。\n\n音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。\n\n什么是民谣的诗意？\n\n说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国\n：诗的写作课》-黄梵和《人间词话》-王国维；\n\n我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？\n\n民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。\n\n音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。\n\n","slug":"杂话集/什么是民谣的诗意","published":1,"_id":"clw9eal2k00008slbgt7dddpk","layout":"post","photos":[],"link":"","content":"<p>什么是民谣的诗意？</p>\n<p>说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国<br>：诗的写作课》-黄梵和《人间词话》-王国维；</p>\n<p>我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？</p>\n<p>民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。</p>\n<p>音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。</p>\n<p>什么是民谣的诗意？</p>\n<p>说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国<br>：诗的写作课》-黄梵和《人间词话》-王国维；</p>\n<p>我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？</p>\n<p>民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。</p>\n<p>音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>什么是民谣的诗意？</p>\n<p>说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国<br>：诗的写作课》-黄梵和《人间词话》-王国维；</p>\n<p>我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？</p>\n<p>民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。</p>\n<p>音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。</p>\n<p>什么是民谣的诗意？</p>\n<p>说这个问题之前，我想先聊聊什么是诗意？而这又是一个很难讲明白的事情，所以我想先推荐两本书《意象的帝国<br>：诗的写作课》-黄梵和《人间词话》-王国维；</p>\n<p>我的理解诗意就是一种意境，一种不可言说之物，为什么叫不可言说呢？</p>\n<p>民谣是从当下生活入手进行颂扬或者批判，是自下向上的；摇滚则是从宏观层面，对宏大命题的反抗。</p>\n<p>音乐有没有必要分类？我认为是没有必要的，对于创作者，音乐是表达，对于听者，音乐是输入。那么为什么要分类呢？其实就是为了表述和传播方便。但是当我们创造出一个概念去定义一个风格的时候，就是对这个概念的收窄。道德经说，道可道，非常道，名可名，非常名，无名天地之始，有名万物之母；故恒无欲也，以观其眇；恒有欲也，以观其所徼。两者同出，异名同谓。玄之又玄，众眇之门。在没有一个概念之前，一个东西早就存在，但是我们必须要用一个概念去概况这个东西，但是当概念被发明之后，就有了边界，就需要区分概念和概念之间的差别。明白了这个，我们来看看民谣和摇滚。</p>\n"},{"title":"数据结构与算法笔记","author":"杨超","comments":1,"index_img":"/img/reboot.png","excerpt":"数据结构与算法笔记","date":"2023-01-20T02:00:00.000Z","updated":"2023-01-20T02:00:00.000Z","sticky":2,"_content":"\n知识地图：\n\n![image-20230708233839313](数据结构与算法.assets/image-20230708233839313-16888307278241.png)\n\n[LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台](https://leetcode.cn/leetbook/)\n\n\n\n数组和字符串：\n\n[数组和字符串 - LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台](https://leetcode.cn/leetbook/read/array-and-string/chg0d/)\n\n\n\n集合，列表和数组\n\n集合是个数学概念，表示一些元素组成的一个整体\n\n```c++\nclass Solution {\n\npublic:\n\n  int pivotIndex(vector<int>& nums) {\n\n​    vector<int> sumL(nums.size());\n\n​    vector<int> sumR(nums.size());\n\n​    int tempLeft = 0;\n\n​    int tempRight = 0;\n\n​    for (int i = 0; i < nums.size(); ++i) {\n\n​      tempLeft += nums[i];\n\n​      tempRight += nums[nums.size() - 1 -i];\n\n​      sumL[i] = tempLeft;\n\n​      sumR[nums.size() - 1 - i] = tempRight;\n\n​    }\n\n​    int index = 0;\n\n​    while (index < (nums.size() - 1)) {\n\n​      if (sumL[index] == sumR[index]) {\n\n​        return index;\n\n​      }\n\n​      index++; \n\n​    }\n\n​    if (sumL[index] == sumR[index]) {\n\n​      return index;\n\n​    }\n\n​    return -1;\n\n  }\n\n};\n```\n\n\n\n","source":"_posts/编程笔记/数据结构与算法.md","raw":"---\ntitle: 数据结构与算法笔记\ncategories: 数据结构\ntags: 计算机\nauthor: 杨超\ncomments: true\nindex_img: /img/reboot.png\nexcerpt: 数据结构与算法笔记\ndate: 2023-01-20 10:00:00\nupdated: 2023-01-20 10:00:00\nsticky: 2\n---\n\n知识地图：\n\n![image-20230708233839313](数据结构与算法.assets/image-20230708233839313-16888307278241.png)\n\n[LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台](https://leetcode.cn/leetbook/)\n\n\n\n数组和字符串：\n\n[数组和字符串 - LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台](https://leetcode.cn/leetbook/read/array-and-string/chg0d/)\n\n\n\n集合，列表和数组\n\n集合是个数学概念，表示一些元素组成的一个整体\n\n```c++\nclass Solution {\n\npublic:\n\n  int pivotIndex(vector<int>& nums) {\n\n​    vector<int> sumL(nums.size());\n\n​    vector<int> sumR(nums.size());\n\n​    int tempLeft = 0;\n\n​    int tempRight = 0;\n\n​    for (int i = 0; i < nums.size(); ++i) {\n\n​      tempLeft += nums[i];\n\n​      tempRight += nums[nums.size() - 1 -i];\n\n​      sumL[i] = tempLeft;\n\n​      sumR[nums.size() - 1 - i] = tempRight;\n\n​    }\n\n​    int index = 0;\n\n​    while (index < (nums.size() - 1)) {\n\n​      if (sumL[index] == sumR[index]) {\n\n​        return index;\n\n​      }\n\n​      index++; \n\n​    }\n\n​    if (sumL[index] == sumR[index]) {\n\n​      return index;\n\n​    }\n\n​    return -1;\n\n  }\n\n};\n```\n\n\n\n","slug":"编程笔记/数据结构与算法","published":1,"_id":"clw9eal3500038slbe0v4e6r4","layout":"post","photos":[],"link":"","content":"<p>知识地图：</p>\n<p><img src=\"/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.assets/image-20230708233839313-16888307278241.png\" alt=\"image-20230708233839313\"></p>\n<p><a href=\"https://leetcode.cn/leetbook/\">LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台</a></p>\n<p>数组和字符串：</p>\n<p><a href=\"https://leetcode.cn/leetbook/read/array-and-string/chg0d/\">数组和字符串 - LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台</a></p>\n<p>集合，列表和数组</p>\n<p>集合是个数学概念，表示一些元素组成的一个整体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><br><span class=\"hljs-keyword\">public</span>:<br><br>  <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">pivotIndex</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>​    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sumL</span><span class=\"hljs-params\">(nums.size())</span></span>;<br><br>​    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sumR</span><span class=\"hljs-params\">(nums.size())</span></span>;<br><br>​    <span class=\"hljs-type\">int</span> tempLeft = <span class=\"hljs-number\">0</span>;<br><br>​    <span class=\"hljs-type\">int</span> tempRight = <span class=\"hljs-number\">0</span>;<br><br>​    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br><br>​      tempLeft += nums[i];<br><br>​      tempRight += nums[nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span> -i];<br><br>​      sumL[i] = tempLeft;<br><br>​      sumR[nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span> - i] = tempRight;<br><br>​    &#125;<br><br>​    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;<br><br>​    <span class=\"hljs-keyword\">while</span> (index &lt; (nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>)) &#123;<br><br>​      <span class=\"hljs-keyword\">if</span> (sumL[index] == sumR[index]) &#123;<br><br>​        <span class=\"hljs-keyword\">return</span> index;<br><br>​      &#125;<br><br>​      index++; <br><br>​    &#125;<br><br>​    <span class=\"hljs-keyword\">if</span> (sumL[index] == sumR[index]) &#123;<br><br>​      <span class=\"hljs-keyword\">return</span> index;<br><br>​    &#125;<br><br>​    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br><br>  &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>知识地图：</p>\n<p><img src=\"/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.assets/image-20230708233839313-16888307278241.png\" alt=\"image-20230708233839313\"></p>\n<p><a href=\"https://leetcode.cn/leetbook/\">LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台</a></p>\n<p>数组和字符串：</p>\n<p><a href=\"https://leetcode.cn/leetbook/read/array-and-string/chg0d/\">数组和字符串 - LeetBook - 力扣（LeetCode）全球极客挚爱的技术成长平台</a></p>\n<p>集合，列表和数组</p>\n<p>集合是个数学概念，表示一些元素组成的一个整体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;<br><br><span class=\"hljs-keyword\">public</span>:<br><br>  <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">pivotIndex</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; nums)</span> </span>&#123;<br><br>​    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sumL</span><span class=\"hljs-params\">(nums.size())</span></span>;<br><br>​    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">sumR</span><span class=\"hljs-params\">(nums.size())</span></span>;<br><br>​    <span class=\"hljs-type\">int</span> tempLeft = <span class=\"hljs-number\">0</span>;<br><br>​    <span class=\"hljs-type\">int</span> tempRight = <span class=\"hljs-number\">0</span>;<br><br>​    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>(); ++i) &#123;<br><br>​      tempLeft += nums[i];<br><br>​      tempRight += nums[nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span> -i];<br><br>​      sumL[i] = tempLeft;<br><br>​      sumR[nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span> - i] = tempRight;<br><br>​    &#125;<br><br>​    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;<br><br>​    <span class=\"hljs-keyword\">while</span> (index &lt; (nums.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>)) &#123;<br><br>​      <span class=\"hljs-keyword\">if</span> (sumL[index] == sumR[index]) &#123;<br><br>​        <span class=\"hljs-keyword\">return</span> index;<br><br>​      &#125;<br><br>​      index++; <br><br>​    &#125;<br><br>​    <span class=\"hljs-keyword\">if</span> (sumL[index] == sumR[index]) &#123;<br><br>​      <span class=\"hljs-keyword\">return</span> index;<br><br>​    &#125;<br><br>​    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br><br>  &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"读书笔记--《中国哲学简史》--冯友兰","author":"Noodles","comments":1,"index_img":"/img/book.png","excerpt":"无论我们是否思人生，是否谈人生，我们都是在人生之中。在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。","date":"2022-09-22T02:00:00.000Z","updated":"2022-09-28T12:00:00.000Z","sticky":3,"_content":"\n - 我所说的的哲学，就是对于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。\n\n- 哲学家必须进行哲学化，这就是说，他必须对于人生反思的思想，然后有系统地表达他的思想。\n\n - 这种思想，所以谓之反思的，因为他以人生为对象。\n\n - 无论我们是否思人生，是否谈人生，我们都是在人生之中。\n\n- 在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。\n\n***\n\n## 1、中国哲学的精神\n\n哲学在中国文化中的地位，类似于宗教在其他文化中的地位。在旧时只要一个人接受教育就是以哲学启蒙。《四书五经》，《三字经》等都是启蒙读物；\n\n`其实不仅仅是接受教育的人，几乎中国旧时所有的人都是在一个哲学框架下生活的，即使他并未接受教育。他们或者说我们的人生也是在这个框架下进行的，中国的哲学规定了中国人的人生，充填了他们的精神生活。而当下我们都在面临一场精神危机，西化下我们完成了物质积累，却失去了精神标准。`\n\n\n\n\n**     **宗教和哲学是不同的，而儒家虽然渗透人们的生活，但它并不比柏拉图或者亚里士多德的学说更像宗教。哲学和宗教都是多义的，不同人在谈论着两者时，心中所想及观念都不尽相同。至于我所说的哲学，就是对 于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。\n\n    宗教也和人生有关系，每种大宗教的核心都是一种哲学。事实上，每种大宗教就是一种哲学加上一定的上层建筑，包括迷信、教条、仪式和组织。这就是我所说的宗家。\n    \n    按照这样的定义，就可以认为不能认为儒家是宗教。人们习惯于说中国有三教：儒教、道教、佛教；而这三者其实都不是宗教。\n\n<br/>\n\n道家与道教的教义不仅不同，甚至相反，道家教人顺乎自然，而道教教人反乎自然。具体来讲，照老子、庄子讲，生而有死是自然过程，人应当平静的顺着这个自然过程。但是道教的教义则是如何避免死亡的原理和方术，显然是反乎自然而行的。道教的有征服自然的科学精神。\n\n作为哲学的佛教与作为宗教的佛学也是有区别的。作为哲学的佛教主要体现在普通人的生活中的佛教思想，而作为宗教的佛教，主要在寺庙中。\n\n通过哲学而熟悉的更高价值，比通过宗教而获得的要纯粹的多，因为宗教中混杂着想象和迷信。\n\n  在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。他一旦是哲学的，他也就有了正是宗教的洪福。\n\n\n`N：看完开始体会到了冯友兰先生在使用尽量逻辑化的表达去在定义命题，先阐述宗教和哲学的定义，由此呈现出两者的差别。继而说明中国的儒学、道家、佛教非宗教而是哲学。 哲学中去除了宗教中的迷信和想象部分，所以可以获得更高的价值。未来世界 要以哲学代替宗教，刚好跟中国传统相合。`\n\n### b：中国哲学的问题和精神\n\n     中国哲学历史上有个主流，可以叫做中国哲学的精神。为了了解这个精神，先要弄清楚绝大多数中国哲学家试图解决的问题。\n\n每个领域的从业者都有在对于领域获得所可能有的最高成就。例如从事于实际政治的人，\n\n\n以下是文心一言写的读书笔记：\n\n## 引言\n《中国哲学简史》是冯友兰先生于20世纪三四十年代在清华大学和西南联大讲授中国哲学史的讲义修订而成。这本书系统阐述了中国哲学发展史，是中国哲学史上的经典著作之一。\n阅读本书的目的是了解中国哲学的历史、文化和价值观，并通过理解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。\n## 整体感受\n《中国哲学简史》是一本内容丰富、结构清晰、语言简练的著作。冯友兰先生的学术功底和写作风格让人敬佩，他通过简洁明了的语言和深刻的分析，将复杂的哲学思想深入浅出地呈现给读者。\n本书的特点在于其全面性和详尽性，作者不仅介绍了每个时代的哲学家和他们的思想，还对当时的社会背景和政治环境进行了深入的分析。这种全面的分析和描述使得读者可以更加深入地了解每个时代的哲学家和他们的思想，以及他们对于中国哲学发展的贡献。\n本书的价值在于它为读者提供了一个全面了解中国哲学史的机会，让读者可以通过了解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。此外，本书也为读者提供了一个了解中国传统文化的窗口，通过阅读本书可以更好地理解中国文化的根源和发展历程。\n## 哲学思想史\n中国哲学思想史是一个漫长而丰富的发展过程，主要经历了先秦时期、汉唐时期、宋元明清时期以及现代时期等几个阶段。\n先秦时期是儒家、道家、墨家、法家等各个哲学流派竞相辉映的时期。其中儒家强调仁爱、礼制和道德，代表人物包括孔子、孟子和荀子等；道家强调自然、无为和平衡，代表人物包括老子和庄子等；墨家强调兼爱和非攻，代表人物是墨子；法家强调法律、权力和功利，代表人物包括韩非子和商鞅等。\n汉唐时期佛教思想的传入和本土化，形成了佛教的中国化和禅宗的形成。其中佛教强调解脱、慈悲和智慧，代表人物包括释迦牟尼佛和观音菩萨等；禅宗强调内心平静、超越自我和顿悟，代表人物包括达摩和慧能等。\n宋元明清时期是理学、心学和社会政治哲学的时期。其中理学强调理性、天理和人伦，代表人物包括程颐、程颢和朱熹等；心学强调个体意识和自由意志，代表人物包括陆九渊和王阳明等；社会政治哲学强调人治与法治的平衡、国富民强和社会和谐，代表人物包括孟子、荀子和韩非子等。\n现代时期是中国哲学的转型和发展时期，主要涉及新儒家、新道家和新墨家等各个流派的发展。其中新儒家强调文化自觉和现代价值观念的建立，代表人物包括梁漱溟和唐君毅等；新道家强调科技与自然的关系、环境保护和人类文明的可持续发展，代表人物包括王蒙和刘宾红等；新墨家强调实践和科学精神，代表人物包括孙中山和邓小平等。\n## 哲学在现代社会的意义\n中国哲学在现代社会中具有重要的意义和价值。在当今全球化和信息化的时代背景下，中国哲学的智慧可以为人们提供思考的支点和启示。\n儒家强调仁爱、道德和人伦关系，对于现代社会的价值观建设和社会治理具有重要的启示意义。儒家思想中的“仁政”、“民本”等理念对于政府治理和社会公益事业的发展具有指导作用。\n道家强调自然、无为和平衡，对于现代社会的环境保护和可持续发展具有重要的启示意义。道家思想中的“天人合一”、“道法自然”等理念对于人类与自然的和谐共处具有指导作用。\n墨家强调兼爱、非攻和平等，对于现代社会的和平发展和社会正义具有重要的启示意义。墨家思想中的“兼相爱”、“交相利”等理念对于国际关系和社会公共利益的发展具有指导作用。\n法家强调法律、权力和功利，对于现代社会的法治建设和经济发展具有重要的启示意义。法家思想中的“以法治国”、“因时而变”等理念对于政府治理和企业创新具有指导作用。\n现代社会面临着诸多挑战和问题，如环境保护、社会公正、科技发展等。中国哲学可以为解决这些问题提供智慧和启示，帮助人们更好地应对现代社会的挑战。\n## 个人收获与思考\n通过阅读《中国哲学简史》，我深刻认识到了中国哲学的丰富内涵和价值意义。这本书不仅让我了解了中国哲学史的发展过程，还让我更加深入地认识了中国文化的根源和发展历程。\n流派的思想和代表人物的研究，我深刻认识到了中国哲学中的一些重要思想和价值观。例如，儒家思想中的“仁爱”、“礼制”和“道德”，道家思想中的“自然”、“无为”和“平衡”，墨家思想中的“兼爱”、“非攻”和“平等”，以及法家思想中的“法治”、“权力”和“功利”等。这些思想在当今社会仍然具有重要的意义，可以帮助我们更好地理解人与人之间的关系、社会的运作以及我们自身的修养。\n\n通过阅读《中国哲学简史》，我也从中国哲学中汲取了一些重要的智慧和启示。例如，从儒家思想中，我学到了要注重内心修养、要学会宽容和包容、要尊重他人并关心他人的利益；从道家思想中，我学到了要学会平衡自己的欲望和行为、要追求内心的平静和自然；从墨家思想中，我学到了要追求和平与非攻、要倡导平等和合作；从法家思想中，我学到了要遵守法律和规则、要注重实效和创新。这些智慧和启示对于我的个人成长和发展具有重要的意义，也帮助我在面对各种问题和挑战时更加从容和明智。\n\n## 结论\n《中国哲学简史》是一本非常有价值的读物，它对于对中国哲学感兴趣的读者来说是一本非常值得一读的读物。如果你正在寻找一本系统阐述中国哲学发展史的书籍，那么这本书将是你不容错过的选择。\n通过阅读这本书，你可以了解中国哲学的历史、文化和价值观，并深入理解中国哲学的精髓和智慧。同时，这本书也可以帮助你更好地了解中国文化的根源和发展历程，以及中国哲学对于个人成长和社会的价值。\n在阅读过程中，你可以通过思考和反思，结合自己的实际经验和感受，将中国哲学的智慧应用于自己的生活和工作中。通过这种方式，你可以更好地实现自我成长和发展，同时也可以为个人和社会的发展做出积极的贡献。\n总之，《中国哲学简史》是一本充满智慧和启示的书籍，它可以帮助你更好地认识自己、提高自己的思考能力和修养水平，同时也可以为你的个人成长和社会发展提供重要的支持和帮助。\n\n## 参考\n[^1]: <中国哲学简史>\n[^2]: <中国哲学史>","source":"_posts/读书笔记/《中国哲学简史》.md","raw":"---\ntitle: 读书笔记--《中国哲学简史》--冯友兰\ncategories: 读书笔记\ntags: 哲学\nauthor: Noodles\ncomments: true\nindex_img: /img/book.png\nexcerpt: 无论我们是否思人生，是否谈人生，我们都是在人生之中。在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。\ndate: 2022-09-22 10:00:00\nupdated: 2022-09-28 20:00:00\nsticky: 3\n---\n\n - 我所说的的哲学，就是对于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。\n\n- 哲学家必须进行哲学化，这就是说，他必须对于人生反思的思想，然后有系统地表达他的思想。\n\n - 这种思想，所以谓之反思的，因为他以人生为对象。\n\n - 无论我们是否思人生，是否谈人生，我们都是在人生之中。\n\n- 在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。\n\n***\n\n## 1、中国哲学的精神\n\n哲学在中国文化中的地位，类似于宗教在其他文化中的地位。在旧时只要一个人接受教育就是以哲学启蒙。《四书五经》，《三字经》等都是启蒙读物；\n\n`其实不仅仅是接受教育的人，几乎中国旧时所有的人都是在一个哲学框架下生活的，即使他并未接受教育。他们或者说我们的人生也是在这个框架下进行的，中国的哲学规定了中国人的人生，充填了他们的精神生活。而当下我们都在面临一场精神危机，西化下我们完成了物质积累，却失去了精神标准。`\n\n\n\n\n**     **宗教和哲学是不同的，而儒家虽然渗透人们的生活，但它并不比柏拉图或者亚里士多德的学说更像宗教。哲学和宗教都是多义的，不同人在谈论着两者时，心中所想及观念都不尽相同。至于我所说的哲学，就是对 于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。\n\n    宗教也和人生有关系，每种大宗教的核心都是一种哲学。事实上，每种大宗教就是一种哲学加上一定的上层建筑，包括迷信、教条、仪式和组织。这就是我所说的宗家。\n    \n    按照这样的定义，就可以认为不能认为儒家是宗教。人们习惯于说中国有三教：儒教、道教、佛教；而这三者其实都不是宗教。\n\n<br/>\n\n道家与道教的教义不仅不同，甚至相反，道家教人顺乎自然，而道教教人反乎自然。具体来讲，照老子、庄子讲，生而有死是自然过程，人应当平静的顺着这个自然过程。但是道教的教义则是如何避免死亡的原理和方术，显然是反乎自然而行的。道教的有征服自然的科学精神。\n\n作为哲学的佛教与作为宗教的佛学也是有区别的。作为哲学的佛教主要体现在普通人的生活中的佛教思想，而作为宗教的佛教，主要在寺庙中。\n\n通过哲学而熟悉的更高价值，比通过宗教而获得的要纯粹的多，因为宗教中混杂着想象和迷信。\n\n  在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。他一旦是哲学的，他也就有了正是宗教的洪福。\n\n\n`N：看完开始体会到了冯友兰先生在使用尽量逻辑化的表达去在定义命题，先阐述宗教和哲学的定义，由此呈现出两者的差别。继而说明中国的儒学、道家、佛教非宗教而是哲学。 哲学中去除了宗教中的迷信和想象部分，所以可以获得更高的价值。未来世界 要以哲学代替宗教，刚好跟中国传统相合。`\n\n### b：中国哲学的问题和精神\n\n     中国哲学历史上有个主流，可以叫做中国哲学的精神。为了了解这个精神，先要弄清楚绝大多数中国哲学家试图解决的问题。\n\n每个领域的从业者都有在对于领域获得所可能有的最高成就。例如从事于实际政治的人，\n\n\n以下是文心一言写的读书笔记：\n\n## 引言\n《中国哲学简史》是冯友兰先生于20世纪三四十年代在清华大学和西南联大讲授中国哲学史的讲义修订而成。这本书系统阐述了中国哲学发展史，是中国哲学史上的经典著作之一。\n阅读本书的目的是了解中国哲学的历史、文化和价值观，并通过理解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。\n## 整体感受\n《中国哲学简史》是一本内容丰富、结构清晰、语言简练的著作。冯友兰先生的学术功底和写作风格让人敬佩，他通过简洁明了的语言和深刻的分析，将复杂的哲学思想深入浅出地呈现给读者。\n本书的特点在于其全面性和详尽性，作者不仅介绍了每个时代的哲学家和他们的思想，还对当时的社会背景和政治环境进行了深入的分析。这种全面的分析和描述使得读者可以更加深入地了解每个时代的哲学家和他们的思想，以及他们对于中国哲学发展的贡献。\n本书的价值在于它为读者提供了一个全面了解中国哲学史的机会，让读者可以通过了解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。此外，本书也为读者提供了一个了解中国传统文化的窗口，通过阅读本书可以更好地理解中国文化的根源和发展历程。\n## 哲学思想史\n中国哲学思想史是一个漫长而丰富的发展过程，主要经历了先秦时期、汉唐时期、宋元明清时期以及现代时期等几个阶段。\n先秦时期是儒家、道家、墨家、法家等各个哲学流派竞相辉映的时期。其中儒家强调仁爱、礼制和道德，代表人物包括孔子、孟子和荀子等；道家强调自然、无为和平衡，代表人物包括老子和庄子等；墨家强调兼爱和非攻，代表人物是墨子；法家强调法律、权力和功利，代表人物包括韩非子和商鞅等。\n汉唐时期佛教思想的传入和本土化，形成了佛教的中国化和禅宗的形成。其中佛教强调解脱、慈悲和智慧，代表人物包括释迦牟尼佛和观音菩萨等；禅宗强调内心平静、超越自我和顿悟，代表人物包括达摩和慧能等。\n宋元明清时期是理学、心学和社会政治哲学的时期。其中理学强调理性、天理和人伦，代表人物包括程颐、程颢和朱熹等；心学强调个体意识和自由意志，代表人物包括陆九渊和王阳明等；社会政治哲学强调人治与法治的平衡、国富民强和社会和谐，代表人物包括孟子、荀子和韩非子等。\n现代时期是中国哲学的转型和发展时期，主要涉及新儒家、新道家和新墨家等各个流派的发展。其中新儒家强调文化自觉和现代价值观念的建立，代表人物包括梁漱溟和唐君毅等；新道家强调科技与自然的关系、环境保护和人类文明的可持续发展，代表人物包括王蒙和刘宾红等；新墨家强调实践和科学精神，代表人物包括孙中山和邓小平等。\n## 哲学在现代社会的意义\n中国哲学在现代社会中具有重要的意义和价值。在当今全球化和信息化的时代背景下，中国哲学的智慧可以为人们提供思考的支点和启示。\n儒家强调仁爱、道德和人伦关系，对于现代社会的价值观建设和社会治理具有重要的启示意义。儒家思想中的“仁政”、“民本”等理念对于政府治理和社会公益事业的发展具有指导作用。\n道家强调自然、无为和平衡，对于现代社会的环境保护和可持续发展具有重要的启示意义。道家思想中的“天人合一”、“道法自然”等理念对于人类与自然的和谐共处具有指导作用。\n墨家强调兼爱、非攻和平等，对于现代社会的和平发展和社会正义具有重要的启示意义。墨家思想中的“兼相爱”、“交相利”等理念对于国际关系和社会公共利益的发展具有指导作用。\n法家强调法律、权力和功利，对于现代社会的法治建设和经济发展具有重要的启示意义。法家思想中的“以法治国”、“因时而变”等理念对于政府治理和企业创新具有指导作用。\n现代社会面临着诸多挑战和问题，如环境保护、社会公正、科技发展等。中国哲学可以为解决这些问题提供智慧和启示，帮助人们更好地应对现代社会的挑战。\n## 个人收获与思考\n通过阅读《中国哲学简史》，我深刻认识到了中国哲学的丰富内涵和价值意义。这本书不仅让我了解了中国哲学史的发展过程，还让我更加深入地认识了中国文化的根源和发展历程。\n流派的思想和代表人物的研究，我深刻认识到了中国哲学中的一些重要思想和价值观。例如，儒家思想中的“仁爱”、“礼制”和“道德”，道家思想中的“自然”、“无为”和“平衡”，墨家思想中的“兼爱”、“非攻”和“平等”，以及法家思想中的“法治”、“权力”和“功利”等。这些思想在当今社会仍然具有重要的意义，可以帮助我们更好地理解人与人之间的关系、社会的运作以及我们自身的修养。\n\n通过阅读《中国哲学简史》，我也从中国哲学中汲取了一些重要的智慧和启示。例如，从儒家思想中，我学到了要注重内心修养、要学会宽容和包容、要尊重他人并关心他人的利益；从道家思想中，我学到了要学会平衡自己的欲望和行为、要追求内心的平静和自然；从墨家思想中，我学到了要追求和平与非攻、要倡导平等和合作；从法家思想中，我学到了要遵守法律和规则、要注重实效和创新。这些智慧和启示对于我的个人成长和发展具有重要的意义，也帮助我在面对各种问题和挑战时更加从容和明智。\n\n## 结论\n《中国哲学简史》是一本非常有价值的读物，它对于对中国哲学感兴趣的读者来说是一本非常值得一读的读物。如果你正在寻找一本系统阐述中国哲学发展史的书籍，那么这本书将是你不容错过的选择。\n通过阅读这本书，你可以了解中国哲学的历史、文化和价值观，并深入理解中国哲学的精髓和智慧。同时，这本书也可以帮助你更好地了解中国文化的根源和发展历程，以及中国哲学对于个人成长和社会的价值。\n在阅读过程中，你可以通过思考和反思，结合自己的实际经验和感受，将中国哲学的智慧应用于自己的生活和工作中。通过这种方式，你可以更好地实现自我成长和发展，同时也可以为个人和社会的发展做出积极的贡献。\n总之，《中国哲学简史》是一本充满智慧和启示的书籍，它可以帮助你更好地认识自己、提高自己的思考能力和修养水平，同时也可以为你的个人成长和社会发展提供重要的支持和帮助。\n\n## 参考\n[^1]: <中国哲学简史>\n[^2]: <中国哲学史>","slug":"读书笔记/《中国哲学简史》","published":1,"_id":"clw9eh07i00001wlbag8ablmj","layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>我所说的的哲学，就是对于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。</p>\n</li>\n<li><p>哲学家必须进行哲学化，这就是说，他必须对于人生反思的思想，然后有系统地表达他的思想。</p>\n</li>\n<li><p>这种思想，所以谓之反思的，因为他以人生为对象。</p>\n</li>\n<li><p>无论我们是否思人生，是否谈人生，我们都是在人生之中。</p>\n</li>\n<li><p>在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"1、中国哲学的精神\"><a href=\"#1、中国哲学的精神\" class=\"headerlink\" title=\"1、中国哲学的精神\"></a>1、中国哲学的精神</h2><p>哲学在中国文化中的地位，类似于宗教在其他文化中的地位。在旧时只要一个人接受教育就是以哲学启蒙。《四书五经》，《三字经》等都是启蒙读物；</p>\n<p><code>其实不仅仅是接受教育的人，几乎中国旧时所有的人都是在一个哲学框架下生活的，即使他并未接受教育。他们或者说我们的人生也是在这个框架下进行的，中国的哲学规定了中国人的人生，充填了他们的精神生活。而当下我们都在面临一场精神危机，西化下我们完成了物质积累，却失去了精神标准。</code></p>\n<p>**     **宗教和哲学是不同的，而儒家虽然渗透人们的生活，但它并不比柏拉图或者亚里士多德的学说更像宗教。哲学和宗教都是多义的，不同人在谈论着两者时，心中所想及观念都不尽相同。至于我所说的哲学，就是对 于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。</p>\n<pre><code class=\"hljs\">宗教也和人生有关系，每种大宗教的核心都是一种哲学。事实上，每种大宗教就是一种哲学加上一定的上层建筑，包括迷信、教条、仪式和组织。这就是我所说的宗家。\n\n按照这样的定义，就可以认为不能认为儒家是宗教。人们习惯于说中国有三教：儒教、道教、佛教；而这三者其实都不是宗教。\n</code></pre>\n<br/>\n\n<p>道家与道教的教义不仅不同，甚至相反，道家教人顺乎自然，而道教教人反乎自然。具体来讲，照老子、庄子讲，生而有死是自然过程，人应当平静的顺着这个自然过程。但是道教的教义则是如何避免死亡的原理和方术，显然是反乎自然而行的。道教的有征服自然的科学精神。</p>\n<p>作为哲学的佛教与作为宗教的佛学也是有区别的。作为哲学的佛教主要体现在普通人的生活中的佛教思想，而作为宗教的佛教，主要在寺庙中。</p>\n<p>通过哲学而熟悉的更高价值，比通过宗教而获得的要纯粹的多，因为宗教中混杂着想象和迷信。</p>\n<p>  在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。他一旦是哲学的，他也就有了正是宗教的洪福。</p>\n<p><code>N：看完开始体会到了冯友兰先生在使用尽量逻辑化的表达去在定义命题，先阐述宗教和哲学的定义，由此呈现出两者的差别。继而说明中国的儒学、道家、佛教非宗教而是哲学。 哲学中去除了宗教中的迷信和想象部分，所以可以获得更高的价值。未来世界 要以哲学代替宗教，刚好跟中国传统相合。</code></p>\n<h3 id=\"b：中国哲学的问题和精神\"><a href=\"#b：中国哲学的问题和精神\" class=\"headerlink\" title=\"b：中国哲学的问题和精神\"></a>b：中国哲学的问题和精神</h3><pre><code class=\"hljs\"> 中国哲学历史上有个主流，可以叫做中国哲学的精神。为了了解这个精神，先要弄清楚绝大多数中国哲学家试图解决的问题。\n</code></pre>\n<p>每个领域的从业者都有在对于领域获得所可能有的最高成就。例如从事于实际政治的人，</p>\n<p>以下是文心一言写的读书笔记：</p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>《中国哲学简史》是冯友兰先生于20世纪三四十年代在清华大学和西南联大讲授中国哲学史的讲义修订而成。这本书系统阐述了中国哲学发展史，是中国哲学史上的经典著作之一。<br>阅读本书的目的是了解中国哲学的历史、文化和价值观，并通过理解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。</p>\n<h2 id=\"整体感受\"><a href=\"#整体感受\" class=\"headerlink\" title=\"整体感受\"></a>整体感受</h2><p>《中国哲学简史》是一本内容丰富、结构清晰、语言简练的著作。冯友兰先生的学术功底和写作风格让人敬佩，他通过简洁明了的语言和深刻的分析，将复杂的哲学思想深入浅出地呈现给读者。<br>本书的特点在于其全面性和详尽性，作者不仅介绍了每个时代的哲学家和他们的思想，还对当时的社会背景和政治环境进行了深入的分析。这种全面的分析和描述使得读者可以更加深入地了解每个时代的哲学家和他们的思想，以及他们对于中国哲学发展的贡献。<br>本书的价值在于它为读者提供了一个全面了解中国哲学史的机会，让读者可以通过了解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。此外，本书也为读者提供了一个了解中国传统文化的窗口，通过阅读本书可以更好地理解中国文化的根源和发展历程。</p>\n<h2 id=\"哲学思想史\"><a href=\"#哲学思想史\" class=\"headerlink\" title=\"哲学思想史\"></a>哲学思想史</h2><p>中国哲学思想史是一个漫长而丰富的发展过程，主要经历了先秦时期、汉唐时期、宋元明清时期以及现代时期等几个阶段。<br>先秦时期是儒家、道家、墨家、法家等各个哲学流派竞相辉映的时期。其中儒家强调仁爱、礼制和道德，代表人物包括孔子、孟子和荀子等；道家强调自然、无为和平衡，代表人物包括老子和庄子等；墨家强调兼爱和非攻，代表人物是墨子；法家强调法律、权力和功利，代表人物包括韩非子和商鞅等。<br>汉唐时期佛教思想的传入和本土化，形成了佛教的中国化和禅宗的形成。其中佛教强调解脱、慈悲和智慧，代表人物包括释迦牟尼佛和观音菩萨等；禅宗强调内心平静、超越自我和顿悟，代表人物包括达摩和慧能等。<br>宋元明清时期是理学、心学和社会政治哲学的时期。其中理学强调理性、天理和人伦，代表人物包括程颐、程颢和朱熹等；心学强调个体意识和自由意志，代表人物包括陆九渊和王阳明等；社会政治哲学强调人治与法治的平衡、国富民强和社会和谐，代表人物包括孟子、荀子和韩非子等。<br>现代时期是中国哲学的转型和发展时期，主要涉及新儒家、新道家和新墨家等各个流派的发展。其中新儒家强调文化自觉和现代价值观念的建立，代表人物包括梁漱溟和唐君毅等；新道家强调科技与自然的关系、环境保护和人类文明的可持续发展，代表人物包括王蒙和刘宾红等；新墨家强调实践和科学精神，代表人物包括孙中山和邓小平等。</p>\n<h2 id=\"哲学在现代社会的意义\"><a href=\"#哲学在现代社会的意义\" class=\"headerlink\" title=\"哲学在现代社会的意义\"></a>哲学在现代社会的意义</h2><p>中国哲学在现代社会中具有重要的意义和价值。在当今全球化和信息化的时代背景下，中国哲学的智慧可以为人们提供思考的支点和启示。<br>儒家强调仁爱、道德和人伦关系，对于现代社会的价值观建设和社会治理具有重要的启示意义。儒家思想中的“仁政”、“民本”等理念对于政府治理和社会公益事业的发展具有指导作用。<br>道家强调自然、无为和平衡，对于现代社会的环境保护和可持续发展具有重要的启示意义。道家思想中的“天人合一”、“道法自然”等理念对于人类与自然的和谐共处具有指导作用。<br>墨家强调兼爱、非攻和平等，对于现代社会的和平发展和社会正义具有重要的启示意义。墨家思想中的“兼相爱”、“交相利”等理念对于国际关系和社会公共利益的发展具有指导作用。<br>法家强调法律、权力和功利，对于现代社会的法治建设和经济发展具有重要的启示意义。法家思想中的“以法治国”、“因时而变”等理念对于政府治理和企业创新具有指导作用。<br>现代社会面临着诸多挑战和问题，如环境保护、社会公正、科技发展等。中国哲学可以为解决这些问题提供智慧和启示，帮助人们更好地应对现代社会的挑战。</p>\n<h2 id=\"个人收获与思考\"><a href=\"#个人收获与思考\" class=\"headerlink\" title=\"个人收获与思考\"></a>个人收获与思考</h2><p>通过阅读《中国哲学简史》，我深刻认识到了中国哲学的丰富内涵和价值意义。这本书不仅让我了解了中国哲学史的发展过程，还让我更加深入地认识了中国文化的根源和发展历程。<br>流派的思想和代表人物的研究，我深刻认识到了中国哲学中的一些重要思想和价值观。例如，儒家思想中的“仁爱”、“礼制”和“道德”，道家思想中的“自然”、“无为”和“平衡”，墨家思想中的“兼爱”、“非攻”和“平等”，以及法家思想中的“法治”、“权力”和“功利”等。这些思想在当今社会仍然具有重要的意义，可以帮助我们更好地理解人与人之间的关系、社会的运作以及我们自身的修养。</p>\n<p>通过阅读《中国哲学简史》，我也从中国哲学中汲取了一些重要的智慧和启示。例如，从儒家思想中，我学到了要注重内心修养、要学会宽容和包容、要尊重他人并关心他人的利益；从道家思想中，我学到了要学会平衡自己的欲望和行为、要追求内心的平静和自然；从墨家思想中，我学到了要追求和平与非攻、要倡导平等和合作；从法家思想中，我学到了要遵守法律和规则、要注重实效和创新。这些智慧和启示对于我的个人成长和发展具有重要的意义，也帮助我在面对各种问题和挑战时更加从容和明智。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>《中国哲学简史》是一本非常有价值的读物，它对于对中国哲学感兴趣的读者来说是一本非常值得一读的读物。如果你正在寻找一本系统阐述中国哲学发展史的书籍，那么这本书将是你不容错过的选择。<br>通过阅读这本书，你可以了解中国哲学的历史、文化和价值观，并深入理解中国哲学的精髓和智慧。同时，这本书也可以帮助你更好地了解中国文化的根源和发展历程，以及中国哲学对于个人成长和社会的价值。<br>在阅读过程中，你可以通过思考和反思，结合自己的实际经验和感受，将中国哲学的智慧应用于自己的生活和工作中。通过这种方式，你可以更好地实现自我成长和发展，同时也可以为个人和社会的发展做出积极的贡献。<br>总之，《中国哲学简史》是一本充满智慧和启示的书籍，它可以帮助你更好地认识自己、提高自己的思考能力和修养水平，同时也可以为你的个人成长和社会发展提供重要的支持和帮助。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;中国哲学简史&gt;\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>&lt;中国哲学史&gt;\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<ul>\n<li><p>我所说的的哲学，就是对于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。</p>\n</li>\n<li><p>哲学家必须进行哲学化，这就是说，他必须对于人生反思的思想，然后有系统地表达他的思想。</p>\n</li>\n<li><p>这种思想，所以谓之反思的，因为他以人生为对象。</p>\n</li>\n<li><p>无论我们是否思人生，是否谈人生，我们都是在人生之中。</p>\n</li>\n<li><p>在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"1、中国哲学的精神\"><a href=\"#1、中国哲学的精神\" class=\"headerlink\" title=\"1、中国哲学的精神\"></a>1、中国哲学的精神</h2><p>哲学在中国文化中的地位，类似于宗教在其他文化中的地位。在旧时只要一个人接受教育就是以哲学启蒙。《四书五经》，《三字经》等都是启蒙读物；</p>\n<p><code>其实不仅仅是接受教育的人，几乎中国旧时所有的人都是在一个哲学框架下生活的，即使他并未接受教育。他们或者说我们的人生也是在这个框架下进行的，中国的哲学规定了中国人的人生，充填了他们的精神生活。而当下我们都在面临一场精神危机，西化下我们完成了物质积累，却失去了精神标准。</code></p>\n<p>**     **宗教和哲学是不同的，而儒家虽然渗透人们的生活，但它并不比柏拉图或者亚里士多德的学说更像宗教。哲学和宗教都是多义的，不同人在谈论着两者时，心中所想及观念都不尽相同。至于我所说的哲学，就是对 于人生的有系统的反思的思想。每一个人，只要他没有死，他就在人生中。</p>\n<pre><code>宗教也和人生有关系，每种大宗教的核心都是一种哲学。事实上，每种大宗教就是一种哲学加上一定的上层建筑，包括迷信、教条、仪式和组织。这就是我所说的宗家。\n\n按照这样的定义，就可以认为不能认为儒家是宗教。人们习惯于说中国有三教：儒教、道教、佛教；而这三者其实都不是宗教。\n</code></pre>\n<br/>\n\n<p>道家与道教的教义不仅不同，甚至相反，道家教人顺乎自然，而道教教人反乎自然。具体来讲，照老子、庄子讲，生而有死是自然过程，人应当平静的顺着这个自然过程。但是道教的教义则是如何避免死亡的原理和方术，显然是反乎自然而行的。道教的有征服自然的科学精神。</p>\n<p>作为哲学的佛教与作为宗教的佛学也是有区别的。作为哲学的佛教主要体现在普通人的生活中的佛教思想，而作为宗教的佛教，主要在寺庙中。</p>\n<p>通过哲学而熟悉的更高价值，比通过宗教而获得的要纯粹的多，因为宗教中混杂着想象和迷信。</p>\n<p>  在未来的世界，人们将要以哲学代宗教。这是与中国传统相合的。人不一定是宗教的，但是他一定应当是哲学的。他一旦是哲学的，他也就有了正是宗教的洪福。</p>\n<p><code>N：看完开始体会到了冯友兰先生在使用尽量逻辑化的表达去在定义命题，先阐述宗教和哲学的定义，由此呈现出两者的差别。继而说明中国的儒学、道家、佛教非宗教而是哲学。 哲学中去除了宗教中的迷信和想象部分，所以可以获得更高的价值。未来世界 要以哲学代替宗教，刚好跟中国传统相合。</code></p>\n<h3 id=\"b：中国哲学的问题和精神\"><a href=\"#b：中国哲学的问题和精神\" class=\"headerlink\" title=\"b：中国哲学的问题和精神\"></a>b：中国哲学的问题和精神</h3><pre><code> 中国哲学历史上有个主流，可以叫做中国哲学的精神。为了了解这个精神，先要弄清楚绝大多数中国哲学家试图解决的问题。\n</code></pre>\n<p>每个领域的从业者都有在对于领域获得所可能有的最高成就。例如从事于实际政治的人，</p>\n<p>以下是文心一言写的读书笔记：</p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>《中国哲学简史》是冯友兰先生于20世纪三四十年代在清华大学和西南联大讲授中国哲学史的讲义修订而成。这本书系统阐述了中国哲学发展史，是中国哲学史上的经典著作之一。<br>阅读本书的目的是了解中国哲学的历史、文化和价值观，并通过理解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。</p>\n<h2 id=\"整体感受\"><a href=\"#整体感受\" class=\"headerlink\" title=\"整体感受\"></a>整体感受</h2><p>《中国哲学简史》是一本内容丰富、结构清晰、语言简练的著作。冯友兰先生的学术功底和写作风格让人敬佩，他通过简洁明了的语言和深刻的分析，将复杂的哲学思想深入浅出地呈现给读者。<br>本书的特点在于其全面性和详尽性，作者不仅介绍了每个时代的哲学家和他们的思想，还对当时的社会背景和政治环境进行了深入的分析。这种全面的分析和描述使得读者可以更加深入地了解每个时代的哲学家和他们的思想，以及他们对于中国哲学发展的贡献。<br>本书的价值在于它为读者提供了一个全面了解中国哲学史的机会，让读者可以通过了解哲学思想的发展过程，深化对于中国哲学思想的认识和理解。此外，本书也为读者提供了一个了解中国传统文化的窗口，通过阅读本书可以更好地理解中国文化的根源和发展历程。</p>\n<h2 id=\"哲学思想史\"><a href=\"#哲学思想史\" class=\"headerlink\" title=\"哲学思想史\"></a>哲学思想史</h2><p>中国哲学思想史是一个漫长而丰富的发展过程，主要经历了先秦时期、汉唐时期、宋元明清时期以及现代时期等几个阶段。<br>先秦时期是儒家、道家、墨家、法家等各个哲学流派竞相辉映的时期。其中儒家强调仁爱、礼制和道德，代表人物包括孔子、孟子和荀子等；道家强调自然、无为和平衡，代表人物包括老子和庄子等；墨家强调兼爱和非攻，代表人物是墨子；法家强调法律、权力和功利，代表人物包括韩非子和商鞅等。<br>汉唐时期佛教思想的传入和本土化，形成了佛教的中国化和禅宗的形成。其中佛教强调解脱、慈悲和智慧，代表人物包括释迦牟尼佛和观音菩萨等；禅宗强调内心平静、超越自我和顿悟，代表人物包括达摩和慧能等。<br>宋元明清时期是理学、心学和社会政治哲学的时期。其中理学强调理性、天理和人伦，代表人物包括程颐、程颢和朱熹等；心学强调个体意识和自由意志，代表人物包括陆九渊和王阳明等；社会政治哲学强调人治与法治的平衡、国富民强和社会和谐，代表人物包括孟子、荀子和韩非子等。<br>现代时期是中国哲学的转型和发展时期，主要涉及新儒家、新道家和新墨家等各个流派的发展。其中新儒家强调文化自觉和现代价值观念的建立，代表人物包括梁漱溟和唐君毅等；新道家强调科技与自然的关系、环境保护和人类文明的可持续发展，代表人物包括王蒙和刘宾红等；新墨家强调实践和科学精神，代表人物包括孙中山和邓小平等。</p>\n<h2 id=\"哲学在现代社会的意义\"><a href=\"#哲学在现代社会的意义\" class=\"headerlink\" title=\"哲学在现代社会的意义\"></a>哲学在现代社会的意义</h2><p>中国哲学在现代社会中具有重要的意义和价值。在当今全球化和信息化的时代背景下，中国哲学的智慧可以为人们提供思考的支点和启示。<br>儒家强调仁爱、道德和人伦关系，对于现代社会的价值观建设和社会治理具有重要的启示意义。儒家思想中的“仁政”、“民本”等理念对于政府治理和社会公益事业的发展具有指导作用。<br>道家强调自然、无为和平衡，对于现代社会的环境保护和可持续发展具有重要的启示意义。道家思想中的“天人合一”、“道法自然”等理念对于人类与自然的和谐共处具有指导作用。<br>墨家强调兼爱、非攻和平等，对于现代社会的和平发展和社会正义具有重要的启示意义。墨家思想中的“兼相爱”、“交相利”等理念对于国际关系和社会公共利益的发展具有指导作用。<br>法家强调法律、权力和功利，对于现代社会的法治建设和经济发展具有重要的启示意义。法家思想中的“以法治国”、“因时而变”等理念对于政府治理和企业创新具有指导作用。<br>现代社会面临着诸多挑战和问题，如环境保护、社会公正、科技发展等。中国哲学可以为解决这些问题提供智慧和启示，帮助人们更好地应对现代社会的挑战。</p>\n<h2 id=\"个人收获与思考\"><a href=\"#个人收获与思考\" class=\"headerlink\" title=\"个人收获与思考\"></a>个人收获与思考</h2><p>通过阅读《中国哲学简史》，我深刻认识到了中国哲学的丰富内涵和价值意义。这本书不仅让我了解了中国哲学史的发展过程，还让我更加深入地认识了中国文化的根源和发展历程。<br>流派的思想和代表人物的研究，我深刻认识到了中国哲学中的一些重要思想和价值观。例如，儒家思想中的“仁爱”、“礼制”和“道德”，道家思想中的“自然”、“无为”和“平衡”，墨家思想中的“兼爱”、“非攻”和“平等”，以及法家思想中的“法治”、“权力”和“功利”等。这些思想在当今社会仍然具有重要的意义，可以帮助我们更好地理解人与人之间的关系、社会的运作以及我们自身的修养。</p>\n<p>通过阅读《中国哲学简史》，我也从中国哲学中汲取了一些重要的智慧和启示。例如，从儒家思想中，我学到了要注重内心修养、要学会宽容和包容、要尊重他人并关心他人的利益；从道家思想中，我学到了要学会平衡自己的欲望和行为、要追求内心的平静和自然；从墨家思想中，我学到了要追求和平与非攻、要倡导平等和合作；从法家思想中，我学到了要遵守法律和规则、要注重实效和创新。这些智慧和启示对于我的个人成长和发展具有重要的意义，也帮助我在面对各种问题和挑战时更加从容和明智。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>《中国哲学简史》是一本非常有价值的读物，它对于对中国哲学感兴趣的读者来说是一本非常值得一读的读物。如果你正在寻找一本系统阐述中国哲学发展史的书籍，那么这本书将是你不容错过的选择。<br>通过阅读这本书，你可以了解中国哲学的历史、文化和价值观，并深入理解中国哲学的精髓和智慧。同时，这本书也可以帮助你更好地了解中国文化的根源和发展历程，以及中国哲学对于个人成长和社会的价值。<br>在阅读过程中，你可以通过思考和反思，结合自己的实际经验和感受，将中国哲学的智慧应用于自己的生活和工作中。通过这种方式，你可以更好地实现自我成长和发展，同时也可以为个人和社会的发展做出积极的贡献。<br>总之，《中国哲学简史》是一本充满智慧和启示的书籍，它可以帮助你更好地认识自己、提高自己的思考能力和修养水平，同时也可以为你的个人成长和社会发展提供重要的支持和帮助。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><section class=\"footnotes\"><div class=\"footnote-list\"><ol><li><span id=\"fn:1\" class=\"footnote-text\"><span>&lt;中国哲学简史&gt;\n<a href=\"#fnref:1\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li><li><span id=\"fn:2\" class=\"footnote-text\"><span>&lt;中国哲学史&gt;\n<a href=\"#fnref:2\" rev=\"footnote\" class=\"footnote-backref\"> ↩</a></span></span></li></ol></div></section>"},{"title":"《宇宙探索编辑部》--","description":"理想主义的情书","author":"Noodles","comments":1,"index_img":"/img/film.png","excerpt":"其实，维持一个生命最基本的营养元素只有六种：碳水化合物、脂肪、维生素、盐、蛋白质、水。所以，人类摄入正常需要以外的食物，都是浪费；完成了繁衍之后的所有的性欲，都是一种疾病。声色犬马、口腹之欲，那都是消费主义的陷阱，那都是阻止人类再进化的藩篱，对吧？","date":"2024-03-03T02:00:00.000Z","updated":"2022-03-03T12:00:00.000Z","sticky":3,"_content":"\n胸口的鸟群\n绕过十万个太阳\n带走被浇灭的闪电\n带走云层潮汐\n带走神明的悄悄话\n带走落地生根的锚\n带走氧化的情歌 带走山野恩仇\n带走金银财宝 带走痴心妄想\n带走梦游的脚印\n带走飞蛾扑不灭的火\n带走所有人的名字\n带走彩虹的化石\n\n记录片风格的科幻电影\n理想主义者的情书\n2023年最好的电影？\n\n电影有没有好坏呢？文无第一，武无第二。\n\n","source":"_posts/观影笔记/《宇宙探索编辑部》.md","raw":"---\ntitle: 《宇宙探索编辑部》-- \ncategories: 观影笔记\ndescription: 理想主义的情书\ntags: 电影\nauthor: Noodles\ncomments: true\nindex_img: /img/film.png\nexcerpt: 其实，维持一个生命最基本的营养元素只有六种：碳水化合物、脂肪、维生素、盐、蛋白质、水。所以，人类摄入正常需要以外的食物，都是浪费；完成了繁衍之后的所有的性欲，都是一种疾病。声色犬马、口腹之欲，那都是消费主义的陷阱，那都是阻止人类再进化的藩篱，对吧？  \ndate: 2024-03-03 10:00:00\nupdated: 2022-03-03 20:00:00\nsticky: 3\n---\n\n胸口的鸟群\n绕过十万个太阳\n带走被浇灭的闪电\n带走云层潮汐\n带走神明的悄悄话\n带走落地生根的锚\n带走氧化的情歌 带走山野恩仇\n带走金银财宝 带走痴心妄想\n带走梦游的脚印\n带走飞蛾扑不灭的火\n带走所有人的名字\n带走彩虹的化石\n\n记录片风格的科幻电影\n理想主义者的情书\n2023年最好的电影？\n\n电影有没有好坏呢？文无第一，武无第二。\n\n","slug":"观影笔记/《宇宙探索编辑部》","published":1,"_id":"clxhm49tb0000b4lb7clu290w","layout":"post","photos":[],"link":"","content":"<p>胸口的鸟群<br>绕过十万个太阳<br>带走被浇灭的闪电<br>带走云层潮汐<br>带走神明的悄悄话<br>带走落地生根的锚<br>带走氧化的情歌 带走山野恩仇<br>带走金银财宝 带走痴心妄想<br>带走梦游的脚印<br>带走飞蛾扑不灭的火<br>带走所有人的名字<br>带走彩虹的化石</p>\n<p>记录片风格的科幻电影<br>理想主义者的情书<br>2023年最好的电影？</p>\n<p>电影有没有好坏呢？文无第一，武无第二。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>胸口的鸟群<br>绕过十万个太阳<br>带走被浇灭的闪电<br>带走云层潮汐<br>带走神明的悄悄话<br>带走落地生根的锚<br>带走氧化的情歌 带走山野恩仇<br>带走金银财宝 带走痴心妄想<br>带走梦游的脚印<br>带走飞蛾扑不灭的火<br>带走所有人的名字<br>带走彩虹的化石</p>\n<p>记录片风格的科幻电影<br>理想主义者的情书<br>2023年最好的电影？</p>\n<p>电影有没有好坏呢？文无第一，武无第二。</p>\n"},{"_content":"## 为什么要学习rust\n\nrust越来越火了， [rust笔记.md](rust笔记.md) 但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：\n\n1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。\n\n2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。\n\n3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。\n\n4、先得承认，学习rust并不一定会能找到工作，你去招聘网站看以下，招聘rust的企业很少\n\n## 学习rust的一些资料\n\n一个优秀的RUST教程：[Rust语言圣经](https://course.rs/about-book.html)\n\n## 常用命令和工具\n\n完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。\n\n### rust常用命令：\n\n```shell\n版本更新：\n$ rustup update\n\n卸载：\n$ rustup self uninstall\n\n查询版本\n$ rustc -V\n\n打开本地文档\n$ rustup doc\n\n编译release版本（运行速度快于debug版本，但编译会变慢）\n$ cargo run --release\n$ cargo build --release\n\n快速的检查一下代码能否编译通过\ncargo check\n```\n\n### Vscode好用的rust插件：\n\nrust-analyzer\n\n其他推荐的插件\n\n1. `Even Better TOML`，支持 .toml 文件完整特性\n2. `Error Lens`, 更好的获得错误展示\n3. `One Dark Pro`, 非常好看的 VSCode 主题\n4. `CodeLLDB`, Debugger 程序\n\nrust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。\n\n```shell\n项目目录如下\nworld_hello\n.\n├── .git\n├── .gitignore\n├── Cargo.toml\n└── src\n    └── main.rs\n```\n\nhello,word!\n\n```rust\nfn greet_world() {\n    let southern_germany = \"Grüß Gott!\";\n    let chinese = \"世界，你好\";\n    let english = \"World, hello\";\n    let regions = [southern_germany, chinese, english];\n    for region in regions.iter() {\n        println!(\"{}\", &region);\n    }\n}\n\nfn main() {\n    greet_world();\n}学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。\n```\n\ntips：[解决下载依赖慢的方法](https://course.rs/first-try/slowly-downloading.html)\n\n##  语言精要\n\n\n\n计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。\n\nrust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。\n\n1、混合编程范式，包含面向对象和函数式编程\n2、语义：所有权，MOVE、COPY、借用、生命周期、DROP\n3、类型系统：泛型、trait、一切皆类型、多态、类型推断\n4、安全内存管理：栈、RAII、堆\n\n对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。、\n\nRust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。\n\n\n\nrust主要由以下核心模块组成，语言规范，编译器，核心库，标准库，包管理器；\n\nrust语言规范主要由语言参考和RFC文档构成，语言参考时官方维护的文档，文档中包含：\n\n- 对每种语言结构及用法的描述\n- 对内存模型，并发模型，链接，调试等内存的描述\n- 影响语言设计的基本原理和参考\n\nRFC文档涵盖了设计意图，详细设计，以及完成的技术方案，可用于了解某个语言特性的发展历程。\n\nrust是静态语言，官方编译器rustc是一个跨平台的编译器。\n\nrustc有如下特点：\n\n- rustc是跨平台\tq的应用程序，支持UNIX/Linux等类UNIX平台，也支持Windows平台。\n- rustc支持交叉编译，可以在当前平台下编译出可运行于其他平台上的应用程序和库。\n- rustc 使用 LLVM 作为编译器后端，具有很好的代码生成和优化技术，支持多个目标平台。\n-  rustc是用Rust语言开发的，包含在Rust语言源码中。· rustc对Rust源码进行词法语法分析、静态类型检查，最终将代码翻译为LLVM IR。· rustc输出的错误信息非常友好和详尽，是开发者的良师益友。\n\n标准库和核心库\n\nRust语言的语法由核心库和标准库共同提供。其中Rust核心库是标准库的基础。核心库中定义的是Rust语言的核心，不依赖于操作系统和网络等相关的库，甚至不知道堆分配，也不提供并发和I/O。可以通过在模块顶部引入＃！[no_std]来使用核心库。核心库和标准库的功能有一些重复，包括如下部分：· 基础的trait，如Copy、Debug、Display、Option等。· 基本原始类型，如bool、char、i8/u8、i16/u16、i32/u32、i64/u64、isize/usize、f32/f64、str、array、slice、tuple、pointer等。· 常用功能型数据类型，满足常见的功能性需求，如String、Vec、HashMap、Rc、Arc、Box等。· 常用的宏定义，如println！、assert！、panic！、vec！等。做嵌入式应用开发的时候，核心库是必需的。\n\nRust标准库提供应用程序开发所需要的基础和跨平台支持。标准库包含的内容大概如下：· 与核心库一样的基本trait、原始数据类型、功能型数据类型和常用宏等，以及与核心库几乎完全一致的API。· 并发、I/O和运行时。例如线程模块、用于消息传递的通道类型、Sync trait等并发模块，文件、TCP、UDP、管道、套接字等常见I/O。· 平台抽象。os模块提供了许多与操作环境交互的基本功能，包括程序参数、环境变量和目录导航；路径模块封装了处理文件路径的平台特定规则。· 底层操作接口，比如 std：：mem、std：：ptr、std：：intrinsics 等，操作内存、指针、调用编译器固有函数。· 可选和错误处理类型Option和Result，以及各种迭代器等。\n\n包管理器：\n\n把按一定规则组织的多个rs文件编译后就得到一个包（crate）。包是Rust代码的基本编译单元，也是程序员之间共享代码的基本单元。Rust社区的公开第三方包都集中在crates.io网站上面，它们的文档被自动发布到docs.rs网站上。Rust提供了非常方便的包管理器Cargo。Rust中的Cargo类似于Ruby中的bundler、Python中的pip、Node.js中的npm。但Cargo不仅局限于包管理，它还为Rust生态系统提供了标==============\n","source":"_posts/编程笔记/rust笔记.md","raw":"## 为什么要学习rust\n\nrust越来越火了， [rust笔记.md](rust笔记.md) 但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：\n\n1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。\n\n2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。\n\n3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。\n\n4、先得承认，学习rust并不一定会能找到工作，你去招聘网站看以下，招聘rust的企业很少\n\n## 学习rust的一些资料\n\n一个优秀的RUST教程：[Rust语言圣经](https://course.rs/about-book.html)\n\n## 常用命令和工具\n\n完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。\n\n### rust常用命令：\n\n```shell\n版本更新：\n$ rustup update\n\n卸载：\n$ rustup self uninstall\n\n查询版本\n$ rustc -V\n\n打开本地文档\n$ rustup doc\n\n编译release版本（运行速度快于debug版本，但编译会变慢）\n$ cargo run --release\n$ cargo build --release\n\n快速的检查一下代码能否编译通过\ncargo check\n```\n\n### Vscode好用的rust插件：\n\nrust-analyzer\n\n其他推荐的插件\n\n1. `Even Better TOML`，支持 .toml 文件完整特性\n2. `Error Lens`, 更好的获得错误展示\n3. `One Dark Pro`, 非常好看的 VSCode 主题\n4. `CodeLLDB`, Debugger 程序\n\nrust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。\n\n```shell\n项目目录如下\nworld_hello\n.\n├── .git\n├── .gitignore\n├── Cargo.toml\n└── src\n    └── main.rs\n```\n\nhello,word!\n\n```rust\nfn greet_world() {\n    let southern_germany = \"Grüß Gott!\";\n    let chinese = \"世界，你好\";\n    let english = \"World, hello\";\n    let regions = [southern_germany, chinese, english];\n    for region in regions.iter() {\n        println!(\"{}\", &region);\n    }\n}\n\nfn main() {\n    greet_world();\n}学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。\n```\n\ntips：[解决下载依赖慢的方法](https://course.rs/first-try/slowly-downloading.html)\n\n##  语言精要\n\n\n\n计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。\n\nrust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。\n\n1、混合编程范式，包含面向对象和函数式编程\n2、语义：所有权，MOVE、COPY、借用、生命周期、DROP\n3、类型系统：泛型、trait、一切皆类型、多态、类型推断\n4、安全内存管理：栈、RAII、堆\n\n对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。、\n\nRust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。\n\n\n\nrust主要由以下核心模块组成，语言规范，编译器，核心库，标准库，包管理器；\n\nrust语言规范主要由语言参考和RFC文档构成，语言参考时官方维护的文档，文档中包含：\n\n- 对每种语言结构及用法的描述\n- 对内存模型，并发模型，链接，调试等内存的描述\n- 影响语言设计的基本原理和参考\n\nRFC文档涵盖了设计意图，详细设计，以及完成的技术方案，可用于了解某个语言特性的发展历程。\n\nrust是静态语言，官方编译器rustc是一个跨平台的编译器。\n\nrustc有如下特点：\n\n- rustc是跨平台\tq的应用程序，支持UNIX/Linux等类UNIX平台，也支持Windows平台。\n- rustc支持交叉编译，可以在当前平台下编译出可运行于其他平台上的应用程序和库。\n- rustc 使用 LLVM 作为编译器后端，具有很好的代码生成和优化技术，支持多个目标平台。\n-  rustc是用Rust语言开发的，包含在Rust语言源码中。· rustc对Rust源码进行词法语法分析、静态类型检查，最终将代码翻译为LLVM IR。· rustc输出的错误信息非常友好和详尽，是开发者的良师益友。\n\n标准库和核心库\n\nRust语言的语法由核心库和标准库共同提供。其中Rust核心库是标准库的基础。核心库中定义的是Rust语言的核心，不依赖于操作系统和网络等相关的库，甚至不知道堆分配，也不提供并发和I/O。可以通过在模块顶部引入＃！[no_std]来使用核心库。核心库和标准库的功能有一些重复，包括如下部分：· 基础的trait，如Copy、Debug、Display、Option等。· 基本原始类型，如bool、char、i8/u8、i16/u16、i32/u32、i64/u64、isize/usize、f32/f64、str、array、slice、tuple、pointer等。· 常用功能型数据类型，满足常见的功能性需求，如String、Vec、HashMap、Rc、Arc、Box等。· 常用的宏定义，如println！、assert！、panic！、vec！等。做嵌入式应用开发的时候，核心库是必需的。\n\nRust标准库提供应用程序开发所需要的基础和跨平台支持。标准库包含的内容大概如下：· 与核心库一样的基本trait、原始数据类型、功能型数据类型和常用宏等，以及与核心库几乎完全一致的API。· 并发、I/O和运行时。例如线程模块、用于消息传递的通道类型、Sync trait等并发模块，文件、TCP、UDP、管道、套接字等常见I/O。· 平台抽象。os模块提供了许多与操作环境交互的基本功能，包括程序参数、环境变量和目录导航；路径模块封装了处理文件路径的平台特定规则。· 底层操作接口，比如 std：：mem、std：：ptr、std：：intrinsics 等，操作内存、指针、调用编译器固有函数。· 可选和错误处理类型Option和Result，以及各种迭代器等。\n\n包管理器：\n\n把按一定规则组织的多个rs文件编译后就得到一个包（crate）。包是Rust代码的基本编译单元，也是程序员之间共享代码的基本单元。Rust社区的公开第三方包都集中在crates.io网站上面，它们的文档被自动发布到docs.rs网站上。Rust提供了非常方便的包管理器Cargo。Rust中的Cargo类似于Ruby中的bundler、Python中的pip、Node.js中的npm。但Cargo不仅局限于包管理，它还为Rust生态系统提供了标==============\n","slug":"编程笔记/rust笔记","published":1,"date":"2024-06-14T16:27:52.007Z","updated":"2024-07-14T01:23:25.233Z","_id":"clxhm49tj0002b4lb2kha9obs","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要学习rust\"><a href=\"#为什么要学习rust\" class=\"headerlink\" title=\"为什么要学习rust\"></a>为什么要学习rust</h2><p>rust越来越火了， <a href=\"rust%E7%AC%94%E8%AE%B0.md\">rust笔记.md</a> 但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：</p>\n<p>1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。</p>\n<p>2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。</p>\n<p>3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。</p>\n<p>4、先得承认，学习rust并不一定会能找到工作，你去招聘网站看以下，招聘rust的企业很少</p>\n<h2 id=\"学习rust的一些资料\"><a href=\"#学习rust的一些资料\" class=\"headerlink\" title=\"学习rust的一些资料\"></a>学习rust的一些资料</h2><p>一个优秀的RUST教程：<a href=\"https://course.rs/about-book.html\">Rust语言圣经</a></p>\n<h2 id=\"常用命令和工具\"><a href=\"#常用命令和工具\" class=\"headerlink\" title=\"常用命令和工具\"></a>常用命令和工具</h2><p>完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。</p>\n<h3 id=\"rust常用命令：\"><a href=\"#rust常用命令：\" class=\"headerlink\" title=\"rust常用命令：\"></a>rust常用命令：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">版本更新：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup update</span><br><br>卸载：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup self uninstall</span><br><br>查询版本<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustc -V</span><br><br>打开本地文档<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup doc</span><br><br>编译release版本（运行速度快于debug版本，但编译会变慢）<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo run --release</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo build --release</span><br><br>快速的检查一下代码能否编译通过<br>cargo check<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Vscode好用的rust插件：\"><a href=\"#Vscode好用的rust插件：\" class=\"headerlink\" title=\"Vscode好用的rust插件：\"></a>Vscode好用的rust插件：</h3><p>rust-analyzer</p>\n<p>其他推荐的插件</p>\n<ol>\n<li><code>Even Better TOML</code>，支持 .toml 文件完整特性</li>\n<li><code>Error Lens</code>, 更好的获得错误展示</li>\n<li><code>One Dark Pro</code>, 非常好看的 VSCode 主题</li>\n<li><code>CodeLLDB</code>, Debugger 程序</li>\n</ol>\n<p>rust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">项目目录如下<br>world_hello<br>.<br>├── .git<br>├── .gitignore<br>├── Cargo.toml<br>└── src<br>    └── main.rs<br></code></pre></td></tr></table></figure>\n\n<p>hello,word!</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">greet_world</span>() &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">southern_germany</span> = <span class=\"hljs-string\">&quot;Grüß Gott!&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">chinese</span> = <span class=\"hljs-string\">&quot;世界，你好&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">english</span> = <span class=\"hljs-string\">&quot;World, hello&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">regions</span> = [southern_germany, chinese, english];<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">region</span> <span class=\"hljs-keyword\">in</span> regions.<span class=\"hljs-title function_ invoke__\">iter</span>() &#123;<br>        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, &amp;region);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() &#123;<br>    <span class=\"hljs-title function_ invoke__\">greet_world</span>();<br>&#125;学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。<br></code></pre></td></tr></table></figure>\n\n<p>tips：<a href=\"https://course.rs/first-try/slowly-downloading.html\">解决下载依赖慢的方法</a></p>\n<h2 id=\"语言精要\"><a href=\"#语言精要\" class=\"headerlink\" title=\"语言精要\"></a>语言精要</h2><p>计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。</p>\n<p>rust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。</p>\n<p>1、混合编程范式，包含面向对象和函数式编程<br>2、语义：所有权，MOVE、COPY、借用、生命周期、DROP<br>3、类型系统：泛型、trait、一切皆类型、多态、类型推断<br>4、安全内存管理：栈、RAII、堆</p>\n<p>对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。、</p>\n<p>Rust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。</p>\n<p>rust主要由以下核心模块组成，语言规范，编译器，核心库，标准库，包管理器；</p>\n<p>rust语言规范主要由语言参考和RFC文档构成，语言参考时官方维护的文档，文档中包含：</p>\n<ul>\n<li>对每种语言结构及用法的描述</li>\n<li>对内存模型，并发模型，链接，调试等内存的描述</li>\n<li>影响语言设计的基本原理和参考</li>\n</ul>\n<p>RFC文档涵盖了设计意图，详细设计，以及完成的技术方案，可用于了解某个语言特性的发展历程。</p>\n<p>rust是静态语言，官方编译器rustc是一个跨平台的编译器。</p>\n<p>rustc有如下特点：</p>\n<ul>\n<li>rustc是跨平台\tq的应用程序，支持UNIX&#x2F;Linux等类UNIX平台，也支持Windows平台。</li>\n<li>rustc支持交叉编译，可以在当前平台下编译出可运行于其他平台上的应用程序和库。</li>\n<li>rustc 使用 LLVM 作为编译器后端，具有很好的代码生成和优化技术，支持多个目标平台。</li>\n<li>rustc是用Rust语言开发的，包含在Rust语言源码中。· rustc对Rust源码进行词法语法分析、静态类型检查，最终将代码翻译为LLVM IR。· rustc输出的错误信息非常友好和详尽，是开发者的良师益友。</li>\n</ul>\n<p>标准库和核心库</p>\n<p>Rust语言的语法由核心库和标准库共同提供。其中Rust核心库是标准库的基础。核心库中定义的是Rust语言的核心，不依赖于操作系统和网络等相关的库，甚至不知道堆分配，也不提供并发和I&#x2F;O。可以通过在模块顶部引入＃！[no_std]来使用核心库。核心库和标准库的功能有一些重复，包括如下部分：· 基础的trait，如Copy、Debug、Display、Option等。· 基本原始类型，如bool、char、i8&#x2F;u8、i16&#x2F;u16、i32&#x2F;u32、i64&#x2F;u64、isize&#x2F;usize、f32&#x2F;f64、str、array、slice、tuple、pointer等。· 常用功能型数据类型，满足常见的功能性需求，如String、Vec、HashMap、Rc、Arc、Box等。· 常用的宏定义，如println！、assert！、panic！、vec！等。做嵌入式应用开发的时候，核心库是必需的。</p>\n<p>Rust标准库提供应用程序开发所需要的基础和跨平台支持。标准库包含的内容大概如下：· 与核心库一样的基本trait、原始数据类型、功能型数据类型和常用宏等，以及与核心库几乎完全一致的API。· 并发、I&#x2F;O和运行时。例如线程模块、用于消息传递的通道类型、Sync trait等并发模块，文件、TCP、UDP、管道、套接字等常见I&#x2F;O。· 平台抽象。os模块提供了许多与操作环境交互的基本功能，包括程序参数、环境变量和目录导航；路径模块封装了处理文件路径的平台特定规则。· 底层操作接口，比如 std：：mem、std：：ptr、std：：intrinsics 等，操作内存、指针、调用编译器固有函数。· 可选和错误处理类型Option和Result，以及各种迭代器等。</p>\n<p>包管理器：</p>\n<p>把按一定规则组织的多个rs文件编译后就得到一个包（crate）。包是Rust代码的基本编译单元，也是程序员之间共享代码的基本单元。Rust社区的公开第三方包都集中在crates.io网站上面，它们的文档被自动发布到docs.rs网站上。Rust提供了非常方便的包管理器Cargo。Rust中的Cargo类似于Ruby中的bundler、Python中的pip、Node.js中的npm。但Cargo不仅局限于包管理，它还为Rust生态系统提供了标&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"excerpt":"","more":"<h2 id=\"为什么要学习rust\"><a href=\"#为什么要学习rust\" class=\"headerlink\" title=\"为什么要学习rust\"></a>为什么要学习rust</h2><p>rust越来越火了， <a href=\"rust%E7%AC%94%E8%AE%B0.md\">rust笔记.md</a> 但是目前正在使用rust的项目并不多，工作岗位基本没有。那么有必要学习rust吗？我的看法是不必要，但是值得了解和学习。站在我的角度有以下几点理由：</p>\n<p>1、RUST解决问题的思路，符合当前发展的方向。计算机技术发展了这么多年，期间编程语言也在不断发展，但是一直以来有几个问题在来回拉扯：性能，安全和表达能力。先说安全问题，以我从业的嵌入式行业来看，遇到严重的问题大部分都是因为内存管理引入的问题。主要原因是因为嵌入式式环境使用的C和C++。我们知道这是历史悠久而又生命力顽强的语言，这主要得益与它们性能高，但是他们不支持垃圾回收就导致了很容易出现内存不安全问题。虽然C++引入了智能指针，还有RAII等特性极大的防止内存问题。但是它依旧保留了极大的自由度给程序员，只要把不安全的方式留着，就会引入问题,毕竟写程序最大的不可控因素是人。从我身边的例子看，引入问题不仅仅是那些新手程序员，即使那些极优秀且有多年经验的程序员一样会引入内存问题。而且越是厉害的程序员，引入的问题往往不容易被发现，等到发现的时候那就是重大事故。除了C和C++外我们看看那些安全的语言右有什么问题，那使用最广发的JAVA和python来说，他们依靠垃圾回收很好的解决了内存安全问题，而且无论是表达力，或者开发效率都及其优秀。但是因为引入垃圾回收，性能就比较拉跨。而且他们的运行需要虚拟机，所以在嵌入式开发中就受限了。而rust结合了众多语言的特点，兼具性能和安全。当然为了同时满足性能和安全，它牺牲了一定的易用性。这里的易用性不是说它的表达力不够，或者说很难写。我认为主要是初期的上手门槛会比较高。对于一个项目来说，它把问题暴漏在了前端，但你的项目只要编译通过。就很少担心内存方面的问题了。我认为这种解决问题的思路是值得学习的。</p>\n<p>2、对于嵌入式开发来说，需要一门表达力强的语言。现在嵌入式设备到处都是，我们能看到的设备，比如家里的灯具，音箱，随处可见的摄像头等等，都跑了负责的软件。C语言是及其优秀的语言，这么多年了，依旧是热门的语言。它简单，自由，甚至说整个数字世界的底座就是C语言编写的。但是对于现在软件开发来说，它过于质朴，很多新的编程概念它都不支持。C++语言在嵌入式中也发挥巨大作用，但是就我个人而言不太喜欢C++的哲学。这么多年来，C++不断发展，不断引入新的概念，使它成为及其强大的语言。包含了各种特性，但是也是因为它太丰富，所以很难掌握C++的所有特性，即使你掌握了很多，但是它给给你的选择太多了。你去找两个C++的项目，往往感觉像是用不同语言编写的。这种啥都想要的思想我是不太喜欢。</p>\n<p>3、完善的工具链，我在写这篇博客的时候已经简单浏览了一个完整的RUST教程，并编写了几个简单的程序。给我一个最大的体会是，RUST的工具链简直太好用了。我们不需要下载GCC,不需要学习cmake,只需要一键安装语言包，就可以直接开始开发了，而且它的官网就有优秀的教程，在线编译器同时它还具有cargo包管理工具，甚至可以一键写文档。这才是一门现代语言应该有的样子。我们已经有这么大的软件基石，当每次还需要手动管理项目和代码的确实不是一个很好的方式。</p>\n<p>4、先得承认，学习rust并不一定会能找到工作，你去招聘网站看以下，招聘rust的企业很少</p>\n<h2 id=\"学习rust的一些资料\"><a href=\"#学习rust的一些资料\" class=\"headerlink\" title=\"学习rust的一些资料\"></a>学习rust的一些资料</h2><p>一个优秀的RUST教程：<a href=\"https://course.rs/about-book.html\">Rust语言圣经</a></p>\n<h2 id=\"常用命令和工具\"><a href=\"#常用命令和工具\" class=\"headerlink\" title=\"常用命令和工具\"></a>常用命令和工具</h2><p>完整了解了一边RUST之后我决定认真的学习rust，同时呢我希望把自己学习的过程记录下来，所以后面会有一系列RUST的学习笔记。</p>\n<h3 id=\"rust常用命令：\"><a href=\"#rust常用命令：\" class=\"headerlink\" title=\"rust常用命令：\"></a>rust常用命令：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">版本更新：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup update</span><br><br>卸载：<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup self uninstall</span><br><br>查询版本<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustc -V</span><br><br>打开本地文档<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">rustup doc</span><br><br>编译release版本（运行速度快于debug版本，但编译会变慢）<br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo run --release</span><br><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">cargo build --release</span><br><br>快速的检查一下代码能否编译通过<br>cargo check<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Vscode好用的rust插件：\"><a href=\"#Vscode好用的rust插件：\" class=\"headerlink\" title=\"Vscode好用的rust插件：\"></a>Vscode好用的rust插件：</h3><p>rust-analyzer</p>\n<p>其他推荐的插件</p>\n<ol>\n<li><code>Even Better TOML</code>，支持 .toml 文件完整特性</li>\n<li><code>Error Lens</code>, 更好的获得错误展示</li>\n<li><code>One Dark Pro</code>, 非常好看的 VSCode 主题</li>\n<li><code>CodeLLDB</code>, Debugger 程序</li>\n</ol>\n<p>rust的安装非常简单，按照教程中操作很快可以安装完成，安装完成后我们在终端执行：cargo new world_hello 就可以生成一个项目。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">项目目录如下<br>world_hello<br>.<br>├── .git<br>├── .gitignore<br>├── Cargo.toml<br>└── src<br>    └── main.rs<br></code></pre></td></tr></table></figure>\n\n<p>hello,word!</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">greet_world</span>() &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">southern_germany</span> = <span class=\"hljs-string\">&quot;Grüß Gott!&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">chinese</span> = <span class=\"hljs-string\">&quot;世界，你好&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">english</span> = <span class=\"hljs-string\">&quot;World, hello&quot;</span>;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">regions</span> = [southern_germany, chinese, english];<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">region</span> <span class=\"hljs-keyword\">in</span> regions.<span class=\"hljs-title function_ invoke__\">iter</span>() &#123;<br>        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span>, &amp;region);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() &#123;<br>    <span class=\"hljs-title function_ invoke__\">greet_world</span>();<br>&#125;学习第一门语言一般都是以helloword开始。我们看看上面的代码直观看它有了很多高级语言的写法。让我一个以C为主要语言的人来RUST简直太优雅了。<br></code></pre></td></tr></table></figure>\n\n<p>tips：<a href=\"https://course.rs/first-try/slowly-downloading.html\">解决下载依赖慢的方法</a></p>\n<h2 id=\"语言精要\"><a href=\"#语言精要\" class=\"headerlink\" title=\"语言精要\"></a>语言精要</h2><p>计算机发展几十年，编程语言也在一直发展，但是往往一门语言出现解决了一个方面的问题就有牺牲了另一个方面。比如C语言高效，但是内存问题一直困扰着C程序员，也让C语言一直饱受诟病。python的简单，安全，但是运行速度慢。一门既要又要的语言实属难得。rust设计的目的要做到既要内存安全又要高效。</p>\n<p>rust1.0版本于2015年发布到现在发布到1.77.1版本而且还在持续更新。rust的更新速度非常快，而且rust的更新速度是其他语言无法比拟的。在《RUST编程之道》中将rust中的概念抽象为4个层次。</p>\n<p>1、混合编程范式，包含面向对象和函数式编程<br>2、语义：所有权，MOVE、COPY、借用、生命周期、DROP<br>3、类型系统：泛型、trait、一切皆类型、多态、类型推断<br>4、安全内存管理：栈、RAII、堆</p>\n<p>对于开发者来说在实际使用时只需要关注前三层，内存安全编译器会自动帮我们处理。以往学习一门语言最好的办法时直接上编码，在编码和阅读中熟悉概念，但是rust可以先理解清楚对应的语法在动手。、</p>\n<p>Rust是跨平台语言，一次编译，到处运行，这得益于LLVM。Rust编译器是一个LLVM编译前端，它将代码编译为LLVM IR，然后经过LLVM编译为相应的平台目标。Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR （Middle IR），这是一种中间表示，它在Rust1.12版本中被引入，主要用于以下目的。· 缩短编译时间。MIR可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。· 缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖LLVM的优化粒度太粗，而且Rust无法控制，引入MIR就增加了更多的优化空间。· 更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。最终，MIR会被翻译为LLVM IR，然后被LLVM的处理编译为能在各个平台上运行的目标机器码。</p>\n<p>rust主要由以下核心模块组成，语言规范，编译器，核心库，标准库，包管理器；</p>\n<p>rust语言规范主要由语言参考和RFC文档构成，语言参考时官方维护的文档，文档中包含：</p>\n<ul>\n<li>对每种语言结构及用法的描述</li>\n<li>对内存模型，并发模型，链接，调试等内存的描述</li>\n<li>影响语言设计的基本原理和参考</li>\n</ul>\n<p>RFC文档涵盖了设计意图，详细设计，以及完成的技术方案，可用于了解某个语言特性的发展历程。</p>\n<p>rust是静态语言，官方编译器rustc是一个跨平台的编译器。</p>\n<p>rustc有如下特点：</p>\n<ul>\n<li>rustc是跨平台\tq的应用程序，支持UNIX&#x2F;Linux等类UNIX平台，也支持Windows平台。</li>\n<li>rustc支持交叉编译，可以在当前平台下编译出可运行于其他平台上的应用程序和库。</li>\n<li>rustc 使用 LLVM 作为编译器后端，具有很好的代码生成和优化技术，支持多个目标平台。</li>\n<li>rustc是用Rust语言开发的，包含在Rust语言源码中。· rustc对Rust源码进行词法语法分析、静态类型检查，最终将代码翻译为LLVM IR。· rustc输出的错误信息非常友好和详尽，是开发者的良师益友。</li>\n</ul>\n<p>标准库和核心库</p>\n<p>Rust语言的语法由核心库和标准库共同提供。其中Rust核心库是标准库的基础。核心库中定义的是Rust语言的核心，不依赖于操作系统和网络等相关的库，甚至不知道堆分配，也不提供并发和I&#x2F;O。可以通过在模块顶部引入＃！[no_std]来使用核心库。核心库和标准库的功能有一些重复，包括如下部分：· 基础的trait，如Copy、Debug、Display、Option等。· 基本原始类型，如bool、char、i8&#x2F;u8、i16&#x2F;u16、i32&#x2F;u32、i64&#x2F;u64、isize&#x2F;usize、f32&#x2F;f64、str、array、slice、tuple、pointer等。· 常用功能型数据类型，满足常见的功能性需求，如String、Vec、HashMap、Rc、Arc、Box等。· 常用的宏定义，如println！、assert！、panic！、vec！等。做嵌入式应用开发的时候，核心库是必需的。</p>\n<p>Rust标准库提供应用程序开发所需要的基础和跨平台支持。标准库包含的内容大概如下：· 与核心库一样的基本trait、原始数据类型、功能型数据类型和常用宏等，以及与核心库几乎完全一致的API。· 并发、I&#x2F;O和运行时。例如线程模块、用于消息传递的通道类型、Sync trait等并发模块，文件、TCP、UDP、管道、套接字等常见I&#x2F;O。· 平台抽象。os模块提供了许多与操作环境交互的基本功能，包括程序参数、环境变量和目录导航；路径模块封装了处理文件路径的平台特定规则。· 底层操作接口，比如 std：：mem、std：：ptr、std：：intrinsics 等，操作内存、指针、调用编译器固有函数。· 可选和错误处理类型Option和Result，以及各种迭代器等。</p>\n<p>包管理器：</p>\n<p>把按一定规则组织的多个rs文件编译后就得到一个包（crate）。包是Rust代码的基本编译单元，也是程序员之间共享代码的基本单元。Rust社区的公开第三方包都集中在crates.io网站上面，它们的文档被自动发布到docs.rs网站上。Rust提供了非常方便的包管理器Cargo。Rust中的Cargo类似于Ruby中的bundler、Python中的pip、Node.js中的npm。但Cargo不仅局限于包管理，它还为Rust生态系统提供了标&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n"},{"title":"B站读书节目观后","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"人在使用工具，而工具也反过来在塑造人","date":"2024-05-03T14:25:03.000Z","updated":"2024-05-03T14:25:03.000Z","sticky":3,"_content":"B站看了一个UP跟罗翔，双雪涛，还有一位没见过的老师讨论读书的话题，节目是B站为了读书日做的主题。\n\n节目中第一个话题讨论，人工智能时代来了，读书还有意义吗？节目中罗翔老的回答我很认同，他说，当我们再讨论读书有没有意义的时候，就说明它是有意义的。\n\n但在讨论有没有意义前，我想先看看，到底什么叫读书？当然节目后面罗翔老师也发表了自己的看法。我想说说我的理解，当我们给一件事情下一个定义的时候，就是创造一种概念，但是概念本身并不能表达这个事物的所有，而是我们从某些维度提取了它的特征。但是我们由必须去创造一个个概念，这样我们才能理解世界。读书的概念不是一个新的概念，但是对于每个人来说对于这个概念的理解和对于它的外延的定义都是不一致的。读书可以是娱乐，可以是为了获取知识，可以为了考试等等；读书的方式也是多种多样，可以是纸质书，电子书，看网文，甚至概念再宽泛一点，看视频，甚至跟人聊天也算。那么我们先定义一下我这篇文章讨论的读书的范围和目的，首先目的我把范围缩小到娱乐和获取知识，形式定义为都纸质书和电子书，同时我把所读的书定义为有作者性的书。基于这个范围的定义，我来说说我对于读书这件事情的看法。\n\n对于我来说，算是有那么一点读书的爱好，但不多。而我读书的目的总是想通过读书得到点什么，比如昨天刚读完的《正见》这本书，就是想知道佛学的一些基本概念到底要怎么理解，是不是可以通过佛学的观点，解决自己的一些问题。甚至我读小说，都是为了看看作者通过小说表达了什么？这种目的性好不好呢？我觉得不一定好，这也许是我们这么多年应试教育留下来的惯性，但对于我来说这就是我读书的初始动机。我们回到刚开始的问题，AI时代，读书有没有意义，我认为肯定是由意义的，读书是为了获取知识，AI也可以快速的给你知识。两个事情都是有意义的，并不是说形式的变化，会消除读书本来的意义。也就是说凡事我们必须回到它的本质去看它的意义，而不应该看到形式的变化就去追问一件事情的意义。\n\n那么我们为啥还要去讨论读书的意义呢？或者说我们为啥会去思考，AI时代，传统的读书有没有意义呢？其实是因为效率，现在社会最大的问题就是所有的事情都被关在“理性的牢笼”中，韦伯在一个多世纪以前就语言了这个事情，但是我们依旧逃不出，甚至越关越深。当我们所有事情都陷入理性，且把利益最大化作为第一目的后，我们思考事情的情形就变成了这样：这有什么用？这样做和那样做那个更有效率，成本更低？那么我们又回到原来的问题，AI时代都市还有意义吗？这其实是在问，AI时代，读书是一件效率低下，成本又高的事情，我们还要去做吗？这个问题我也无法回答，而这个问题是我们所有人都应该思考的问题。不仅仅是读书，现在几乎所有的事情都值得考虑一遍。当所有事情都在追求效率的时候，那些低效的事情值得做吗？\n\n昨天听到了我极其喜欢的专辑，蛙池的《郊游》，其中同名歌曲《郊游》中有一句歌词：长命功夫就长命来做。我很喜欢，也希望大家长命功夫长命做。当然更推荐大家去听听这张专辑。\n\n今天是五月3日，昨天的晚上还接到工作电话，我只接入几分钟，而我得知，有个同时本来出去旅游，却在酒店远程办公一天，而还有同事虽然在家，也是连续工作两天。希望大家都能：长命功夫就长命来做。\n\n我们回到书的本质，书的出现就是作为知识，经验，情感的载体，一个人如果想把它自己的经验，情感等传承下去，如果只是面传身教 那受时间空间的限制太大。但是通过书作为载体来记录，就可以突破时间空间的限制。而现在可以承载知识的载体多种多样，视频，电子书，音频，当然现在GPT的发展，肯定也会让知识以不同形式体现。那么抛开形式，书的本质是为了传承知识，经验，情感。而传承是为了什么呢？当然第一点，谜底就在谜面，就是为了传承，为了这些”宝贝“被记录下来，不丢失，不遗忘。那么再深入一点，我认为是为了人，为了我们这些能够接受到知识的人，让我们能站在前人的肩膀上，获取他们的智慧，同时结合当下环境，做出自己的判断以应对这个一直变化的世界。而这个过程，就是在塑造我们自己，塑造一个个人，机器。视频中罗翔老师说，以前人再讨论，人是不是机器，现在人在讨论机器是不是人。这是个很有意思的观察，我也一直在思考，社会发展到底改变了什么。有一个很有趣的角度，就是社会的发展其实是将人边缘化。早期阶段，社会的一切物质都来源与人的劳动，机器和工具的使用使得人可以部分可以被替代，而随着发展，很多环节，人的体力劳动都被替代，人进一步边缘化；现在的AI发展，会不会替代人的脑力劳动呢？我不知道，但是这是一个趋势。当然从一般的角度来说，这种发展使得人解放了，有了更多的精力去思考，去发展艺术等等。虽然掌握世界话语权的依旧是人，但是人的主体性是在降低的，或者说有一部分人在这样的发展中是越来越被边缘化的。视频中最后也是提到，最后一切讨论回归到人，这个回归很好。离开了人，讨论阅读，讨论AI是没有意义的，人才是基础，以人为本是我们思考所有事情的出发点。\n双雪涛说他喜欢读作者性的东西，这也是我认为的阅读的本质，但是AI生成的知识是不是有作者性，是个值得讨论的问题？B站有很多知识区UP主，在讲书，讲电影等等，我很喜欢看。因为我通过他们快速的了解到了原作者的观点及思考，但是UP主本身的视频作品是不是具有作者性呢？有但不多，很多是知识的搬运工，他们就是让知识的载体由书变成视频。而AI产生的知识是它的思考呢？还是人类知识积累的总结呢？ 机器是不是人呢？\n\n5月4日补充：\n之前写的时候，说到书的工具属性的时候，最开始想写的是书对人的塑造，人在使用工具，而工具也反过来在塑造人。我一直在想，现在手机，视频，这些东西到底会有啥影响。我看到很多人在批判，更多人在积极的迎接。但是盲目的乐观，或者一味的批判都是不对的，正如教员在<论持久战>中说，盲目的乐观和盲目的悲观都是不可取的。\n","source":"_posts/杂话集/B站读书节目观后.md","raw":"---\ntitle: B站读书节目观后\ncategories: 随笔\ntags: 随笔\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 人在使用工具，而工具也反过来在塑造人\ndate: 2024-05-03 22:25:03\nupdated: 2024-05-03 22:25:03\nsticky: 3\n---\nB站看了一个UP跟罗翔，双雪涛，还有一位没见过的老师讨论读书的话题，节目是B站为了读书日做的主题。\n\n节目中第一个话题讨论，人工智能时代来了，读书还有意义吗？节目中罗翔老的回答我很认同，他说，当我们再讨论读书有没有意义的时候，就说明它是有意义的。\n\n但在讨论有没有意义前，我想先看看，到底什么叫读书？当然节目后面罗翔老师也发表了自己的看法。我想说说我的理解，当我们给一件事情下一个定义的时候，就是创造一种概念，但是概念本身并不能表达这个事物的所有，而是我们从某些维度提取了它的特征。但是我们由必须去创造一个个概念，这样我们才能理解世界。读书的概念不是一个新的概念，但是对于每个人来说对于这个概念的理解和对于它的外延的定义都是不一致的。读书可以是娱乐，可以是为了获取知识，可以为了考试等等；读书的方式也是多种多样，可以是纸质书，电子书，看网文，甚至概念再宽泛一点，看视频，甚至跟人聊天也算。那么我们先定义一下我这篇文章讨论的读书的范围和目的，首先目的我把范围缩小到娱乐和获取知识，形式定义为都纸质书和电子书，同时我把所读的书定义为有作者性的书。基于这个范围的定义，我来说说我对于读书这件事情的看法。\n\n对于我来说，算是有那么一点读书的爱好，但不多。而我读书的目的总是想通过读书得到点什么，比如昨天刚读完的《正见》这本书，就是想知道佛学的一些基本概念到底要怎么理解，是不是可以通过佛学的观点，解决自己的一些问题。甚至我读小说，都是为了看看作者通过小说表达了什么？这种目的性好不好呢？我觉得不一定好，这也许是我们这么多年应试教育留下来的惯性，但对于我来说这就是我读书的初始动机。我们回到刚开始的问题，AI时代，读书有没有意义，我认为肯定是由意义的，读书是为了获取知识，AI也可以快速的给你知识。两个事情都是有意义的，并不是说形式的变化，会消除读书本来的意义。也就是说凡事我们必须回到它的本质去看它的意义，而不应该看到形式的变化就去追问一件事情的意义。\n\n那么我们为啥还要去讨论读书的意义呢？或者说我们为啥会去思考，AI时代，传统的读书有没有意义呢？其实是因为效率，现在社会最大的问题就是所有的事情都被关在“理性的牢笼”中，韦伯在一个多世纪以前就语言了这个事情，但是我们依旧逃不出，甚至越关越深。当我们所有事情都陷入理性，且把利益最大化作为第一目的后，我们思考事情的情形就变成了这样：这有什么用？这样做和那样做那个更有效率，成本更低？那么我们又回到原来的问题，AI时代都市还有意义吗？这其实是在问，AI时代，读书是一件效率低下，成本又高的事情，我们还要去做吗？这个问题我也无法回答，而这个问题是我们所有人都应该思考的问题。不仅仅是读书，现在几乎所有的事情都值得考虑一遍。当所有事情都在追求效率的时候，那些低效的事情值得做吗？\n\n昨天听到了我极其喜欢的专辑，蛙池的《郊游》，其中同名歌曲《郊游》中有一句歌词：长命功夫就长命来做。我很喜欢，也希望大家长命功夫长命做。当然更推荐大家去听听这张专辑。\n\n今天是五月3日，昨天的晚上还接到工作电话，我只接入几分钟，而我得知，有个同时本来出去旅游，却在酒店远程办公一天，而还有同事虽然在家，也是连续工作两天。希望大家都能：长命功夫就长命来做。\n\n我们回到书的本质，书的出现就是作为知识，经验，情感的载体，一个人如果想把它自己的经验，情感等传承下去，如果只是面传身教 那受时间空间的限制太大。但是通过书作为载体来记录，就可以突破时间空间的限制。而现在可以承载知识的载体多种多样，视频，电子书，音频，当然现在GPT的发展，肯定也会让知识以不同形式体现。那么抛开形式，书的本质是为了传承知识，经验，情感。而传承是为了什么呢？当然第一点，谜底就在谜面，就是为了传承，为了这些”宝贝“被记录下来，不丢失，不遗忘。那么再深入一点，我认为是为了人，为了我们这些能够接受到知识的人，让我们能站在前人的肩膀上，获取他们的智慧，同时结合当下环境，做出自己的判断以应对这个一直变化的世界。而这个过程，就是在塑造我们自己，塑造一个个人，机器。视频中罗翔老师说，以前人再讨论，人是不是机器，现在人在讨论机器是不是人。这是个很有意思的观察，我也一直在思考，社会发展到底改变了什么。有一个很有趣的角度，就是社会的发展其实是将人边缘化。早期阶段，社会的一切物质都来源与人的劳动，机器和工具的使用使得人可以部分可以被替代，而随着发展，很多环节，人的体力劳动都被替代，人进一步边缘化；现在的AI发展，会不会替代人的脑力劳动呢？我不知道，但是这是一个趋势。当然从一般的角度来说，这种发展使得人解放了，有了更多的精力去思考，去发展艺术等等。虽然掌握世界话语权的依旧是人，但是人的主体性是在降低的，或者说有一部分人在这样的发展中是越来越被边缘化的。视频中最后也是提到，最后一切讨论回归到人，这个回归很好。离开了人，讨论阅读，讨论AI是没有意义的，人才是基础，以人为本是我们思考所有事情的出发点。\n双雪涛说他喜欢读作者性的东西，这也是我认为的阅读的本质，但是AI生成的知识是不是有作者性，是个值得讨论的问题？B站有很多知识区UP主，在讲书，讲电影等等，我很喜欢看。因为我通过他们快速的了解到了原作者的观点及思考，但是UP主本身的视频作品是不是具有作者性呢？有但不多，很多是知识的搬运工，他们就是让知识的载体由书变成视频。而AI产生的知识是它的思考呢？还是人类知识积累的总结呢？ 机器是不是人呢？\n\n5月4日补充：\n之前写的时候，说到书的工具属性的时候，最开始想写的是书对人的塑造，人在使用工具，而工具也反过来在塑造人。我一直在想，现在手机，视频，这些东西到底会有啥影响。我看到很多人在批判，更多人在积极的迎接。但是盲目的乐观，或者一味的批判都是不对的，正如教员在<论持久战>中说，盲目的乐观和盲目的悲观都是不可取的。\n","slug":"杂话集/B站读书节目观后","published":1,"layout":"post","photos":[],"link":"","_id":"clyv0jau200002wlbcyp728ov","content":"<p>B站看了一个UP跟罗翔，双雪涛，还有一位没见过的老师讨论读书的话题，节目是B站为了读书日做的主题。</p>\n<p>节目中第一个话题讨论，人工智能时代来了，读书还有意义吗？节目中罗翔老的回答我很认同，他说，当我们再讨论读书有没有意义的时候，就说明它是有意义的。</p>\n<p>但在讨论有没有意义前，我想先看看，到底什么叫读书？当然节目后面罗翔老师也发表了自己的看法。我想说说我的理解，当我们给一件事情下一个定义的时候，就是创造一种概念，但是概念本身并不能表达这个事物的所有，而是我们从某些维度提取了它的特征。但是我们由必须去创造一个个概念，这样我们才能理解世界。读书的概念不是一个新的概念，但是对于每个人来说对于这个概念的理解和对于它的外延的定义都是不一致的。读书可以是娱乐，可以是为了获取知识，可以为了考试等等；读书的方式也是多种多样，可以是纸质书，电子书，看网文，甚至概念再宽泛一点，看视频，甚至跟人聊天也算。那么我们先定义一下我这篇文章讨论的读书的范围和目的，首先目的我把范围缩小到娱乐和获取知识，形式定义为都纸质书和电子书，同时我把所读的书定义为有作者性的书。基于这个范围的定义，我来说说我对于读书这件事情的看法。</p>\n<p>对于我来说，算是有那么一点读书的爱好，但不多。而我读书的目的总是想通过读书得到点什么，比如昨天刚读完的《正见》这本书，就是想知道佛学的一些基本概念到底要怎么理解，是不是可以通过佛学的观点，解决自己的一些问题。甚至我读小说，都是为了看看作者通过小说表达了什么？这种目的性好不好呢？我觉得不一定好，这也许是我们这么多年应试教育留下来的惯性，但对于我来说这就是我读书的初始动机。我们回到刚开始的问题，AI时代，读书有没有意义，我认为肯定是由意义的，读书是为了获取知识，AI也可以快速的给你知识。两个事情都是有意义的，并不是说形式的变化，会消除读书本来的意义。也就是说凡事我们必须回到它的本质去看它的意义，而不应该看到形式的变化就去追问一件事情的意义。</p>\n<p>那么我们为啥还要去讨论读书的意义呢？或者说我们为啥会去思考，AI时代，传统的读书有没有意义呢？其实是因为效率，现在社会最大的问题就是所有的事情都被关在“理性的牢笼”中，韦伯在一个多世纪以前就语言了这个事情，但是我们依旧逃不出，甚至越关越深。当我们所有事情都陷入理性，且把利益最大化作为第一目的后，我们思考事情的情形就变成了这样：这有什么用？这样做和那样做那个更有效率，成本更低？那么我们又回到原来的问题，AI时代都市还有意义吗？这其实是在问，AI时代，读书是一件效率低下，成本又高的事情，我们还要去做吗？这个问题我也无法回答，而这个问题是我们所有人都应该思考的问题。不仅仅是读书，现在几乎所有的事情都值得考虑一遍。当所有事情都在追求效率的时候，那些低效的事情值得做吗？</p>\n<p>昨天听到了我极其喜欢的专辑，蛙池的《郊游》，其中同名歌曲《郊游》中有一句歌词：长命功夫就长命来做。我很喜欢，也希望大家长命功夫长命做。当然更推荐大家去听听这张专辑。</p>\n<p>今天是五月3日，昨天的晚上还接到工作电话，我只接入几分钟，而我得知，有个同时本来出去旅游，却在酒店远程办公一天，而还有同事虽然在家，也是连续工作两天。希望大家都能：长命功夫就长命来做。</p>\n<p>我们回到书的本质，书的出现就是作为知识，经验，情感的载体，一个人如果想把它自己的经验，情感等传承下去，如果只是面传身教 那受时间空间的限制太大。但是通过书作为载体来记录，就可以突破时间空间的限制。而现在可以承载知识的载体多种多样，视频，电子书，音频，当然现在GPT的发展，肯定也会让知识以不同形式体现。那么抛开形式，书的本质是为了传承知识，经验，情感。而传承是为了什么呢？当然第一点，谜底就在谜面，就是为了传承，为了这些”宝贝“被记录下来，不丢失，不遗忘。那么再深入一点，我认为是为了人，为了我们这些能够接受到知识的人，让我们能站在前人的肩膀上，获取他们的智慧，同时结合当下环境，做出自己的判断以应对这个一直变化的世界。而这个过程，就是在塑造我们自己，塑造一个个人，机器。视频中罗翔老师说，以前人再讨论，人是不是机器，现在人在讨论机器是不是人。这是个很有意思的观察，我也一直在思考，社会发展到底改变了什么。有一个很有趣的角度，就是社会的发展其实是将人边缘化。早期阶段，社会的一切物质都来源与人的劳动，机器和工具的使用使得人可以部分可以被替代，而随着发展，很多环节，人的体力劳动都被替代，人进一步边缘化；现在的AI发展，会不会替代人的脑力劳动呢？我不知道，但是这是一个趋势。当然从一般的角度来说，这种发展使得人解放了，有了更多的精力去思考，去发展艺术等等。虽然掌握世界话语权的依旧是人，但是人的主体性是在降低的，或者说有一部分人在这样的发展中是越来越被边缘化的。视频中最后也是提到，最后一切讨论回归到人，这个回归很好。离开了人，讨论阅读，讨论AI是没有意义的，人才是基础，以人为本是我们思考所有事情的出发点。<br>双雪涛说他喜欢读作者性的东西，这也是我认为的阅读的本质，但是AI生成的知识是不是有作者性，是个值得讨论的问题？B站有很多知识区UP主，在讲书，讲电影等等，我很喜欢看。因为我通过他们快速的了解到了原作者的观点及思考，但是UP主本身的视频作品是不是具有作者性呢？有但不多，很多是知识的搬运工，他们就是让知识的载体由书变成视频。而AI产生的知识是它的思考呢？还是人类知识积累的总结呢？ 机器是不是人呢？</p>\n<p>5月4日补充：<br>之前写的时候，说到书的工具属性的时候，最开始想写的是书对人的塑造，人在使用工具，而工具也反过来在塑造人。我一直在想，现在手机，视频，这些东西到底会有啥影响。我看到很多人在批判，更多人在积极的迎接。但是盲目的乐观，或者一味的批判都是不对的，正如教员在&lt;论持久战&gt;中说，盲目的乐观和盲目的悲观都是不可取的。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>B站看了一个UP跟罗翔，双雪涛，还有一位没见过的老师讨论读书的话题，节目是B站为了读书日做的主题。</p>\n<p>节目中第一个话题讨论，人工智能时代来了，读书还有意义吗？节目中罗翔老的回答我很认同，他说，当我们再讨论读书有没有意义的时候，就说明它是有意义的。</p>\n<p>但在讨论有没有意义前，我想先看看，到底什么叫读书？当然节目后面罗翔老师也发表了自己的看法。我想说说我的理解，当我们给一件事情下一个定义的时候，就是创造一种概念，但是概念本身并不能表达这个事物的所有，而是我们从某些维度提取了它的特征。但是我们由必须去创造一个个概念，这样我们才能理解世界。读书的概念不是一个新的概念，但是对于每个人来说对于这个概念的理解和对于它的外延的定义都是不一致的。读书可以是娱乐，可以是为了获取知识，可以为了考试等等；读书的方式也是多种多样，可以是纸质书，电子书，看网文，甚至概念再宽泛一点，看视频，甚至跟人聊天也算。那么我们先定义一下我这篇文章讨论的读书的范围和目的，首先目的我把范围缩小到娱乐和获取知识，形式定义为都纸质书和电子书，同时我把所读的书定义为有作者性的书。基于这个范围的定义，我来说说我对于读书这件事情的看法。</p>\n<p>对于我来说，算是有那么一点读书的爱好，但不多。而我读书的目的总是想通过读书得到点什么，比如昨天刚读完的《正见》这本书，就是想知道佛学的一些基本概念到底要怎么理解，是不是可以通过佛学的观点，解决自己的一些问题。甚至我读小说，都是为了看看作者通过小说表达了什么？这种目的性好不好呢？我觉得不一定好，这也许是我们这么多年应试教育留下来的惯性，但对于我来说这就是我读书的初始动机。我们回到刚开始的问题，AI时代，读书有没有意义，我认为肯定是由意义的，读书是为了获取知识，AI也可以快速的给你知识。两个事情都是有意义的，并不是说形式的变化，会消除读书本来的意义。也就是说凡事我们必须回到它的本质去看它的意义，而不应该看到形式的变化就去追问一件事情的意义。</p>\n<p>那么我们为啥还要去讨论读书的意义呢？或者说我们为啥会去思考，AI时代，传统的读书有没有意义呢？其实是因为效率，现在社会最大的问题就是所有的事情都被关在“理性的牢笼”中，韦伯在一个多世纪以前就语言了这个事情，但是我们依旧逃不出，甚至越关越深。当我们所有事情都陷入理性，且把利益最大化作为第一目的后，我们思考事情的情形就变成了这样：这有什么用？这样做和那样做那个更有效率，成本更低？那么我们又回到原来的问题，AI时代都市还有意义吗？这其实是在问，AI时代，读书是一件效率低下，成本又高的事情，我们还要去做吗？这个问题我也无法回答，而这个问题是我们所有人都应该思考的问题。不仅仅是读书，现在几乎所有的事情都值得考虑一遍。当所有事情都在追求效率的时候，那些低效的事情值得做吗？</p>\n<p>昨天听到了我极其喜欢的专辑，蛙池的《郊游》，其中同名歌曲《郊游》中有一句歌词：长命功夫就长命来做。我很喜欢，也希望大家长命功夫长命做。当然更推荐大家去听听这张专辑。</p>\n<p>今天是五月3日，昨天的晚上还接到工作电话，我只接入几分钟，而我得知，有个同时本来出去旅游，却在酒店远程办公一天，而还有同事虽然在家，也是连续工作两天。希望大家都能：长命功夫就长命来做。</p>\n<p>我们回到书的本质，书的出现就是作为知识，经验，情感的载体，一个人如果想把它自己的经验，情感等传承下去，如果只是面传身教 那受时间空间的限制太大。但是通过书作为载体来记录，就可以突破时间空间的限制。而现在可以承载知识的载体多种多样，视频，电子书，音频，当然现在GPT的发展，肯定也会让知识以不同形式体现。那么抛开形式，书的本质是为了传承知识，经验，情感。而传承是为了什么呢？当然第一点，谜底就在谜面，就是为了传承，为了这些”宝贝“被记录下来，不丢失，不遗忘。那么再深入一点，我认为是为了人，为了我们这些能够接受到知识的人，让我们能站在前人的肩膀上，获取他们的智慧，同时结合当下环境，做出自己的判断以应对这个一直变化的世界。而这个过程，就是在塑造我们自己，塑造一个个人，机器。视频中罗翔老师说，以前人再讨论，人是不是机器，现在人在讨论机器是不是人。这是个很有意思的观察，我也一直在思考，社会发展到底改变了什么。有一个很有趣的角度，就是社会的发展其实是将人边缘化。早期阶段，社会的一切物质都来源与人的劳动，机器和工具的使用使得人可以部分可以被替代，而随着发展，很多环节，人的体力劳动都被替代，人进一步边缘化；现在的AI发展，会不会替代人的脑力劳动呢？我不知道，但是这是一个趋势。当然从一般的角度来说，这种发展使得人解放了，有了更多的精力去思考，去发展艺术等等。虽然掌握世界话语权的依旧是人，但是人的主体性是在降低的，或者说有一部分人在这样的发展中是越来越被边缘化的。视频中最后也是提到，最后一切讨论回归到人，这个回归很好。离开了人，讨论阅读，讨论AI是没有意义的，人才是基础，以人为本是我们思考所有事情的出发点。<br>双雪涛说他喜欢读作者性的东西，这也是我认为的阅读的本质，但是AI生成的知识是不是有作者性，是个值得讨论的问题？B站有很多知识区UP主，在讲书，讲电影等等，我很喜欢看。因为我通过他们快速的了解到了原作者的观点及思考，但是UP主本身的视频作品是不是具有作者性呢？有但不多，很多是知识的搬运工，他们就是让知识的载体由书变成视频。而AI产生的知识是它的思考呢？还是人类知识积累的总结呢？ 机器是不是人呢？</p>\n<p>5月4日补充：<br>之前写的时候，说到书的工具属性的时候，最开始想写的是书对人的塑造，人在使用工具，而工具也反过来在塑造人。我一直在想，现在手机，视频，这些东西到底会有啥影响。我看到很多人在批判，更多人在积极的迎接。但是盲目的乐观，或者一味的批判都是不对的，正如教员在&lt;论持久战&gt;中说，盲目的乐观和盲目的悲观都是不可取的。</p>\n"},{"title":"八大山人","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"鸡谈虎也谈，德大乃食牛；芥羽唤童仆，归放南山头。","date":"2024-07-03T14:00:00.000Z","updated":"2024-07-03T14:00:00.000Z","sticky":3,"_content":"\n鸡谈虎也谈，德大乃食牛；芥羽唤童仆，归放南山头。这是八大山人《雏鸡图》中的提字。\n最近无意间看到八大山人的画，一下子就被吸引了。\n\n","source":"_posts/杂话集/八大山人.md","raw":"---\ntitle: 八大山人\ncategories: 随笔\ntags: 画\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 鸡谈虎也谈，德大乃食牛；芥羽唤童仆，归放南山头。\ndate: 2024-07-03 22:00:00\nupdated: 2024-07-03 22:00:00\nsticky: 3\n---\n\n鸡谈虎也谈，德大乃食牛；芥羽唤童仆，归放南山头。这是八大山人《雏鸡图》中的提字。\n最近无意间看到八大山人的画，一下子就被吸引了。\n\n","slug":"杂话集/八大山人","published":1,"layout":"post","photos":[],"link":"","_id":"clyv0jav400022wlbec0j8psd","content":"<p>鸡谈虎也谈，德大乃食牛；芥羽唤童仆，归放南山头。这是八大山人《雏鸡图》中的提字。<br>最近无意间看到八大山人的画，一下子就被吸引了。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>鸡谈虎也谈，德大乃食牛；芥羽唤童仆，归放南山头。这是八大山人《雏鸡图》中的提字。<br>最近无意间看到八大山人的画，一下子就被吸引了。</p>\n"},{"title":"在沙发上旅行","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"感受到了沙发的纹理，看到了地上有个很小的垃圾，发现了冰箱里面有一个很小的污渍，发现了家里的绿萝有一个叶子快要枯黄，这也是旅行","date":"2024-05-04T01:25:03.000Z","updated":"2024-05-04T11:25:03.000Z","sticky":3,"_content":"\n今天看B站，有个UP主推荐一本书《沿着季风的方向》，作者刘子超。书的内容是作者在各地旅游，根据旅游经历所写。是一本旅行文学作品。\n\n旅行的意义：发现另一种可能性\n现在身边的人越来越细化旅游，但凡有点假期，都会计划着去哪逛逛。而这个五一，我只是呆在家里，看电影，看书，做饭。但却在想旅行的意义是什么？李乌鸦采访刘子超时，他说旅行就是发现生活的另一种可能，然后跳出你当下的生活，知道生命还有另一种样子。\n我极其认可这种说法，那么有其他的方法能让你发现这种不同的样子，可以吗？可以，也不行。\n我们看各种平台的旅游博主，只要你有一个屏幕，你能看见各种景色，不用经历堵车，不用经历各种排队，不用淋雨也不用晒太阳，你可以看到世界各地的景色，甚至比你亲自去看到的还美。你可以知道不同的地方，有不同的风景，有不同的人，你也知道生活有形形色色的可能。没有经历过程，就直达目的。\n但旅行的过程其实才是重要的，在路上，你不可能想到，火车晚点了，汽车电瓶没电了，辛辛苦苦找到一家饭店，上来的菜却巨难吃，或者你的手机还被偷了。或者还有各种不好的事情发生，当然也会有好的事情发生，你遇到了一个志同道合的人，跟他聊了的很开心，或者无意间吃了一家路边小店，但却巨好吃，又或者你到了景点，实际比你想象的还美。这些东西，这些好或者不好的经历，才是生活的另一种可能，前面说的发现生活的另一种可能，并不是发现你去的目的地，那里的人过着跟你不一样的另一种生活，而是你经历那些跳出你生活的好的或者不好的事情，发现自己生活的可能性。生活的起点是你自己，生活的终点也是你自己。但起点和终点都不重要，是过程决定了你，你就是生活的过程，生命的意义就是这个过程。\n海德格尔在《存在与时间》中提到一个概念”向死而生“，大致的说法是，人最后都会死亡，而死和死亡是不一样的，死是一个过程，人从出生后就在走向死亡，而死亡的终点不重要，重要的是走向死亡的过程。海德格尔想通过这种，让你先知道终点的方法，意识到，向死的过程才是生命的意义，从而激发你对生命内涵的理解，以及对当下的感受力。\n我们又拉回旅行，旅行其实跟生命的过程很像，都有一个终点，都要经历一些好的或者不好的事情，我们有没有方式直达终点呢？对于旅行，我们的目的就是就是目的地，对于生命我们的终点就是墓地。我们可以通过屏蔽，看到目的地，我们也可以直接进到墓地。但我们知道，生命的内涵不在墓地，类比一下，我想说，旅行的内涵也不再目的地。\n那么基于此，我在把旅行的意义的概念精确一下。旅行的意义：通过经历过程，发现自己生活的可能性。\n\n这个五一，东莞的天气时有大雨，而无一假期我几乎没有出门，也没有去旅行。韩大美女家中有事也不在，我就在家过着宅男的生活。直到今天，看到李乌鸦推荐这本书，我才想到，旅行的意义，难得的假期，没有去旅游，是不是很遗憾。\n前面我说，旅行的意义时通过经历旅行的过程，发现自己生活的可能性。而如果目的时为了发现生活的可能性，那么其实宅在家里也可以。我发现了蛙池《郊游》专辑，看了《正见》这本书，给自己做了好几天的饭，看了好多部电影。停下来有了思考。起码在我看来，我经历了我宅在家的过程，发现了宅着的意义。\n\n什么是旅行？\n旅行是你去到陌生的地方，遇到陌生的人，那么你发现了你陌生的生活，从而去感受生活。你感受到了沙发的纹理，看到了地上有个很小的垃圾，发现了冰箱里面有一个很小的污渍，发现了家里的绿萝，有一个叶子快要枯黄，发现了生活的陌生，也是旅行，你也发现了你生活的另一种可能。\n\n陈绮贞有一首歌叫《旅行的意义》，当然她要表达的的跟我要表达的完全不一样，但这首歌很好听，她的声音很美，人也很美，歌词也很好，我想把歌词抄在下面：\n\n你看过了许多美景\n你看过了许多美女\n你迷失在地图上每一道短暂的光阴\n你品尝了夜的巴黎\n你踏过下雪的北京\n你熟记书本里的每一句你爱的真理\n却说不出你爱我的原因\n却说不出你欣赏我哪一种表情\n却说不出在什么场合我曾让心动\n说不出离开的原因\n\n你累计了许多飞行\n你用心挑选纪念品\n你收集了地图上每一次的风和日丽\n你拥抱热情的岛屿\n你埋葬记忆里的土耳其\n你留恋电影里美丽不真实的场景\n却说不出你爱我的原因\n却说不出你欣赏我哪一种表情\n却说不出在什么场合我曾让你分心\n说不出旅行的意义\n你勉强说出你爱我的原因\n却说不出你欣赏我哪一种表情\n却说不出离开的原因\n\n勉强说出你为我寄出的每一封信\n都是你离开的原因\n你离开我\n就是旅行的意义\n\n这是一首忧伤的歌，有时间我想在聊聊这首歌，但是我想说，旅行，不是为了离开，而是为了找回生活。\n","source":"_posts/杂话集/在沙发上旅行.md","raw":"---\ntitle: 在沙发上旅行\ncategories: 随笔\ntags: 随笔\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 感受到了沙发的纹理，看到了地上有个很小的垃圾，发现了冰箱里面有一个很小的污渍，发现了家里的绿萝有一个叶子快要枯黄，这也是旅行\ndate: 2024-05-04 9:25:03\nupdated: 2024-05-04 19:25:03\nsticky: 3\n---\n\n今天看B站，有个UP主推荐一本书《沿着季风的方向》，作者刘子超。书的内容是作者在各地旅游，根据旅游经历所写。是一本旅行文学作品。\n\n旅行的意义：发现另一种可能性\n现在身边的人越来越细化旅游，但凡有点假期，都会计划着去哪逛逛。而这个五一，我只是呆在家里，看电影，看书，做饭。但却在想旅行的意义是什么？李乌鸦采访刘子超时，他说旅行就是发现生活的另一种可能，然后跳出你当下的生活，知道生命还有另一种样子。\n我极其认可这种说法，那么有其他的方法能让你发现这种不同的样子，可以吗？可以，也不行。\n我们看各种平台的旅游博主，只要你有一个屏幕，你能看见各种景色，不用经历堵车，不用经历各种排队，不用淋雨也不用晒太阳，你可以看到世界各地的景色，甚至比你亲自去看到的还美。你可以知道不同的地方，有不同的风景，有不同的人，你也知道生活有形形色色的可能。没有经历过程，就直达目的。\n但旅行的过程其实才是重要的，在路上，你不可能想到，火车晚点了，汽车电瓶没电了，辛辛苦苦找到一家饭店，上来的菜却巨难吃，或者你的手机还被偷了。或者还有各种不好的事情发生，当然也会有好的事情发生，你遇到了一个志同道合的人，跟他聊了的很开心，或者无意间吃了一家路边小店，但却巨好吃，又或者你到了景点，实际比你想象的还美。这些东西，这些好或者不好的经历，才是生活的另一种可能，前面说的发现生活的另一种可能，并不是发现你去的目的地，那里的人过着跟你不一样的另一种生活，而是你经历那些跳出你生活的好的或者不好的事情，发现自己生活的可能性。生活的起点是你自己，生活的终点也是你自己。但起点和终点都不重要，是过程决定了你，你就是生活的过程，生命的意义就是这个过程。\n海德格尔在《存在与时间》中提到一个概念”向死而生“，大致的说法是，人最后都会死亡，而死和死亡是不一样的，死是一个过程，人从出生后就在走向死亡，而死亡的终点不重要，重要的是走向死亡的过程。海德格尔想通过这种，让你先知道终点的方法，意识到，向死的过程才是生命的意义，从而激发你对生命内涵的理解，以及对当下的感受力。\n我们又拉回旅行，旅行其实跟生命的过程很像，都有一个终点，都要经历一些好的或者不好的事情，我们有没有方式直达终点呢？对于旅行，我们的目的就是就是目的地，对于生命我们的终点就是墓地。我们可以通过屏蔽，看到目的地，我们也可以直接进到墓地。但我们知道，生命的内涵不在墓地，类比一下，我想说，旅行的内涵也不再目的地。\n那么基于此，我在把旅行的意义的概念精确一下。旅行的意义：通过经历过程，发现自己生活的可能性。\n\n这个五一，东莞的天气时有大雨，而无一假期我几乎没有出门，也没有去旅行。韩大美女家中有事也不在，我就在家过着宅男的生活。直到今天，看到李乌鸦推荐这本书，我才想到，旅行的意义，难得的假期，没有去旅游，是不是很遗憾。\n前面我说，旅行的意义时通过经历旅行的过程，发现自己生活的可能性。而如果目的时为了发现生活的可能性，那么其实宅在家里也可以。我发现了蛙池《郊游》专辑，看了《正见》这本书，给自己做了好几天的饭，看了好多部电影。停下来有了思考。起码在我看来，我经历了我宅在家的过程，发现了宅着的意义。\n\n什么是旅行？\n旅行是你去到陌生的地方，遇到陌生的人，那么你发现了你陌生的生活，从而去感受生活。你感受到了沙发的纹理，看到了地上有个很小的垃圾，发现了冰箱里面有一个很小的污渍，发现了家里的绿萝，有一个叶子快要枯黄，发现了生活的陌生，也是旅行，你也发现了你生活的另一种可能。\n\n陈绮贞有一首歌叫《旅行的意义》，当然她要表达的的跟我要表达的完全不一样，但这首歌很好听，她的声音很美，人也很美，歌词也很好，我想把歌词抄在下面：\n\n你看过了许多美景\n你看过了许多美女\n你迷失在地图上每一道短暂的光阴\n你品尝了夜的巴黎\n你踏过下雪的北京\n你熟记书本里的每一句你爱的真理\n却说不出你爱我的原因\n却说不出你欣赏我哪一种表情\n却说不出在什么场合我曾让心动\n说不出离开的原因\n\n你累计了许多飞行\n你用心挑选纪念品\n你收集了地图上每一次的风和日丽\n你拥抱热情的岛屿\n你埋葬记忆里的土耳其\n你留恋电影里美丽不真实的场景\n却说不出你爱我的原因\n却说不出你欣赏我哪一种表情\n却说不出在什么场合我曾让你分心\n说不出旅行的意义\n你勉强说出你爱我的原因\n却说不出你欣赏我哪一种表情\n却说不出离开的原因\n\n勉强说出你为我寄出的每一封信\n都是你离开的原因\n你离开我\n就是旅行的意义\n\n这是一首忧伤的歌，有时间我想在聊聊这首歌，但是我想说，旅行，不是为了离开，而是为了找回生活。\n","slug":"杂话集/在沙发上旅行","published":1,"layout":"post","photos":[],"link":"","_id":"clyv0jav700032wlb07ghf8e6","content":"<p>今天看B站，有个UP主推荐一本书《沿着季风的方向》，作者刘子超。书的内容是作者在各地旅游，根据旅游经历所写。是一本旅行文学作品。</p>\n<p>旅行的意义：发现另一种可能性<br>现在身边的人越来越细化旅游，但凡有点假期，都会计划着去哪逛逛。而这个五一，我只是呆在家里，看电影，看书，做饭。但却在想旅行的意义是什么？李乌鸦采访刘子超时，他说旅行就是发现生活的另一种可能，然后跳出你当下的生活，知道生命还有另一种样子。<br>我极其认可这种说法，那么有其他的方法能让你发现这种不同的样子，可以吗？可以，也不行。<br>我们看各种平台的旅游博主，只要你有一个屏幕，你能看见各种景色，不用经历堵车，不用经历各种排队，不用淋雨也不用晒太阳，你可以看到世界各地的景色，甚至比你亲自去看到的还美。你可以知道不同的地方，有不同的风景，有不同的人，你也知道生活有形形色色的可能。没有经历过程，就直达目的。<br>但旅行的过程其实才是重要的，在路上，你不可能想到，火车晚点了，汽车电瓶没电了，辛辛苦苦找到一家饭店，上来的菜却巨难吃，或者你的手机还被偷了。或者还有各种不好的事情发生，当然也会有好的事情发生，你遇到了一个志同道合的人，跟他聊了的很开心，或者无意间吃了一家路边小店，但却巨好吃，又或者你到了景点，实际比你想象的还美。这些东西，这些好或者不好的经历，才是生活的另一种可能，前面说的发现生活的另一种可能，并不是发现你去的目的地，那里的人过着跟你不一样的另一种生活，而是你经历那些跳出你生活的好的或者不好的事情，发现自己生活的可能性。生活的起点是你自己，生活的终点也是你自己。但起点和终点都不重要，是过程决定了你，你就是生活的过程，生命的意义就是这个过程。<br>海德格尔在《存在与时间》中提到一个概念”向死而生“，大致的说法是，人最后都会死亡，而死和死亡是不一样的，死是一个过程，人从出生后就在走向死亡，而死亡的终点不重要，重要的是走向死亡的过程。海德格尔想通过这种，让你先知道终点的方法，意识到，向死的过程才是生命的意义，从而激发你对生命内涵的理解，以及对当下的感受力。<br>我们又拉回旅行，旅行其实跟生命的过程很像，都有一个终点，都要经历一些好的或者不好的事情，我们有没有方式直达终点呢？对于旅行，我们的目的就是就是目的地，对于生命我们的终点就是墓地。我们可以通过屏蔽，看到目的地，我们也可以直接进到墓地。但我们知道，生命的内涵不在墓地，类比一下，我想说，旅行的内涵也不再目的地。<br>那么基于此，我在把旅行的意义的概念精确一下。旅行的意义：通过经历过程，发现自己生活的可能性。</p>\n<p>这个五一，东莞的天气时有大雨，而无一假期我几乎没有出门，也没有去旅行。韩大美女家中有事也不在，我就在家过着宅男的生活。直到今天，看到李乌鸦推荐这本书，我才想到，旅行的意义，难得的假期，没有去旅游，是不是很遗憾。<br>前面我说，旅行的意义时通过经历旅行的过程，发现自己生活的可能性。而如果目的时为了发现生活的可能性，那么其实宅在家里也可以。我发现了蛙池《郊游》专辑，看了《正见》这本书，给自己做了好几天的饭，看了好多部电影。停下来有了思考。起码在我看来，我经历了我宅在家的过程，发现了宅着的意义。</p>\n<p>什么是旅行？<br>旅行是你去到陌生的地方，遇到陌生的人，那么你发现了你陌生的生活，从而去感受生活。你感受到了沙发的纹理，看到了地上有个很小的垃圾，发现了冰箱里面有一个很小的污渍，发现了家里的绿萝，有一个叶子快要枯黄，发现了生活的陌生，也是旅行，你也发现了你生活的另一种可能。</p>\n<p>陈绮贞有一首歌叫《旅行的意义》，当然她要表达的的跟我要表达的完全不一样，但这首歌很好听，她的声音很美，人也很美，歌词也很好，我想把歌词抄在下面：</p>\n<p>你看过了许多美景<br>你看过了许多美女<br>你迷失在地图上每一道短暂的光阴<br>你品尝了夜的巴黎<br>你踏过下雪的北京<br>你熟记书本里的每一句你爱的真理<br>却说不出你爱我的原因<br>却说不出你欣赏我哪一种表情<br>却说不出在什么场合我曾让心动<br>说不出离开的原因</p>\n<p>你累计了许多飞行<br>你用心挑选纪念品<br>你收集了地图上每一次的风和日丽<br>你拥抱热情的岛屿<br>你埋葬记忆里的土耳其<br>你留恋电影里美丽不真实的场景<br>却说不出你爱我的原因<br>却说不出你欣赏我哪一种表情<br>却说不出在什么场合我曾让你分心<br>说不出旅行的意义<br>你勉强说出你爱我的原因<br>却说不出你欣赏我哪一种表情<br>却说不出离开的原因</p>\n<p>勉强说出你为我寄出的每一封信<br>都是你离开的原因<br>你离开我<br>就是旅行的意义</p>\n<p>这是一首忧伤的歌，有时间我想在聊聊这首歌，但是我想说，旅行，不是为了离开，而是为了找回生活。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>今天看B站，有个UP主推荐一本书《沿着季风的方向》，作者刘子超。书的内容是作者在各地旅游，根据旅游经历所写。是一本旅行文学作品。</p>\n<p>旅行的意义：发现另一种可能性<br>现在身边的人越来越细化旅游，但凡有点假期，都会计划着去哪逛逛。而这个五一，我只是呆在家里，看电影，看书，做饭。但却在想旅行的意义是什么？李乌鸦采访刘子超时，他说旅行就是发现生活的另一种可能，然后跳出你当下的生活，知道生命还有另一种样子。<br>我极其认可这种说法，那么有其他的方法能让你发现这种不同的样子，可以吗？可以，也不行。<br>我们看各种平台的旅游博主，只要你有一个屏幕，你能看见各种景色，不用经历堵车，不用经历各种排队，不用淋雨也不用晒太阳，你可以看到世界各地的景色，甚至比你亲自去看到的还美。你可以知道不同的地方，有不同的风景，有不同的人，你也知道生活有形形色色的可能。没有经历过程，就直达目的。<br>但旅行的过程其实才是重要的，在路上，你不可能想到，火车晚点了，汽车电瓶没电了，辛辛苦苦找到一家饭店，上来的菜却巨难吃，或者你的手机还被偷了。或者还有各种不好的事情发生，当然也会有好的事情发生，你遇到了一个志同道合的人，跟他聊了的很开心，或者无意间吃了一家路边小店，但却巨好吃，又或者你到了景点，实际比你想象的还美。这些东西，这些好或者不好的经历，才是生活的另一种可能，前面说的发现生活的另一种可能，并不是发现你去的目的地，那里的人过着跟你不一样的另一种生活，而是你经历那些跳出你生活的好的或者不好的事情，发现自己生活的可能性。生活的起点是你自己，生活的终点也是你自己。但起点和终点都不重要，是过程决定了你，你就是生活的过程，生命的意义就是这个过程。<br>海德格尔在《存在与时间》中提到一个概念”向死而生“，大致的说法是，人最后都会死亡，而死和死亡是不一样的，死是一个过程，人从出生后就在走向死亡，而死亡的终点不重要，重要的是走向死亡的过程。海德格尔想通过这种，让你先知道终点的方法，意识到，向死的过程才是生命的意义，从而激发你对生命内涵的理解，以及对当下的感受力。<br>我们又拉回旅行，旅行其实跟生命的过程很像，都有一个终点，都要经历一些好的或者不好的事情，我们有没有方式直达终点呢？对于旅行，我们的目的就是就是目的地，对于生命我们的终点就是墓地。我们可以通过屏蔽，看到目的地，我们也可以直接进到墓地。但我们知道，生命的内涵不在墓地，类比一下，我想说，旅行的内涵也不再目的地。<br>那么基于此，我在把旅行的意义的概念精确一下。旅行的意义：通过经历过程，发现自己生活的可能性。</p>\n<p>这个五一，东莞的天气时有大雨，而无一假期我几乎没有出门，也没有去旅行。韩大美女家中有事也不在，我就在家过着宅男的生活。直到今天，看到李乌鸦推荐这本书，我才想到，旅行的意义，难得的假期，没有去旅游，是不是很遗憾。<br>前面我说，旅行的意义时通过经历旅行的过程，发现自己生活的可能性。而如果目的时为了发现生活的可能性，那么其实宅在家里也可以。我发现了蛙池《郊游》专辑，看了《正见》这本书，给自己做了好几天的饭，看了好多部电影。停下来有了思考。起码在我看来，我经历了我宅在家的过程，发现了宅着的意义。</p>\n<p>什么是旅行？<br>旅行是你去到陌生的地方，遇到陌生的人，那么你发现了你陌生的生活，从而去感受生活。你感受到了沙发的纹理，看到了地上有个很小的垃圾，发现了冰箱里面有一个很小的污渍，发现了家里的绿萝，有一个叶子快要枯黄，发现了生活的陌生，也是旅行，你也发现了你生活的另一种可能。</p>\n<p>陈绮贞有一首歌叫《旅行的意义》，当然她要表达的的跟我要表达的完全不一样，但这首歌很好听，她的声音很美，人也很美，歌词也很好，我想把歌词抄在下面：</p>\n<p>你看过了许多美景<br>你看过了许多美女<br>你迷失在地图上每一道短暂的光阴<br>你品尝了夜的巴黎<br>你踏过下雪的北京<br>你熟记书本里的每一句你爱的真理<br>却说不出你爱我的原因<br>却说不出你欣赏我哪一种表情<br>却说不出在什么场合我曾让心动<br>说不出离开的原因</p>\n<p>你累计了许多飞行<br>你用心挑选纪念品<br>你收集了地图上每一次的风和日丽<br>你拥抱热情的岛屿<br>你埋葬记忆里的土耳其<br>你留恋电影里美丽不真实的场景<br>却说不出你爱我的原因<br>却说不出你欣赏我哪一种表情<br>却说不出在什么场合我曾让你分心<br>说不出旅行的意义<br>你勉强说出你爱我的原因<br>却说不出你欣赏我哪一种表情<br>却说不出离开的原因</p>\n<p>勉强说出你为我寄出的每一封信<br>都是你离开的原因<br>你离开我<br>就是旅行的意义</p>\n<p>这是一首忧伤的歌，有时间我想在聊聊这首歌，但是我想说，旅行，不是为了离开，而是为了找回生活。</p>\n"},{"title":"写于阅读《起初.鱼甜》之前","author":"杨超","comments":1,"index_img":"/img/idea.png","excerpt":"看清了我是谁，从哪里来，到哪里去，为何今生在此勾留，遭此曾蹬，滔滔过往，如大洪流，裹挟着一帧帧声色活剧，在哪里夺目上演，闪电叠化，都付于一泓静水，才知人事皆非，心思如烟，亲系于心，亲系于民，爱系于心，抱负于心，都是浮光射尘，掷斑成影。","date":"2024-07-14T01:25:03.000Z","updated":"2024-07-19T11:25:03.000Z","sticky":3,"_content":"\n起初·鱼甜\n最近买了王朔的书，起初系列，总共4本。刚开始看第一本鱼甜。\n\n下面是腰封上的两段话：\n鱼甜是一条河，自南向北穿越塔克拉马干沙漠注入塔里木河。\n\n看清了我是谁，从哪里来，到哪里去，为何今生在此勾留，遭此曾蹬，滔滔过往，如大洪流，裹挟着一帧帧声色活剧，在哪里夺目上演，闪电叠化，都付于一泓静水，才知人事皆非，心思如烟，亲系于心，亲系于民，爱系于心，抱负于心，都是浮光射尘，掷斑成影。\n\n读完了序言，内容还没开始，此篇十一篇读前感，从书籍介绍，此系列的书是基于历史的小说。在阅读小说前，我先聊聊我的看法。\n\n首先聊聊历史的真实性问题，历史的来源如下：1、官方史书中的历史；2、人们记忆中的历史；3、事实的历史；\n第一点，我们有《史记》，《有资治通鉴》，我们有历史书，这些内容是有考证历史，也是现阶段主流认可的历史。这部分构成受过教育的人的大部分历史知识，和历史事实。我们往往以这部分历史作为基本的参照来看其余部分历史是不是真实的。第二点，来自艺术作品或者口口相传，比如《隋唐演义》，《三国演义》等等作品。此部分虽然很多都不是真实的，但是因为艺术加工后更加易于传播，深刻的影响大部分人的历史馆。第三部分我说的真实的历史和第一个有什么差别呢？要说明这部分，先看两个概念：真实和事实。我们看电影或者电视剧的时候，评价一个演员的演技好，会说他演的很真实，此时说的真实是说跟现实中一样吗？我认为不是，此处的真实，是在当前的框架下，他的行为让人信服。比如演一个歹徒杀人，一个演员演的是，他拿着刀直接砍向一个人，另一个演员在砍人的时候迟疑了一下。我们就会觉得第二个演的更好，因为我们认为，人是有恐惧和情感的，他杀人的时候，肯定是要克服掉自身的恐惧。此时我们认为第二个演的更真实，但是这里的真实，并不是事实。现实中歹徒杀人时候时什么样子时没人知道的，况且电影里的歹徒和杀人事件现实中时不存在的。所以简单说真实的和现实的区别时：真实的是指在当下的判断逻辑中自洽的事件。事实是在物理世界中发生的或者发生过的事件。那么第一点更像是真实的历史，第三点就是事实的历史。而第三点事实的历史其实是不可知的，至于为什么不可知，我只说一点，就是我们无法把一件真实发生的事情的全部信息记录下来。而真实的历史，就是在我们当下历史观体系下记录的部分，而这部分也会随着所掌握信息的内容而发生变化，比如我们都知道《西游记》的作者是吴承恩，甚至还学过吴承恩观猴的故事。但据最新的资料显示，其实吴承恩并非《西游记》的作者。第三点不可说，第一点往往是历史学家才要关注的事情。那么第二点才是普通人要关注的历史。所以此处王朔历史小说，我猜测他就是要讲他认为的历史，而他将通过小说来说明他的历史观，而通过他眼中的历史，看清自己来自哪里，又该如何？\n\n接下来我想聊聊王朔，第一次知道王朔我已经毫无印象了，应该是高中或者大学看韩寒还是谁的文章知道的，后来就了解的多了起来，看过他基本小说。看过他的采访，知道了他的花边新闻。从我仅有的了解，知道他是一个谁都瞧不上的主。他的很多作品被改为影视作品比如姜文导演的《阳关灿烂的日子》改编子王朔的《动物凶猛》，在电影里面王朔还客串了帮派大哥的角色。他的作品里面往往充斥着对一切事物的消解，同时语言又极具口语话，表达很幽默。起初系列的书，是他最新的出版的一部小说，从介绍说是又140万字，我倒是很期待这本书带来的阅读体验。","source":"_posts/杂话集/起初.鱼甜.md","raw":"---\ntitle: 写于阅读《起初.鱼甜》之前\ncategories: 随笔\ntags: 随笔\nauthor: 杨超\ncomments: true\nindex_img: /img/idea.png\nexcerpt: 看清了我是谁，从哪里来，到哪里去，为何今生在此勾留，遭此曾蹬，滔滔过往，如大洪流，裹挟着一帧帧声色活剧，在哪里夺目上演，闪电叠化，都付于一泓静水，才知人事皆非，心思如烟，亲系于心，亲系于民，爱系于心，抱负于心，都是浮光射尘，掷斑成影。\ndate: 2024-07-14 9:25:03\nupdated: 2024-07-19 19:25:03\nsticky: 3\n---\n\n起初·鱼甜\n最近买了王朔的书，起初系列，总共4本。刚开始看第一本鱼甜。\n\n下面是腰封上的两段话：\n鱼甜是一条河，自南向北穿越塔克拉马干沙漠注入塔里木河。\n\n看清了我是谁，从哪里来，到哪里去，为何今生在此勾留，遭此曾蹬，滔滔过往，如大洪流，裹挟着一帧帧声色活剧，在哪里夺目上演，闪电叠化，都付于一泓静水，才知人事皆非，心思如烟，亲系于心，亲系于民，爱系于心，抱负于心，都是浮光射尘，掷斑成影。\n\n读完了序言，内容还没开始，此篇十一篇读前感，从书籍介绍，此系列的书是基于历史的小说。在阅读小说前，我先聊聊我的看法。\n\n首先聊聊历史的真实性问题，历史的来源如下：1、官方史书中的历史；2、人们记忆中的历史；3、事实的历史；\n第一点，我们有《史记》，《有资治通鉴》，我们有历史书，这些内容是有考证历史，也是现阶段主流认可的历史。这部分构成受过教育的人的大部分历史知识，和历史事实。我们往往以这部分历史作为基本的参照来看其余部分历史是不是真实的。第二点，来自艺术作品或者口口相传，比如《隋唐演义》，《三国演义》等等作品。此部分虽然很多都不是真实的，但是因为艺术加工后更加易于传播，深刻的影响大部分人的历史馆。第三部分我说的真实的历史和第一个有什么差别呢？要说明这部分，先看两个概念：真实和事实。我们看电影或者电视剧的时候，评价一个演员的演技好，会说他演的很真实，此时说的真实是说跟现实中一样吗？我认为不是，此处的真实，是在当前的框架下，他的行为让人信服。比如演一个歹徒杀人，一个演员演的是，他拿着刀直接砍向一个人，另一个演员在砍人的时候迟疑了一下。我们就会觉得第二个演的更好，因为我们认为，人是有恐惧和情感的，他杀人的时候，肯定是要克服掉自身的恐惧。此时我们认为第二个演的更真实，但是这里的真实，并不是事实。现实中歹徒杀人时候时什么样子时没人知道的，况且电影里的歹徒和杀人事件现实中时不存在的。所以简单说真实的和现实的区别时：真实的是指在当下的判断逻辑中自洽的事件。事实是在物理世界中发生的或者发生过的事件。那么第一点更像是真实的历史，第三点就是事实的历史。而第三点事实的历史其实是不可知的，至于为什么不可知，我只说一点，就是我们无法把一件真实发生的事情的全部信息记录下来。而真实的历史，就是在我们当下历史观体系下记录的部分，而这部分也会随着所掌握信息的内容而发生变化，比如我们都知道《西游记》的作者是吴承恩，甚至还学过吴承恩观猴的故事。但据最新的资料显示，其实吴承恩并非《西游记》的作者。第三点不可说，第一点往往是历史学家才要关注的事情。那么第二点才是普通人要关注的历史。所以此处王朔历史小说，我猜测他就是要讲他认为的历史，而他将通过小说来说明他的历史观，而通过他眼中的历史，看清自己来自哪里，又该如何？\n\n接下来我想聊聊王朔，第一次知道王朔我已经毫无印象了，应该是高中或者大学看韩寒还是谁的文章知道的，后来就了解的多了起来，看过他基本小说。看过他的采访，知道了他的花边新闻。从我仅有的了解，知道他是一个谁都瞧不上的主。他的很多作品被改为影视作品比如姜文导演的《阳关灿烂的日子》改编子王朔的《动物凶猛》，在电影里面王朔还客串了帮派大哥的角色。他的作品里面往往充斥着对一切事物的消解，同时语言又极具口语话，表达很幽默。起初系列的书，是他最新的出版的一部小说，从介绍说是又140万字，我倒是很期待这本书带来的阅读体验。","slug":"杂话集/起初.鱼甜","published":1,"layout":"post","photos":[],"link":"","_id":"clyv0jave00082wlb3bpw297b","content":"<p>起初·鱼甜<br>最近买了王朔的书，起初系列，总共4本。刚开始看第一本鱼甜。</p>\n<p>下面是腰封上的两段话：<br>鱼甜是一条河，自南向北穿越塔克拉马干沙漠注入塔里木河。</p>\n<p>看清了我是谁，从哪里来，到哪里去，为何今生在此勾留，遭此曾蹬，滔滔过往，如大洪流，裹挟着一帧帧声色活剧，在哪里夺目上演，闪电叠化，都付于一泓静水，才知人事皆非，心思如烟，亲系于心，亲系于民，爱系于心，抱负于心，都是浮光射尘，掷斑成影。</p>\n<p>读完了序言，内容还没开始，此篇十一篇读前感，从书籍介绍，此系列的书是基于历史的小说。在阅读小说前，我先聊聊我的看法。</p>\n<p>首先聊聊历史的真实性问题，历史的来源如下：1、官方史书中的历史；2、人们记忆中的历史；3、事实的历史；<br>第一点，我们有《史记》，《有资治通鉴》，我们有历史书，这些内容是有考证历史，也是现阶段主流认可的历史。这部分构成受过教育的人的大部分历史知识，和历史事实。我们往往以这部分历史作为基本的参照来看其余部分历史是不是真实的。第二点，来自艺术作品或者口口相传，比如《隋唐演义》，《三国演义》等等作品。此部分虽然很多都不是真实的，但是因为艺术加工后更加易于传播，深刻的影响大部分人的历史馆。第三部分我说的真实的历史和第一个有什么差别呢？要说明这部分，先看两个概念：真实和事实。我们看电影或者电视剧的时候，评价一个演员的演技好，会说他演的很真实，此时说的真实是说跟现实中一样吗？我认为不是，此处的真实，是在当前的框架下，他的行为让人信服。比如演一个歹徒杀人，一个演员演的是，他拿着刀直接砍向一个人，另一个演员在砍人的时候迟疑了一下。我们就会觉得第二个演的更好，因为我们认为，人是有恐惧和情感的，他杀人的时候，肯定是要克服掉自身的恐惧。此时我们认为第二个演的更真实，但是这里的真实，并不是事实。现实中歹徒杀人时候时什么样子时没人知道的，况且电影里的歹徒和杀人事件现实中时不存在的。所以简单说真实的和现实的区别时：真实的是指在当下的判断逻辑中自洽的事件。事实是在物理世界中发生的或者发生过的事件。那么第一点更像是真实的历史，第三点就是事实的历史。而第三点事实的历史其实是不可知的，至于为什么不可知，我只说一点，就是我们无法把一件真实发生的事情的全部信息记录下来。而真实的历史，就是在我们当下历史观体系下记录的部分，而这部分也会随着所掌握信息的内容而发生变化，比如我们都知道《西游记》的作者是吴承恩，甚至还学过吴承恩观猴的故事。但据最新的资料显示，其实吴承恩并非《西游记》的作者。第三点不可说，第一点往往是历史学家才要关注的事情。那么第二点才是普通人要关注的历史。所以此处王朔历史小说，我猜测他就是要讲他认为的历史，而他将通过小说来说明他的历史观，而通过他眼中的历史，看清自己来自哪里，又该如何？</p>\n<p>接下来我想聊聊王朔，第一次知道王朔我已经毫无印象了，应该是高中或者大学看韩寒还是谁的文章知道的，后来就了解的多了起来，看过他基本小说。看过他的采访，知道了他的花边新闻。从我仅有的了解，知道他是一个谁都瞧不上的主。他的很多作品被改为影视作品比如姜文导演的《阳关灿烂的日子》改编子王朔的《动物凶猛》，在电影里面王朔还客串了帮派大哥的角色。他的作品里面往往充斥着对一切事物的消解，同时语言又极具口语话，表达很幽默。起初系列的书，是他最新的出版的一部小说，从介绍说是又140万字，我倒是很期待这本书带来的阅读体验。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>起初·鱼甜<br>最近买了王朔的书，起初系列，总共4本。刚开始看第一本鱼甜。</p>\n<p>下面是腰封上的两段话：<br>鱼甜是一条河，自南向北穿越塔克拉马干沙漠注入塔里木河。</p>\n<p>看清了我是谁，从哪里来，到哪里去，为何今生在此勾留，遭此曾蹬，滔滔过往，如大洪流，裹挟着一帧帧声色活剧，在哪里夺目上演，闪电叠化，都付于一泓静水，才知人事皆非，心思如烟，亲系于心，亲系于民，爱系于心，抱负于心，都是浮光射尘，掷斑成影。</p>\n<p>读完了序言，内容还没开始，此篇十一篇读前感，从书籍介绍，此系列的书是基于历史的小说。在阅读小说前，我先聊聊我的看法。</p>\n<p>首先聊聊历史的真实性问题，历史的来源如下：1、官方史书中的历史；2、人们记忆中的历史；3、事实的历史；<br>第一点，我们有《史记》，《有资治通鉴》，我们有历史书，这些内容是有考证历史，也是现阶段主流认可的历史。这部分构成受过教育的人的大部分历史知识，和历史事实。我们往往以这部分历史作为基本的参照来看其余部分历史是不是真实的。第二点，来自艺术作品或者口口相传，比如《隋唐演义》，《三国演义》等等作品。此部分虽然很多都不是真实的，但是因为艺术加工后更加易于传播，深刻的影响大部分人的历史馆。第三部分我说的真实的历史和第一个有什么差别呢？要说明这部分，先看两个概念：真实和事实。我们看电影或者电视剧的时候，评价一个演员的演技好，会说他演的很真实，此时说的真实是说跟现实中一样吗？我认为不是，此处的真实，是在当前的框架下，他的行为让人信服。比如演一个歹徒杀人，一个演员演的是，他拿着刀直接砍向一个人，另一个演员在砍人的时候迟疑了一下。我们就会觉得第二个演的更好，因为我们认为，人是有恐惧和情感的，他杀人的时候，肯定是要克服掉自身的恐惧。此时我们认为第二个演的更真实，但是这里的真实，并不是事实。现实中歹徒杀人时候时什么样子时没人知道的，况且电影里的歹徒和杀人事件现实中时不存在的。所以简单说真实的和现实的区别时：真实的是指在当下的判断逻辑中自洽的事件。事实是在物理世界中发生的或者发生过的事件。那么第一点更像是真实的历史，第三点就是事实的历史。而第三点事实的历史其实是不可知的，至于为什么不可知，我只说一点，就是我们无法把一件真实发生的事情的全部信息记录下来。而真实的历史，就是在我们当下历史观体系下记录的部分，而这部分也会随着所掌握信息的内容而发生变化，比如我们都知道《西游记》的作者是吴承恩，甚至还学过吴承恩观猴的故事。但据最新的资料显示，其实吴承恩并非《西游记》的作者。第三点不可说，第一点往往是历史学家才要关注的事情。那么第二点才是普通人要关注的历史。所以此处王朔历史小说，我猜测他就是要讲他认为的历史，而他将通过小说来说明他的历史观，而通过他眼中的历史，看清自己来自哪里，又该如何？</p>\n<p>接下来我想聊聊王朔，第一次知道王朔我已经毫无印象了，应该是高中或者大学看韩寒还是谁的文章知道的，后来就了解的多了起来，看过他基本小说。看过他的采访，知道了他的花边新闻。从我仅有的了解，知道他是一个谁都瞧不上的主。他的很多作品被改为影视作品比如姜文导演的《阳关灿烂的日子》改编子王朔的《动物凶猛》，在电影里面王朔还客串了帮派大哥的角色。他的作品里面往往充斥着对一切事物的消解，同时语言又极具口语话，表达很幽默。起初系列的书，是他最新的出版的一部小说，从介绍说是又140万字，我倒是很期待这本书带来的阅读体验。</p>\n"},{"title":"走走停停","description":"电影《怪物》观后感","author":"Noodles","comments":1,"index_img":"/img/film.png","excerpt":"成功不见的是金子，失败不见得是屎，你自己晓得自己是什么人就行了","date":"2024-07-19T15:00:00.000Z","updated":"2024-07-19T15:00:00.000Z","sticky":3,"_content":"\n今天在家看了胡歌和高圆圆主演的电影《走走停停》，一个在大城市漂泊十年，逃回老家。一个在小地方经历挫折 ，奔向大城市。最终两个人都在小地方，过了平凡的生活。\n\n电影本身是有一些可以做到更好的地方，所以我看到电影的评价两级分化。但对于我来说着就是一部好电影，电影中主人公的困境，是现在很普遍的中年人的困境，年龄渐长，一事无成。但电影借吴迪妈妈的口问出了一个值得思考的问题：生活的本质是什么？什么样的人生是成功的？我们要不要追求成功？成的标准是什么？ 吴迪妈妈给的原话是”成功不见的是金子，失败不见得是屎，你自己晓得自己是什么人就行了“。\n\n如果吴迪成了著名编剧，那他是成功的吗？按照一般的标准来说，这算事业有成，应该是成功的。那比如像瓦伊纳乐队的巴蕽，自己一个人生活在山里，虽然喜欢音乐但并不像其他歌手一样追求流量，追求作品的”厉害“算是成功的吗？我们认为他也是成功的，他在过他想要的生活。如果冯柳柳拍的记录篇获奖，之后成了著名导演，就算是成功吗？\n\n成功就是你知道自己是什么人，知道自己想要什么，然后要到了。没有什么想得不可得。\n\n想得却不可得，你奈人生何？\n\n此种问题是多少哲学家都没考虑清楚的问题，我也无法回答。当你陷入思考，就注定没有答案。生活是个人的，没有标准，就如每个人都不同一样。试图给生活一个标准答案，注定是没有答案。\n\n那么生活的本质是什么呢？也许谜底就在谜面上。生活的本质就是生活本身。当你不去思考生活的本质，而投入生活本身，才是生活的本质。","source":"_posts/观影笔记/走走停停.md","raw":"---\ntitle: 走走停停\ncategories: 观影笔记\ndescription: 电影《怪物》观后感\ntags: 电影\nauthor: Noodles\ncomments: true\nindex_img: /img/film.png\nexcerpt: 成功不见的是金子，失败不见得是屎，你自己晓得自己是什么人就行了\ndate: 2024-07-19 23:00:00\nupdated: 2024-07-19 23:00:00\nsticky: 3\n---\n\n今天在家看了胡歌和高圆圆主演的电影《走走停停》，一个在大城市漂泊十年，逃回老家。一个在小地方经历挫折 ，奔向大城市。最终两个人都在小地方，过了平凡的生活。\n\n电影本身是有一些可以做到更好的地方，所以我看到电影的评价两级分化。但对于我来说着就是一部好电影，电影中主人公的困境，是现在很普遍的中年人的困境，年龄渐长，一事无成。但电影借吴迪妈妈的口问出了一个值得思考的问题：生活的本质是什么？什么样的人生是成功的？我们要不要追求成功？成的标准是什么？ 吴迪妈妈给的原话是”成功不见的是金子，失败不见得是屎，你自己晓得自己是什么人就行了“。\n\n如果吴迪成了著名编剧，那他是成功的吗？按照一般的标准来说，这算事业有成，应该是成功的。那比如像瓦伊纳乐队的巴蕽，自己一个人生活在山里，虽然喜欢音乐但并不像其他歌手一样追求流量，追求作品的”厉害“算是成功的吗？我们认为他也是成功的，他在过他想要的生活。如果冯柳柳拍的记录篇获奖，之后成了著名导演，就算是成功吗？\n\n成功就是你知道自己是什么人，知道自己想要什么，然后要到了。没有什么想得不可得。\n\n想得却不可得，你奈人生何？\n\n此种问题是多少哲学家都没考虑清楚的问题，我也无法回答。当你陷入思考，就注定没有答案。生活是个人的，没有标准，就如每个人都不同一样。试图给生活一个标准答案，注定是没有答案。\n\n那么生活的本质是什么呢？也许谜底就在谜面上。生活的本质就是生活本身。当你不去思考生活的本质，而投入生活本身，才是生活的本质。","slug":"观影笔记/走走停停","published":1,"_id":"clyv0jaw7000f2wlb3k766zvk","layout":"post","photos":[],"link":"","content":"<p>今天在家看了胡歌和高圆圆主演的电影《走走停停》，一个在大城市漂泊十年，逃回老家。一个在小地方经历挫折 ，奔向大城市。最终两个人都在小地方，过了平凡的生活。</p>\n<p>电影本身是有一些可以做到更好的地方，所以我看到电影的评价两级分化。但对于我来说着就是一部好电影，电影中主人公的困境，是现在很普遍的中年人的困境，年龄渐长，一事无成。但电影借吴迪妈妈的口问出了一个值得思考的问题：生活的本质是什么？什么样的人生是成功的？我们要不要追求成功？成的标准是什么？ 吴迪妈妈给的原话是”成功不见的是金子，失败不见得是屎，你自己晓得自己是什么人就行了“。</p>\n<p>如果吴迪成了著名编剧，那他是成功的吗？按照一般的标准来说，这算事业有成，应该是成功的。那比如像瓦伊纳乐队的巴蕽，自己一个人生活在山里，虽然喜欢音乐但并不像其他歌手一样追求流量，追求作品的”厉害“算是成功的吗？我们认为他也是成功的，他在过他想要的生活。如果冯柳柳拍的记录篇获奖，之后成了著名导演，就算是成功吗？</p>\n<p>成功就是你知道自己是什么人，知道自己想要什么，然后要到了。没有什么想得不可得。</p>\n<p>想得却不可得，你奈人生何？</p>\n<p>此种问题是多少哲学家都没考虑清楚的问题，我也无法回答。当你陷入思考，就注定没有答案。生活是个人的，没有标准，就如每个人都不同一样。试图给生活一个标准答案，注定是没有答案。</p>\n<p>那么生活的本质是什么呢？也许谜底就在谜面上。生活的本质就是生活本身。当你不去思考生活的本质，而投入生活本身，才是生活的本质。</p>\n","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"more":"<p>今天在家看了胡歌和高圆圆主演的电影《走走停停》，一个在大城市漂泊十年，逃回老家。一个在小地方经历挫折 ，奔向大城市。最终两个人都在小地方，过了平凡的生活。</p>\n<p>电影本身是有一些可以做到更好的地方，所以我看到电影的评价两级分化。但对于我来说着就是一部好电影，电影中主人公的困境，是现在很普遍的中年人的困境，年龄渐长，一事无成。但电影借吴迪妈妈的口问出了一个值得思考的问题：生活的本质是什么？什么样的人生是成功的？我们要不要追求成功？成的标准是什么？ 吴迪妈妈给的原话是”成功不见的是金子，失败不见得是屎，你自己晓得自己是什么人就行了“。</p>\n<p>如果吴迪成了著名编剧，那他是成功的吗？按照一般的标准来说，这算事业有成，应该是成功的。那比如像瓦伊纳乐队的巴蕽，自己一个人生活在山里，虽然喜欢音乐但并不像其他歌手一样追求流量，追求作品的”厉害“算是成功的吗？我们认为他也是成功的，他在过他想要的生活。如果冯柳柳拍的记录篇获奖，之后成了著名导演，就算是成功吗？</p>\n<p>成功就是你知道自己是什么人，知道自己想要什么，然后要到了。没有什么想得不可得。</p>\n<p>想得却不可得，你奈人生何？</p>\n<p>此种问题是多少哲学家都没考虑清楚的问题，我也无法回答。当你陷入思考，就注定没有答案。生活是个人的，没有标准，就如每个人都不同一样。试图给生活一个标准答案，注定是没有答案。</p>\n<p>那么生活的本质是什么呢？也许谜底就在谜面上。生活的本质就是生活本身。当你不去思考生活的本质，而投入生活本身，才是生活的本质。</p>\n"},{"_content":"","source":"_posts/读书笔记/起初.md","raw":"","slug":"读书笔记/起初","published":1,"date":"2024-07-14T01:20:14.909Z","updated":"2024-07-14T01:23:03.785Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clyv0jbel000i2wlbeve122mz","content":"","site":{"data":{"languages/de":{"name":"Deutsch","home":{"menu":"Startseite","title":"Startseite"},"archive":{"menu":"Archiv","title":"Archiv","subtitle":"Archiv","post_total":"Insgesamt %d Artikel"},"category":{"menu":"Kategorien","title":"Kategorien","subtitle":"Kategorien","post_total":"Insgesamt %d Artikel","more":"More..."},"tag":{"menu":"Schlagwörter","title":"Schlagwörter","subtitle":"Schlagwörter","post_total":"Insgesamt %d Artikel"},"about":{"menu":"Über","title":"Über","subtitle":"Über"},"links":{"menu":"Weblinks","title":"Weblinks","subtitle":"Weblinks"},"page404":{"menu":"Die Seite wurde nicht gefunden","title":"Die Seite wurde nicht gefunden","subtitle":"Die Seite wurde nicht gefunden"},"post":{"toc":"Inhaltsverzeichnis","prev_post":"Vorheriger","next_post":"Nächster","updated":"Geändert am %s","meta":{"wordcount":"%s wörter","min2read":"%s minuten","views":"{} ansichten"},"copyright":{"author":"Beitragsautor","posted":"Veröffentlicht am","updated":"Geändert am","licensed":"Urheberrechtshinweis","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Alle Aufrufe: {}","uv":"Alle Besucher: {}"},"search":{"title":"Suchen","keyword":"Stichwort"},"noscript_warning":"Blog funktioniert am besten mit aktiviertem JavaScript"},"languages/en":{"name":"English","home":{"menu":"Home","title":"Home"},"archive":{"menu":"Archives","title":"Archives","subtitle":"Archives","post_total":"%d posts in total"},"category":{"menu":"Categories","title":"Categories","subtitle":"Categories","post_total":"%d posts in total","more":"More..."},"tag":{"menu":"Tags","title":"Tags","subtitle":"Tags","post_total":"%d posts in total"},"about":{"menu":"About","title":"About","subtitle":"About"},"links":{"menu":"Links","title":"Links","subtitle":"Links"},"page404":{"menu":"Page not found","title":"Page not found","subtitle":"Page not found"},"post":{"toc":"Table of Contents","prev_post":"Previous","next_post":"Next","updated":"Last updated on %s","meta":{"wordcount":"%s words","min2read":"%s mins","views":"{} views"},"copyright":{"author":"Author","posted":"Posted on","updated":"Updated on","licensed":"Licensed under","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Views: {}","uv":"Visitors: {}"},"search":{"title":"Search","keyword":"Keyword"},"noscript_warning":"Blog works best with JavaScript enabled"},"languages/eo":{"name":"Esperanto","home":{"menu":"Hejmpaĝo","title":"Hejmpaĝo"},"archive":{"menu":"Arkivoj","title":"Arkivoj","subtitle":"Arkivoj","post_total":"Entute %d afiŝoj"},"category":{"menu":"Kategorio","title":"Kategorio","subtitle":"Kategorio","post_total":"Entute %d afiŝoj","more":"More..."},"tag":{"menu":"Etikedoj","title":"Etikedoj","subtitle":"Etikedoj","post_total":"Entute %d afiŝoj"},"about":{"menu":"Pri","title":"Pri","subtitle":"Pri"},"links":{"menu":"Ligoj","title":"Ligoj","subtitle":"Ligoj"},"page404":{"menu":"Paĝo ne trovita","title":"Paĝo ne trovita","subtitle":"Paĝo ne trovita"},"post":{"toc":"Enhavtabelo","prev_post":"Antaŭa afiŝo","next_post":"Sekva afiŝo","updated":"Aktualizita: %s","meta":{"wordcount":"%s vortoj","min2read":"%s minutoj","views":"{} rigardoj"},"copyright":{"author":"Aŭtoro","posted":"Postigita","updated":"Aktualizita","licensed":"Lizenta","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Vidoj: {}","uv":"Visitoj: {}"},"search":{"title":"Serĉi","keyword":"ŝlosivorto"},"noscript_warning":"Blogo funkcias plej bone kun JavaScript ebligita"},"languages/es":{"name":"Español","home":{"menu":"Inicio","title":"Inicio"},"archive":{"menu":"Archivo","title":"Archivo","subtitle":"Archivo","post_total":"%d artículos en total"},"category":{"menu":"Categorías","title":"Categorías","subtitle":"Categorías","post_total":"%d artículos en total","more":"Más..."},"tag":{"menu":"Etiquetas","title":"Etiquetas","subtitle":"Etiquetas","post_total":"%d artículos en total"},"about":{"menu":"Acerca","title":"Acerca","subtitle":"Acerca"},"links":{"menu":"Enlaces","title":"Enlaces","subtitle":"Enlaces"},"page404":{"menu":"Página no encontrada","title":"Página no encontrada","subtitle":"Página no encontrada"},"post":{"toc":"Tabla de Contenidos","prev_post":"Anterior","next_post":"Siguiente","updated":"Última actualización el %s","meta":{"wordcount":"%s palabras","min2read":"%s minutos","views":"{} vistas"},"copyright":{"author":"Autor","posted":"Publicado el","updated":"Actualizado el","licensed":"Licencia bajo","CC":"CC - Licencia Creative Commons","BY":"BY - Atribución","SA":"SA - Compartir igual","NC":"NC - No comercial","ND":"ND - Sin obras derivadas"}},"footer":{"pv":"Vistas: {}","uv":"Visitantes: {}"},"search":{"title":"Buscar","keyword":"Palabra clave"},"noscript_warning":"El blog funciona mejor con JavaScript habilitado"},"languages/ja":{"name":"日本語","home":{"menu":"ホーム","title":"ホーム"},"archive":{"menu":"アーカイブ","title":"アーカイブ","subtitle":"アーカイブ","post_total":"全 %d 件のポスト"},"category":{"menu":"カテゴリ","title":"カテゴリ","subtitle":"カテゴリ","post_total":"全 %d 件のポスト","more":"More..."},"tag":{"menu":"タグ","title":"タグ","subtitle":"タグ","post_total":"全 %d 件のポスト"},"about":{"menu":"プロフィール","title":"プロフィール","subtitle":"プロフィール"},"links":{"menu":"リンク","title":"リンク","subtitle":"リンク"},"page404":{"menu":"ページが見つかりませんでした","title":"ページが見つかりませんでした","subtitle":"ページが見つかりませんでした"},"post":{"toc":"見出し","prev_post":"前の記事","next_post":"次の記事","updated":"最終更新日：%s","meta":{"wordcount":"%s 単語","min2read":"%s 分","views":"{} 閲覧"},"copyright":{"author":"著者","posted":"作成日","updated":"修正日","licensed":"著作権","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"閲覧合計数: {}","uv":"合計閲覧者数: {}"},"search":{"title":"検索","keyword":"キーワード"},"noscript_warning":"ブログは JavaScript を有効にすると最適に機能します"},"languages/ru":{"name":"Русский","home":{"menu":"Главная","title":"Главная"},"archive":{"menu":"Архивы","title":"Архивы","subtitle":"Архивы","post_total":"%d сообщений всего"},"category":{"menu":"Категории","title":"Категории","subtitle":"Категории","post_total":"%d сообщений всего","more":"More..."},"tag":{"menu":"Теги","title":"Теги","subtitle":"Теги","post_total":"%d сообщений всего"},"about":{"menu":"О","title":"О","subtitle":"О"},"links":{"menu":"Ссылки","title":"Ссылки","subtitle":"Ссылки"},"page404":{"menu":"Страница не найдена","title":"Страница не найдена","subtitle":"Страница не найдена"},"post":{"toc":"Оглавление","prev_post":"Предыдущий","next_post":"Следующий","updated":"Последнее обновление %s","meta":{"wordcount":"%s слов","min2read":"%s минут","views":"{} просмотров"},"copyright":{"author":"Автор","posted":"Опубликовано на","updated":"Обновлено","license":"Лицензировано под","CC":"CC - Creative Commons license","BY":"BY - Attribution","SA":"SA - Share-alike","NC":"NC - Non-commercial","ND":"ND - No derivative works"}},"footer":{"pv":"Просмотров: {}","uv":"Посетителей: {}"},"search":{"title":"Поиск","keyword":"Ключевое слово"},"noscript_warning":"Блог лучше всего работает с включенным JavaScript"},"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"},"languages/zh-HK":{"name":"繁體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"},"languages/zh-TW":{"name":"正體中文","home":{"menu":"首頁","title":"首頁"},"archive":{"menu":"歸檔","title":"歸檔","subtitle":"歸檔","post_total":"共有 %d 篇文章"},"category":{"menu":"分類","title":"分類","subtitle":"分類","post_total":"共有 %d 篇文章","more":"More..."},"tag":{"menu":"標籤","title":"標籤","subtitle":"標籤","post_total":"共有 %d 篇文章"},"about":{"menu":"關於","title":"關於","subtitle":"關於"},"links":{"menu":"連結","title":"交換連結","subtitle":"交換連結"},"page404":{"menu":"頁面不存在","title":"頁面不存在","subtitle":"頁面不存在"},"post":{"toc":"目錄","prev_post":"上一篇","next_post":"下一篇","updated":"本文最後更新於：%s","meta":{"wordcount":"%s 字","min2read":"%s 分鐘","views":"{} 次"},"copyright":{"author":"作者","posted":"發布於","updated":"更新於","licensed":"許可協議","CC":"CC - 知識共享許可協議","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商業性使用","ND":"ND - 禁止演繹"}},"footer":{"pv":"總訪問量 {} 次","uv":"總訪客數 {} 人"},"search":{"title":"搜尋","keyword":"關鍵字"},"noscript_warning":"博客在允許 JavaScript 運行的環境下瀏覽效果更佳"}}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"clw7v678d0008e8lbfkvq8hn3","category_id":"clw7v678n000ee8lben5d3j1y","_id":"clw7v678u000qe8lbaq3m9t39"},{"post_id":"clw7v678i000be8lb45jshmmv","category_id":"clw7v678e0009e8lb4o03daoo","_id":"clw7v678y000ve8lbh4dddpft"},{"post_id":"clw7v678l000ce8lbgbabdybo","category_id":"clw7v678u000pe8lbcgzw07tm","_id":"clw7v67910012e8lbco2qhnj4"},{"post_id":"clw7v678o000he8lb627l3qs9","category_id":"clw7v678u000pe8lbcgzw07tm","_id":"clw7v67930017e8lbfgz9ck96"},{"post_id":"clw7v678o000ie8lbds1a8xx9","category_id":"clw7v67900011e8lb76m0batv","_id":"clw7v6795001ee8lb18839mko"},{"post_id":"clw7v67920016e8lbe9une8v3","category_id":"clw7v678n000ee8lben5d3j1y","_id":"clw7v6797001je8lb26b6a7z9"},{"post_id":"clw7v67930019e8lb3pf5hoyy","category_id":"cl8ln3yr20002rwlbeox5et1i","_id":"clw7v6798001me8lb1peg3hkn"},{"post_id":"clw7v678r000me8lbemve2uw2","category_id":"clw7v67930018e8lb52m61elo","_id":"clw7v6799001te8lberq8hkeu"},{"post_id":"clw7v6795001fe8lbd0stgrv7","category_id":"cl8ln3yr20002rwlbeox5et1i","_id":"clw7v679a001we8lb3n97cclk"},{"post_id":"clw7v678t000oe8lb8ax04sq4","category_id":"clw7v67930018e8lb52m61elo","_id":"clw7v679b001ze8lb3frx5yo4"},{"post_id":"clw7v678v000se8lberiy3tcm","category_id":"clw7v6798001oe8lbee0xagt4","_id":"clw7v679b0023e8lbedzvafps"},{"post_id":"clw7v678z000ye8lbg48q68ux","category_id":"clw7v679a001ue8lbegx2hg5c","_id":"clw7v679c0026e8lb7de21kgy"},{"post_id":"clw7v67900010e8lbbiqj4mdl","category_id":"clw7v679b0020e8lb9w3l94l6","_id":"clw7v679d002ae8lb9xag25yp"},{"post_id":"clw7v67910014e8lbdn86cmis","category_id":"clw7v679b0020e8lb9w3l94l6","_id":"clw7v679g002de8lbbmd16qki"},{"post_id":"clw7v67870004e8lb97w38hlv","category_id":"clw7x944r0000b8lb234sho6s","_id":"clw7x94550003b8lbce1a9j43"},{"post_id":"clw7v678m000de8lbeboz7uf9","category_id":"clw7v678u000pe8lbcgzw07tm","_id":"clw80javs0001dolb7wgkdglx"},{"post_id":"clw7v677w0000e8lbhtpj4434","category_id":"clw9dz6kz0000yclb09jq25q6","_id":"clw9dz6lw0002yclbdvto4vvj"},{"post_id":"clw7v6797001ke8lbcs0v5brm","category_id":"clw7v679c0029e8lbbe61cras","_id":"clw9e1prv0004yclba0ek8g1n"},{"post_id":"clw9eal3500038slbe0v4e6r4","category_id":"clw9eal3800048slbdz2x8q0t","_id":"clw9eal3l00078slbdghs1x0u"},{"post_id":"clw7v67850002e8lbbkqh5max","category_id":"clw7v678n000ee8lben5d3j1y","_id":"clw9ebtbx00098slbcqjuhth8"},{"post_id":"clw9eh07i00001wlbag8ablmj","category_id":"cl8ln3yr20002rwlbeox5et1i","_id":"clw9eh08300041wlb9fzkc39q"},{"post_id":"clw7v678v000ue8lbgy6z0rqo","category_id":"clw9eh07n00011wlb7vze18by","_id":"clw9eh08500061wlb8i2z9s3o"},{"post_id":"clxhm49tb0000b4lb7clu290w","category_id":"clw7v678u000pe8lbcgzw07tm","_id":"clxhm49tk0003b4lb430009jd"},{"post_id":"clw7v6798001ne8lb6kga03v1","category_id":"cl8ln3yr20002rwlbeox5et1i","_id":"clxhpbfrb0001rslb1yd5ghn4"},{"post_id":"clyv0jau200002wlbcyp728ov","category_id":"clw7v678e0009e8lb4o03daoo","_id":"clyv0jav900042wlb88g3epo3"},{"post_id":"clw9eal2k00008slbgt7dddpk","category_id":"clw7v678e0009e8lb4o03daoo","_id":"clyv0javb00052wlbefjachy2"},{"post_id":"clyv0jav400022wlbec0j8psd","category_id":"clw7v678e0009e8lb4o03daoo","_id":"clyv0javh00092wlbet2zb6lh"},{"post_id":"clyv0jav700032wlb07ghf8e6","category_id":"clw7v678e0009e8lb4o03daoo","_id":"clyv0javp000c2wlb11jghvou"},{"post_id":"clyv0jave00082wlb3bpw297b","category_id":"clw7v678e0009e8lb4o03daoo","_id":"clyv0javt000e2wlb9eyx6qxd"},{"post_id":"clyv0jaw7000f2wlb3k766zvk","category_id":"clw7v678u000pe8lbcgzw07tm","_id":"clyv0jawa000h2wlb7398cuwk"}],"PostTag":[{"post_id":"clw7v678d0008e8lbfkvq8hn3","tag_id":"clw7v678n000fe8lbe2ep03eb","_id":"clw7v678s000ne8lbb5yxgdi8"},{"post_id":"clw7v678i000be8lb45jshmmv","tag_id":"clw7v678p000le8lb4z9odez5","_id":"clw7v678v000te8lb3q8ab2cw"},{"post_id":"clw7v678l000ce8lbgbabdybo","tag_id":"clw7v678u000re8lb8upf78zf","_id":"clw7v6790000ze8lbhpq11fiz"},{"post_id":"clw7v678o000he8lb627l3qs9","tag_id":"clw7v678u000re8lb8upf78zf","_id":"clw7v67920015e8lbf7vthe5w"},{"post_id":"clw7v67920016e8lbe9une8v3","tag_id":"clw7v678n000fe8lbe2ep03eb","_id":"clw7v6794001be8lb3u1gak4q"},{"post_id":"clw7v678o000ie8lbds1a8xx9","tag_id":"clw7v67910013e8lb0ogb64im","_id":"clw7v6795001de8lb5pkcdypk"},{"post_id":"clw7v678r000me8lbemve2uw2","tag_id":"clw7v6794001ae8lbges4ct3f","_id":"clw7v6797001le8lbghg8bk54"},{"post_id":"clw7v6795001fe8lbd0stgrv7","tag_id":"cl8lpdt1s00008olbe6qpbj2r","_id":"clw7v6799001qe8lb879ahj3n"},{"post_id":"clw7v678t000oe8lb8ax04sq4","tag_id":"clw7v6796001he8lbeixe8nnv","_id":"clw7v6799001se8lbdqbyeda9"},{"post_id":"clw7v678v000se8lberiy3tcm","tag_id":"clw7v6799001pe8lb1rrhcxcv","_id":"clw7v679a001ye8lb5nia9g3b"},{"post_id":"clw7v678z000ye8lbg48q68ux","tag_id":"clw7v679a001xe8lb11ji2m7y","_id":"clw7v679b0024e8lb93jo0qcc"},{"post_id":"clw7v67900010e8lbbiqj4mdl","tag_id":"clw7v679b0022e8lb7k52byof","_id":"clw7v679c0028e8lb62nq4p0j"},{"post_id":"clw7v67910014e8lbdn86cmis","tag_id":"clw7v679c0027e8lb8udcfci2","_id":"clw7v679g002ce8lb6xvpf4o1"},{"post_id":"clw7v67930019e8lb3pf5hoyy","tag_id":"clw7v679d002be8lbcyvc9wlx","_id":"clw7v679g002fe8lb8unk61il"},{"post_id":"clw7v67870004e8lb97w38hlv","tag_id":"clw7x94540001b8lb6rgzgm1b","_id":"clw7x94550002b8lbelldgf4x"},{"post_id":"clw7v678m000de8lbeboz7uf9","tag_id":"clw7v678u000re8lb8upf78zf","_id":"clw80javs0000dolb0lu2cn0z"},{"post_id":"clw7v677w0000e8lbhtpj4434","tag_id":"clw7x94540001b8lb6rgzgm1b","_id":"clw9dz6lv0001yclb309baiid"},{"post_id":"clw7v6797001ke8lbcs0v5brm","tag_id":"clw7v679g002ee8lbaz7abawn","_id":"clw9e1pru0003yclbgk4o2d09"},{"post_id":"clw9eal2k00008slbgt7dddpk","tag_id":"clw7v678i000ae8lba7xr6kwn","_id":"clw9eal2o00018slb2l852amz"},{"post_id":"clw9eal3500038slbe0v4e6r4","tag_id":"clw9eal3i00058slb5cij1tq3","_id":"clw9eal3l00068slb745ehesp"},{"post_id":"clw7v67850002e8lbbkqh5max","tag_id":"clw7v678i000ae8lba7xr6kwn","_id":"clw9ebtbw00088slbfurvcca9"},{"post_id":"clw9eh07i00001wlbag8ablmj","tag_id":"cl8lpdt1s00008olbe6qpbj2r","_id":"clw9eh08200031wlb6ozd4oe2"},{"post_id":"clw7v678v000ue8lbgy6z0rqo","tag_id":"clw9eh08000021wlbgbq45mjd","_id":"clw9eh08400051wlba4qn1gmx"},{"post_id":"clxhm49tb0000b4lb7clu290w","tag_id":"clw7v678u000re8lb8upf78zf","_id":"clxhm49th0001b4lbgjl6d74s"},{"post_id":"clw7v6798001ne8lb6kga03v1","tag_id":"cl8lpdt1s00008olbe6qpbj2r","_id":"clxhpbfra0000rslb3mn0bala"},{"post_id":"clyv0jav700032wlb07ghf8e6","tag_id":"clyv0jauk00012wlb7j8m31dn","_id":"clyv0javd00072wlbd6pj2rvb"},{"post_id":"clyv0jau200002wlbcyp728ov","tag_id":"clyv0jauk00012wlb7j8m31dn","_id":"clyv0javi000a2wlbai2d2qub"},{"post_id":"clyv0jave00082wlb3bpw297b","tag_id":"clyv0jauk00012wlb7j8m31dn","_id":"clyv0javn000b2wlbdr2oaash"},{"post_id":"clyv0jav400022wlbec0j8psd","tag_id":"clyv0javc00062wlb9xgvafgo","_id":"clyv0javq000d2wlb1mdof89d"},{"post_id":"clyv0jaw7000f2wlb3k766zvk","tag_id":"clw7v678u000re8lb8upf78zf","_id":"clyv0jaw9000g2wlbgb2bd6oy"}],"Tag":[{"name":"哲学","_id":"cl8lpdt1s00008olbe6qpbj2r"},{"name":"音乐","_id":"clw7v678i000ae8lba7xr6kwn"},{"name":"诗歌","_id":"clw7v678n000fe8lbe2ep03eb"},{"name":"技术随笔","_id":"clw7v678p000le8lb4z9odez5"},{"name":"电影","_id":"clw7v678u000re8lb8upf78zf"},{"name":"QT","_id":"clw7v67910013e8lb0ogb64im"},{"name":"STM32","_id":"clw7v6794001ae8lbges4ct3f"},{"name":"rtos","_id":"clw7v6796001he8lbeixe8nnv"},{"name":"rtThread","_id":"clw7v6799001pe8lb1rrhcxcv"},{"name":"rust","_id":"clw7v679a001xe8lb11ji2m7y"},{"name":"操作系统","_id":"clw7v679b0022e8lb7k52byof"},{"name":"C++","_id":"clw7v679c0027e8lb8udcfci2"},{"name":"建筑","_id":"clw7v679d002be8lbcyvc9wlx"},{"name":"linux","_id":"clw7v679g002ee8lbaz7abawn"},{"name":"工具","_id":"clw7x94540001b8lb6rgzgm1b"},{"name":"计算机","_id":"clw9eal3i00058slb5cij1tq3"},{"name":"opencv","_id":"clw9eh08000021wlbgbq45mjd"},{"name":"随笔","_id":"clyv0jauk00012wlb7j8m31dn"},{"name":"画","_id":"clyv0javc00062wlb9xgvafgo"}]}}